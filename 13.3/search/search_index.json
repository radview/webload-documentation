{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WebLOAD Documentation","text":"<p>Welcome to WebLOAD Professional, the premier performance, scalability, and reliability testing solution for Internet applications. WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of Internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the Internet application under load.</p>"},{"location":"installation/","title":"Introduction","text":"<p>Welcome to WebLOAD, the premier  performance, scalability, and reliability testing solution for internet applications.  </p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load.  </p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"<p>WebLOAD has the following system requirements. WebLOAD Console, WebLOAD Recorder, WebLOAD Analytics, WebLOAD Probing Client, and WebRM can only be run on Windows platforms. WebLOAD Load Machines can be run on Windows, and Linux platforms. </p> <p>Note: For any installation, you must have Administrator rights for the computer on which you are installing. </p>"},{"location":"installation/#windows-platforms","title":"Windows Platforms","text":"<p>WebLOAD System Requirements</p> Requirements WebLOAD Console, WebLOAD Recorder, WebLOAD Analytics, WebLOAD  Probing Client, and WebRM Load Machine Computer / Processor 2 Core CPU 2 Core CPU (4 Core CPU Recommended) Operating System Windows supported version: (Windows 10, 11, Server 2012, 2016, 2019, 2022) Windows supported version: (Windows 10, 11, Server 2012, 2016, 2019, 2022) Memory 2 GB RAM (minimum); 4 GB  is recommended 2 GB RAM (minimum); 16 GB is recommended Free Disk Space 20 GB 20 GB"},{"location":"installation/#linux-platforms-for-webload-load-machines","title":"Linux Platforms (for WebLOAD Load Machines)","text":"<p>Table: WebLOAD Load Machine System Requirements </p> Requirements Load  Machine Hardware 2 Core CPU (4 Core CPU Recommended) Version Linux RHEL 8 and up or equivalent Free Disk Space 20 GB Swap Space RAM*2 Memory 2 GB RAM (minimum); 16 GB is recommended <p>Notes:</p> <p>WebLOAD components in each major version will work with all other components of the same version. WebLOAD components are not compatible with other components of a different version. Verify that the WebLOAD components have been upgraded to Version 10.0 on all participating hosts. Running WebLOAD Console Version 10.0 with an earlier version of Load Generator (running on different Hosts) may cause unexpected behavior. </p> <p>The WebLOAD license file is limited to the computer system (machine) on which WebLOAD is initially installed. Before installing WebLOAD, make sure you are installing on the machine with which you intend to work. </p> <p>When installing WebLOAD with Unicode support on a system running an English MS Windows, Japanese must be configured as the default Windows language.</p>"},{"location":"installation/#installing-webload-for-windows","title":"Installing WebLOAD for Windows","text":"<p>This chapter provides step-by-step instructions for installing WebLOAD on a PC running Windows systems. </p>"},{"location":"installation/#installing-webload-for-windows_1","title":"Installing WebLOAD for Windows","text":"<p>You can choose either of the following installation methods: </p> <ul> <li>Command Line Installation </li> <li>Using the Installation Wizard </li> </ul>"},{"location":"installation/#command-line-installation","title":"Command Line Installation","text":"<p>To perform a command line installation, run the following command: </p> <p><code>&lt; WebLOAD executable installation file &gt; [flags]</code> </p> <p>Where the flags (case sensitive) are: </p> Option Description /SILENT Silent mode /DIR=\"<code>&lt;destination  directory&gt;</code>\u201d Destination directory /TYPE=Agent Install a Load Generator only /TYPE=Dashboard Install the Web Dashboard only /SERVICE Install TestTalk as a service /DOMAIN=\"<code>&lt;domain name&gt;</code>\" The domain in  which to install for service installation /USERNAME=\"<code>&lt;user  name&gt;</code>\" The user name for service  installation /PASS=\"<code>&lt;user password&gt;</code>\" The password of the service  installation /MANUAL How to start the  service. If not set, the service will start automatically /NOCHECK Do not check for a previous installation"},{"location":"installation/#using-the-installation-wizard","title":"Using the Installation Wizard","text":"<p>When you install WebLOAD on your computer, the installation program asks you for the components to install. As part of the installation process, WebLOAD installs a database management system (PostgreSQL) for use with WebLOAD Analytics. For more information about PostgreSQL, refer to www.postgresql-support.de. </p> <p>Install the WebLOAD components as follows: </p> <ul> <li>Install the full WebLOAD product on computers that will be used to run the WebLOAD Console. </li> <li>Install only the Load Generator or the Probing Client software on a computer that will be a dedicated Load Machine. There is no need to install the full product on computers that will be used as Load Machines. </li> </ul> <p>To install WebLOAD on your system: </p> <ol> <li>Browse to the location of the WebLOAD executable (*.exe) installation file. </li> <li>Double-click the file. The WebLOAD Installation Wizard appears. </li> <li>Follow the instructions in the Installation Wizard. </li> <li>In the Select Components screen. </li> <li>Select the type of installation. For Load Machines and Probing Clients, select Load Generator only. </li> <li>Specify whether to install the Load Generator As Service.  </li> <li>If you select this option, TestTalk is installed as a service. Since a service can be started automatically, this is especially useful for machines that serve only as Load Generators.  </li> <li>If you do not select this option, TestTalk is installed as an executable file. </li> <li>Specify whether to also install the WebLOAD Cloud. The Web Cloud enables viewing, analyzing and comparing load sessions in a web browser, with full control and customization of the display. </li> </ol> <p>Note: The installation process is the same for Load Machines and Probing Clients. When the WebLOAD installation is complete, the WebLOAD License dialog box automatically opens to complete the registration process. License registration is discussed inRegistering and Updating the WebLOAD License. </p>"},{"location":"installation/#installing-webrm","title":"Installing WebRM","text":"<p>To install WebRM: </p> <ol> <li> <p>Browse to the location of the WebRM-10.0.xxx.en.exe installation file. </p> </li> <li> <p>Double-click the file. The WebRM Installation Wizard appears. </p> </li> <li> <p>The WebRM Installation Wizard displays the Select Destination Location dialog box. On the Select Destination Location dialog box, browse to the location where you would like WebRM installed. By default, this location is C:\\Program Files\\RadView\\WebRM. </p> </li> <li> <p>Click Next. </p> </li> <li> <p>The WebRM Installation Wizard displays the Select License Location dialog box. This dialog box displays your HostID and enables you to browse to the License location. </p> </li> </ol> <p>Note: If you have already received your WebRM License file, skip to step 9.</p> <ol> <li>If you have not received your License file, copy the HostID displayed in the text box into an email, together with your name, company, address, and phone number. Send the email to support@radview.com. </li> </ol> <p>A WebRM license file (*.lic) will be sent to you.  </p> <ol> <li> <p>After receiving the file, save it on the hard drive of your WebRM machine and then double-click the WebRM executable installation file to restart the installation process. </p> </li> <li> <p>On the Select License dialog box, browse to the location where you saved your WebRM license, select the file and click Next.</p> </li> </ol> <p></p> <ol> <li>WebRM begins the installation. When the WebRM installation process is complete, a dialog box appears stating that the WebRM installation has completed successfully. Click Finish. </li> </ol>"},{"location":"installation/#upgrading-webload","title":"Upgrading WebLOAD","text":"<p>To upgrade WebLOAD: </p> <ol> <li>Close TestTalk. </li> <li>Close all browser windows that are open.  </li> <li>Uninstall the existing WebLOAD version. </li> </ol> <p>For instructions on the uninstall procedure, seeUninstalling WebLOAD . </p> <ol> <li>Install the new version of WebLOAD. </li> </ol> <p>For installation instructions, seeInstalling WebLOAD for Windows . </p>"},{"location":"installation/#installing-and-configuring-the-webload-analytics","title":"Installing and Configuring the WebLOAD Analytics","text":"<p>WebLOAD stores information from Load Sessions in a Postgre SQL database for use with WebLOAD Analytics. You can install Postgre SQL and the WebLOAD Analytics database during the WebLOAD installation or manually after WebLOAD has already been installed. You might want to perform manual installation in the following situations: </p> <ul> <li>If Postgre SQL is already installed on your machine and you only need to create the WebLOAD Analytics database. For instructions, refer toCreating the Database when Postgre SQL is Already Installed . </li> <li>If you want to use a different machine as the database server and have several WebLOAD Analytics applications connect to the database. For instructions, refer to Installing and Configuring the Database on a Dedicated Machine . </li> </ul>"},{"location":"installation/#creating-the-database-when-postgre-sql-is-already-installed","title":"Creating the Database when Postgre SQL is Already Installed","text":"<p>If Postgre SQL is already installed on your machine, you do not have to reinstall it during the WebLOAD installation. However, you must complete the following steps in order to create the WebLOAD Analytics database in Postgre SQL so that it can be used by WebLOAD Analytics. </p> <p>To create the WebLOAD Analytics database after WebLOAD was installed: </p> <ul> <li>Run deploy\u2013database.bat from the C:\\Program Files\\RadView\\WebLOAD\\bin\\database folder. </li> </ul>"},{"location":"installation/#installing-and-configuring-the-database-on-a-dedicated-machine","title":"Installing and Configuring the Database on a Dedicated Machine","text":"<p>You can run the Postgre SQL database using a dedicated machine with several WebLOAD Analytics client applications. </p> <p>To install and configure the database on a dedicated machine: </p> <ol> <li>Install Postgre SQL.  </li> </ol> <p>Note: It is recommended to install Postgre SQL Version 13. You can download the application from http://www.postgresql.org/download/ and install it using its default installation settings. </p> <ol> <li> <p>Copy all the files from the C:\\Program Files\\RadView\\WebLOAD\\bin\\database directory to a temporary folder on the dedicated server. </p> </li> <li> <p>Run deploy\u2013database.bat from the temporary folder to which you copied the files in the previous step. The WebLOAD Analytics database is created. </p> </li> <li> <p>Configure Postgre SQL to allow remote connections. For more information, see Configuring Postgre SQL to Allow Remote Database Connections .  </p> </li> <li> <p>Configure the relevant WebLOAD Analytics clients to work with the remote database. For more information, seeConfiguring Clients to Work with the Remote Database . </p> </li> </ol>"},{"location":"installation/#configuring-postgre-sql-to-allow-remote-database-connections","title":"Configuring Postgre SQL to Allow Remote Database Connections","text":"<p>For WebLOAD Analytics clients to work with the remote database, you must perform the following configuration steps on the host machine.  </p> <p>To configure a remote database connection through Postgre SQL: </p> <ol> <li>Run Start &gt; PostgreSql &gt; PgAdmin. The PgAdmin application opens. </li> <li>Edit the postgresql.conf file, as follows: </li> <li>Select File &gt; Open.  </li> <li>Browse to C:\\program files\\Postgres\\Data\\, select postgresql.conf, and click Open. The postgresql.conf configuration file opens. </li> <li>Change the value of listen_address to *. This configures the server to listen to all addresses. </li> <li> <p>Enable the value and save the file. </p> </li> <li> <p>Edit the Pg_hba.conf file, as follows: </p> </li> <li>Select File &gt; Open.  </li> <li>Browse to C:\\program files\\Postgres\\Data\\, select Pg_hba.conf, and click Open. The Pg_hba.conf configuration file opens. </li> <li>Add a new entry with the following parameters:<ul> <li>Type = host </li> <li>Database = all </li> <li>User = all </li> <li>IP address = <code>&lt;IP subnet mask&gt;</code>.0.1.1/24, where <code>&lt;IP subnet mask&gt;</code> is your organization\u2019s IP subnet mask. </li> <li>Method = md5 </li> </ul> </li> <li>Enable the entry and save the file. </li> </ol>"},{"location":"installation/#configuring-clients-to-work-with-the-remote-database","title":"Configuring Clients to Work with the Remote Database","text":"<p>To configure a remote database connection through Postgre SQL: </p> <ol> <li> <p>Open WebLOAD Analytics on the client machine. </p> </li> <li> <p>Select Window \u0086 Preferences \u0086 Database. </p> </li> <li> <p>Enter the server\u2019s IP address and name in the Database host name field. </p> </li> <li> <p>Click OK. </p> </li> </ol>"},{"location":"installation/#installing-third-party-software-for-server-side-monitoring","title":"Installing Third Party Software for Server-side Monitoring","text":"<p>WebLOAD Console provides a Performance Measurements Manager (PMM) for monitoring the performance of various data sources such as server-side applications, databases, stream technology, system, and Web server measurements in real-time while your test is running. </p> <p>Some data sources require initial configuration to enable monitoring by the PMM. For more information, see the Enabling Data Sources Monitoring section in the WebLOAD Console User\u2019s Guide. </p>"},{"location":"installation/#installing-webload-for-linux","title":"Installing WebLOAD for Linux","text":"<p>This chapter contains the instructions for installing the WebLOAD Load Engine on a machine running a Linux operating system. </p>"},{"location":"installation/#installing-the-webload-load-engine-for-linux","title":"Installing the WebLOAD Load Engine for Linux","text":"<p>To install the WebLOAD Load Engine on your system: </p> <ol> <li>Select or create a directory for installing the WebLOAD Load Engine. This directory will be referred to as the working directory. </li> <li>Download the WebLOAD-linux.version.tar.gz compressed file from a server to the working directory. </li> <li>Uncompress and extract the tar file in the working directory using the following command: </li> </ol> <p>tar \u2013zvxf WebLOAD-linux-version.tar.gz </p> <ol> <li>Change directories by typing the following: </li> </ol> <p>cd radview/webload<code>&lt;version number&gt;</code>/linux/bin </p> <ol> <li>Run setup by typing the following: </li> </ol> <p>./setup </p> <p>During the setup process, the webload.ini configuration file is created. </p> <ol> <li>When prompted, enter the path to the Java runtime libraries. The default path to the libraries is displayed. If you are working with a different version of Java, enter the path of the libraries using the following: </li> </ol> <p>/usr/java/jre/lib/i386/server:/usr/java/jre/lib/i386/native-threads  </p> <p>The path information is stored in the LD_LIBRARY_PATH variable. </p> <p>Note: The directories containing the Java libraries are separated with a colon (:). </p> <p>Important: The WebLOAD Load Generator will not function properly without the correct paths for the Java libraries. </p>"},{"location":"installation/#running-the-load-engine-on-linux","title":"Running the Load Engine on Linux","text":"<p>When running the Load Engine on Linux, Load Engine runs with TestTalk. TestTalk enables communication between the different components of the WebLOAD module. When running the Load Generator through Linux you generally need to connect with other WebLOAD modules running on a remote Windows machine (for example WebLOAD Console). To connect with these remote modules, you must run TestTalk. Once TestTalk is running, you can access the remote WebLOAD modules. The remote module then initiates the communication with TestTalk and then TestTalk loads the Load Generator. </p> <p>Note: If the Load Generator is running and TestTalk is not running, the remote  WebLOAD application will not be able to access the Load Generator. </p> <p>To run TestTalk on your system: </p> <ol> <li>Open the linux/bin directory within your working directory by typing the following: </li> </ol> <p>cd <code>&lt;working-directory&gt;</code>/linux/bin </p> <ol> <li>Run TestTalk by typing the following: ./starttestalk </li> </ol> <p>TestTalk starts running. </p> <p>To stop running TestTalk: </p> <ul> <li>From the linux/bin directory, run ./stoptesttalk  </li> </ul>"},{"location":"installation/#installing-third-party-software-for-server-side-monitoring_1","title":"Installing Third Party Software for Server-side Monitoring","text":"<p>WebLOAD Console provides a Performance Measurements Manager (PMM) for monitoring the performance of various data sources such as server-side applications, databases, stream technology, system, and Web server measurements in real-time while your test is running. </p> <p>Some data sources require initial configuration to enable monitoring by the PMM. For more information, see the Enabling Data Sources Monitoring section in the WebLOAD Console User\u2019s Guide. </p>"},{"location":"installation/#registering-and-updating-the-webload-license","title":"Registering and Updating the  WebLOAD License","text":"<p>Your WebLOAD license must be registered before you can start working with WebLOAD. WebLOAD licenses that have expired must also be renewed or updated before you can continue working with WebLOAD. When installing a new major or minor version of WebLOAD, make sure that you have an adequate license for that specific version. All license registration and updating is accomplished through the Update License dialog box. </p> <p>You can register and update your WebLOAD license either through an Update License application, or through the Command Line Interface. </p>"},{"location":"installation/#license-administration-through-the-ui","title":"License administration through the UI","text":""},{"location":"installation/#standard-license-registration","title":"Standard License Registration","text":"<p>To open the Update License dialog box: </p> <ul> <li>At the time of WebLOAD installation, when the WebLOAD Installation Wizard is finished, the License dialog box opens automatically, </li> </ul> <p>Note: After a WebLOAD installation, you may be prompted to restart your computer before the Update License dialog box appears. In this case, the License dialog box will appear automatically after the computer restarts. </p> <p>-Or- </p> <p>At any other time, from the Windows desktop, select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Update License. </p> <p>The License dialog box includes the following sections: </p> <ul> <li>License Details </li> <li>Update License </li> </ul> <p>These sections are used to register and update your WebLOAD authorization license information. </p> <p>To complete or update your license registration: </p> <ol> <li>If you are registering a new license after an initial WebLOAD installation, access the Update License dialog box. The Update License dialog box is opened automatically after a successful WebLOAD installation is completed. </li> </ol> <p>-Or- </p> <p>If you are updating your license registration after your current license has expired, from the Windows desktop, select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Update License. </p> <p>The Update License dialog box appears. </p> <p></p> <ol> <li>Create an email message with the following information: </li> <li>Copy the Host ID displayed in the text box into the email. </li> <li>Add your name, company, address, and phone number to the email message. </li> <li>Send the email to license@radview.com. </li> </ol> <p>A WebLOAD license file (*.lic) will be sent to you. </p> <ol> <li>Select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Update License to open the Update License** dialog box and install the license key. </li> <li>By default, the Use a license file radio button is selected. This assumes that your license file is located on your local computer system. </li> </ol> <p>For information on installing a floating license, or connecting to a license server, seeWebRM Server . </p> <p>For information on installing a license for an evaluation of WebLOAD, see Trial License . </p> <ol> <li>Click the browse button next to the Use a license file text box to browse to the location of the license (*.lic) file sent to you by a RadView representative. </li> <li>Select the correct license file and click Open to return to the Update License dialog box. </li> <li>Click OK to load the new license. </li> </ol> <p>If the license registration was successful, a message box appears indicating a successful license update. </p> <p>You can now begin working with WebLOAD. </p> <p>Note: After loading the license, you can optionally click License Information to view the license\u2019s full details.</p> <p>If the license registration was not successful, an error message appears. </p> <p>If you are not able to successfully register a valid license file, contact RadView Support for assistance. </p>"},{"location":"installation/#trial-license","title":"Trial License","text":"<p>You can install a trial version of WebLOAD, which provides 50 virtual clients, and is available for 30 days. </p> <p>To use the WebLOAD evaluation: </p> <ol> <li>After installing WebLOAD, the Update License** dialog box opens,  -Or- </li> </ol> <p>To open the Update License dialog box manually, select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Update License. </p> <p>The Update License dialog box appears.</p> <p></p> <ol> <li>Select 30-day trial. </li> <li>Click OK or Apply to install the license for the trial. </li> </ol> <p>You can now begin working with the trial version of WebLOAD. </p>"},{"location":"installation/#webrm-server","title":"WebRM Server","text":"<p>The WebRM Server is a stand-alone tool that manages all resource distribution to WebLOAD Console, which is the machine used to run loads in a WebRM environment. It is the method that controls the number of users allowed to access the product concurrently. </p> <p>WebRM for virtual clients is available and defined as a pool of virtual (probing) clients that can concurrently be used by members of a testing team and monitored by the WebRM Server. </p> <p>During installation of the WebRM server, you are prompted for the WebRM file that defines: </p> <ul> <li>The number of concurrent applications for the WebLOAD Console. </li> <li>The number of concurrent Virtual and Probing Clients. </li> </ul> <p>Installation also creates a FlexLM Service that controls the operation. </p> <p>The WebRM Server displays a list of the number of resources (Virtual and Probing Clients) that the Console is using. The WebRM Server enables a testing team to share resources. </p> <p>This section describes how to connect to the WebRM Server and how to view the license details. </p> <p>Connecting to the WebRM Server  To connect to the WebRM Server: </p> <ol> <li> <p>After installing WebLOAD, the Update License dialog box opens, </p> <p>-Or- </p> </li> </ol> <p>To open the Update License dialog box manually, select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Update License. </p> <p>The Update License dialog box appears. </p> <p></p> <ol> <li>Select Connect to the WebRM License Server. </li> <li>Click the Browse button and select the machine where WebRM is installed. </li> <li>Click OK. </li> </ol> <p>A connection to the selected license server is attempted. </p> <ul> <li>If the connection is successful, a success message appears. </li> <li>If the connection is not successful, a failure message appears. </li> </ul> <p>Viewing License Details </p> <p>After selecting the license server, you can view the current license details in the License Details section of the Update License dialog box.  </p>"},{"location":"installation/#license-administration-through-the-command-line-interface","title":"License administration through the Command Line Interface","text":"<p>You can register or upload a WebLOAD license through a command line interface. You can enter the wlUpdateLicenseApplicationCmd command into a batch file or into an external script to automatically launch a WebLOAD License action, without user intervention, using the parameters you specify. </p>"},{"location":"installation/#testtalk-setup-instructions","title":"TestTalk Setup Instructions","text":""},{"location":"installation/#configuring-testtalkini","title":"Configuring <code>testtalk.ini</code>","text":"<p>The following settings are included by default in the <code>testtalk.ini</code> configuration file. You may customize them as needed:</p> <pre><code>UseOpenSsl=1\nCertificatesPath=\"path/to/certificates\"\nVerifyServerCertificate=1\nVerifyClientCertificate=1\n</code></pre> <ul> <li>UseOpenSsl: Enables OpenSSL for SSL/TLS if set to <code>1</code>. If set to <code>0</code>, OpenSSL is disabled.</li> <li>CertificatesPath: Directory path containing your certificates.</li> <li>Default on Windows: <code>C:\\ProgramData\\Radview\\WebLOAD\\certificates\\testtalk</code></li> <li>Default on Linux: <code>~/radview/webload13.3.0/linux/certificates/testtalk</code></li> <li>VerifyServerCertificate: Set to <code>1</code> to enable server certificate verification.</li> <li>VerifyClientCertificate: Set to <code>1</code> to enable client certificate verification.</li> </ul> <p>Note: Certificate files are installed by default. You can point <code>CertificatesPath</code> to a different folder if needed.</p>"},{"location":"installation/#required-certificate-files","title":"Required Certificate Files","text":"<p>Ensure the following files exist in your certificates directory:</p> <ul> <li><code>ca.crt</code>: CA public certificate.</li> <li><code>ca.key</code>: CA private key.</li> <li><code>ca_bundle.crt</code>: Copy of the CA certificate.</li> <li><code>server.crt</code>: Server public certificate.</li> <li><code>server.key</code>: Server private key.</li> <li><code>server.csr</code>: Server Certificate Signing Request.</li> <li><code>client.crt</code>: Client public certificate.</li> <li><code>client.key</code>: Client private key.</li> <li><code>client.csr</code>: Client Certificate Signing Request.</li> </ul>"},{"location":"installation/#script-generate_certificatessh","title":"Script: <code>generate_certificates.sh</code>","text":"<p>Use this script to generate all required certificates.</p> <pre><code>#!/bin/bash\n\n# Configurable variables for CA subject details\nCA_COUNTRY=\"AU\"\nCA_STATE=\"Some-State\"\nCA_LOCALITY=\"City\"\nCA_ORGANIZATION=\"MyCompany\"\nCA_ORGANIZATIONAL_UNIT=\"IT\"\nCA_COMMON_NAME=\"MyTestCA\"\n\n# Configurable variables for Server subject details\nSERVER_COUNTRY=\"AU\"\nSERVER_STATE=\"Some-State\"\nSERVER_LOCALITY=\"City\"\nSERVER_ORGANIZATION=\"MyCompany\"\nSERVER_ORGANIZATIONAL_UNIT=\"IT\"\nSERVER_COMMON_NAME=\"127.0.0.1\"\n\n# Configurable variables for Client subject details\nCLIENT_COUNTRY=\"AU\"\nCLIENT_STATE=\"Some-State\"\nCLIENT_LOCALITY=\"City\"\nCLIENT_ORGANIZATION=\"MyCompany\"\nCLIENT_ORGANIZATIONAL_UNIT=\"IT\"\nCLIENT_COMMON_NAME=\"MyClient\"\n\n# Other configuration variables\nCA_KEY=\"ca.key\"\nCA_CERT=\"ca.crt\"\nSERVER_KEY=\"server.key\"\nSERVER_CSR=\"server.csr\"\nSERVER_CERT=\"server.crt\"\nCLIENT_KEY=\"client.key\"\nCLIENT_CSR=\"client.csr\"\nCLIENT_CERT=\"client.crt\"\nSERIAL_FILE=\"ca.srl\"\nCERT_VALIDITY_DAYS=3650\n\n# Construct the subject strings\nCERT_SUBJECT_CA=\"/C=$CA_COUNTRY/ST=$CA_STATE/L=$CA_LOCALITY/O=$CA_ORGANIZATION/OU=$CA_ORGANIZATIONAL_UNIT/CN=$CA_COMMON_NAME\"\nCERT_SUBJECT_SERVER=\"/C=$SERVER_COUNTRY/ST=$SERVER_STATE/L=$SERVER_LOCALITY/O=$SERVER_ORGANIZATION/OU=$SERVER_ORGANIZATIONAL_UNIT/CN=$SERVER_COMMON_NAME\"\nCERT_SUBJECT_CLIENT=\"/C=$CLIENT_COUNTRY/ST=$CLIENT_STATE/L=$CLIENT_LOCALITY/O=$CLIENT_ORGANIZATION/OU=$CLIENT_ORGANIZATIONAL_UNIT/CN=$CLIENT_COMMON_NAME\"\n\n# Clean up any previously generated files\nrm -f $CA_KEY $CA_CERT $SERVER_KEY $SERVER_CSR $SERVER_CERT $CLIENT_KEY $CLIENT_CSR $CLIENT_CERT $SERIAL_FILE\n\n# Step 1: Generate the CA private key\nopenssl genrsa -out $CA_KEY 2048\n\n# Step 2: Create a self-signed CA certificate\nopenssl req -x509 -new -nodes -key $CA_KEY -sha256 -days $CERT_VALIDITY_DAYS -out $CA_CERT -subj \"$CERT_SUBJECT_CA\"\n\n# Step 3: Generate the server private key\nopenssl genrsa -out $SERVER_KEY 2048\n\n# Step 4: Create a CSR for the server\nopenssl req -new -key $SERVER_KEY -out $SERVER_CSR -subj \"$CERT_SUBJECT_SERVER\"\n\n# Step 5: Sign the server CSR with the CA to create the server certificate\nopenssl x509 -req -in $SERVER_CSR -CA $CA_CERT -CAkey $CA_KEY -CAcreateserial -out $SERVER_CERT -days $CERT_VALIDITY_DAYS -sha256\n\n# Step 6: Generate the client private key\nopenssl genrsa -out $CLIENT_KEY 2048\n\n# Step 7: Create a CSR for the client\nopenssl req -new -key $CLIENT_KEY -out $CLIENT_CSR -subj \"$CERT_SUBJECT_CLIENT\"\n\n# Step 8: Sign the client CSR with the CA to create the client certificate\nopenssl x509 -req -in $CLIENT_CSR -CA $CA_CERT -CAkey $CA_KEY -CAcreateserial -out $CLIENT_CERT -days $CERT_VALIDITY_DAYS -sha256\n\n# Step 9: Verify the server and client certificates\necho \"Verifying server certificate...\"\nopenssl verify -CAfile $CA_CERT $SERVER_CERT\necho \"Verifying client certificate...\"\nopenssl verify -CAfile $CA_CERT $CLIENT_CERT\n\n# Copy the CA certificate to the bundle\ncp ca.crt ca_bundle.crt\n\n# Output the results\nif [ $? -eq 0 ]; then\n  echo \"All certificates generated and verified successfully:\"\n  echo \"CA Certificate: $CA_CERT\"\n  echo \"Server Certificate: $SERVER_CERT\"\n  echo \"Client Certificate: $CLIENT_CERT\"\nelse\n  echo \"Error: Certificate verification failed.\"\nfi\n</code></pre>"},{"location":"installation/#important-notes","title":"Important Notes","text":"<ul> <li>Secure Your Keys: Keep <code>ca.key</code>, <code>server.key</code>, and <code>client.key</code> safe.</li> <li>Backup Before Running Script: The script will overwrite existing certificates.</li> <li>Update Certificates Regularly: Renew certificates before expiration.</li> </ul>"},{"location":"installation/#uninstalling-webload","title":"Uninstalling WebLOAD","text":"<p>When you uninstall WebLOAD, you are prompted to remove PostgreSQL .3, which is used to manage the WebLOAD Analytics database. RadView Software recommends that you keep PostgreSQL installed in order to maintain all the information stored in the database. </p> <p>To uninstall WebLOAD: </p> <ol> <li>Close all WebLOAD modules including TestTalk. </li> <li>Close all browser windows that are open.  </li> <li>Select Start &gt; Settings &gt; Control Panel. </li> <li>Double-click the Add/Remove Programs icon. </li> <li>Click the Change or Remove Programs tab. </li> <li>Click Radview WebLOAD Professional, and then click Change/Remove. </li> </ol> <p>The Uninstall Wizard appears. Once the uninstall procedure is complete, you may be prompted to restart your machine. </p> <p>Note: Uninstalling WebLOAD removes all the WebLOAD program file directories, including all the WebLOAD installation files. User files that are copied into these directories (such as user-defined extensions) are not deleted. WebLOAD load templates, load sessions, and script files are not removed \u2013 they can be used with all WebLOAD upgrades.</p> <p>Caution: Close TestTalk and all browser windows before uninstalling WebLOAD. Failure to close TestTalk and all browser windows results in outdated files remaining on your disk, which could adversely affect future installations of the program.  </p> <p>To uninstall WebRM: </p> <ol> <li> <p>Select Start &gt; Settings &gt; Control Panel. </p> </li> <li> <p>Double-click the Add/Remove Programs icon. </p> </li> <li> <p>Click the Add or Remove Programs tab. </p> </li> <li> <p>Click RadView WebRM, and then click Change/Remove.</p> </li> </ol> <p>The Uninstall Wizard appears. The uninstall procedure is completed following a confirmation request. </p>"},{"location":"quickstart/","title":"WebLOAD Quick Start","text":"<p>Welcome to WebLOAD Professional,the premier performance, scalability,and reliability testing solution for Internet applications.</p> <p>WebLOAD is easy to use and delivers maximum testing performance and value.WebLOAD verifies the scalability and integrity of Internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the Internet application under load.</p> <p>A WebLOAD script is also called an \"Agenda\".</p> <p>WebLOAD Recorder was formerly referred to as WebLOAD IDE.</p>"},{"location":"quickstart/#how-webload-works","title":"How WebLOAD Works","text":"<p>WebLOAD tests Web applications by generating Virtual Clients that simulate real-world loads. Virtual Clients emulate the actions of human users by performing typical actions on your Web application. By increasing the number of Virtual Clients, you increase the load on the system. You create visual JavaScript-based test scripts that define the behavior of the Virtual Clients and WebLOAD executes these test scripts,monitoring the application response graphically and statistically, and presenting the test results in real time.</p> <p>WebLOAD incorporates functional verification into the scalability testing process allowing you to accurately verify the scalability and integrity of your Web applications at the per-client, per-transaction, and per-instance level under defined load conditions.WebLOAD saves the test results, including data from the Load Machines and the hosting hardware's performance monitor. You can view all or part of the data in real time, or after the test session is complete, in tabular or graphical format.</p>"},{"location":"quickstart/#webload-architecture","title":"WebLOAD Architecture","text":"<p>The following diagram illustrates the configuration for a typical WebLOAD test.</p> <p></p> <p>The Console sets up, runs, and controls a test session. At the Console, you can:</p> <ul> <li> <p>Define the hosts participating in the load test.</p> </li> <li> <p>Specify the test scripts that the load test executes.</p> </li> <li> <p>Schedule tests.</p> </li> <li> <p>View performance reports.</p> </li> </ul> <p>Load Machines are hosts that run Load Generator software simulating multiple Virtual Clients simultaneously accessing your System Under Test (SUT).One Load Machine can run multiple Load Generators.</p> <p>Load Generators execute tests that \"bombard\" the SUT with a large load, to enable complete scalability and stress testing. The tests consist of multiple simultaneous requests made by Virtual Clients (which emulate Web browsers) to Web servers. Load Machines can run multiple threads.</p> <p>The System Under Test(SUT) is where the Web system under test resides. The SUT does not require that WebLOAD software be installed on it.</p> <p>The Probing Client Machines are also hosts. They run Probing Client software,which simulates a single Virtual Client accessing the SUT and runs at the same time as Load Machines, to further measure the performance of the SUT under load. WebLOAD returns exact values for Probing Client performance, in contrast to Load Machines,which return average values of Virtual Client performance.</p>"},{"location":"quickstart/#quick-start-steps","title":"Quick Start Steps","text":"<p>This section shows you how you can get started quickly using WebLOAD by designing and executing a performance test of the RadView Software test site at http://www.webloadmpstore.com. Then you can refer to the complete WebLOAD documentation set to learn more techniques for usimarkng WebLOAD.</p> <p>In this Quick Start, you perform the following steps:</p> <ol> <li>Create a script (see Creating a script).</li> <li>Configure a Load Template using the WebLOAD Wizard (see Configuring a Load Template using WebLOAD Wizard).</li> <li>Configure session options (see Setting Session Options).</li> <li>Run a test (see Running the Test).</li> <li>Analyze test results (see Analyzing Test Results).</li> </ol> <p>Note: We recommend that you follow the steps in the order they appear. All examples are interrelated and dependent on earlier steps.</p>"},{"location":"quickstart/#creating-a-script","title":"Creating a script","text":"<p>The first step in creating a script is to record your actions as you interact with your Web application.</p> <p>To create a script:</p> <ol> <li> <p>Start WebLOAD Recorder by selecting Start &gt; Programs &gt;RadView&gt;WebLOAD&gt;WebLOAD Recorder. WebLOAD Recorder opens. </p> </li> <li> <p>Select Create a new project. The WebLOAD Recorder main window opens in Editing Mode for you to begin creating your script. </p> </li> <li> <p>In the main window, in Editing Mode, click the Start Record  toolbar button to begin recording.  The following dialog appears. </p> </li> <li> <p>Click OK.  WebLOAD Recorder begins recording all actions you perform in the browser,as indicated by the recording notification in the WebLOAD Recorder status bar.</p> <p></p> <p>A browser window opens.</p> </li> <li> <p>In the address bar, enter the Web address www.   webloadmpstore.com to go to the WebLOAD test site.</p> <p></p> </li> <li> <p>Navigate through the site, performing the actions you want to test. For example:     a. Click a product to view the product details.</p> <p>b. Click Add to Cart to add the product to your shopping chart.</p> <p>Your actions are recorded and appear in the Script Tree as you navigate the site.(If you see additional nodes in the Script Tree with different URLs, this may be traffic generated by browser plug-ins or extensions, for example, third-party toolbars.)</p> <p></p> </li> <li> <p>Click the Stop Record toolbar button in WebLOAD Recorder to stop the recording.</p> </li> <li> <p>Click the Save toolbar button to save your script.</p> </li> <li> <p>Type QuickStart as the name of the script in the Save As dialog box and click Save.</p> <p>The script is saved with the extension *. wlp.</p> <p>You now have a basic script that can be used in a WebLOAD test configuration. For complete information on creating, editing and modifying scripts,and adding functionality to your script, see the WebLOAD Recorder User Guide.</p> </li> </ol>"},{"location":"quickstart/#configuring-a-load-template-using-webload-wizard","title":"Configuring a Load Template using WebLOAD Wizard","text":"<p>Using the Quick Start,you will learn how to perform the following steps in order to configure a Load Template with the WebLOAD Wizard in the WebLOAD Console:</p> <ol> <li>Opening the WebLOAD Wizard.</li> <li>Selecting a script and a Performance Statistic to monitor.</li> <li>Selecting a host on which to run the Load Machine.</li> <li>Scheduling the test and selecting the number of Virtual Clients to run.</li> <li>Setting session options.</li> </ol> <p>For more details about each of these steps, see the WebLOAD Console User's Guide.</p>"},{"location":"quickstart/#opening-webload-wizard","title":"Opening WebLOAD Wizard","text":"<p>The first step in defining a Load Template with the WebLOAD Wizard is defining the type of script to run. The script is the test script that defines the actions that the Virtual Clients perform during the test. WebLOAD supports both single scripts (lone test scripts) and Mix scripts (a group of scripts simulating groups of users performing different activities on the application simultaneously). In this Quick Start, we will create a template running a single script. For information on creating templates with multiple scripts or Mix scripts, see Creating Load Templates with the WebLOAD Wizard in the WebLOAD Console User's Guide.</p> <p>To open WebLOAD Wizard:</p> <ol> <li> <p>Start the WebLOAD Console.</p> <p>Select Start &gt;All Programs &gt;RadView &gt;WebLOAD&gt;WebLOAD Console.</p> <p>The WebLOAD Console opens,and the WebLOAD Console dialog box appears.</p> <p></p> </li> <li> <p>Select Create a new template using WebLOAD Wizard.</p> <p>The WebLOAD Wizard opens.</p> </li> <li> <p>On the Welcome screen, click Next. The script/Mix Type screen appears.</p> </li> </ol>"},{"location":"quickstart/#selecting-a-script-and-a-performance-statistic-to-monitor","title":"Selecting a script and a Performance Statistic to Monitor","text":"<p>To select a script and a performance statistic to monitor:</p> <ol> <li> <p>On the script/Mix Type screen, select Single Script, and click Next. </p> </li> <li> <p>On the script/Mix Selection screen, click the  button and browse to the location of the QuickStart.wlp script created earlier using WebLOAD Recorder. Select the script and click Open. </p> </li> <li> <p>Click Measurements Manager at the bottom of the screen to open the Performance Measurements Manager and define the statistics to monitor during the test. </p> <p>Note: In this simple example, we will monitor the CPU usage on your system during runtime. During a real test, you would probably monitor the CPU performance of your application server. </p> </li> <li> <p>Click the Add data source toolbar button. The Performance Measurements Manager Wizard opens. </p> </li> <li> <p>On the Welcome screen, click Next. </p> </li> <li> <p>Click the \u201c+\u201d adjacent to General to expand the tree, select General Performance Monitor, and click Next. </p> </li> <li> <p>Click Browse\u2026 to browse available hosts. In the Host selection dialog box, highlight the name of your computer in the list, and click Select. </p> </li> <li> <p>Click Next. </p> <p>WebLOAD attempts to connect to the selected host and collect data. A tree of all available measurements to monitor appears. </p> </li> <li> <p>Expand the tree to select the measurement you want. Click Processor &gt; _Total, select the checkbox adjacent to % Processor Time, and click Next.</p> </li> <li> <p>Click Finish.</p> <p></p> </li> <li> <p>Click the Close &amp; update toolbar button to save the configuration with the template and return to the WebLOAD Wizard.</p> </li> <li> <p>On the script/Mix Selection screen, click Next. The Host Selection screen appears.</p> </li> </ol>"},{"location":"quickstart/#selecting-a-host","title":"Selecting a Host","text":"<p>For the steps in this Quick Start, you use your own machine as the host load machine to generate Virtual Clients. The number of Virtual Clients that can be generated depends on the power of the host machine.</p> <p>To select a host:</p> <ol> <li>On the Host Selection screen, note that your computer is automatically listed as the default Load Machine.</li> <li>Click Next to accept the default selection.</li> </ol>"},{"location":"quickstart/#scheduling-the-test","title":"Scheduling the Test","text":"<p>When you schedule the test,you define the load to be generated throughout the test and the total testing time. The Load Profiler provides a quick and easy way to select different testing patterns.</p> <p>To schedule the test:</p> <ol> <li> <p>On the Schedule screen, select Collective scheduling, and click Next. The wizard progresses to the Collective Scheduling screen. </p> </li> <li> <p>Click All Machines. The Load Profiler buttons becomes enabled. </p> </li> <li> <p>Click Load Profiler. The Load Profiler opens. </p> </li> <li> <p>Select Linear from the Select scheduling model drop-down list. </p> </li> <li> <p>Enter 10 in the Concluding number of Virtual Clients field and accept the defaults for the Total time in minutes and Starting number of Virtual Clients fields. </p> <p>The test will run for 10 minutes, starting with a load of 5 Virtual Clients and increasing to a maximum of 10. </p> </li> <li> <p>Click Replace.      The Linear Schedule model now appears in the row below your host computer name in the Schedule Manually screen. </p> </li> <li> <p>Click Next. </p> </li> <li> <p>Clear the To run this Load Template immediately, select this checkbox and then click Finish checkbox, and click Finish. </p> <p>You have now created a Load Template using WebLOAD Wizard.</p> </li> </ol>"},{"location":"quickstart/#setting-session-options","title":"Setting Session Options","text":"<p>Before you run the template you created, you can select options for verifications to execute during runtime. You can set WebLOAD to perform the following tasks: </p> <ul> <li>Collect data at the page level. </li> <li>Verify the time required to receive a page (default 20 seconds). </li> <li>Verify that the links in your Web application act as expected. </li> </ul> <p>When you select page verification, WebLOAD collects transaction data under the Title name, in this case http://www.webloadmpstore.com. You can observe statistics, such as the response times for this page, as the load increases. You can also gather performance data about the objects on a page by setting WebLOAD to collect object level data. For example, you can determine whether pictures or other embedded objects are taking a long time to download. </p> <p>To set options for these verification tests: </p> <ol> <li> <p>On the WebLOAD Console ribbon bar, select the Tools tab, click the Current Session Options icon. </p> </li> <li> <p>Select the Functional Testing tab. </p> </li> <li> <p>Under Automatic Data Collection, select the Pages radio button. </p> </li> <li> <p>Under Page Time, select the Verification checkbox, enter 20 in the Max Time field, and select Minor Error from the Severity Level drop-down list. </p> <p>If the time required to receive a page exceeds 20 seconds, a Minor Error message appears in the Log Window and the event appears in the WebLOAD data drilling report. </p> </li> <li> <p>Under Verification, select the Verification checkbox, and enter 5 in the % field. </p> <p>Five percent of the Virtual Clients will perform the selected verification tasks. This percentage lets you balance data gathering with the need to maintain performance during the test. </p> </li> <li> <p>Click OK. </p> </li> </ol>"},{"location":"quickstart/#running-the-test","title":"Running the Test","text":"<p>You are now ready to start the test. As you run the test, you can view the data gathered by WebLOAD in real time. </p> <p>To run the test: </p> <ol> <li> <p>Click the Start Session  icon on the Console ribbon bar. </p> </li> <li> <p>At the prompt, click Yes to save the template. Type the filename QuickStart.tpl, and click Save. You can now reuse this template, with its script, schedule, and options at a later time.  </p> </li> </ol> <p>The test begins. </p>"},{"location":"quickstart/#analyzing-test-results","title":"Analyzing Test Results","text":"<p>You can view test results in real time while the test is running or after the test session has completed. Once the test begins, the WebLOAD Wizard default report displays in the Results window. </p> <p></p>"},{"location":"quickstart/#viewing-the-results-in-real-time","title":"Viewing the Results in Real Time","text":"<p>Data on load size, hits per second, round time (one run through the script), and throughput (bytes per second) appear in the Chart View window, with a color legend underneath the chart. Each data point represents a 20 second slice. Data is gathered every 20 seconds and is then either averaged (for hits, round time, and throughout) or summed (for load size). The graphs are all normalized to scale so they can be viewed in a single Chart View window. You can access several kinds of test details: </p> <ul> <li>Hover over any data point to see actual values. </li> <li>Select the Dash Board Window  icon on the Console ribbon bar to view a quick overview of the status of the test including the following: <ul> <li>Elapsed time </li> <li>Current load size (number of running Virtual Clients) </li> <li>Rounds executed </li> <li>Failed rounds </li> <li>Failed hits </li> <li>Hits per second</li> <li>Pages per second </li> <li>Throughput </li> </ul> </li> <li>Select the Open Statistics  icon on the Console ribbon bar. A Statistics tab appears in the results window. Scroll through the data and double-click a cell to drill-down to further detail. </li> </ul> <p>Each of these views opens in a new tab window. Please close all windows except the Default Report tab. </p>"},{"location":"quickstart/#creating-integrated-reports","title":"Creating Integrated Reports","text":"<p>Create an Integrated report to view the results for additional metrics gathered by WebLOAD. This can be done while the current session is still running. </p> <p>To create an Integrated Report: </p> <ol> <li> <p>On the WebLOAD Console ribbon bar, select Session  tab, and click the Report Manager  icon. </p> <p>The Integrated Report dialog box opens. </p> </li> <li> <p>In the Integrated Report dialog box, click New. </p> </li> <li> <p>In the tree, expand the QuickStart::Total branch. </p> </li> <li> <p>Expand the Performance Measurements branch. </p> </li> <li> <p>Click the ''+'' sign adjacent to Hit Time to expand the branch and then expand Current Slice. Select the checkbox adjacent to Average (Current Value). </p> <p>Checkmarks appear next to Hit Time, Current Slice, and Average (Current Value). </p> </li> <li> <p>Expand Successful Hits and then expand Current Slice. Select the checkbox adjacent to Sum (Current Value). </p> </li> <li> <p>Expand Successful Connections and then expand Current Slice. Select the checkbox adjacent to Sum (Current Value). </p> </li> <li> <p>Scroll to the PM@your-system-name branch at the bottom of the tree (PM stands for performance monitor). Click the ''+'' sign adjacent to it to expand the branch. </p> </li> <li> <p>Expand Processor:%Processor Time:_Time and then expand Current Slice. Select the checkbox adjacent to Average (Current Value). </p> <p>This choice displays the statistics on CPU processor usage that were collected during the load test. </p> </li> <li> <p>Click OK. </p> <p>The Save dialog box appears.</p> </li> <li> <p>Type MyReport as the name of the report, click Predefined Report, and click OK.  The new report is added to the list of Predefined Reports. </p> </li> <li> <p>To open the newly created report, select MyReport in the list of Predefined Reports, and click Open. </p> <p>In the WebLOAD Console Results window, the MyReport tab appears displaying the report data. The name of the tab is the name of the report you selected. </p> </li> <li> <p>If the test is still running, click the  Stop All icon . </p> </li> <li> <p>Click the Save Load Session  icon to save the data from the test along with the template information (script, options, and schedule). Specify a filename (QuickStart) and location and click Save. </p> </li> </ol>"},{"location":"quickstart/#viewing-results-with-webload-analytics","title":"Viewing Results with WebLOAD Analytics","text":"<p>WebLOAD Analytics creates analysis reports based on your session data. Even after you complete a session, you can use this data to create both predefined reports and custom reports of your own. You can create portfolios, which are collections of custom reports to run on other sessions. You can also export reports to PDF, Excel, RTF, HTML, or TXT formats to share with others, store with test plans, or mail to team members. </p> <p>To view results with WebLOAD Analytics: </p> <ol> <li> <p>Click the WebLOAD Analytics  icon on the Console ribbon bar. </p> <p>Data for the last session saved is automatically selected and imported into the WebLOAD Analytics sessions database. WebLOAD Analytics automatically creates a new report based on the Summary Portfolio and generates the report. You can optionally perform any of the following: </p> <ul> <li>Modify the report - Select the Report Settings tab and edit the parameters you wish to change. </li> <li>Print the report - Select the Preview tab from the Reports area. Click the Print button to open the Print dialog and print the report. </li> <li>Publish the report - Click the Publish  to publish your report as the default format specified in the Preferences window. Select a location and name for your report and click Save. The report is published in the format chosen and saved to the location specified in the Preferences window. </li> </ul> </li> <li> <p>Close WebLOAD Analytics. </p> </li> <li>Close the WebLOAD Console. </li> </ol> <p>This concludes our Quick Start guide for WebLOAD. For additional information please refer to the WebLOAD Console User\u2019s Guide, to RadView\u2019s website at http://www.radview.com/support. </p>"},{"location":"analytics/appendix_a/","title":"Appendix A - WebLOAD Analytics File System Structure","text":"<p>The WebLOAD Analytics file structure consists of system files, database files, log files, and files containing templates and template elements. The table below describes the WebLOAD file structure and its contents. The folders listed in the table below are located in the <code>&lt;WebLOAD directory&gt;</code>\\bin folder.</p> Folder Description Configuration This folder is a WebLOAD Analytics system  folder.  This folder should only be  modified by qualified RadView technicians. Database This folder contains the batch files required for the installation  and deployment of the WebLOAD Analytics Load Session Repository. Gallery This folder contains all  WebLOAD Analytics templates. Each  template has its own folder containing a template JRXML file and a Jasper file.  Each template category  contains the Subreports  subdirectory. Gallery[Category] A Category folder can be a group of templates, such as Pages Analysis  or any one of the following special categories:<code>&lt;br&gt;</code>Portfolios.  <code>&lt;br&gt;</code>_Master Templates.  <code>&lt;br&gt;</code>_System Templates. Gallery[Category]\\ [Template] A Template folder exists  for every template in WebLOAD Analytics, such as Load Size Summary or HTTP  Responses.  A template consists of the following files:<code>&lt;br&gt;</code>.jrxml \u2013 JasperReports template file. Defines static templates structure,  can be edited using iReport.   <code>&lt;br&gt;</code>.jasper \u2013  JasperReports compiled report. Generated automatically from .jrxml  <code>&lt;br&gt;</code>.system.xml \u2013  Defines a system defined interactive report.  <code>&lt;br&gt;</code>.user.xml \u2013 Stores user defined settings, when using Save Chart As Template.  <code>&lt;br&gt;</code>systemChart.xml \u2013 Stores graph configuration (such as colors, line  types, etc.)  userChart.xml \u2013 Stores user graph configuration. Gallery[Category]\\  [Template]\\SUBREPORTS Some static Template folders contain additional .jrxml  subreports in  this folder, and their compiled .jasper files. Gallery[Category]\\  [Template]\\Resources Some Template folders contain this folder, which  contains the static graphical elements used by the template, including icons,  images, and logos. Gallery\\Portfolios This category contains all the [Portfolio]  folders. Gallery\\Portfolios\\ [Portfolio] A Portfolio folder exists for every portfolio in WebLOAD Analytics,  such as Summary Report and Extended Summary Report.  This folder contains a .portfolio file, which is an XML file specifying the  templates included in the portfolio. Gallery\\  _Master  Templates This category is intended for advanced  users and cannot be accessed from WebLOAD Analytics.  The category contains the  master templates used by charts and reports. The master template of a report  defines the report appearance. The master template of a chart is used in  conjunction with the template to define the appearance of the chart. RadView  recommends that only advanced users should modify these templates.  When  you add a master template, it is available for selection in the Preferences window. Gallery\\  _System Templates This category is intended  for advanced users and cannot be accessed from WebLOAD Analytics.  The category contains  system templates that are references by other templates. For example, all  reports that are based on interactive reports reference a template in this  directory. Plugins This folder is a WebLOAD Analytics system folder.  This folder should only be  modified by qualified RadView technicians. Workspace This folder is created the first time that WebLOAD Analytics is  opened. It contains internal state persistence information."},{"location":"analytics/appendix_b/","title":"Appendix B: Understanding the Statistics","text":""},{"location":"analytics/appendix_b/#statistical-terms","title":"Statistical Terms","text":"<p>The following table lists general terms used for the statistics. </p> Term Description Percentile A percentile is the value of a variable below which  a certain percent of observations  fall. Thus the 30th percentile is the value (or score) below which 30 percent  of the observations may be found. Average The  arithmetic mean. For timers, average is the total amount of time  counted by the timer (not the elapsed time) divided by the Count (that is,  the total number of readings). For example, the average for Transaction Time  is the amount of time it took to complete all the successful transactions  divided by the number of successful transactions (the Count). Standard  deviation (stddev) The standard  deviation is a simple measure of the variability or dispersion of a data  set. A low standard deviation indicates that all of the data points are very  close to the same value (the mean). A high  standard  deviation indicates that the data is \u201cspread out\u201d over a large range of  values."},{"location":"analytics/appendix_c/","title":"Appendix C: Running Analytics in Command Line Mode","text":"<p>WebLOAD Analytics can be executed in command line mode. This enables incorporating WebLOAD Analytics in scripts. </p> <p>Two executables are available: </p> <ul> <li>WLAnalyticsCMD.exe \u2013 Automatically generates a report for a specified session, and publishes or prints it. WebLOAD Analytics then closes. </li> <li>WLAnalytics.exe \u2013 Launches the WebLOAD Analytics UI, and generates a report for a specified session.  </li> </ul> <p>The executables are located in <code>&lt;Installation dir&gt;</code>\\bin. For example: C:\\Program Files\\RadView\\WebLOAD\\bin.</p>"},{"location":"analytics/appendix_c/#running-wlanalyticscmdexe","title":"Running WLAnalyticsCMD.exe","text":"<p>Use this executable to generate a report for a specified session, and publish or print it. </p> <p>Syntax </p> <p><code>WLAnalyticsCmd.exe \u2013m** **U**|**P** {**-t** *template\\_path*}|{**-p** *portfolio\\_path*} {**-s** *session\\_name*}|{**-ls** *session\\_path*} [**-f** **DOC**|**ODT**|**HTML**|**XLS**|**RTF**|**PDF**]</code> <code>[**-l** *report\\_location*] [**-n** *output\\_report\\_name*] [**-h**]</code> </p> <p>Parameters </p> Parameter Description Comments -m Indicates  the action. Specify one of the following  U \u2013 Publish.  P \u2013 Print. Mandatory  parameter. -t template_path Generates  a chart from a specified template. You must specify the path to the template  directory (either absolute or relative to the gallery). You must  specify one of the two options: -t or \u2013p. -p portfolio_path Generates  a report from a portfolio.  You must  specify the path to the portfolio directory (either absolute or relative to  the Portfolio category). -s session_name Specifies  a session already loaded into WebLOAD.  You must  specify the session name.  Note: You can use this parameter multiple times to  specify multiple sessions. This is necessary if you are generating a  regression chart. You must specify one of the two  options: -s or \u2013ls. -ls session_path Specifies  a load session file to import into WebLOAD.  You must  specify the full path.  Note: You can use this parameter multiple times to load multiple sessions. This  is necessary if you are generating a regression chart. -f Specifies  the output format for a published report.  Select  one of the following: DOC, ODT, HTML, XLS, RTF, or PDF.  If you  do not specify an output format, the default format, specified in Analytics  Preferences, is used. Optional parameter. -l report_location Specifies  the location of the published report. If you do not specify a location, the  default location, specified in Analytics Preferences, is used. Optional parameter. -n output_report_name Specifies  a name for the newly created report. If you do not specify a name, the  application provides a default name. Optional parameter. -h Displays  the help. Optional parameter. <p>Note: Note that you must specify: </p> <ul> <li>Publish or print. </li> <li>A template or portfolio.  </li> <li>A session, either previously loaded or to be imported. </li> </ul> <p>Examples </p> <p>To load the mysession.ls Load Session, generate a \u2018General/Load Size Summary\u2019 chart, and publish it in the default file format, in the default location, under the name test-report: </p> <p><code>WLAnalyticsCmd.exe -m U -t \"General\\Load Size Summary\" -ls \"C:\\mysession.ls\" \u2013n \"test-report\"</code> </p> <p>To use the loaded first-session Load Session, generate a \u2018Summary Portfolio\u2019 portfolio, and print it: </p> <p><code>WLAnalyticsCmd.exe -m P -p \"Summary Portfolio\" -s \u201cfirst-session\"</code> </p> <p>To use the loaded first-session and second-session Load Sessions, generate a \u2018Regression/Load Size Summary\u2019 regression chart, and publish it as a PDF file in C:\\myreports, using a default name: </p> <p><code>WLAnalyticsCmd.exe -m U -t \"Regression\\Load Size Summary\" -s \u201cfirst- session\" -s \"second-session\" \u2013f PDF \u2013l \u201cc:\\myreports\u201d</code></p> <p>Running WLAnalytics.exe </p> <p>Use this executable to open the WebLOAD Analytics UI, and open a report or generate a report for a specified session. </p> <p>Syntax </p> <p><code>**WLAnalytics.exe** {**-t** *template\\_path*}|{**- p** *portfolio\\_path*}  {**-s** *session\\_name*}|{**-ls** *session\\_path*} [**-h**] [**-noSplash**]</code> </p> <p>Parameters </p> Parameter Description Comments -t template_path Generates  a chart from a specified template. You must specify the path to the template  directory (either absolute or relative to the gallery). You must specify one of the two options: -t or \u2013p. -p portfolio_path Generates a report from a portfolio.  You must specify the path to the portfolio directory  (either absolute or relative to the Portfolio category). -s session_name Specifies  a session already loaded into WebLOAD.  You must specify the session name.  Note: You can use this parameter multiple times to  specify multiple sessions. This is necessary if you are generating a  regression chart. You must specify one of the two options: -s or \u2013ls. -ls session_path Specifies a load session file to  import into WebLOAD.  You must  specify the full path.  Note: You can use this parameter multiple times to load multiple sessions. This  is necessary if you are generating a regression chart. -h Displays the help. Optional  parameter. -noSplash Launches without a Splash  screen. Optional  parameter. <p>Note: </p> <p>Note that you must specify:</p> <ul> <li>A template, report, or portfolio.</li> <li>A session, either previously loaded or to be imported.</li> </ul> <p>Examples </p> <p>To open the WebLOAD Analytics UI, load the mysession.ls Load Session, and generate a \u2018General/Load Size Summary\u2019 chart: </p> <p><code>WLAnalytics.exe -t \"General\\Load Size Summary\" -ls \"C:\\mysession.ls\"</code> </p> <p>To open the WebLOAD Analytics UI, use the loaded first-session Load Session, and generate a \u2018Summary Portfolio\u2019 portfolio: </p> <p><code>WLAnalytics.exe -p \"Summary Portfolio\" -s \u201cfirst-session\"</code></p>"},{"location":"analytics/appendix_d/","title":"Appendix D: Understanding the Templates","text":"<p>This appendix describes each template, and provides analysis highlights and tips where applicable. </p>"},{"location":"analytics/appendix_d/#understanding-load-session-terminology","title":"Understanding Load Session Terminology","text":"<p>Note: All the measurements appearing in the various templates are explained in the glossary. </p> <p>Each run of the script body is called a round. A round is composed of transactions. Each transaction can include various combinations of the following: </p> <ul> <li> <p>Request(s) for a page. The page can include any number of graphics and contents files. Each request for a gif, jpeg, html file, etc., is a single hit. </p> </li> <li> <p>Sleep intervals. </p> </li> <li> <p>JavaScript functions. </p> </li> </ul> <p>The following illustrates a sample round: </p> Round Transaction Transaction Page Sleep Page Page JS function Hit Hit Hit Hit Hit Hit Hit  Time Breakdown DNS  Lookup Connect  Time Send Time Response Time Process  Time Time To First Byte Receive Time TCP Connection HTTP Request HTTP Response"},{"location":"analytics/appendix_d/#general-templates","title":"General Templates","text":"<p>This category of templates provides general statistical information about the Load Session. </p>"},{"location":"analytics/appendix_d/#http-response-status-codes","title":"HTTP Response Status Codes","text":"<p>The HTTP Errors Over Time, HTTP Responses, and HTTP Responses Over Time templates display various HTTP response status messages. The following table lists all HTTP response status codes and their descriptions. For a full description, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html. </p> 304 Not  Modified 305 Use  Proxy 307 Temporary Redirect Client  Error 400 Bad Request 401 Unauthorized 402 Payment Required 403 Forbidden 404 Not  Found 405 Method Not Allowed 406 Not Acceptable 407 Proxy  Authentication Required 408 Request Timeout 409 Conflict 410 Gone 411 Length Required 412 Precondition Failed 413 Request Entity Too Large 414 Request-URI Too Long 415 Unsupported Media Type 416 Requested Range Not Satisfiable 417 Expectation Failed Server  Error 500 Internal Server Error 501 Not Implemented 502 Bad  Gateway 503 Service Unavailable 504 Gateway Timeout 505 HTTP  Version Not Supported"},{"location":"analytics/appendix_d/#attempted-connections","title":"Attempted Connections","text":"<p>This template displays a bar graph of successful and failed connections, over time. It also displays the Load Size, for reference. </p> <p>Under normal circumstances, you would not expect to see failed connections. Failed connections may indicate a problem. </p>"},{"location":"analytics/appendix_d/#connection-time","title":"Connection Time","text":"<p>This template displays a bar graph showing the breakdown of connection time into DNS Lookup Time and Connect Time. The template also displays the Load Size, for reference. </p> <ul> <li>DNS Lookup Time \u2013 The time it takes to resolve the host name and convert it to an IP address by calling the DNS server. Note that the DNS is checked once per virtual-user, for the whole session. </li> <li>Connect Time \u2013 The time it takes for a Virtual Client to connect to the System Under Test (SUT), in seconds. In other words, the time it takes from the beginning of the HTTP request to the TCP/IP connection.  </li> </ul> <p>Note that if the Persistent Connection option is enabled in the WebLOAD Console,  there may not be a value for Connect Time because the HTTP connection remains open between successive HTTP requests. </p> <p>General Session Information </p> <p>This template displays the following information about the Load Session: </p> <ul> <li>Start and end time, and duration. </li> <li>The maximum number of virtual clients. </li> <li>Which scripts are running.  </li> <li>General information about the reporter. </li> <li>General information about the System under Test (SUT). This template is useful as an opening page for published reports. </li> </ul> <p>Tip</p> <p>You can customize the look of the General Session Information template by editing the settings of the following parameters: PEN_COMPANY, OPEN_REPORTER_NAME, OPEN_REPORTER_TITLE, OPEN_SUT_DIAGRAM, </p> <p>OPEN_SUT_NAME, OPEN_SUT_VERSION. </p>"},{"location":"analytics/appendix_d/#http-errors-over-time","title":"HTTP Errors Over Time","text":"<p>This template displays for each time interval, the number of HTTP client side errors (4xx) and HTTP server side errors (5xx) that occurred during the interval.  </p> <p>The template also displays the Load Size, for reference. </p>"},{"location":"analytics/appendix_d/#http-responses","title":"HTTP Responses","text":"<p>This template displays a summary of the HTTP response status messages received during the Load Session. For each type of response status, the template lists the number of responses received and what percentage it represents of all HTTP responses. </p> <p>Some common response status messages are: </p> <ul> <li>200 \u2013 OK </li> <li>302 \u2013 Found </li> <li>404 \u2013 Not Found </li> <li>500 \u2013 Internal Server Error </li> </ul> <p>For more information see:http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html. </p>"},{"location":"analytics/appendix_d/#http-responses-over-time","title":"HTTP Responses Over Time","text":"<p>This template displays the number of HTTP responses at each time interval, for each response status code. </p>"},{"location":"analytics/appendix_d/#load-size-summary","title":"Load Size Summary","text":"<p>This template displays the progress of the Load Session by showing the load size over time. That is, the number of Virtual Clients running over time. </p> <p>This template provides an understanding of the nature of the test being conducted. All other templates should be analyzed in the context of load size behavior. </p>"},{"location":"analytics/appendix_d/#performance-summary","title":"Performance Summary","text":"<p>This template displays the main performance indicators and changes in Load Size, over time: </p> <ul> <li>Load Size \u2013 The number of Virtual Clients running during the last reporting interval. </li> <li>Page Time \u2013 The time it takes to complete a successful upper level request, in seconds. The Page Time is the sum of the Connect Time, Send Time, Response Time, and Process Time for all the hits on a page. </li> <li>Time to First Byte \u2013 The time it takes from when a request is sent until the Virtual Client receives the first byte of data. </li> <li>Response Time \u2013The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested. </li> <li>Hits Per Second \u2013 The number of times the Virtual Clients made an HTTP request, divided by the elapsed time, in seconds. Each request for a gif, jpeg, html file, etc., is a single hit. </li> <li>Throughput \u2013 The average number of bytes per second, transmitted from the SUT to the Virtual Clients running the script during the last reporting interval. In other words, this is the value of the Response Data Size divided by the number of seconds in the reporting interval. </li> </ul>"},{"location":"analytics/appendix_d/#analysis-highlights","title":"Analysis Highlights","text":"<p>Hits Per Second, Page Time, Time to First Byte, and Response Time are \u2018lower is better\u2019 measurements. An increase in these measurements as the load increases may indicate performance degradation. Sudden decreases in them may also indicate a problem. </p> <p>Under normal circumstances, Throughput is expected to grow linearly with the load. A constant throughout on increased load may indicate a bottle-neck (bandwidth, or server capacity). A decreasing throughput may also indicate a problem, such as the server sending less responses or shorter, erroneous responses. </p>"},{"location":"analytics/appendix_d/#response-time-breakdown","title":"Response Time Breakdown","text":"<p>This template displays a bar graph showing the breakdown of response time between Time to First Byte and Receive Time, as well as the Send Time.</p> <ul> <li>Send Time \u2013 The time it takes the Virtual Client to write an HTTP request to the SUT, in seconds.  </li> <li>Time to First Byte \u2013 The time it takes from when a request is sent until the Virtual Client receives the first byte of data. </li> <li>Receive Time \u2013 The elapsed time between receiving the first byte and the last byte. The template also displays the Load Size, for reference. </li> </ul>"},{"location":"analytics/appendix_d/#log-and-errors-templates","title":"Log and Errors Templates","text":"<p>This category of templates provides information about the errors logged for this Load Session.  </p>"},{"location":"analytics/appendix_d/#errors-by-severity","title":"Errors By Severity","text":"<p>This template displays the total number of errors received, grouped by severity level: Info, Minor Error, Error, and Severe Error.  </p> <p>By default, only warnings (minor errors) and above are displayed. To change the default setting, edit the settings of the MIN_SEVERITY parameter. </p>"},{"location":"analytics/appendix_d/#errors-per-second","title":"Errors Per Second","text":"<p>This template displays the number of error messages logged over time, for each level of severity. </p>"},{"location":"analytics/appendix_d/#errors-per-transaction","title":"Errors Per Transaction","text":"<p>This template displays a summary of all failed transactions, and the reason for failure. The following attributes are displayed: </p> <ul> <li>Transaction Name \u2013 The name of the transaction. </li> <li>Total Count \u2013 The total number of times the transaction was executed. </li> <li>Successful Count \u2013 The number of successful executions of the transaction. </li> <li>Failed Count \u2013 The number of failed executions of the transaction. </li> <li>Marked Count \u2013 The number of times a lower level transaction, meaning a transaction nested within a higher level transaction, failed within the current transaction. </li> </ul> <p>For each type of failure, the template displays a description of the failure and how many times this type of failure occurred. </p>"},{"location":"analytics/appendix_d/#log-messages","title":"Log Messages","text":"<p>This is a detailed template of all the log messages logged during the Load Session.  Note that WebLOAD automatically stops logging after a certain number of log events. </p> <p>By default, only minor errors and above are displayed. To change the default setting, edit the settings of the MIN_SEVERITY parameter. </p>"},{"location":"analytics/appendix_d/#log-summary","title":"Log Summary","text":"<p>This template displays a summary of the Load Session\u2019s logged messages. Similar messages are grouped, and their total count shown. </p>"},{"location":"analytics/appendix_d/#pages-analysis-templates","title":"Pages Analysis Templates","text":"<p>This category of templates provides an analysis of the pages requested during the Load Session.</p>"},{"location":"analytics/appendix_d/#pages-count","title":"Pages Count","text":"<p>This template displays the total number of pages received over time. This represents the total number of times the Virtual Client made upper level requests (both successful and unsuccessful) during the last reporting interval.</p> <p>The template also displays the Load Size, for reference.</p>"},{"location":"analytics/appendix_d/#total-page-time","title":"Total Page Time","text":"<p>This template displays the Page Time, over time.</p> <p>Page Time is the time it takes to complete a successful upper level request, in seconds. It is the sum of the Connect Time, Send Time, Response Time, and Process Time for all the hits on a page.</p>"},{"location":"analytics/appendix_d/#percentile-templates","title":"Percentile Templates","text":"<p>This category of templates provides information in the form of percentiles.</p> <p>A percentile is the value of a variable below which a certain percent of observations fall. For example, if a graph shows 40 Hits Per Second for the 70th percentile, that means that 70 percent of the Hits Per Second observation values are below 40.</p>"},{"location":"analytics/appendix_d/#hits-per-second-by-percent","title":"Hits Per Second By Percent","text":"<p>This template displays the distribution of Hits Per Second values in the session. Hits Per Second is the number of times the Virtual Clients made an HTTP request,</p> <p>divided by the elapsed time, in seconds. Each request for a gif, jpeg, html file, etc. is a single hit.</p> <p>For example, if the graph shows 40 Hits Per Second for the 70th percentile, that means that 70 percent of the Hits Per Second observation values are below 40.</p>"},{"location":"analytics/appendix_d/#response-time-by-percent","title":"Response Time By Percent","text":"<p>This template displays the distribution of the following response time values in the session:</p> <ul> <li>Response Time \u2013 The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested.</li> <li>Time To First Byte \u2013 The time it takes from when a request is sent until the Virtual Client receives the first byte of data.</li> </ul> <p>For example, if the graph shows a Response Time of 1.3 seconds for the 70th percentile, that means that 70 percent of the Response Time observation values are below 1.3 seconds.</p>"},{"location":"analytics/appendix_d/#transaction-response-time-by-percent","title":"Transaction Response Time By Percent","text":"<p>For each transaction in the session, this template displays the distribution of the transaction response time values in the session.</p> <p>For example, if the graph shows a Login Time of 10 seconds for the 80th percentile, that means that 80 percent of the Login Time observation values are below 10 seconds.</p>"},{"location":"analytics/appendix_d/#regression-templates","title":"Regression Templates","text":"<p>This category of templates enables you to compare one selected \u201cMain\u201d session to one or more additional sessions you specify.</p> <p>Regression is very useful for comparing two sessions that were run on the same Load Template. The purpose is to gauge whether a small change in the System Under Test has degraded the performance.</p> <p>Most templates available under the Regression category are identical to templates of the same name available under other categories, with the following enhancement: each displayed measure is shown for all the sessions being compared. A given measure calculated for different sessions will appear with the same color, but a different line style. This enables easy comparison between measurements from different sessions.</p> <p>For example, in the following Pages Count regression chart, two sessions are compared: \u201cMP_Store\u201d and \u201cinteresting\u201d. The Load Size measure for both is shown in green, but the line style (dotted, continuous, round points, square points) is different.</p>"},{"location":"analytics/appendix_d/#errors-by-severity_1","title":"Errors By Severity","text":"<p>This regression template displays for each Load Session you specified, the total number of errors received, grouped by severity level: Info, Minor Error, Error, and Severe Error.</p>"},{"location":"analytics/appendix_d/#errors-per-second_1","title":"Errors Per Second","text":"<p>For each specified Load Session, this regression template displays the number of error messages logged over time, by severity.</p>"},{"location":"analytics/appendix_d/#failed-transactions","title":"Failed Transactions","text":"<p>For each specified Load Session, this regression template displays information about transactions that had failures during the session.</p>"},{"location":"analytics/appendix_d/#full-comparison","title":"Full Comparison","text":"<p>This regression template compares the average values of all measurements from two sessions. It is therefore useful for pinpointing possible disparities in measurements that are not normally compared in regression charts.</p> <p>The template compares the average values of the second session to the average values of the Main session.  </p> <ul> <li>The higher the ratio between them, the darker the background color of the ratio value.  </li> <li>A negative ratio denotes a decrease in average measurement value; a positive ratio denotes an increase in average measurement value. </li> </ul>"},{"location":"analytics/appendix_d/#analysis-highlights_1","title":"Analysis Highlights","text":"<p>If a disparity is found, you can explore it further by creating a detailed report on the suspected measurement using the User Defined Blank Regression Template.   </p>"},{"location":"analytics/appendix_d/#general-session-information","title":"General Session Information","text":"<p>This regression template displays the following information about the main Load Session: </p> <ul> <li>Start and end time, and duration. </li> <li>Which scripts are running.  </li> <li>General information about the reporter. </li> <li>General information about the System under Test (SUT). </li> </ul> <p>The template also displays which additional sessions are specified. </p> <p>This template is useful as an opening page for published reports generated from regression templates. </p>"},{"location":"analytics/appendix_d/#http-responses_1","title":"HTTP Responses","text":"<p>This regression template displays a summary of the HTTP response status messages received during the specified Load Sessions. For each type of response status, the template lists the number of responses received and what percentage it represents of all HTTP responses. </p> <p>Some common response status messages are: </p> <ul> <li>200 \u2013 OK </li> <li>302 \u2013 Found </li> <li>404 \u2013 Not Found </li> <li>500 \u2013 Internal Server Error </li> </ul> <p>For more information see:http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html. </p>"},{"location":"analytics/appendix_d/#load-size-summary_1","title":"Load Size Summary","text":"<p>For each specified Load Session, this regression template displays the progress of the load session by showing the load size over time. That is, the number of Virtual Clients running over time.  </p> <p>This template provides an understanding of the nature of the tests being conducted. All charts should be analyzed in the context of load size behavior. </p>"},{"location":"analytics/appendix_d/#pages-count_1","title":"Pages Count","text":"<p>For each of the specified Load Sessions, this regression template displays the total number of pages received over time. This represents the total number of times the Virtual Client made upper level requests (both successful and unsuccessful) during the last reporting interval.  </p> <p>The template also displays the Load Sizes, for reference. </p>"},{"location":"analytics/appendix_d/#performance-summary_1","title":"Performance Summary","text":"<p>For each of the specified Load Session, this regression template displays the main performance indicators and changes in Load Size, over time: </p> <ul> <li>Load Size \u2013 The number of Virtual Clients running during the last reporting interval. </li> <li>Page Time \u2013 The time it takes to complete a successful upper level request, in seconds. The Page Time is the sum of the Connect Time, Send Time, Response Time, and Process Time for all the hits on a page. </li> <li>Time to First Byte \u2013 The time it takes from when a request is sent until the Virtual Client receives the first byte of data. </li> <li>Response Time \u2013 The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested. </li> <li>Hits Per Second \u2013 The number of times the Virtual Clients made an HTTP request, divided by the elapsed time, in seconds. Each request for a gif, jpeg, html file, etc., is a single hit. </li> <li>Throughput \u2013 The average number of bytes per second, transmitted from the SUT to the Virtual Clients running the script during the last reporting interval. In other words, this is the value of the Response Data Size divided by the number of seconds in the reporting interval. </li> </ul>"},{"location":"analytics/appendix_d/#analysis-highlights_2","title":"Analysis Highlights","text":"<p>The Hits Per Second, Page Time, Time to First Byte and Response Time are \u2018lower is better\u2019 measurements. An increase in these measurements as the load increases may indicate performance degradation. Sudden decreases in them may also indicate a problem.  </p> <p>Under normal circumstances, Throughput is expected to grow linearly with the load. A constant throughout on increased load may indicate a bottle-neck (bandwidth, or server capacity). A decreasing throughput may also indicate a problem, such as the server sending less responses or shorter, erroneous responses. </p>"},{"location":"analytics/appendix_d/#pmm-server-side-statistics","title":"PMM Server-side Statistics","text":"<p>For each of the specified Load sessions, this regression template displays the statistics gathered by the Performance Measurement Monitor </p> <p>The selected server side measurements are shown over time. The Load Size is also shown, for reference. Note that server side statistics must be explicitly added at the template definition stage, before executing the load session  </p> <p>For information on the PMM and how to add server side statistics, see the WebLOAD Console User  Guide. </p>"},{"location":"analytics/appendix_d/#response-time","title":"Response Time","text":"<p>This regression template is used to compare the total response time over time of two or more sessions. The compared Load Size is also displayed, for reference. </p>"},{"location":"analytics/appendix_d/#response-time-breakdown_1","title":"Response Time Breakdown","text":"<p>For each of the specified Load Sessions, this regression template displays a bar graph showing the breakdown of response time between Time to First Byte and Receive Time, as well as the Send Time. </p> <ul> <li>Send Time \u2013 The time it takes the Virtual Client to write an HTTP request to the SUT, in seconds.  </li> <li>Time to First Byte \u2013 The time it takes from when a request is sent until the Virtual Client receives the first byte of data. </li> <li>Receive Time \u2013 The elapsed time between receiving the first byte and the last byte. For each Load Session, the template also displays the Load Size, for reference. </li> </ul>"},{"location":"analytics/appendix_d/#slowest-transactions","title":"Slowest Transactions","text":"<p>For each of the specified Load Sessions, this regression template displays the session\u2019s transactions, ordered by the average transaction time, slowest first. </p> <p>You can configure the template to show only a certain number or certain percentage of the slowest transactions. To do so, edit the settings of the TRAN_PERCENT or TRAN_QTY parameters. </p>"},{"location":"analytics/appendix_d/#transactions-with-most-failures","title":"Transactions With Most Failures","text":"<p>For each of the specified Load Sessions, this regression template displays the transactions, ordered by the highest failure count. </p> <p>You can configure the template to show only a certain number or certain percentage of the top failing transactions. To do so, edit the settings of the TRAN_PERCENT or TRAN_QTY parameters. </p>"},{"location":"analytics/appendix_d/#total-page-time_1","title":"Total Page Time","text":"<p>For each of the specified Load Sessions, this regression template displays the Page Time, over time.  </p> <p>Page Time is the time it takes to complete a successful upper level request, in seconds. It is the sum of the Connect Time, Send Time, Response Time, and Process Time for all the hits on a page. </p> <p>The template also displays the Load Sizes, for reference.</p>"},{"location":"analytics/appendix_d/#transactions-over-load","title":"Transactions Over Load","text":"<p>For each of the specified Load Sessions, this regression template displays the transaction response time compared with Load Size values, for each transaction in the session.  </p> <p>This information can be useful when the load size does not change linearly with time. </p>"},{"location":"analytics/appendix_d/#transactions-over-time","title":"Transactions Over Time","text":"<p>For each of the specified Load Sessions, this regression template displays changes in transaction time over session running time. It also displays the Load Size, for reference. </p>"},{"location":"analytics/appendix_d/#transactions-summary","title":"Transactions Summary","text":"<p>For each of the specified Load Sessions, this regression template displays summary information about the transactions in the session. For each type of transaction, the following information is displayed: </p> <ul> <li> <p>Transaction Count \u2013 Displays the total number of successful and failed transactions. </p> </li> <li> <p>Transaction Time \u2013 For successful transactions, the table displays Transaction Time statistics: Average, Percentile X%, Max, Min, Standard deviation, and Transactions Per Second  </p> </li> </ul> <p>The default percentile is 90%. To change the default setting, edit the settings of the PERCENTILE parameter. </p> <p>You can use the Transactions Over Time and Transaction Response Time By Percent regression templates instead of this template. </p>"},{"location":"analytics/appendix_d/#server-side-statistics-templates","title":"Server Side Statistics Templates","text":"<p>This category of templates provides statistical information related to the server. </p>"},{"location":"analytics/appendix_d/#imported-statistics","title":"Imported Statistics","text":"<p>This template displays statistical information related to the server that was imported from an external source.  For information on how to import external statistics, see the WebLOAD Console User Guide. </p>"},{"location":"analytics/appendix_d/#load-generators-health","title":"Load Generators Health","text":"<p>This template displays basic CPU usage and memory usage statistics, for each Load Generator used in the session.  </p> <p>Use this template to make sure that the Load Generators are not overloaded while running the load. Overloaded Load Generators may not be able to fully load the server, and may skew the test results. </p>"},{"location":"analytics/appendix_d/#pmm-server-side-statistics_1","title":"PMM Server-Side Statistics","text":"<p>This template displays the statistics gathered by the Performance Measurement Monitor </p> <p>The selected server side measurements are shown over time. The Load Size is also shown, for reference. Note that server side statistics must be explicitly added at the template definition stage, before executing the load session  </p> <p>For information on the PMM and how to add server side statistics, see the WebLOAD Console User Guide. </p>"},{"location":"analytics/appendix_d/#transaction-analysis-templates","title":"Transaction Analysis Templates","text":"<p>This category of templates enables you to analyze the Load Session\u2019s transactions. Refer toUnderstanding Load Session Terminology  for an explanation of the basic elements of a transaction. </p>"},{"location":"analytics/appendix_d/#failed-transactions_1","title":"Failed Transactions","text":"<p>This template displays information about transactions that had failures during the session. </p> <p>The chart depicts failed transactions and failure reasons. </p>"},{"location":"analytics/appendix_d/#slowest-transactions_1","title":"Slowest Transactions","text":"<p>This template displays the session\u2019s transactions, ordered by the average transaction time, slowest first. </p> <p>You can configure the template to show only a certain number or certain percentage of the slowest transactions. To do so, edit the settings of the TRAN_PERCENT or TRAN_QTY parameters. </p>"},{"location":"analytics/appendix_d/#transaction-counters","title":"Transaction Counters","text":"<p>This chart shows successful and failed transaction counts for each transaction in the session. </p>"},{"location":"analytics/appendix_d/#transaction-response-times","title":"Transaction Response Times","text":"<p>This chart shows the average transaction response time, for each transaction. </p>"},{"location":"analytics/appendix_d/#transactions-dashboard","title":"Transactions Dashboard","text":"<p>This template displays for each transaction: </p> <ul> <li>A graph chart of transaction behavior over time. </li> <li>A bar chart of successful/failed transactions over time. </li> <li>A pie chart of overall success/fail statistics. </li> </ul>"},{"location":"analytics/appendix_d/#transactions-over-load_1","title":"Transactions Over Load","text":"<p>This template displays for each transaction in the session, the transaction response time compared with Load Size values.</p> <p>This information can be useful when the load size does not change linearly with time.</p>"},{"location":"analytics/appendix_d/#transactions-over-time_1","title":"Transactions Over Time","text":"<p>This template displays changes in transaction time over session running time. It also displays the Load Size, for reference.</p>"},{"location":"analytics/appendix_d/#transactions-with-most-failures_1","title":"Transactions With Most Failures","text":"<p>This template displays the transactions, ordered by the highest failure count. You can configure the template to show only a certain number or certain percentage of the top failing transactions. To do so, edit the settings of the TRAN_PERCENT or TRAN_QTY parameters.</p>"},{"location":"analytics/appendix_d/#statistical-correlation","title":"Statistical Correlation","text":"<p>Statistical correlation templates are used to pinpoint suspect causes for unusual behavior of a certain measurement. </p> <p>There are four predefined templates in this category. They differ in the leading measurement (Response Time, Throughput), and in the graphical representation (over time or over the leading measurement). However, you can specify any measurement in any script to be the leading measurement, and you can view its correlation to all other measurements either over time or over the leading measurement. </p>"},{"location":"analytics/appendix_d/#response-time-correlation","title":"Response Time Correlation","text":"<p>This template displays the correlation of specified measurements with the Response Time measurement, over Response Time. If you selected a different leading measurement to correlate to, the chart displays correlation with the leading measurement you selected.  </p> <ul> <li>The Correlation column shows the linear correlation coefficient. It is a number between 0 and 1, with 1 being the highest possible correlation.  </li> </ul> <p>The measurements are listed in the order of correlation, with the highest first. </p> <ul> <li>The Direction column indicates whether the correlation is positive (the measurement goes up when the leading measurement goes up, and down when the leading measurement goes down) or negative (the measurement goes up when the leading measurement goes down, and down when the leading measurement goes up). </li> </ul> <p>You can apply a Time Filter that restricts the correlation calculation to a specific time frame, to better focus on a certain behavior of the leading measurement.  </p>"},{"location":"analytics/appendix_d/#response-time-correlation-over-time","title":"Response Time Correlation Over Time","text":"<p>This template displays the correlation of specified measurements with the Response Time measurement, over time. If you selected a different leading measurement to correlate to, the chart displays correlation with the leading measurement you selected. </p> <ul> <li>The Correlation column shows the linear correlation coefficient. It is a number between 0 and 1, with 1 being the highest possible correlation.  </li> </ul> <p>The measurements are listed in the order of correlation, with the highest first. </p> <ul> <li>The Direction column indicates whether the correlation is positive (the measurement goes up when the leading measurement goes up, and down when the leading measurement goes down) or negative (the measurement goes up when the leading measurement goes down, and down when the leading measurement goes up). </li> </ul> <p>Tip</p> <p>You can apply a Time Filter that restricts the correlation calculation to a specific time frame, to better focus on a certain behavior of the leading measurement. </p>"},{"location":"analytics/appendix_d/#throughput-correlation","title":"Throughput Correlation","text":"<p>This template displays the correlation of specified measurements with the Throughput measurement, over Throughput. If you selected a different leading measurement to correlate to, the chart displays correlation with the leading measurement you selected. </p> <ul> <li>The Correlation column shows the linear correlation coefficient. It is a number between 0 and 1, with 1 being the highest possible correlation.  </li> </ul> <p>The measurements are listed in the order of correlation, with the highest first. </p> <ul> <li>The Direction column indicates whether the correlation is positive (the measurement goes up when the leading measurement goes up, and down when the leading measurement goes down) or negative (the measurement goes up when the leading measurement goes down, and down when the leading measurement goes up). </li> </ul> <p>Tip</p> <p>You can apply a Time Filter that restricts the correlation calculation to a specific time frame, to better focus on a certain behavior of the leading measurement. </p>"},{"location":"analytics/appendix_d/#throughput-correlation-over-time","title":"Throughput Correlation Over Time","text":"<p>This template displays the correlation of specified measurements with the Throughput measurement, over time. If you selected a different leading measurement to correlate to, the chart displays correlation with the leading measurement you selected. </p> <ul> <li>The Correlation column shows the linear correlation coefficient. It is a number between 0 and 1, with 1 being the highest possible correlation.  </li> </ul> <p>The measurements are listed in the order of correlation, with the highest first. </p> <ul> <li>The Direction column indicates whether the correlation is positive (the measurement goes up when the leading measurement goes up, and down when the leading measurement goes down) or negative (the measurement goes up when the leading measurement goes down, and down when the leading measurement goes up). </li> </ul> <p>Tip</p> <p>You can apply a Time Filter that restricts the correlation calculation to a specific time frame, to better focus on a certain behavior of the leading measurement. </p>"},{"location":"analytics/changing_chart_settings/","title":"Changing Chart Settings","text":"<p>The Settings tab of a chart enables you to modify the chart by changing various chart settings. </p> <ul> <li>You can filter your Load Session data results in various ways. You can filter the results displayed in your chart by selecting specific scripts or measurements within your Load Session, by applying time or statistics-based time filters. For example, you can focus your chart on a specific script or time segment within the Load Session data and/or specify a threshold for one or more of the statistics used in the selected Load Session (such as Hits per second &gt; 50). This enables you to produce charts that contain only the information you wish to present. </li> <li>You can also modify various chart parameters such as the time format, tolerance range, etc. </li> </ul> <p>After you modify a chart\u2019s settings, click  or  to regenerate the chart. </p> <p>To change the settings of a chart: </p> <ol> <li>Select the chart in the Charts area. </li> <li>Click the Settings tab located above the chart. </li> </ol> <p>The Settings tab appears in the Charts area. </p> <p></p> <ol> <li>In the Name field, optionally edit the name of the chart. </li> <li>Optionally specify a different Load Session by clicking Open. The Select Sessions window appears. SeeSpecifying a Load Session  for instructions. </li> <li>Optionally specify scripts or measurements.  </li> <li>For a static chart, specify scripts in the Script Selection section. SeeSelecting scripts \u2013 Static Chart . </li> <li>In an interactive chart, specify measurements in the Measurement Selection section. SeeSelecting Measurements \u2013 Interactive Chart .</li> <li>Optionally set time filter settings. SeeFiltering by Time . </li> <li>Optionally set statistics-based time filter settings. SeeFiltering by Statistics-based time.</li> <li>Optionally change parameter settings. SeeModifying Chart Parameters . </li> </ol>"},{"location":"analytics/changing_chart_settings/#selecting-scripts-for-static-chart","title":"Selecting scripts for Static Chart","text":"<p>In a static chart, you can select specific scripts to include in your chart. The generated chart will include a separate graph and table for each script. By Default, charts are generated for all the scripts of a Load Session. </p> <p>To select scripts: </p> <ol> <li> <p>Select the chart in the Charts area. </p> </li> <li> <p>Click the Settings tab of the chart.  </p> </li> <li> <p>Click the Script Selection section. The Script Selection area appears. </p> </li> </ol> <p></p> <p>Note: If any changes are made to the script selection, an asterisk (*) is displayed besides Script Selection in the section\u2019s title. </p> <ol> <li>Select the scripts to include in your chart. Total is the script selected by default and indicates that the chart will be generated for all the Load Session\u2019s scripts.  </li> </ol> <p>The selected scripts are added to your chart settings. To regenerate the chart with the new settings, click .</p>"},{"location":"analytics/changing_chart_settings/#selecting-measurements-for-interactive-chart","title":"Selecting Measurements for Interactive Chart","text":"<p>In an interactive chart, you can select specific measurements from all or specific scripts. By default, charts are generated for all the measurements of a Load Session. </p> <p>To select measurements: </p> <ol> <li> <p>Select the chart in the Charts area. </p> </li> <li> <p>Click the Settings tab of the chart.  </p> </li> <li> <p>Click the Measurement Selection section. The Measurement Selection area appears.</p> </li> </ol> <p>Note: If any changes are made to the measurements selection, an asterisk (*) is  displayed besides Measurement Selection in the section\u2019s title. </p> <ol> <li>Select the measurements to include in your chart. Total is selected by default and indicates that the report will be generated for all the Load Session\u2019s scripts.  </li> <li>Select a value for the X-axis of the graph: </li> <li>Time \u2013 Shows the selected measurements over time. In the Parameters section described inModifying Chart Parameters, you can edit the Time Format parameter and set it to one of the following values:  </li> <li>Relative seconds \u2013 Shows the selected measurements over time. The time is displayed as the number of seconds that elapsed from the beginning of the test (20, 40, 60, 80, 120, etc.). </li> <li>Relative time \u2013 Shows the selected measurements over time. The time is displayed as the time that passed from the beginning of the test (00:20, 00:40, 01:00, 01:20, etc.). </li> <li>Absolute time \u2013 Shows the real time, starting from the time at the beginning of the test (17:31:40, 17:32:00, 17:32:20, \u2026). </li> <li>Load Size \u2013 Shows the change in selected measurements over the Load Size measurement. For example, if you select the 'Response Time\u2019 measurement, then Response Time over Load Size shows the response times in different load sizes, regardless of when the measurement was received. </li> <li>Percentile \u2013 Shows all the percentile values of the selected measurement(s). For example, the 90th percentile means that 90% of measurements are smaller than this value, and 10% are larger than this value. </li> <li>Summary \u2013 Shows the sum (such as the average value) of the selected measurements.  </li> <li>Other \u2013 Shows the selected measurement(s) over any measurement of your choice. For example, 'Response Time over Content Size' shows the variations in the response time, based on the size of the response, regardless of time/load size. </li> </ol> <p>The selected measurements are added to your chart settings. To regenerate the chart with the new settings, click .</p>"},{"location":"analytics/changing_chart_settings/#filtering-by-time","title":"Filtering by Time","text":"<p>Reports are generated for the entire Load Session by default. Use the Time Filter to remove the beginning or end of a Load Session or focus on a specific window of Load Session time. If the template you are using does not support this filter, the Time Filter section is disabled. </p> <p>To change the Load Session time range: </p> <ol> <li> <p>Select the chart in the Charts area. </p> </li> <li> <p>Click the Settings tab of the chart.  </p> </li> <li> <p>Click the Time Filter section. The Time Filter appears. </p> </li> <li> <p></p> </li> </ol> <p>Notes: </p> <ul> <li>If any changes are made to this filter, an asterisk (*) is displayed besides Time  Filter in the section\u2019s title.</li> <li>You can enable or disable the Time Filter by selecting or clearing the Filter Enabled checkbox. When this checkbox is cleared, \u201c(Disabled)\u201d is displayed in the Time Filter section. </li> </ul> <ol> <li>Use the slider to change the Load Session start and end times. The number of seconds and the actual dates and times are displayed as you move the slider. </li> </ol> <p>Only the Load Session data from the time specified is used to generate the report. </p> <p>To clear the Time Filter: </p> <ul> <li>In the Time Filter area, click . The Time Filter defaults are restored in the From and To fields. By default, the entire duration of the Load Session is displayed. </li> </ul> <p>To regenerate the chart with the new settings, click . </p>"},{"location":"analytics/changing_chart_settings/#filtering-by-statistics-based-time","title":"Filtering by Statistics based Time","text":"<p>The statistics-based time filter enables you to specify a numeric filter for each of the statistics in the Load Session. This filter filters out segments of a chart based on their time. However, in contrast to the time filter, data is only filtered if it matches the specified condition. You can specify a numeric filter for multiple statistics and connect them using logical connectors, such as match all or any of the conditions. If the template you are using does not support this filter, the Statistics-based Time Filter section is disabled.  </p> <p>Note: The actual statistics are not filtered by this filter. For example, if your Load Session contains the following statistics and you filter by Load Size being greater than or equal to five, your chart will display the last three time segments only (from 40 to 80): </p> Time Load Size 20 1 40 5 60 10 80 15 <p>Note: For an explanation of the statistics and their meanings, see the WebLOAD Console User Guide. </p> <p>To add a filter to a specific statistic: </p> <ol> <li> <p>Select the chart in the Charts area. </p> </li> <li> <p>Click the Settings tab of the chart. </p> </li> <li> <p>Click the Statistics-based Time Filter section. The Statistics-based Time Filter area appears. </p> </li> </ol> <p></p> <p>Notes: </p> <ul> <li>If any changes are made to this filter, an asterisk (*) is displayed beside Statistics-based Time Filter in the section\u2019s title.</li> <li>You can enable or disable the Statistics-based Time Filter by selecting or clearing the Filter Enabled checkbox. When this checkbox is cleared, \u201c(Disabled)\u201d is displayed in the Time Filter section. </li> </ul> <ol> <li>Click . The Measurement Selection for Statistics-based Time Filter window appears. </li> </ol> <p></p> <ol> <li> <p>Select the measurement that you wish to filter from the top list. </p> </li> <li> <p>In the Operator column, select an operator from the drop-down list (<code>\u2264, &lt;, =, &gt;, or \u2265</code>). </p> </li> <li> <p>Enter a value in the Value field. </p> </li> </ol> <p>Note: The range of values recorded during the selected Load Session for the selected  measurement is displayed in the Value range field.  </p> <ol> <li>Click OK. The statistic is added to the Statistics-based Time Filter area. </li> <li>Repeat steps[ 5 ] through[ 8 ] for each statistic that you wish to add to the filter. </li> <li>If you added multiple statistics, select a connector (Match all conditions or Match any of the conditions) in the Statistics-based Time Filter area. </li> </ol> <p>Note: The Match all conditions and Match any of the conditions connectors apply to all statistics. For example, defining multiple measurements connected by Match all conditions filters according to all the statistics.</p> <p>To edit the statistics listed in the Statistics-based Time Filter area: </p> <ol> <li>In the Statistics-based Time Filter area, double-click a statistic. </li> </ol> <p>-Or- </p> <p>Select a statistic and click .  </p> <p>The Measurement Selection for Statistics-based Time Filter window appears. </p> <ol> <li>Edit the statistic as necessary and click OK. The statistic is updated. </li> </ol> <p>To remove a statistic from the Statistics-based Time Filter area: </p> <ul> <li>In the Statistics-based Time Filter area, select a statistic and click . The statistic is removed from the Statistics-based Time Filter area. </li> </ul> <p>To clear the Statistics-based Time Filter area of all statistics: </p> <ol> <li>In the Statistics-based Time Filter area, click . A confirmation message appears. </li> <li>Click Yes to confirm. The Statistics-based Time Filter area is cleared of all entries. To regenerate the chart with the new settings, click .</li> </ol>"},{"location":"analytics/changing_chart_settings/#modifying-chart-parameters","title":"Modifying Chart Parameters","text":"<p>The Chart Master template is used together with the individual template to create a chart. The master templates contain global parameters that can be modified to change your chart\u2019s appearance, such as whether to show tables and graphs, or show only graphs.  </p> <p>Chart templates contain local parameters. You can change the values for these parameters in the Parameters section of the chart. This will only affect the current chart. The parameters that appear in the Parameters section can also be modified in the Preferences window, setting new default values for all templates using them. For a full list of parameters, seeDefining Your Parameter Preferences.</p> <p>Note: You can change the chart master template being used by specifying a different  chart master template in the Analytics tab of the Preferences window. SeeDefining Your Analytics Preferences. </p> <p>To modify your chart parameters: </p> <ol> <li> <p>Select the chart in the Charts area. </p> </li> <li> <p>Click the Settings tab of the chart.  </p> </li> <li> <p>Click the Parameters section. A list of available parameters appears.  </p> </li> </ol> <p>Note: The values displayed for the available parameters are the global values defined in the Parameters tab of the Preferences window</p> <p></p> <p>Note: If any changes are made to any of the parameters, an asterisk (*) is displayed besides Parameters in the section\u2019s title.</p> <ol> <li>Select a parameter and click  to edit the parameters of your choice. Only parameters relevant to the selected template are displayed.  </li> </ol> <p>To regenerate the chart using the modified parameters, click .</p>"},{"location":"analytics/defining_preferences/","title":"Defining Your Preferences","text":"<p>You can define your default preferences for the following:  </p> <ul> <li>Analytics Preferences \u2013 General display and file location preferences (seeDefining Your Analytics Preferences. </li> <li>Database Preferences \u2013 Preferences related to the WebLOAD Analytics PostgreSQL Load Session Repository (seeDefining Your Database Preferences. </li> <li>Parameters Preferences \u2013 Customize your template parameters globally (see Defining Your Parameter Preferences. </li> </ul>"},{"location":"analytics/defining_preferences/#defining-your-analytics-preferences","title":"Defining Your Analytics Preferences","text":"<p>WebLOAD enables you to define default Analytics parameters relating to saving and storing templates, reports, and log files. You can define the number of recently used reports and recently used sessions available to view in WebLOAD Analytics. You can also specify a path to Jasper iReport to enable you to access it directly from WebLOAD Analytics. </p> <p>To define the Analytics preferences: </p> <ol> <li>Select Window &gt; Preferences. The Preferences window opens, displaying the Analytics preferences by default. </li> </ol> <p></p> <ol> <li>Edit the Analytics preferences, according to the information in the following table: </li> </ol> Preference Description Gallery Path The default location in  which your templates and template categories are stored.  Edit the path, or click Browse to specify a different default location. Reports location The default location to which your WebLOAD  reports are saved.  Edit the path, or click Browse, to specify a different default location. Log zip location The default location to which zipped log  files are saved.  Edit the path, or click Browse to specify a different default location. iReport path The location of the JasperSoft  iReport.exe application file.  Use this field to enable  editing templates in JasperSoft iReport or launch JasperSoft iReport directly  from WebLOAD Analytics. This option is only applicable if you have JasperSoft  iReport installed on your machine (see Using JasperSoft   iReport . Published reports location The default location to which your WebLOAD  reports are published.  Edit the path, or click Browse, to specify a different default location. Chart Preview master  template The master template that WebLOAD uses for your  charts. The following master templates are available:  \u009f Raw \u2013  Displays only the actual data (table/graph). The title page, opening page,  background, footers, and so on, are not included in the report.  \u009f WebLOAD \u2013 In addition to displaying the actual data, displays also a title page, and footers/headers with page  numbers, logos, etc.  WebLOAD with  background \u2013  In addition to the items displayed in the WebLOAD master template, displays also a background image. Reports master template The master template that WebLOAD uses for  your reports. The same master  templates available for Charts are available for Reports (Raw, WebLOAD,  WebLOAD with background). Default portfolio to be  automatically generated for imported sessions The portfolio that WebLOAD  Analytics automatically generates when you import a Load Session. The default  portfolio is the Summary portfolio.  Select None  to disable this function. Number of reports shown in  recent reports The number of recently used reports you  want to display in the Recent Reports tab. Default output format for  published reports The default format in which your reports are  published.  Select the format you want your reports to  be published in by default from the options listed. Logger severity settings The minimum severity level of errors that  are logged. Used for support purposes only. Launch external viewer  after publishing report Select this option to open a published  report in its native application immediately after publishing. When this  option is not selected, the published report is not opened. <ol> <li>Click OK to save changes, </li> </ol> <p>-Or- </p> <p>Click Restore Defaults to restore preferences to the factory default settings.</p>"},{"location":"analytics/defining_preferences/#defining-your-database-preferences","title":"Defining Your Database Preferences","text":"<p>WebLOAD Analytics enables you to define default parameters relating to the WebLOAD Analytics Load Session Repository, including username and password details. In order to connect to a remote database, additional configuration for that remote database may be necessary (for more information, see the WebLOAD Installation Guide). </p> <p>To define your database preferences: </p> <ol> <li> <p>Select Window &gt; Preferences. The Preferences window opens displaying the Analytics preferences by default. </p> </li> <li> <p>Click Database, </p> </li> </ol> <p>-Or- </p> <p>Type Database in the type filter text field, and press Enter. The Database preferences are displayed. </p> <p></p> <ol> <li>Edit the Database preferences, according to the information in the following table: </li> </ol> Preference Description Database host name The host on which the database is located. Database port The port used to access the database. Database name The name of the database. User name The database user name.  The user name is defined during installation. User password The database password.  The password is defined during  installation. <ol> <li>Click OK to save changes, </li> </ol> <p>-Or- </p> <p>Click Restore Defaults to restore preferences to the factory default settings. </p>"},{"location":"analytics/defining_preferences/#defining-your-parameter-preferences","title":"Defining Your Parameter Preferences","text":"<p>The Preferences window enables you to define default parameters relating to the charts and reports you produce using WebLOAD Analytics.  </p> <p>Parameters can be applied locally to individual charts, or globally to all charts and reports. If the same parameter is defined locally, the local parameter overrides the global parameter.  </p> <p>For information about applying parameter preferences locally, to individual templates, seeModifying Chart Parameters .</p> <p>To display the global parameter preferences: </p> <ol> <li> <p>Select Window &gt; Preferences. The Preferences window opens displaying the Analytics preferences by default. </p> </li> <li> <p>Click Parameter,  -Or- Type Parameter in the type filter text field and press Enter. The Parameters preferences are displayed. </p> </li> </ol> <p></p> <p>This table provides a description of the default parameters and their functions. </p> Parameter Description Valid Values Applicable Templates AXES_SCALE Controls how measurements are spread over the  Y-axes.  \u009f Separate Y-Axes \u2013 each  measurement is shown on its own axis.  \u009f Single Y-Axis \u2013 all  measurements are shown on a single  axis, using a single scale. Values that are an order of magnitude smaller may  appear as zero.  \u009f Consolidate Y-Axes by type  \u2013 show measurements of the same type/unit on the same axis and scale.  \u009f Auto scale to single  Y-Axis \u2013 show all measurements on a single, 0-100 scaled axis. Each measurement is scaled accordingly.  \u009f Show only trends \u2013 show  all measurements without scale. The actual values cannot be understood from  the graph. This option is used to compare  trends. Specify one of the  following:  \u009f Separate Y-Axes  \u009f Single Y-Axis  \u009f Consolidate Y-Axes by type (default value)  \u009f Auto scale to single  Y-Axis  \u009f Show only trends All interactive templates. COMMENTS Any additional comments,  displayed under the Additional Comments  heading on the opening page. Enter the text you wish to  display. General Session  Information  All interactive templates CONTINUOUS_ LINE Defines whether to draw  the chart line as a continuous  line, bridging over missing data points.  Set to True when data  points are likely to be missing  (such as in a Transactions Over Time charts). Select True or False. All interactive templates FOOTERLOGO The logo or image that you  wish to display in the footer. Enter the path to the  image that you wish to use, in the format:  \\pathname Master templates FOOTERTEXT The text that you wish to  display in the footer of the page. Enter the text you wish to display. Master templates HEADERLOGO The logo or image that you  wish to display in the header. Enter the path to the  image that you wish to use, in the format:  \\pathname Master templates HEADERTEXT The text that you wish to  display in the header of the page. Enter the text you wish to display. Master templates MAX_Y_AXES Determines the maximum number of Y-axes to show.  If the number of Y-axes in  your repot is greater than this value, the Y-axes are consolidated to a  single axis (similar to AXES_SCALE = Auto scale to single Y-Axis). Enter a numerical value (Default = 6). All interactive templates. MIN_SEVERITY The minimum log severity level to show. The  levels are:  1 \u2013 Info  2 \u2013 Minor error 3 \u2013 Error  4 \u2013  Severe error Enter a numerical value from 1 \u2013 4. Errors By Severity Error Per Second Log Messages  Log Summary OPEN_ COMPANY The company name that you wish to display on the  opening page. Enter the text you wish to display. General Session  Information OPEN_ REPORTER_ NAME The name of the person creating the chart,  displayed on the opening page. Enter the text you wish to display. General Session  Information OPEN_ REPORTER_ TITLE The title of the person creating the chart,  displayed on the opening page. Enter the text you wish to display. General Session  Information OPEN_SUT_ DIAGRAM A schematic diagram of the SUT to which the chart  refers, displayed on the opening page. Enter the path to the  image that you wish to use, in the format:  \\pathname General Session  Information OPEN_SUT_ NAME The name of the System Under Test (SUT) to which  the chart refers, displayed on the opening page. Enter the text you wish to  display. General Session  Information OPEN_SUT_ VERSION The version of the SUT to which the chart refers,  displayed on the opening page. Enter the text you wish to  display. General Session  Information PERCENTILE Defines a value below  which X percent of the observations fall.  For example, the 20th percentile is the value  below which 20 percent of the observations may be found. In other words, a  test score that is greater than 85 percent of the scores of people taking the  test is referred to as being at the 85th percentile. Enter the percentage of  results you wish to display (Default = 90). Failed  Transactions Slowest Transaction  Transactions  Summary SHOW_ TABLES Defines whether to show tables and graphs, or show  only graphs. Select True or False. All SUBTITLE The subtitle that you wish to display in the title  page. Enter the text you wish to  display. Master  templates THRESHOLD_ TOLERANCE Defines a tolerance range, above the  threshold value. Results in the chart table that fall within the threshold  tolerance range are displayed in yellow.  On line graphs, a line representing the tolerance  threshold is displayed. Enter a numerical value  above the threshold value, to define the range (Default = 0). Regression templates  All interactive templates THRESHOLD Defines a threshold value above which results are highlighted in  your chart.  Results exceeding the  threshold value are displayed in red.  On line graphs, a line representing the tolerance value is displayed. Enter a numerical  threshold value (Default = 0). Regression templates  All interactive  templates TIME_FILTER_ FROM_ BEGINNING Defines the number of  seconds to trim from the beginning of a session, by default.  This is useful if there is  often a lot of noise at the beginning of a session Enter a numerical value  (Default = 0) All templates with a time  filter TIME_FILTER_ FROM_END Defines the number of  seconds to trim from the end of a  session, by default.  This is useful if there is often a lot of noise at  the end of a session Enter a numerical value  (Default = 0). All templates with a time  filter TIME_FORMAT The time format to use  when the X-axis represents time.  Relative Time \u2013 shows the  time that elapsed since session start time.  Absolute Time \u2013 shows the  full time.  Absolute Date \u2013 shows the full date and time.  Relative Seconds \u2013 shows  the number of seconds that elapsed since session start time. Specify one of the following:  \u009f Relative Time (default value)  \u009f Absolute Time  \u009f Absolute Date  Relative Seconds All interactive templates.  Relevant when the X-axis represents time. TOP_RESULTS The default number of  displayed measurements, starting from the first measurement in the list.  The number zero (0)  indicates all specified measurements. Enter a numerical value (Default = 0) All interactive templates TRAN_PERCENT Defines the percentage of transactions you  wish to display in a chart.  This parameter takes  precedence over the TRAN_QTY parameter. Enter a numerical value (Default = 100). Slowest Transactions  Transactions with Most  Failures TRAN_QTY Defines the number of transactions you wish  to display in a chart.  This parameter is relevant if the TRAN_PERCENT  parameter is zero (0). Enter a numerical value (Default = 10). Slowest Transactions  Transactions with Most Failures <p>To apply a parameter to your charts or reports globally: </p> <ol> <li> <p>From the parameters displayed in the Preferences window, select the parameter you wish to edit and click Edit. The Edit Parameter window appears. </p> </li> <li> <p>Edit the relevant fields and click OK. The parameters table is updated to reflect your changes. The parameter is applied each time you create a new chart or report. </p> </li> </ol> <p>To add a new parameter to the parameters list: </p> <ol> <li> <p>In the Parameters tab of the Preferences window, click Add. The Add Parameter window appears. </p> </li> <li> <p>Enter information for the new parameter, according to the following table: </p> </li> </ol> Field Description Parameter Name The name of the parameter. Display Name The name that is displayed in the template  parameters list. Parameter Type The type of parameter:  \u009f String  \u009f Integer  \u009f Double  \u009f Positive Integer  \u009f Positive Double Parameter Value The value of the parameter. Description A short description of the function of the  parameter. <ol> <li>Click OK. The parameter is added to the parameters list and the change is applied to the Templates Gallery. </li> </ol> <p>To remove a parameter from the parameters list: </p> <ul> <li>From the list of parameters displayed in the Preferences window, select the parameter you wish to remove and click Remove. The parameter is removed from the list. </li> </ul> <p>Note: RadView recommends that you do not remove any parameters. To restore the  default list of parameters, click Restore Defaults. When selecting Restore Defaults, all existing parameters and their associated values are restored to their default settings.</p>"},{"location":"analytics/generating_charts/","title":"Generating Charts","text":"<p>WebLOAD Analytics enables you to quickly and easily generate your charts in various formats. Using WebLOAD Analytics, you can create and view charts that are tailor made for your needs. You can then publish the charts in various formats, or create a report compiled of various charts, and publish the report. </p>"},{"location":"analytics/generating_charts/#creating-new-charts","title":"Creating New Charts","text":"<p>To create a new chart, double-click a template in the Gallery tab. The chart is displayed in the Preview tab for a static chart, or in the Chart View tab for an interactive chart. </p> <p>Note: If you did not open WebLOAD Analytics from WebLOAD Console, the Select sessions dialog appears and you are prompted to specify a Load Session (seeSpecifying a Load Session .</p> <p></p> <p>You can now: </p> <ul> <li>Modify the chart by editing chart settings and then regenerating the chart (see Changing Chart Settings .  </li> <li>Print the chart (seePrinting a Chart . </li> <li>Publish the chart to various formats (seePublishing Charts . </li> <li>For an interactive chart, you can analyze the chart data in various ways (see Customizing Interactive Charts .  </li> <li>Create a report that will include the chart, as well as other open charts of your choice (seeGenerating Reports . </li> </ul>"},{"location":"analytics/generating_charts/#specifying-a-load-session","title":"Specifying a Load Session","text":"<p>If you did not open WebLOAD Analytics from WebLOAD Console, the Select Session window appears the first time you double-click a template to create a chart. </p> <p></p> <p>To select a session: </p> <ol> <li>Browse to the location of the Load Session file in the From File area, and click Open. </li> </ol> <p>-Or- </p> <p>Select the session in the From Repository area, and click OK.  </p> <p>Note:  You can search for Load Sessions (seeSearching for Load Sessions.</p>"},{"location":"analytics/generating_charts/#creating-a-regression-chart","title":"Creating a Regression Chart","text":"<p>A regression chart compares one selected \u201cMain\u201d session to all additional sessions you specify. Regression charts are the only kind of chart that require you to specify multiple sessions for the generation of the chart. </p> <p>To create a regression chart: </p> <ol> <li>In the Templates Gallery, open the Session Comparison node located under the Templates node. </li> <li>Double-click a regression template. The Select Sessions window appears. </li> </ol> <p></p> <ol> <li>Optionally browse to the location of a Load Session file in the From File area, and click Open. </li> </ol> <p>The Load Session file appears in the From Repository area.  </p> <ol> <li> <p>Optionally search for Load Sessions (seeSearching for Load Sessions. </p> </li> <li> <p>In the From Repository area, select a Load Session you wish to use, and click . </p> </li> </ol> <p>The Load Session moves to the Selected Sessions area. Repeat this step to include all the Load Sessions you wish to compare. </p> <p>The first session you select is set as the main Load Session. The main session appears in red. The main session is the session to which all other Load Sessions are compared.  </p> <ol> <li>To specify a different session as the main session, select the Load Session in the Selected Sessions area and click .</li> </ol> <p>To remove a Load Session from a regression chart: </p> <ol> <li>Select the regression chart in the Charts area. </li> <li>Click the Settings tab. </li> <li>Click . The Select Sessions window appears. </li> </ol> <p></p> <ol> <li>Select the Load Session you wish to remove from the Selected Sessions area. </li> <li>Click . The selected Load Session is removed from the Selected Sessions area. It is still available for use in WebLOAD Analytics, and remains listed in the From Repository area. </li> </ol>"},{"location":"analytics/generating_charts/#creating-a-statistical-correlation-chart","title":"Creating a Statistical Correlation Chart","text":"<p>Statistical correlation charts are used to identify measurements that have high correlation with a specified leading measurement, and are therefore suspect causes for the behavior of the leading measurement.</p> <p>There are four predefined statistical correlation templates. They differ in the leading measurement (Response Time, Throughput), and in the graphical representation (over time or over the leading measurement). However, you can specify any measurement in any script to be the leading measurement, and you can view its correlation to all other measurements either over time or over the leading measurement.  </p> <p>The below image shows a sample statistical correlation chart. </p> <p></p> <p>Note that you can specify which measurements to display in the graph, by selecting or deselecting them in the in the table at the bottom of the Chart view tab.  </p> <p>The table in the statistical correlation chart displays correlation information in two columns \u2013 Correlation and Direction.  </p> <ul> <li>Correlation is the linear correlation coefficient. It is a number between 0 and 1, with 1 being the highest possible correlation.  </li> </ul> <p>The measurements are listed in order of correlation, with the highest first. </p> <ul> <li>Direction indicates whether correlation is positive (the measurement goes up when the leading measurement goes up, or down when the leading measurement goes down) or negative (the measurement goes up when the leading measurement goes down, or down when the leading measurement goes up). </li> </ul> <p>Example </p> <p>Suppose you notice a time frame in which throughput suddenly decreases. Generate a Throughput Correlation chart, use the Time Filter to view the relevant time period, and look for measurements with a high correlation  </p> <ul> <li>If HTTP Response 200 has also decreased correspondingly (positive Direction), which means the server is sending less OK results with requested data, while HTTP Response 500 has increased correspondingly, meaning the server is sending more short \u2018internal error\u2019 responses, then the increased inability to fill requests for data is probably what is causing decreased throughput. </li> </ul>"},{"location":"analytics/generating_charts/#specifying-the-leading-measurement-in-a-statistical-correlation-chart","title":"Specifying the Leading Measurement in a Statistical Correlation Chart","text":"<p>To change the leading measurement in a statistical correlation chart: </p> <ol> <li>Generate a statistical correlation chart. </li> <li>Click the Settings tab. </li> <li>Click . The Custom X Axis Correlation window appears. </li> <li>Select a measurement in a script. </li> <li>Click OK.  </li> <li>Select a value for the X Axis. For example, select Time, or select Other and then specify the leading measurement. </li> <li>Click . A correlation chart is generated for the measurement you selected. </li> </ol> <p>Note:   You may wish to apply a Time Filter that restricts the correlation calculation to a specific time frame, to better focus on a certain behavior of the leading measurement. However, note that filtering a time period which is too short may harm accuracy. </p>"},{"location":"analytics/generating_charts/#printing-a-chart","title":"Printing a Chart","text":"<p>You can print an open WebLOAD Analytics chart. </p> <p>To print a chart: </p> <ol> <li> <p>In the Charts area, click the Chart View tab or Preview tab of an open chart. </p> </li> <li> <p>Click . The Print window opens.  </p> </li> <li> <p>Specify the options you require, and click OK. The report is printed. </p> </li> </ol>"},{"location":"analytics/generating_charts/#creating-an-interactive-chart-from-the-blank-template","title":"Creating an Interactive Chart from the Blank Template","text":"<p>You can create a new interactive chart based on the Blank Template. This template can be modified or you can use it to create additional custom interactive templates, as described inCreating an Interactive Template from the Blank Template </p> <p>Although you can modify any template to create your own custom chart, the Blank Template is unique in that its Measurement Selection area is empty. </p> <p>To generate a chart based on the Blank Template: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> </ol> <p></p> <ol> <li>Select User Defined \u0086 Blank Template. The Settings tab of the Blank Template opens in the Charts area. </li> <li>Edit the Settings of the template as desired. SeeChanging Chart Settings  Note that you must specify at least one measurement in order to generate a chart. </li> <li>Click . A progress window appears while the chart is generated. The chart is displayed in the Preview tab.  </li> </ol> <p>You can now analyze, print, or publish the chart.</p> <ul> <li> <p>For information about analyzing the chart, seeCustomizing Interactive Charts </p> </li> <li> <p>For information about printing your chart, seePrinting a Chart </p> </li> <li> <p>For information about publishing your chart, seePublishing Charts </p> </li> </ul>"},{"location":"analytics/generating_charts/#creating-a-regression-chart-from-the-blank-regression-template","title":"Creating a Regression Chart from the Blank Regression Template","text":"<p>You can create a new interactive regression chart based on the Blank Regression Template. An interactive regression chart is both interactive, which means it enables you to analyze and customize the graph; and it is also a regression chart which means that it compares one selected session to all other specified session. </p> <p>The Blank Regression Template can be modified or you can use it to create additional custom interactive regression templates, as described inCreating an Interactive Regression Template from the Blank Regression Template. Although you can modify any regression template to create your own custom regression template, the Blank Regression Template is unique in that it is interactive. </p> <p>To generate a regression chart based on the Blank Regression Template: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> </ol> <p></p> <ol> <li>Select User Defined \u0086 Blank Regression Template. The Select Sessions window appears. </li> <li>Optionally browse to the location of a Load Session file in the From File area, and click Open. </li> </ol> <p>The Load Session file appears in the From Repository area.  </p> <ol> <li>Optionally search for Load Sessions (seeSearching for Load Sessions . </li> <li>In the From Repository area, select a Load Session you wish to use, and click . </li> </ol> <p>The Load Session moves to the Selected Sessions area. Repeat this step to include all the Load Sessions you wish to compare. </p> <p>The first session you select is set as the main Load Session. The main session appears in red. The main session is the session to which all other Load Sessions are compared.  </p> <ol> <li>To specify a different session as the main session, select the Load Session in the Selected Sessions area and click. </li> <li>Edit the Settings of the template as desired. SeeChanging Chart Settings  Note that you must specify at least one measurement in order to create a template. </li> <li>Click . A progress window appears while the chart is generated. The chart is displayed in the Preview tab.  </li> </ol> <p>You can now analyze, print, or publish the chart.  </p> <ul> <li>For information about analyzing the chart, seeCustomizing Interactive Charts </li> <li>For information about printing your chart, seePrinting a Chart </li> <li>For information about publishing your chart, seePublishing Charts </li> </ul>"},{"location":"analytics/generating_charts/#navigating-through-a-chart","title":"Navigating through a Chart","text":"<p>You can view and navigate through a chart in the Preview tab.  </p> <p>To view and navigate through a chart: </p> <ol> <li>Click the Preview tab. </li> </ol> <p>Note: If the chart is an interactive chart and a preview has not yet been generated, click the Chart View tab, then click  . A Preview tab appears.</p> <ol> <li>Click the appropriate navigation button to navigate through your report, according to the information in the following tables.</li> </ol> Button Description Scroll to the beginning of your report. Scroll back one page. Scroll forward one page. Scroll to the end of your report. Show the actual page size. Fit the page width to the window. Zoom in. Zoom out."},{"location":"analytics/generating_charts/#customizing-interactive-charts","title":"Customizing Interactive Charts","text":"<p>The  icon displayed adjacent to a template in the gallery indicates that a chart created with this template is an interactive chart. An interactive chart contains a toolbar, which provides a variety of tools for analyzing and presenting the data in the chart.  </p> <p>To use the tools of an interactive chart: </p> <ol> <li> <p>Click the Chart View tab. </p> </li> <li> <p>Note: If the chart has not yet been generated, double-click the template. The chart is generated and displayed in the Chart View tab.</p> </li> <li> <p></p> </li> <li> <p>Click the appropriate button in the interactive toolbar. </p> </li> <li> <p>To preserve the modifications you made to the chart display, click . The modified chart appears in the Preview tab. </p> </li> </ol> Button Function Description Copy To Clipboard Copy the chart or data to the clipboard. It can then be pasted (using Ctrl+V) into another application in any of the following formats:. Bitmap \u2013 A raster graphic, which can be pasted into applications such as Microsoft Paint.. Metafile \u2013 A vector graphic which can be pasted into applications such as Microsoft Word. . Text \u2013 Data only, which can be pasted into applications such as Microsoft Excel. Gallery Change the line type to any type found in the gallery, such as bar-chart, area, etc. Anti Aliasing Smooth jagged edges. Palette Change all colors to a predefined palette from the list of palettes. 2D/3D Switch between 2D mode and 3D mode with depth. Rotated View Rotate the chart. Only applicable in 3D mode. Rotate X Axis Rotate the chart around the X axis. Only applicable in Rotated View mode. Rotate Y Axis Rotate the chart around the Y axis. Only applicable in Rotated View mode. Clustered If there are several series, place them behind each other, instead of next to each other. Only applicable in 3D mode. Axes Settings Control aspects of the X Axis and Y Axis.Note: In WebLOAD Analytics there is often more than one Y Axis, so the Y Axis setting has no effect. Instead, right- click the Y Axis you wish to change. Point Label Add labels with the numeric value of each point. Data Editor Show the data as a list. Legend Box Display a legend listing the series names, their color, and their marker shape. Zoom Enlarge image. Click Zoom again to zoom out. Properties Set the various chart settings."},{"location":"analytics/generating_charts/#publishing-charts","title":"Publishing Charts","text":"<p>WebLOAD Analytics enables you to publish a chart in the following formats: </p> <ul> <li>Doc (Microsoft Word). </li> <li>PDF (Adobe Reader). </li> <li>XLSX (Excel). Please note the following: </li> <li>The summary table (below the graph) is exported if it is displayed. To ensure that the summary table is displayed, set the SHOW_TABLES parameter to True . </li> <li>To work with the data more conveniently, change the Chart Preview master template to Raw. </li> <li>XSL (Excel 97-2003). Note that it is preferable to use XSLX format whenever possible. </li> <li>HTML (Browser, Internet Explorer). </li> <li>RTF (Rich Text Format). Note that it is preferable to use Doc format whenever possible. </li> <li>ODT (Open Office). </li> </ul> <p>To publish a chart: </p> <ol> <li>In the Charts area, click the Preview tab.  </li> </ol> <p>Note: If the chart is an interactive chart and a preview has not yet been generated, click the Chart View tab, then click  . A Preview tab appears. </p> <ol> <li>Click  to publish your chart as the default format specified in the Preferences window, </li> </ol> <p>-Or- </p> <p>Click the adjacent arrow to select a different format.  </p> <p>The Save As window opens to the location specified in the Preferences window. </p> <ol> <li>Select a location and name for your chart and click Save. The chart is published in the chosen format and saved to the location you specified.</li> </ol>"},{"location":"analytics/generating_reports/","title":"Generating Reports","text":"<p>WebLOAD Analytics enables you to quickly and easily generate reports in various formats. A report is a concatenation of all open charts, or of a subset of your choice. You can then publish the report in various formats. </p> <p>Note: Whether or not a title page is displayed depends on the master template in use. For more information about modifying the master template, see Defining Your Analytics Preferences.</p>"},{"location":"analytics/generating_reports/#creating-new-reports","title":"Creating New Reports","text":"<p>A report is a compilation of all or some of the charts open in the Charts area. A prerequisite to generating a report is to create the charts you wish to include in the report. </p> <p>To generate a WebLOAD Analytics report: </p> <ol> <li>Select File &gt; Generate Report or click </li> </ol> <p>The Generate Report: Report Settings window appears, listing all open charts.</p> <p></p> <ol> <li> <p>Specify a name for the report. </p> </li> <li> <p>Select the charts to include in the generated report. </p> </li> <li> <p>Optionally, change the order in which the charts will be displayed by selecting a chart and clicking Up or Down. </p> </li> <li> <p>Click . </p> </li> </ol> <p>A Preview of the report appears. You can: </p> <ul> <li>Navigate the report using the navigation bar. </li> <li>Print the report (seePrinting a Report . </li> <li>Publish the report to various formats (seePublishing Reports . </li> <li>Save the report to file (seeSaving Reports .  </li> <li>Modify global report parameters (seeDefining Your Preferences . </li> </ul>"},{"location":"analytics/generating_reports/#printing-a-report","title":"Printing a Report","text":"<p>To print a WebLOAD Analytics report: </p> <ol> <li>Open the report you wish to publish. For more information seeOpening Saved Reports </li> <li>Click  to generate a report preview. </li> <li>In the report preview, click . The Print window opens.  </li> <li>Select the print options you require and click OK. The report is printed. </li> </ol>"},{"location":"analytics/generating_reports/#publishing-reports","title":"Publishing Reports","text":"<p>WebLOAD Analytics enables you to publish a report in the following formats: </p> <ul> <li>Doc (Microsoft Word). </li> <li>PDF (Adobe Reader). </li> <li>XLS (Excel). Note the following: </li> <li>Summary tables (below the graph) are exported if they are displayed. To ensure that summary tables are displayed, set the SHOW_TABLES parameter to True in the charts you want displayed (as described inModifying Chart Parameters . </li> <li>To work with the data more conveniently, change the Reports master template to Raw (as described inDefining Your Analytics Preferences . </li> <li>XSL (Excel 97-2003). Note that it is preferable to use XSLX format whenever possible. </li> <li>HTML (Browser, Internet Explorer). </li> <li>RTF (Rich Text Format). Note that it is preferable to use Doc format whenever possible. </li> </ul> <p>To publish a report: </p> <ol> <li> <p>Open the report you wish to publish. For more information seeOpening Saved Reports </p> </li> <li> <p>Click  to generate a report preview. </p> </li> <li> <p>Click  in the report preview toolbar to publish your report as the default format specified in the Preferences window, </p> </li> </ol> <p>-Or- </p> <p>Click the adjacent arrow to select a different report format.  </p> <p>The Save As window opens to the location specified in the Preferences window. </p> <ol> <li>Select a location and name for your report and click Save. The report is published in the format chosen and saved to the location you specified. </li> </ol>"},{"location":"analytics/generating_reports/#saving-reports","title":"Saving Reports","text":"<p>When you save your report, it is saved to a default location, unless you specify a different location in the Save to field. To change the default location, seeDefining Your Analytics Preferences </p> <p>To save your report: </p> <ol> <li>Select File \u0086 Save or click . </li> </ol> <p>If this is the first time you are saving your report, the Save As window opens. If you have already specified a location in the Save As window, your file is saved to the default save location. </p> <p></p> <ol> <li> <p>Enter the path to which you wish to save the report, or click Browse to navigate to the location. </p> </li> <li> <p>Click OK. The report is saved to the specified location.</p> </li> </ol>"},{"location":"analytics/generating_reports/#opening-saved-reports","title":"Opening Saved Reports","text":"<p>WebLOAD Analytics reports are by default saved to the location specified in the Analytics tab of the Preferences window. You can open a previously saved report from the Recent Reports tab, or you can retrieve your report directly from your file system. For information about changing the default location for saved reports, seeDefining Your Analytics Preferences </p>"},{"location":"analytics/generating_reports/#opening-reports-from-the-recent-reports-tab","title":"Opening Reports from the Recent Reports Tab","text":"<p>To open a report from the Recent Reports window: </p> <ol> <li>Click the Recent Reports tab. The Recent Reports window opens. </li> </ol> <p></p> <p>Note: The number of reports listed in this window is defined in the Preferences  window (seeDefining Your Preferences . By default, the 20 most recent reports are listed chronologically, with the most recent listed first. </p> <ol> <li> <p>Click the Name column header to toggle between the following sorting options: </p> </li> <li> <p>Sort alphabetically (A-Z). </p> </li> <li>Sort alphabetically (Z-A). </li> <li> <p>Display the most recently used reports first. </p> </li> <li> <p>Double-click the report you wish to open. You can simultaneously open multiple reports by holding down Ctrl or Shift, clicking the reports, and pressing Enter. </p> </li> </ol> <p>The charts comprising the report are displayed in the Charts area. All previously opened charts are closed.  </p> <p>Note: To publish or print the report, you must first click   to generate a report preview, and then use the publish and print options in the report preview toolbar. </p>"},{"location":"analytics/generating_reports/#opening-a-report-from-the-file-system","title":"Opening a Report From the File System","text":"<p>To open a report from the file system: </p> <ol> <li>Select File &gt; Open Report or click . The Select Report File window appears.  </li> <li>Browse to the report you wish to open and click Open. Note that WebLOAD Analytics reports have a .report extension. </li> </ol> <p>The charts comprising the report are displayed in the Charts area. All previously opened charts are closed.  </p> <p>Note: To publish or print the report, you must first click   to generate a report preview, and then use the publish and print options in the report preview toolbar.</p>"},{"location":"analytics/generating_reports/#modifying-report-appearance","title":"Modifying Report Appearance","text":"<p>The general appearance of the report is determined by the reports master template being used. You can influence the report appearance in the following ways: </p> <ul> <li>You can specify a different report master template, as described inDefining Your Analytics Preferences </li> <li>You can change the default values of some master template parameters, as described inDefining Your Parameter Preferences </li> </ul> <p>Note: The appearance of each chart in the report is determined by the reports master template, not the chart master template.</p>"},{"location":"analytics/getting_started/","title":"Getting Started","text":"<p>WebLOAD Analytics provides a user friendly interface for creating your charts and reports, based on Load Session data. This section provides you with the information you need to start working with WebLOAD Analytics. </p>"},{"location":"analytics/getting_started/#launching-webload-analytics","title":"Launching WebLOAD Analytics","text":"<p>You can launch WebLOAD Analytics quickly and easily from WebLOAD Console. </p> <p>Note: WebLOAD Analytics is installed as part of the WebLOAD installation. For information about how to install WebLOAD, see the WebLOAD Installation Guide.</p> <p>To launch WebLOAD Analytics from WebLOAD Console: </p> <ol> <li>Select Tools &gt; Open WebLOAD Analytics,  </li> </ol> <p>-Or- </p> <p>Click the WebLOAD Analytics  icon. </p> <p>WebLOAD Analytics opens. The Session Load you were working on in the WebLOAD Console is automatically loaded into WebLOAD Analytics, and some charts analyzing the Load Session are displayed. </p> <p></p>"},{"location":"analytics/getting_started/#understanding-the-user-interface","title":"Understanding the User Interface","text":"<p>WebLOAD Analytics is designed to enable you to quickly and easily create, edit, print, publish, and manage charts and reports.  </p> <p></p> <p>The user interface consists of the following elements: </p> <ul> <li>Menu Bar \u2013 Enables you to perform WebLOAD Analytics functions through the File, Edit, Window, and Help menus. </li> <li>Main Toolbar \u2013 This toolbar provides you with shortcuts to the main WebLOAD Analytics functions, including creating new charts, opening existing charts, and saving the reports on which you are working.  </li> <li>Navigation Area \u2013 This area contains the Gallery, Current Report, and Recent Reports tabs. It displays the templates, current reports, and recently used reports available for use, depending on which tab you select.  </li> <li>Gallery Tab \u2013 This tab displays all the templates and portfolios, organized in a hierarchical tree structure. </li> <li>Current Report Tab \u2013 This tab lists all the open charts in the Charts area. They are all grouped under a Report node.  </li> <li>Recent Reports Tab \u2013 This tab lists all the previously saved Reports, each of which consists of a group of charts. </li> <li>Charts Area \u2013 This area displays all open charts. Each chart has its own tab, so you can easily switch between the different charts with which you are working. For information about creating, opening, saving, and viewing charts, seeGenerating Charts </li> <li>Chart Tab \u2013 A tab is displayed for each open chart, showing the chart title. When a chart is selected, its settings are displayed in the Settings tab and the generated chart is displayed in the Preview tab and/or Chart View tab. The Preview tab shows the chart in its ready-to-print form. The Chart View tab, available only for interactive charts, enables manipulating the chart display in various ways. </li> </ul> <p>You can easily resize or move the Charts area and Navigation area by dragging each component. </p>"},{"location":"analytics/getting_started/#accessing-help","title":"Accessing Help","text":"<p>WebLOAD Analytics provides various help-related functions that enable you to access or display the following: </p> <ul> <li>Help \u2013 WebLOAD provides a comprehensive online help system with step-by-step instructions for common tasks. </li> </ul> <p>You can press F1 from any open window for an explanation of the options, or select Help &gt; Help Contents to open the online help contents and index.  </p> <ul> <li>Version Information \u2013 Information about the version of WebLOAD Analytics that you are using, including copyright and licensing information, plugins, and configuration details. Select Help &gt; About to access this information. </li> <li>WebLOAD Community Website \u2013 Select Help &gt; RadView.com to access the website. </li> <li>Professional Support \u2013 Enables you to zip log files created by WebLOAD Analytics, for analysis by RadView support.  </li> <li>To create a zip of the WebLOAD Analytics log files, select Help &gt; Create Log Zip. A confirmation message specifying the location of the zip file appears. </li> </ul> <p>WebLOAD Analytics creates three types of log files: </p> <ul> <li>Analytics log. </li> <li>Import Process Trace File (TRC) log. </li> <li>Eclipse Environment log. </li> </ul> <p>WebLOAD Analytics provides a fast and easy way to move relevant log files to a zip file. The zip file can then be emailed to RadView Support, when required. </p> <ul> <li>To automatically send a zip file of the WebLOAD Analytics log files to RadView support, select Help &gt; Send Logs. An automatic e-mail message is composed in your default e-mail program, with the zip file attached. </li> </ul>"},{"location":"analytics/glossary/","title":"Glossary","text":"Glossary  Term Description AAT An  older, obsolete WebLOAD utility that was used for recording web session  activities as a JavaScript file. (Replaced by WebLOAD Recorder.) Aborted  Rounds The  number of times the Virtual Clients started to run a script but did not  complete the script, during the last reporting interval. This might be due to  session being stopped either automatically or manually by the user. script Specification  of the sequence of HTTP protocol calls sent by Virtual Clients to the SUT  (System Under Test).  Scripts  are written in JavaScript. You can either write scripts as a text file or  generate them automatically using the WebLOAD Recorder. Application  Being Tested (ABT) See SUT Attempted  Connections The  total number of times the Virtual Clients attempted to connect to the SUT  during the last reporting interval. Automatic  Transaction counters If you have Automatic  Transactions enabled, WebLOAD  creates three counters for each GET and POST statement in the script:  \u009f The total number of times it occurred  \u009f The number of times it succeeded  \u009f The number of times it failed during the last reporting interval Average For  timers, average is the total amount of time counted by the timer (not the  elapsed time) divided by the Count (that is, the total number of readings).  For example, the average for Transaction Time is the amount of time it took  to complete all the successful transactions divided by the number of  successful transactions (the Count). Built-in  Timer A timer  measures the time required to perform a given task. WebLOAD supports both  programmed timers and built-in timers. ROUND TIME is a built-in timer. The  ROUND TIME is the time needed for one complete execution of a script. Connect  Time The time  it takes for a Virtual Client to connect to the System Under Test (the SUT),  in seconds. In other words, the time it takes from the beginning of the HTTP  request to the TCP/IP connection.  The value posted in the Current  Value column is the average time it took a Virtual Client to connect to the  SUT during the last reporting interval.  If the  Persistent Connection option is enabled, there may not be a value for Connect  Time because the HTTP connection remains open between successive HTTP  requests. Connection  Speed (Bits Per Second) The  number of bits transmitted back and forth between the Virtual Clients and the  System Under Test (SUT) divided by the time it took to transmit those bits,  in seconds.  You can  set the Virtual Clients to emulate a particular connection speed during the  test, either by using the Variable Connection Speed settings, or by coding  the connection speed in the script.  If a  connection speed is specified for the test, WebLOAD reports it in the  Statistics Report.  The  value posted in the Current Value column is the number (sum) of bits passed  per second during the last reporting interval. It should match, very closely,  the connection speed you specified for the test. Console The WebLOAD component that manages  the test session. The Console performs the following:  \u009f Configures Load Session hosts and scripts  \u009f Schedules Load Session scripts  \u009f Configures Goal\u2013Oriented test sessions  \u009f Monitors the application's performance  under the generated load  \u009f Manages the Load Session as it is  running, allowing you to pause, stop, and continue Load Session components as needed  \u009f Displays the current performance of the SUT  \u009f Provides a final performance reports for Probing Clients and Virtual Clients  Manages exporting of performance reports Count (For timers only.) The total number of readings (the number  of times the item being timed has occurred) for the timed statistic since the  beginning of the test. For example, for Transaction Time, Count shows the  number of transactions that have been completed. Current  Slice The value posted for this reporting interval in the  Statistics Report main window. Current  Slice Average For per  time unit statistics and counters, average is the total of all of the current  values for the last reporting interval, divided by the number of readings.  For timers, average is the total amount of time counted by  the timer (not the elapsed time) divided by the Count (that is, the total  number of readings for the last reporting interval). For example, the average  for Transaction Time is the amount of time it took to complete all the  successful transactions in the last reporting interval, divided by the number  of successful transactions (the Current Slice Count). Current  Slice Count (For  timers only.) The total number of readings (the number of times the item  being timed has occurred) for the timed statistic for the last reporting  interval. For example, for Transaction Time, Current Slice Count shows the  number of transactions that have been completed over the last reporting  interval. Current  Slice Max The  highest value reported for this statistic over the last reporting interval. Current  Slice Min The  lowest value reported for this statistic over the last reporting interval. Current  Slice Standard Deviation The  average amount the measurement for this statistic varies from the average  over the last reporting interval. Current  Slice Sum The  aggregate or total value for this statistic in this script over the last  reporting interval. DNS  Lookup Time The time  it takes to resolve the host name and convert it to an IP address by calling  the DNS server. Failed  Connections The total number of times the  Virtual Clients tried to connect to the SUT but were unsuccessful, during the  last reporting interval.  This  number is always less than or equal to the number of failed hits because hits  can fail for reasons other than a failed connection. Failed  Hits The total number of times the  Virtual Clients made an HTTP request but did not receive the correct HTTP response  from the SUT during the last reporting interval. Note that each request for  each gif, jpeg, html file, etc., is a single hit. Failed  Hits Per Second The  number of times the Virtual Clients did not obtain the correct HTTP response  divided by the elapsed time, in seconds.  The value posted in the Current  Value column is the number (sum) of unsuccessful HTTP requests per second  during the last reporting interval. Failed  Pages Per Second The  number of times the Virtual Clients did not obtain the correct response to an  upper level request, divided by the elapsed time, in seconds.  The  value posted in the Current Value column is the number (sum) of unsuccessful  requests per second during the last reporting interval. Failed  Rounds The  total number of times the Virtual Clients started but did not complete the  script during the last reporting interval. Failed  Rounds Per Second The  number of times the Virtual Clients started but did not complete an iteration  of the script, divided by the elapsed time, in seconds. The value posted in  the Current Value column is the number (sum) of failed iterations of the  script per second during the last reporting interval. First  Byte The time  it takes a Virtual Client to receive the first byte of data. Gallery See Templates Gallery Goal\u2013Oriented  Test A  WebLOAD component enabling you to define the performance goals required, and  view the status of your application when it is operating under this  performance goal. WebLOAD provides a Goal\u2013Oriented Test Wizard for  configuring these performance goals. WebLOAD automatically accelerates the  number of Virtual Clients accessing your website until you meet your  performance goal.  Note:  The Goal-Oriented Test Wizard was  previously called the Cruise Control Wizard. Goal\u2013Oriented  Test Wizard See Goal\u2013Oriented   Test Hit  Time The time  it takes to complete a successful HTTP request, in seconds. Each request for  each gif, jpeg, html file, etc., is a single hit. The time of a hit is  the sum of the Connect Time, Send Time, Response Time, and Process Time.  The value posted in the Current  Value column is the average time it took to make an HTTP request and process  its response during the last reporting interval. Hits The total number of times the  Virtual Clients made HTTP  requests to the System Under Test (SUT) during the last reporting interval.  For  example, a Get statement for a URL retrieves a page. The page can include any  number of graphics and contents files. Each request for each gif, jpeg, html file,  etc., is a single hit. Hits  Per Second The number of times the Virtual  Clients made an HTTP request divided by the elapsed time, in seconds. Each  request for each gif, jpeg, html file,  etc., is a single hit.  The value posted in the Current  Value column is the number (sum) of HTTP requests per second during the last  reporting interval. Host A computer connected via a  network, participating in a test session. Each Host in a test session has  assigned tasks. A host can act as either a Load Machine or a Probing Client  Machine. All hosts participating in a test session must be accessible to the  Console over a network. Therefore they must run TestTalk, the network agent. HTTP  Response Status WebLOAD  creates a row in the Statistics Report for each kind of HTTP status code it  receives as an HTTP response from the SUT (redirection codes, success codes,  server error codes, or client error codes).  The value posted is the number  of times the Virtual Clients received that status code during the last  reporting interval. Integrated  Reports A single configurable report  that can integrate both standard performance data, and data from the NT  Performance Monitor. This report gives you a more complete picture of the  performance of your application. The data to be monitored and the data to be  displayed in the report are both configurable in the Console. Internet  Productivity Pack (IPP) Provides a set of protocol  implementations enabling you to load-test your application using these  protocols. Java  and ActiveX counters You can  add function calls to your scripts that enable you to instantiate and call  methods and properties in Java and ActiveX components (see the WebLOAD  Scripting Guide). If there are ActiveX or Java function calls in the  script that you are running, WebLOAD reports three counters for them in the  Statistics Report:  \u009f The total number of times it occurred  \u009f The number of times it succeeded  \u009f The number of times it failed during the last reporting interval  The row heading in the  Statistics Report is the name of the function call. Java  and ActiveX timers You  can add function calls to your scripts that enable you to instantiate and  call methods and properties in Java and ActiveX components (see the WebLOAD  Scripting Guide). If there are ActiveX or Java function calls in the  script you are running, WebLOAD reports timers for them in the Statistics Report.  The  timer value is the average amount of time it took to complete the function  call, in seconds, during the last reporting interval.  The row  heading in the Statistics Report is the name of the function call. Load  Generator The  component of the Load Machine that generates Virtual Clients. Load Generators  have the task of bombarding the System Under Test with HTTP protocol call  requests as defined in the script. WebLOAD assesses the application's  performance by measuring the response  time experienced by the Virtual Clients. The number of Virtual Clients at any  given moment is determined by the user. Load  Generator Machine See  Load Machine Load  Machine A  host that runs Load Generators. Load Generators bombard the application under  test with a large load, to enable complete scalability and integrity testing. Load  Session A Load  Session includes both the complete Load Template and the results obtained  while running that Load Session. A Load Template consists of information  about the hosts and scripts participating in the current Load Session. The  Load Template will also include scheduling information. The complete Load  Template is illustrated in the Session Tree. Storing a Load Template saves  you time when repeatedly running WebLOAD with the same, or even a similar  network configuration, since you don't have to recreate your Load Template  from scratch each time you want to start working.  Storing  Load Session results can be useful when you want to examine results from  multiple test sessions or for analyzing test session results. Load  Size The  number of Virtual Clients running during the last reporting interval. Load  Template A Load  Template contains the complete Load Session definition, without the test  results. A Load Template includes information about the participating hosts  and the scripts used in the current Load Session. The definition also  includes scheduling information and the configuration of the Server Monitor  and Integrated Reports. The complete Load Template is illustrated in the  Session Tree. Storing a Load Template saves you time when repeatedly running  WebLOAD with the same, or even a similar network configuration, since you do  not have to recreate your Load Template from scratch each time you rerun a  test. Page  Time The time  it takes to complete a successful upper level request, in seconds. The Page  Time is the sum of the Connect Time, Send Time, Response Time, and Process  Time for all the hits on a page.  The  value posted in the Current Value column is the average time it took the  Virtual Clients to make an upper level request and process its response  during the last reporting interval. Pages The  total number of times the Virtual Client made upper level requests, both successful  and unsuccessful, during the last reporting interval. Pages  Per Second The number of times the Virtual  Clients made upper level requests divided by the elapsed time, in seconds.  The  value posted in the Current Value column is  the number (sum) of requests per second during the last reporting interval. Per  Time Unit statistics Ratios that calculate an average  value for an action or process. For example: Transactions Per Second, Rounds  Per Second. Portfolio A Portfolio enables you to  generate a single, inclusive report that contains all the charts generated by  the templates included in the portfolio. Probing  Client A software program which  \"bombards\" the SUT as a single Virtual Client, to further measure  the performance of the SUT. WebLOAD generates exact values for Probing Client  performance. Probing  Client Machine Hosts running Probing Client  software simulating one Virtual Client, and run at the same time as Load  Machines. Probing  Client software See Probing   Client Process  Time The time it takes WebLOAD to  parse an HTTP response from the SUT and then populate the document-object  model (DOM), in seconds.  The value posted in the Current  Value column is the average time it took WebLOAD to parse an HTTP response  during the last reporting interval. Receive  Time The elapsed time between  receiving the first byte and the last byte. Report  Portfolio See Portfolio Resource  Manager Distributes  and circulates WebLOAD testing resources (Virtual Clients and Probing  Clients) amongst users on a \u201cneed to use\u201d basis. The Resource Manager is  packaged with a maximum number of Virtual Clients, Probing Clients and  Connected Workstation ports, as defined by the WebLOAD package.  With the Resource Manager, every  WebLOAD Console can operate in Standalone Workstation mode or Connected  Workstation mode. Response  Data Size The size, in bytes, of all the  HTTP responses sent by the SUT during the last reporting interval.  WebLOAD  uses this value to calculate Throughput (bytes per second). Response  Time The time  it takes the SUT to send the object of an HTTP request back to a Virtual  Client, in seconds. In other words, the time from the end of the HTTP request  until the Virtual Client has received the complete item it requested.  The value posted in the Current  Value column is the average time  it took the SUT to respond to an HTTP request during the last reporting interval. Responses The  number of times the SUT responded to an HTTP request during the last  reporting interval.  This  number should match the number of successful hits. Round  Time The time  it takes one Virtual Client to finish one complete iteration of a script, in  seconds.  The  value posted in the Current Value column is the average time it took the  Virtual Clients to finish one complete iteration of the script during the  last reporting interval. Rounds The  total number of times the Virtual Clients attempted to run the script during  the last reporting interval. Rounds  Per Second The number of times the Virtual  Clients attempted to run the script, divided by the elapsed time, in seconds.  The  value posted in the Current Value column is the number (sum) of attempts  (both successful and unsuccessful) per second during the last reporting  interval. Send  Time The time  it takes the Virtual Client to write an HTTP request to the SUT, in seconds.  The value posted in the Current  Value column is the average time it took the Virtual Clients to write a  request to the SUT during the last reporting interval. Server  Performance Measurements If you selected Performance  Monitor statistics for the report, WebLOAD creates a row for them and reports their values in the Statistics Report.  For definitions of the  statistics, see the Server Monitor  Definition dialog box.  Be  selective when choosing server performance measurements, otherwise the system  resources required to manage the data might affect the Console. Session  Tree A graphic representation of a  Load Template and status. It illustrates the different components of a test  session, including Load Machines and Probing Clients, the scripts that they  execute, and their status. Single  Client See Probing   Client Standard  Deviation The average amount the  measurement varies from the average since the beginning of the test. Successful  Connections The  total number of times the Virtual Clients were able to successfully connect to the SUT during the last reporting  interval.  This number is always less than  or equal to the number of successful hits because several hits might use the same HTTP connection if the Persistent  Connection option is enabled. Successful  Hits The  total number of times the Virtual Clients made an HTTP request and received  the correct HTTP response from the SUT during the last reporting interval.  Each request for each gif, jpeg, html file,  etc., is a single hit. Successful  Hits Per Second The  number of times the Virtual Clients obtained the correct HTTP response to  their HTTP requests divided by the elapsed time, in seconds.  The  value posted in the Current Value column is the number (sum) of successful  HTTP requests per second during the last reporting interval. Successful  Pages Per Second The  value posted in the Current Value column is the number (sum) of successful  requests per second during the last reporting interval. Successful  Rounds The  total number of times the Virtual Clients completed one iteration of the  script during the last reporting interval. Successful  Rounds Per Second The  number of times the Virtual Clients completed an entire iteration of the  script, divided by the elapsed time, in seconds.  The  value posted in the Current Value column is the number (sum) of successful  iterations of the script per second during the last reporting interval. SUT The  system running the Web application currently under test. The SUT (System  Under Test) is accessed by clients through its URL address. The SUT can  reside on any machine or on multiple machines, anywhere on the global  Internet or your local intranet. Template See Load Template Templates  Gallery The  Templates Gallery is a single entity that contains predefined templates,  user-defined templates, and portfolios. Test  Program See Test Script Test  Script The  script. This defines the test scenario used in your Load Session. Scripts are  written in JavaScript. Test  Template See Load Template TestTalk The  network agent. This program enables communication between the Console and the  host computers participating in the test. Throttle  Control A  WebLOAD component that enables you to dynamically change the Load Size while  a test session is in progress. Throughput  (Bytes Per Second) The  average number of bytes per second transmitted from the SUT to the Virtual  Clients running the script during the last reporting interval. In other  words, this is the amount of the Response Data Size, divided by the number of  seconds in the reporting interval. Time  to First Byte The time  it takes from when a request is sent until the Virtual Client receives the  first byte of data. User-defined  Automatic Data Collection If  you have Automatic Data Collection enabled, WebLOAD creates three counters  for each GET and POST statement in  the script.  \u009f The total number of times the Get and Post statements occurred  \u009f The number of times the statements succeeded  The number of times the statements failed during the last reporting interval User-defined  counters Your own  counters that you can add to scripts using the SendCounter() and the SendMeasurement() functions (see the WebLOAD Scripting Guide). If there is a  user-defined counter in the script that you are running, WebLOAD reports the  counter\u2019s values in the Statistics Report.  The row heading is the name  (argument) of the counter, that  is, the string in parenthesis in the SendCounter() or  SendMeasurement() function  call.  The value reported is the number  of times the counter was  incremented during the last reporting interval. User-defined  timer Timers  that you can add to scripts to keep track of the amount of time it takes to  complete specific actions (see the WebLOAD Scripting Guide). If there  are any timers in the scripts that you are running, WebLOAD reports their  values in the Statistics Report.  The  row heading is the name (argument) of the timer. That is, the row heading is  the string in parenthesis in the SetTimer() function call. The timer represents the time it  takes to complete all the actions between the SetTimer() call and its corresponding SendTimer() call,  in seconds.  The  value posted is the average time it took a Virtual Client to complete the  actions between the pair of timer calls, in seconds, during the last  reporting interval. User-defined  Transaction counters Transaction  functions that you can add to scripts for functional tests (see the WebLOAD  Scripting Guide). If there is a user-defined transaction function in the  script that you are running, WebLOAD reports three counters for it in the  Statistics Report.  \u009f The total number of times the  transaction occurred  \u009f The number of times a transaction succeeded  \u009f The number of times a transaction failed  during the last reporting interval  The  row heading is the name (argument) of the transaction. That is, the row  heading is the string in parenthesis in the BeginTransaction() function call User-defined  Transactions timers A timer for user-defined transaction functions. If  there is a user-defined transaction function in the script that you are  running, WebLOAD reports a timer for it in the Statistics Report.  The  row heading is the name (argument) of the user- defined transaction. That is,  the row heading is the string in parenthesis in the BeginTransaction() function call.  The timer represents the average  time it took to complete all the actions between the BeginTransaction() call and its corresponding EndTransaction() call, in seconds, during the last reporting  interval. Virtual  Client Artificial  entities run by Load Generators. Each such entity is a perfect simulation of  a real client accessing the System Under Test (SUT) through a Web browser.  Virtual Clients generate HTTP  calls that access the SUT. The  Load Generators that run Virtual Clients can reside anywhere on the Internet  or on your local intranet.  Scripts  are executed by all the Virtual Clients in parallel, achieving simultaneous  access to the SUT. The size of the load on your SUT is determined by the  number of Virtual Clients being  generated. You may define as many Virtual Clients as needed, up to the  maximum supported by your WebLOAD \u201cpackage\u201d. WebLOAD  Analytics WebLOAD  Analytics enables you to analyze data and create custom, informative reports  after running a WebLOAD test session. WebLOAD  Console See Console WebLOAD  Recorder An  easy-to-use tool for recording, creating, and authoring protocol scripts for  the WebLOAD environment. WebLOAD  Load Template See Load Template WebLOAD  Session See Load Session WebLOAD  Wizard A  WebLOAD Wizard that steps you through the configuration process. Each screen  of the WebLOAD Wizard contains text explaining the configuration process. The  WebLOAD Wizard enables you to create a basic Load Template. After using the  demo, you can use the Console menus to add functionality not available  through the WebLOAD Wizard. WebRM See Resource Manager"},{"location":"analytics/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD Professional, the premier performance, scalability, reliability testing solution for internet applications.  </p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load. </p>"},{"location":"analytics/load_sessions/","title":"Working with Load Sessions","text":"<p>WebLOAD Console generates the Load Session files (.ls, .sdb, .mdb, .isd, and .dat) that contain all the results collected during the execution of a Load Test. When you import a Load Session file (.ls) for use in WebLOAD Analytics, all the other files are also imported with it. All the imported Load Session files are stored in a separate WebLOAD Analytics Load Session Repository.  </p> <p>WebLOAD Analytics enables you to import Load Sessions you wish to use to generate your reports, search the database for the Load Sessions you require, and delete redundant Load Sessions.  </p>"},{"location":"analytics/load_sessions/#importing-load-sessions","title":"Importing Load Sessions","text":"<p>You can import a single or multiple Load Sessions into the WebLOAD Analytics Load Session Repository. The Load Session\u2019s name is automatically derived from the selected .ls file\u2019s name. </p> <p>To import a Load Session: </p> <ol> <li>Select File &gt; Import Sessions, or click. The Open window appears. </li> <li>Browse to the Load Session (<code>.ls</code> file) you wish to import and click Open. The Load Session is imported and saved in the WebLOAD Analytics Load Session Repository, as defined in your Preferences. The Load Session is listed in the From Repository area of the Select Session window.</li> </ol> <p>Notes: When you import a Load Session from WebLOAD Console into the WebLOAD  Analytics Load Session Repository, the Summary Portfolio is automatically generated for the Load Session. For information about changing this default behavior, see Defining Your Analytics Preferences </p> <p>A Load Session that is currently open in WebLOAD Console cannot be imported. Unless you launch WebLOAD Analytics from within WebLOAD Console, close the Load Session before importing it. For more information about launching WebLOAD Analytics from WebLOAD Console, see<code></code>Launching WebLOAD Analytics </p>"},{"location":"analytics/load_sessions/#searching-for-load-sessions","title":"Searching for Load Sessions","text":"<p>You can search the WebLOAD Analytics Repository for Load Sessions by date, or using keywords. </p>"},{"location":"analytics/load_sessions/#searching-by-date","title":"Searching by Date","text":"<p>You can narrow your search for the Load Session you require by displaying Load Sessions that fall within a certain date range only. </p> <p>To search for a range of the most recent Load Sessions: </p> <ol> <li>Select File &gt; Select Sessions, or click . The Select Session window appears. </li> <li>In the From Repository area, click and drag the slider to the right to display more recent Load Sessions. Click and drag to the left to display progressively older Load Sessions. </li> </ol> <p>By default, the slider is set to display all sessions that appear in the WebLOAD Analytics Repository. As you move the slider to the left, it displays sessions from the last year, last three months, last month, last week, last three days, and last day, respectively. </p> <p></p> <p>Note: You can also open the Select Session window by clicking  in the Settings tab.</p>"},{"location":"analytics/load_sessions/#searching-by-session-name","title":"Searching by Session Name","text":"<p>You can search for the Load Session you require by specifying part of the name, or the full name, of the Load Session you require. </p> <p>To search for a Load Session by session name: </p> <ol> <li>Select File &gt; Select Sessions, or click  . The Select Session window appears. </li> <li>In the Session name field, enter the Load Session name, or part of the name that you wish to find. Load Sessions matching the search name or part of the name, are displayed in the From Repository area, as you type. \\</li> </ol>"},{"location":"analytics/load_sessions/#deleting-load-sessions","title":"Deleting Load Sessions","text":"<p>You can delete Load Sessions that you no longer require from the WebLOAD Analytics Load Session Repository. Deleting Load Sessions removes them from the repository. Any references to them in WebLOAD Analytics are also removed.  </p> <p>Note: When a Load Session is imported from WebLOAD Console, a copy of the Load  Session is saved in the WebLOAD Analytics Load Session Repository. Deleting a Load Session from the WebLOAD Analytics Load Session Repository does not delete it from WebLOAD Console. </p> <p>To delete a Load Session from WebLOAD Analytics: </p> <ol> <li>Select File &gt; Delete Sessions, or click . The Select Sessions to Delete window appears. </li> <li>Select the Load Session or Sessions you wish to delete in the From Repository area, and click . The Load Session or Sessions are moved to the Selected Sessions area. </li> <li>Select the Load Session(s) from the Selected Sessions area and click . A warning message appears, asking if you are sure you wish to delete the selected Load Session(s). </li> <li>Click Yes. The selected Load Session(s) are deleted from the WebLOAD Analytics Load Session Repository.</li> </ol>"},{"location":"analytics/overview/","title":"WebLOAD Analytics System Overview","text":"<p>WebLOAD accurately simulates Internet users\u2019 behavior and models real-life demands on your Web application to predict capacity requirements, report bottlenecks, and detect weak links in your application before deployment. An important phase of the performance testing process is the analysis and reporting of test results. WebLOAD Analytics provides you with a simple yet comprehensive method of producing and publishing reports to fulfill all your analysis and reporting requirements. </p> <p>Using WebLOAD Analytics, you can create clear, accurate, and meaningful reports that enable you to analyze Load Session results and identify peaks, trends, and anomalies in your data. WebLOAD Analytics provides you with a variety of predefined chart templates that enable you to produce focused reports on specific topics. You can edit these templates, and create new templates. </p>"},{"location":"analytics/overview/#the-webload-analytics-workflow","title":"The WebLOAD Analytics Workflow","text":"<p>WebLOAD Analytics provides an easy to use, task oriented interface for the production and publication of Load Session reports. In a typical workflow, you create several charts of interest. Each is created simply by double-clicking a template. You then generate a Report, which is a compilation of the open charts.  </p> <p>The building blocks of the charts are:</p> <ul> <li>Load Sessions \u2013 WebLOAD Analytics uses Load Session data as the raw material for producing WebLOAD reports. Using WebLOAD Analytics, you can present Load Session results, compare various statistics, and highlight important results and conclusions, based on your load test results. For more information about Load Sessions, seeWorking with Load Sessions . </li> <li>Templates \u2013 A template specifies the design of a chart, including the visual layout, chart elements, and the way the data is structured. WebLOAD Analytics provides a wide range of predefined templates, based on RadView\u2019s extensive knowledge and experience in the load testing and performance analysis fields. Predefined templates enable you to produce charts that focus on specific aspects of the Load Session data.</li> </ul> <p>A basic chart consists of the following elements: </p> <ul> <li>Tabular Data \u2013 Provides a tabular representation of the Load Session data. </li> <li>Graphs \u2013 Provides a graphical representation of the Load Session data. </li> </ul> <p></p> <p>Each chart is either static or interactive.  </p> <ul> <li>A static chart, indicated by, is a regular chart.  </li> <li>An interactive chart is indicated by . It has the additional capability of enabling you to analyze and present the chart data in various ways using tools provided in its interactive toolbar. </li> </ul> <p>Once you create all the charts necessary for your report, you can generate the report simply by clicking . You then specify which of the open charts will be included in the report. </p> <p>Reports can be saved for later use, with the defined Load Session data, template, and any optional settings you choose (seeSaving Reports . </p> <p>In addition, you can: </p> <ul> <li>Apply filters to the Load Session data \u2013 You can apply time and statistics-based filters to the Load Session data before the chart is produced. Time filters focus the chart on a specific part of the Load Session. Statistics-based time filters enable you to focus on time segments which meet defined criteria. For information about filtering your chart, seeChanging Chart Settings </li> <li>Customize your graphs \u2013 You can customize the graphs of interactive charts (denoted by the  icon): change colors, line type, hide/show measurement, zoom and more. You can even add any other measurement from the session to the graphs. </li> <li>Change the chart\u2019s parameters \u2013 each chart has different parameters that can be changed to control its behavior. Depending on the chart, you may add threshold values, control whether to show detailed data table or not, change titles and logos. For more information, seeModifying Chart Parameters </li> <li>Reuse your customizations \u2013 You can change the settings of a template and then save it as a new template. </li> <li>Create regression charts \u2013 Adding multiple Load Sessions to a chart compares one selected session to all additional sessions included in the regression chart. This option is very useful for comparing two sessions that were run on the same Load Template. The purpose is to gauge whether a small change in the System Under Test has degraded the performance. For more information, seeGenerating Charts </li> <li>Create statistical correlation charts \u2013 You can use these charts to identify measurements that have a high correlation with a certain measurement that is behaving in an unusual fashion, and are therefore possibly causing the unusual behavior of that measurement. </li> <li>Print or Publish the chart or report \u2013 Both charts and reports can be printed or published in a variety of formats, including DOC, ODT, PDF, HTML, RTF and XLSX. For information about printing charts and reports, seePrinting a Chart andPrinting a Report . For information about publishing charts and Reports, seePublishing Charts andPublishing Reports </li> <li>Group frequently used templates in a portfolio \u2013 You can create a portfolio of templates that you use frequently. Opening the portfolio will open all its included templates. For information about how to set up a portfolio, seeWorking with Portfolios </li> <li> <p>Manage your charts \u2013 You can group your templates into different categories by creating your own folders and moving the templates you wish to use into those folders. You can also rename folders to create logical categories in which to group your templates. For information about managing your templates, seeManaging Template Categories </p> </li> <li> <p>Assign and modify master templates \u2013 WebLOAD Analytics contains three master templates: Raw, WebLOAD, and WebLOAD with background. Any one of these can be assigned as the master template for reports, and any one of these can be assigned as the master template for charts. By default, the reports master template is the WebLOAD master template, and the default charts master template is the Raw master template. The appearance of a report is determined only by the reports master template. The appearance of each chart is determined both by the chart master template and the settings of the specific template. You can specify which master template to assign to charts and which master template to assign to reports (seeDefining Your Analytics Preferences . You can also change the values of some master template parameters (seeDefining Your Parameter Preferences . </p> </li> <li>Create and edit static reports \u2013 Although it is possible to dynamically define an interactive report from any measurement set, you can even create and edit the static templates. You can use the freely available iReport tool to edit the supplied templates and create new ones. For more information about JasperSoft iReport, see Using JasperSoft iReport </li> </ul>"},{"location":"analytics/overview/#the-analytics-repositories","title":"The Analytics Repositories","text":"<p>All Load Sessions used with WebLOAD Analytics are stored in a database (PostgreSQL). These Load Sessions are the fundamental data for all reports generated by WebLOAD Analytics. Load Sessions are imported to the database through WebLOAD Analytics. A list of the Load Sessions stored in the database can be viewed from WebLOAD Analytics. For information about importing Load Sessions and selecting the Load Sessions you wish to work with, seeWorking with Load Sessions . </p> <p>Note:  You need to import Load Sessions to the database (also called the Load Session Repository) before they can be used by WebLOAD Analytics. </p> <p>All chart templates are stored in the following directory, by default: </p> <p><code>&lt;WebLOAD data&gt;Documents and Settings\\All Users\\Application Data\\RadView\\WebLOAD\\Gallery</code>. This directory determines the appearance of the Templates Gallery. When you launch WebLOAD Analytics, the <code>Gallery</code> directory is scanned and all the templates therein are presented in the Templates Gallery. For information about modifying the default chart template location, see Defining Your Analytics Preferences . For more information about the <code>Gallery</code> directory, see<code></code>WebLOAD Analytics File System Structure . </p> <p>Note: The <code>Gallery</code> directory is not monitored while WebLOAD Analytics is running. RadView recommends not modifying this directory while WebLOAD Analytics is </p>"},{"location":"analytics/portfolios/","title":"Working with Portfolios","text":"<p>WebLOAD Analytics enables you to create a portfolio of templates that you can open in a single action. Use portfolios to group together commonly used templates to speed up your work.  </p> <p>Note: Generating, printing, and publishing individual charts within a portfolio or entire portfolios is identical to generating, printing, and publishing charts. For more information, seeGenerating Charts </p>"},{"location":"analytics/portfolios/#creating-a-portfolio","title":"Creating a Portfolio","text":"<p>When you create a new portfolio, you assign the templates you wish to include by dragging them into your portfolio in the Templates Gallery tree. The assigned templates appear as links within the portfolio. </p> <p>Note: If a template is deleted from the Templates Gallery and the portfolio links associated with it are not deleted, unresolved template links appear in the tree marked with a red x. When publishing the portfolio, templates with unresolved links are not published. </p> <p>To create a portfolio: </p> <ol> <li> <p>In the Navigation area, click the Gallery tab. The Templates Gallery opens. </p> </li> <li> <p>In the Templates Gallery Right-click in the Templates Gallery and select New Portfolio.  </p> </li> </ol> <p>The New Portfolio window opens. </p> <p></p> <ol> <li> <p>Enter a name for the portfolio and click OK. The new portfolio appears under the Portfolios folder in the Templates Gallery tree. </p> </li> <li> <p>In the Templates Galley, drag-and-drop the templates you want to include in your portfolio. </p> </li> <li> <p>Your portfolio is created. </p> </li> </ol> <p>Note: To remove a template from your portfolio, select the template link from the  Templates Gallery tree and click . Removing a template link from your portfolio does not delete it from the Templates Gallery. </p>"},{"location":"analytics/portfolios/#opening-a-portfolio","title":"Opening a Portfolio","text":"<p>To open a portfolio: </p> <ol> <li>In the Templates Gallery, open the Portfolios node. </li> <li>Double-click the portfolio you wish to open.  </li> </ol> <p>The charts created by the portfolio open in the Charts area. </p> <p>Note: Any charts that were already open in the Charts area remain open. </p> <p>You can now generate, print, or publish a report based on the open charts. For more information, see </p> <ul> <li>Creating New Reports </li> <li>Printing a Report </li> <li>Publishing Reports </li> </ul> <p></p> <p>To rename a portfolio: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery opens. </li> <li>Right-click a portfolio and select Rename. The Rename window appears. Enter the new portfolio name and click OK. The portfolio is renamed.</li> </ol>"},{"location":"analytics/templates/","title":"Working with Templates","text":"<p>The Templates Gallery contains predefined templates, user-defined templates, and portfolios. WebLOAD Analytics enables you to modify and manage your templates, edit existing templates, and import new templates. </p>"},{"location":"analytics/templates/#template-overview","title":"Template Overview","text":"<p>Chart master templates are used together with individual templates to create a chart. A chart master template contains global parameters that affect all the templates that are generated using it. You can select a default master template for charts as described in Defining Your Analytics Preferences </p> <p>Templates specify the design of a chart, including the visual layout, chart elements, and the way the data is structured. For example, depending on the master template, a template produces a chart with or without tables. </p> <p>Templates can include the following elements: </p> <ul> <li>Images \u2013 These include the logos, images, and icons that create the chart template\u2019s look and feel. WebLOAD Analytics provides WebLOAD logos and images by default. You can customize your templates to display your own logos and images. </li> <li>Tables \u2013 The Load Session data can be represented in tabular format in a chart. At least one table exists in all charts, by default. You can exclude tables from your chart by setting the SHOW_TABLES parameter to False. For more information about modifying parameters, seeDefining Your Parameter Preferences </li> <li>Graphs \u2013 The Load Session data can be represented in graphical format in a chart. At least one graph exists in almost all charts, by default. You can include only graphs in your chart (excluding tables) by setting the SHOW_TABLES parameter to False. For more information about modifying parameters, seeDefining Your Parameter Preferences </li> </ul> <p>For more information about the WebLOAD Analytics template file structure, including storage of templates, images, and files, seeWebLOAD Analytics File System Structure </p> <p>You can define a variety of additional characteristics within the chart, using local and global parameters (in the chart and in the chart master template). For example, you can specify the number of results listed in a chart, customize the look and feel of your chart, and define a threshold value for selected templates.  </p> <p>For more information about template preferences, seeDefining Your Preferences </p>"},{"location":"analytics/templates/#creating-user-defined-templates","title":"Creating User-defined Templates","text":"<p>You can change the settings of a template and then save it as a new template. This enables you to customize both static and interactive templates. </p> <p>Only changes to the following settings enable you to create a new template: </p> <ul> <li>Measurements settings in the Measurement Selection area of an interactive chart. </li> </ul> <p>Note: Changes in the Script Selection area of a static chart do not enable you to save the template as a new one. </p> <ul> <li>Filtering settings in the Statistics-based Time Filter area. </li> <li>Parameter settings in the Parameters area. </li> </ul> <p>To create a user-defined template: </p> <ol> <li> <p>In the Charts area, select a chart. </p> </li> <li> <p>Select the Settings tab. </p> </li> <li> <p>Modify the settings of the chart. </p> </li> <li> <p>Select File &gt; Save Chart As Template. The Save As Template window appears. </p> </li> </ol> <p></p> <ol> <li>Select a name and category for your template, or overwrite the existing template and click OK. </li> </ol> <p>Your user-defined template is created and appears in the Templates Gallery in the location you specified.</p>"},{"location":"analytics/templates/#creating-an-interactive-template-from-the-blank-template","title":"Creating an Interactive Template from the Blank Template","text":"<p>You can create a custom interactive template based on the Blank Template. Although you can modify any template to create your own custom template (as described in Creating User-defined Templates , the Blank Template is unique in that its Measurement Selection area is empty. </p> <p>To create an interactive template based on the Blank Template: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> </ol> <p></p> <ol> <li> <p>Select User Defined &gt; Blank Template. The Settings tab of the Blank Template opens in the Charts area, with the Measurement Selection section displayed. </p> </li> <li> <p>Edit the Settings of the template as desired. SeeChanging Chart Settings  Note that you must specify at least one measurement in order to create a template. </p> </li> <li> <p>Select a value for the X-Axis of the graph and continue defining the chart template options as described inCreating User-defined Templates </p> </li> <li> <p>Select File &gt;  Save Chart As Template. The Save As Template window opens. </p> </li> </ol> <p></p> <ol> <li>Select a name and category for your template or overwrite the existing template and click OK. </li> </ol> <p>Your custom interactive template is created and appears in the Templates Gallery. </p>"},{"location":"analytics/templates/#creating-an-interactive-regression-template-from-the-blank-regression-template","title":"Creating an Interactive Regression Template from the Blank Regression Template","text":"<p>You can create a custom interactive regression template based on the Blank Regression Template. Although you can modify any regression template to create your own custom regression template, the Blank Regression Template is unique in that it is interactive. </p> <p>To create a regression template based on the Blank Regression Template: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> </ol> <p></p> <ol> <li> <p>Select User Defined &gt; Blank Regression Template. The Select Sessions window appears. </p> </li> <li> <p>Optionally browse to the location of a Load Session file in the From File area, and click Open. </p> </li> </ol> <p>The Load Session file appears in the From Repository area.  </p> <ol> <li> <p>Optionally search for Load Sessions (seeSearching for Load Sessions . </p> </li> <li> <p>In the From Repository area, select a Load Session you wish to use, and click . </p> </li> </ol> <p>The Load Session moves to the Selected Sessions area. Repeat this step to include all the Load Sessions you wish to compare. </p> <p>The first session you select is set as the main Load Session. The main session appears in red. The main session is the session to which all other Load Sessions are compared.  </p> <ol> <li> <p>To specify a different session as the main session, select the Load Session in the Selected Sessions area and click . </p> </li> <li> <p>Edit the Settings of the template as desired (seeChanging Chart Settings . Note that you must specify at least one measurement in order to create a template. </p> </li> <li> <p>Select a value for the X-Axis of the graph and continue defining the chart template options as described inCreating User-defined Templates </p> </li> <li> <p>Select File &gt; Save Chart As Template. The Save As Template window opens. </p> </li> </ol> <p></p> <ol> <li>Select a name and category for your template or overwrite the existing template and click OK. </li> </ol> <p>Your custom interactive regression template is created and appears in the Templates Gallery.</p>"},{"location":"analytics/templates/#managing-template-categories","title":"Managing Template Categories","text":"<p>You can manage template categories in various ways: </p> <ul> <li> <p>Group your templates into different categories by creating your own categories and moving templates into them.  </p> </li> <li> <p>Rename the categories to create logical groups for your templates.  </p> </li> <li> <p>Copy or move templates from one category to another, and rename templates. </p> </li> </ul>"},{"location":"analytics/templates/#creating-new-template-categories","title":"Creating New Template Categories","text":"<p>You can create new categories, to enable easy categorization of your templates. To create a new template category: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery opens. </li> <li>Right-click in the Templates Gallery and select New Category from the menu. The New Category window opens. </li> </ol> <p></p> <ol> <li>Enter a name for your new category, and click OK. The new category is listed in the Templates Gallery, which is ordered alphabetically. You can now move the templates you require into the new category. </li> </ol>"},{"location":"analytics/templates/#copying-templates","title":"Copying Templates","text":"<p>WebLOAD Analytics enables you to copy templates from one template category to another.  </p> <p>To copy a template to a new location: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> <li>Select the template you wish to copy. Right-click in the Templates Gallery and select Copy from the menu.  </li> <li>Click the destination category. </li> <li>Right-click in the Templates Gallery and select Paste from the menu. A copy of the template appears under the selected category. </li> </ol> <p>Note: To move a template, drag-and-drop the template from one category to another. </p>"},{"location":"analytics/templates/#renaming-templates-and-template-categories","title":"Renaming Templates and Template Categories","text":"<p>You can easily rename a template or template category. This enables you to create logical groups to categorize and group your templates. </p> <p>To rename a template or template category: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> <li>Select the template or template category you wish to rename. </li> <li>Right-click the template or template category, and select Rename from the menu. </li> </ol> <p></p> <ol> <li>Enter the new name in the Enter a new name field, and click OK. The template or template category is renamed.</li> </ol>"},{"location":"analytics/templates/#deleting-templates-and-template-categories","title":"Deleting Templates and Template Categories","text":"<p>To delete a template or template category: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> <li>Select the template or template category that you wish to delete. Right-click in the Templates Gallery and select Delete from the menu.  </li> </ol> <p>A confirmation message appears. </p> <ol> <li>Click Yes to delete the template or template category. </li> </ol> <p>Note: When deleting a template category, all the templates contained within the category are also deleted. </p>"},{"location":"analytics/templates/#using-jaspersoft-ireport","title":"Using JasperSoft iReport","text":"<p>Since you can use interactive reports to create your own reports on any measurement set, you would typically not need to change the supplied static templates. However, you can change a static template if you wish. JasperSoft iReport enables you to create new templates or modify existing templates for use with WebLOAD Analytics. JasperSoft iReport provides a range of functions for the creation and customization of templates. WebLOAD Analytics supports version 2.0.4 of JasperSoft iReport. </p> <p>Note: If the path to JasperSoft iReport has been defined in your WebLOAD Preferences, you can launch JasperSoft iReport directly from WebLOAD Analytics.</p> <p>To launch JasperSoft iReport from WebLOAD Analytics: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery opens. </li> <li>Select the template that you wish to edit. Right-click in the Templates Gallery and select Edit with iReport. The JasperSoft iReport application opens. </li> </ol> <p>Note: You can use any JRXML-compatible tool to create or modify templates. RadView  does not provide support for JasperSoft iReport, or other third party tools used to create or modify templates. </p> <p>For further information about the use of JasperSoft iReport, see the following Web pages: </p> <ul> <li> <p>http://www.jaspersoft.com/JasperSoft_iReport.html  </p> </li> <li> <p>http://jasperforge.org/jaspersoft/opensource/business_intelligence/ireport/ </p> </li> <li> <p>http://sourceforge.net/projects/ireport/ </p> </li> </ul>"},{"location":"analytics/templates/#importing-new-templates","title":"Importing New Templates","text":"<p>WebLOAD Analytics enables you to import templates created or edited in JasperSoft iReport, or any JRXML-compatible tool. WebLOAD Analytics supports version 2.0.4 of JasperSoft iReport. </p> <p>Note: RadView does not provide support for JasperSoft iReport, or other third party tools used to create or modify templates. </p> <p>To import a new template: </p> <ol> <li>In the Navigation area, click the Gallery tab. The Templates Gallery appears. </li> </ol> <p>Right-click in the Templates Gallery and select Import Template. The Import Template window opens. </p> <p></p> <ol> <li>Enter the template parameters, according to the information in this table. </li> </ol> Template Field Description Source template folder The path to the template JRXML file that you wish to import. Enter the path to the template, or click Browse to navigate to the JRXML file location. Template name The name of the template. Destination Category A drop-down list of the template categories available in WebLOAD Analytics. <ol> <li>Click OK. The template is listed in the Gallery tab, under the selected folder. </li> </ol> <p>Note: If no template categories are defined when importing a template, the Source  Template Folder field is replaced with the Create Folder field. Define a folder name before importing your template. </p>"},{"location":"automation/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD Professional, the premier performance, scalability, reliability testing solution for internet applications.  </p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load. </p> <p>This section provides a brief introduction to WebLOAD technical support, including both documentation and online support. </p> <p>IMPORTANT NOTE: In previous WebLOAD versions, a WebLOAD script was called an \u201cAgenda\u201d. From version 12.0, it is referred to simply as a script. Wherever \u201cAgenda\u201d is still displayed, we are referring to the WebLOAD script. </p> <p>WebLOAD Recorder was formerly referred to as WebLOAD IDE. </p>"},{"location":"automation/overview/","title":"WebLOAD Automation Overview","text":"<p>This guide describes the three methods of automating WebLOAD tasks: </p> <ul> <li>Running WebLOAD components from a command line interface. </li> <li>Running a WebLOAD job in Jenkins. </li> <li>Running a WebLOAD using the Open API. </li> </ul>"},{"location":"automation/webload_cli/","title":"Running WebLOAD from the Command Line","text":"<p>You can run the following WebLOAD components from the command line:</p> <ul> <li>WebLOAD License \u2013 You can register and update your WebLOAD license.</li> <li>WebLOAD Console \u2013 You can launch a WebLOAD test that invokes the WebLOAD Console and runs a specified test according to the specified parameters.</li> <li>WebLOAD Analytics \u2013 You can launch WebLOAD Analytics and generate a report for a specified session, then publish or print it.</li> <li>WebLOAD Recorder \u2013 You can launch a WebLOAD Recorder test that invokes the WebLOAD Recorder and runs a specified test according to the specified parameters.</li> </ul>"},{"location":"automation/webload_cli/#registering-and-updating-your-webload-license-through-the-cli","title":"Registering and Updating your WebLOAD License through the CLI","text":"<p>You can register or upload a WebLOAD license through a command line interface. You can enter the WebLOAD Update License command into a batch file or into an external script and it will run directly, without user intervention, using the parameters specified.</p> <p>To register or update you WebLOAD license through the command line interface:</p> <p>Enter the wlUpdateLicenseApplicationCmd command together with the optional parameters (described below) into your external script, to automatically launch a WebLOAD License action.</p>"},{"location":"automation/webload_cli/#syntax","title":"Syntax","text":"<p>Use the following syntax to define the parameters for registering or updating a WebLOAD license through a command line interface:</p> <p><code>wlUpdateLicenseApplicationCmd {-help}|{-info}|{-free}|{-file license_file}|{-server server_address}|{-hostid}</code></p>"},{"location":"automation/webload_cli/#parameters","title":"Parameters","text":"Parameter Description Comments -help Display all available command parameters and their syntax. -info Display the full license details of the installed license. -free Create and install a license for a free WebLOAD version. This version provides 50 virtual clients, and is available for an unlimited period of time. You can use the free WebLOAD edition immediately after running this command. <p>-file</p><p>license_file</p> Install the specified license file, which you received from RadView (refer to the WebLOAD Installation Guide for further explanations). If license registration is successful, a confirmation appears in the command-line output. You can then begin working with WebLOAD. <p>- server</p><p>server_address</p> Connect to the WebRM server, whose address is the specified IP address. This option is relevant if you installed a WebRM server. For further explanations, refer to the WebLOAD Installation Guide. -hostid Display the host ID of the computer. This information is needed if you wish to receive a WebLOAD license file from RadView. For further explanations, refer to the WebLOAD Installation Guide."},{"location":"automation/webload_cli/#examples","title":"Examples","text":"<p>Example 1:</p> <p><code>wlUpdateLicenseApplicationCmd -info</code></p> <p>This command provides as output the license information.</p> <p>Example 2:</p> <p><code>wlUpdateLicenseApplicationCmd -file webload.lic</code></p> <p>This command uploads the specified license file, and installs it. Following successful installation, you can begin working with WebLOAD.</p>"},{"location":"automation/webload_cli/#running-a-webload-console-test-through-the-cli","title":"Running a WebLOAD Console Test through the CLI","text":"<p>You can perform load testing through a command line interface. You can enter the WebLOAD Console launch command into a batch file or into an external script and WebLOAD Console will run directly, without user intervention, using the parameters specified.</p> <p>To run WebLOAD Console through the command line interface:</p> <p>Enter the <code>WebLOAD.exe</code> command together with a series of optional parameters (described below) into your external script to automatically launch a WebLOAD test. When your script runs, the executable file will invoke WebLOAD Console and run the specified test according to the specified parameters.</p> <p>Note: Verify that the script used with the template specified, and any included files, are accessible to the Load Template or Load Session file that will be run.</p>"},{"location":"automation/webload_cli/#syntax_1","title":"Syntax","text":"<p>Use the following syntax to define the parameters for running a WebLOAD test through a command line interface:</p> <p><code>WebLOAD.exe [&lt;file name to open&gt;][&lt;file name to save&gt;] [&lt;flags&gt;]</code></p>"},{"location":"automation/webload_cli/#parameters_1","title":"Parameters","text":"Parameter Description Comments File name to open The name of the <code>*.tpl</code> or <code>*.ls</code> file (Load Template or Load Session file) to run. Optional parameter File name to save The name of the <code>*.ls</code> file containing the test data. This file will be saved in the current directory unless otherwise specified. Optional parameter Flags <p>- /ar \u2013 Automatically run the WebLOAD test without waiting for user input. If this flag is not specified, the Console is called up with the specified Load Template/Load Session but the test is not automatically run. The system waits for user input.</p><p>- /ar <code>&lt;*time*&gt;</code> \u2013 Automatically run the test for the length of time specified in <code>&lt;time&gt;</code>/</p><p>- /vc \u2013 The number of Virtual Client licenses to allocate when using WebRM License Server.<p>- /pc <code>&lt;num&gt;</code>\u2013 The number of Probing Client licenses to allocate when using WebRM License Server.</p><p>- /rc <code>&lt;*results\\_file\\_name*&gt;</code> \u2013 Place the results in the specified file (an XML file).</p><p>- /ag <code>&lt;script name&gt;</code> - The name of an existing script (<code>*.wlp</code>) to open.</p> Optional parameter <p>The parameters are all optional. If no parameters are entered, the executable launches the Console and does not run a test. If the autorun flag <code>&lt;/ar&gt;</code> flag is not set, the</p> <p><code>&lt;file name to save&gt;</code> and the <code>&lt;time&gt;</code> parameters are ignored.</p> <p>Note: If there is a conflict between the time defined in this command and the time defined in the WebLOAD Scheduler, the load test runs for the shorter of the two periods defined.</p>"},{"location":"automation/webload_cli/#examples_1","title":"Examples","text":"<p>Example 1</p> <p><code>WebLOAD.exe test1.tpl</code></p> <p>This command opens the Console and the <code>test1.tpl</code> template. The Console waits for user input.</p> <p>Example 2</p> <p><code>WebLOAD.exe test1.tpl march9.ls /ar 30</code></p> <p>This command opens the Console and automatically runs a test using the <code>test1.tpl</code> template file. The test results are saved in the Load Session file <code>march9.ls</code>, which includes all of the test data and results. This file is saved in the current directory, unless otherwise specified. The autorun flag is set, meaning that the test runs without user intervention. The test will run for 30 seconds.</p> <p>Example 3</p> <p><code>WebLOAD.exe /ag c:\\agendas\\MyAgenda.wlp</code></p> <p>This command opens the Console and the WebLOAD Wizard to the script/Mix Selection dialog box. The <code>MyAgenda.wlp</code> script is automatically selected and the WebLOAD Wizard waits for user input.</p> <p>Example 4</p> <p><code>WebLOAD.exe test1.tpl march9.ls /ar 30 /rc result1.xml</code></p> <p>This command performs all the actions described in Example 2 above, and in addition the execution return code is saved in <code>result1.xml</code>.</p> <p>Example 5</p> <p><code>WebLOAD.exe test1.tpl march9.ls /ar 30 /vc 100 /pc 3</code></p> <p>This command performs all the actions described in Example 2 above, and in addition it allocates 100 virtual clients and 3 probing clients from the WebRM server.</p>"},{"location":"automation/webload_cli/#json-based-load-test-console-cli","title":"JSON Based Load test - Console CLI","text":""},{"location":"automation/webload_cli/#syntax_2","title":"Syntax","text":"<p>Use the following syntax to define the parameters for running a WebLOAD test through a command line interface:</p> Parameter Description Comments File name to open The name of the <code>*.tpl</code> or <code>*.ls</code> or *<code>.json</code> file to run. Optional parameter File name to save The name of the <code>*.ls</code> file containing the test data. Optional parameter <p>Example: <code>WebLOAD.exe load_test.json test_results.ls /ar /rc result_code.xml</code></p>"},{"location":"automation/webload_cli/#fields","title":"Fields","text":""},{"location":"automation/webload_cli/#test-required-one","title":"Test (required, one)","text":"<ul> <li><code>name</code> (string, required): The name of the test.</li> <li><code>type</code> (string, required): The type of the test. The value is \"agenda\".</li> </ul>"},{"location":"automation/webload_cli/#agendas-array-required-at-least-one","title":"Agendas (array, required at least one)","text":"<ul> <li><code>agendaname</code> (string, required): The name of the agenda.</li> <li><code>agendapath</code> (string, required): The path to the agenda script (js or wlp).</li> <li><code>percentage</code> (int, required): The percentage of the agenda.</li> <li><code>execoptions</code> (array, optional): The execution options for the agenda. Options are added as wlGlobals settings. See WebLOAD JavaScript Reference Guide for possible values.</li> <li><code>Name</code> (string): The name of the wlGlobals execution option.</li> <li><code>Value</code> (string): The value of the execution option.</li> </ul>"},{"location":"automation/webload_cli/#sleepoptions-dict-optional","title":"SleepOptions (dict, optional)","text":"<p><code>SleepType</code> (string) The sleep options for the agenda. (one of the following):</p> <ul> <li>1 - Sleep time as recorded</li> <li><code>SetMaxSleepTime</code> (bool): Whether to set the maximum sleep time.</li> <li><code>MaxSleepTime</code> (int): The maximum sleep time.</li> <li>2 - Ignore recorded sleep time</li> <li>3 - Set random sleep time between</li> <li><code>SleepRandMax</code> (int): The maximum random sleep time.</li> <li><code>SleepRandMin</code> (int): The minimum random sleep time.</li> <li>4 - Set sleep time deviation</li> <li><code>SleepDeviation</code> (int): The sleep deviation in percent, so 10 means plus minus 10% of the recorded sleep time.</li> </ul> <p><code>TransactionSleepType</code> (string): The transaction sleep type. (one of the following):</p> <ul> <li>\"0\" - Transaction timers include sleep time ('Transaction Time')</li> <li>\"1\" - Transaction timers exclude sleep time ('Transaction Net Time')</li> <li>\"2\" - Transaction timers exclude sleep time but named \"Transaction Time\"</li> <li>\"3\" - Both timers - including and excluding sleep time</li> </ul>"},{"location":"automation/webload_cli/#load-machines-one-of-the-following-is-required","title":"Load Machines (one of the following is required)","text":""},{"location":"automation/webload_cli/#loadgenerator-array","title":"LoadGenerator (array)","text":"<p>A list of objects that represent the load generators to be used in the test.   - <code>name</code> (string, required): The name of the load generator machine. (Each name can only appear once in the list)   - <code>type</code> (string, required): The type of the load generator machine. \"PC\" for windows or linux load-generator, \"Cloud\" for cloud based load-generator as defined in the console.</p>"},{"location":"automation/webload_cli/#locations-array","title":"Locations (array)","text":"<p>A list of objects that represent the locations used in the test. Locations are defined in the Dashboard and can contain more than one load-generator   - <code>distribution</code> (int, required): The distribution percentage.   - <code>name</code> (string, required): The name of the location.</p>"},{"location":"automation/webload_cli/#schedule-dict-required-all-times-in-minutes","title":"Schedule (dict, required) all times in minutes","text":"<ul> <li><code>RampUpTime</code> (int, optional): The ramp-up time.</li> <li><code>Duration</code> (int, optional): The duration of the test.</li> <li><code>RampDownTime</code> (int, optional): The ramp-down time.</li> <li><code>MaxVC</code> (int, required): The maximum virtual users count.</li> <li><code>LimitRounds</code> (bool, optional): Whether to limit the rounds.</li> <li><code>Rounds</code> (int): If LimitRounds is set to true, what is the maximum number of rounds to run before stopping the test. The test will still use the proviced schedule of ramp-up, duration and ramp-down but will stop once the total number of rounds reached the target.</li> </ul>"},{"location":"automation/webload_cli/#slamanager-array-optional","title":"SlaManager (array, optional)","text":"<p>This list contains one object that specifies the SLA manager settings.</p> <ul> <li><code>name</code> (string): The name of the SLA rule.</li> <li><code>message</code> (string): A message to be shown in case the SLA rules are violated.</li> <li><code>msg</code> (string): This is the Action Definition:</li> <li>0 - Display info message</li> <li>1 - Display warning</li> <li>2 - Display error</li> <li>3 - Display fatal error and stop test execution</li> <li><code>operator</code> (string): The operator to be used when evaluating the rule. The value can be \"and\" or \"or\".</li> <li><code>stats</code> (list of objects): A list of objects that define the statistics for the SLA rule.</li> </ul> <p>Each object in the <code>stats</code> list contains the following attributes:</p> <ul> <li><code>id</code> (string, optional): The ID of the statistic.</li> <li><code>name</code> (string, required): The name of the statistic.</li> <li><code>op</code> (string, required): The operator to be used when evaluating the statistic. The values can be:</li> <li>\"&gt;\"</li> <li>\"&lt;\"</li> <li>\"&gt;=\"</li> <li>\"&lt;=\"</li> <li>\"=\"</li> <li><code>type</code> (string, required): The type of the statistic. The values can be \"Min\", \"Max\", \"Avg\", or \"Last\".</li> <li><code>value</code> (number, required): The values to be compared to the statistic.</li> </ul>"},{"location":"automation/webload_cli/#optional-statistics-names","title":"Optional statistics names","text":"<ul> <li>Aborted Rounds</li> <li>Attempted Connections</li> <li>Connect Time</li> <li>Connection Speed (Bits Per Second)</li> <li>Content Size</li> <li>DNS Lookup Time</li> <li>Failed Connections</li> <li>Failed Hits</li> <li>Failed Hits Per Second</li> <li>Failed Rounds</li> <li>Failed Rounds Per Second</li> <li>Hit Time</li> <li>Hits</li> <li>Hits Per Second</li> <li>Load Size</li> <li>Page Time</li> <li>Pages</li> <li>Pages Per Second</li> <li>Packets Sent</li> <li>Packets Sent Per Second</li> <li>Process Time</li> <li>Receive Time</li> <li>Response Data Size</li> <li>Response Time</li> <li>Return status</li> <li>Round Time</li> <li>Rounds</li> <li>Rounds Per Second</li> <li>Send Time</li> <li>Successful Connections</li> <li>Successful Hits</li> <li>Successful Hits Per Second</li> <li>Successful Rounds</li> <li>Successful Rounds Per Second</li> <li>Successful Transactions</li> <li>Successful Transactions Per Second</li> <li>Throughput (Bytes Per Second)</li> <li>Time To First Byte</li> <li>Transaction Time</li> <li>Transactions</li> <li>Transactions Per Second</li> </ul>"},{"location":"automation/webload_cli/#successoptions-object-optional","title":"SuccessOptions (object, optional)","text":"<p>This object specifies the success options for the test. combination of the following:</p> <ul> <li><code>FailSevereError</code> (boolean):  Fail the test if a severe error occurs during the test run.</li> <li><code>FailOnErrorsCount</code> (boolean):  Fail the test if the number of errors is higher than.</li> <li><code>FailOnErrorCountNumber</code> (number): The number of errors that should occur before the test fails.</li> <li><code>FailOnWarningsCount</code> (boolean): Fail the test if the number of warnings is higher than</li> <li><code>FailOnWarningCountNumber</code> (number): The number of warnings that should occur before the test fails.</li> <li><code>FailOnError</code> (boolean): Stop the test when a failure occours.</li> </ul>"},{"location":"automation/webload_cli/#sample-json-code-simple","title":"Sample Json code - simple","text":"<pre><code>{\n    \"test\": {\n        \"name\": \"simple script test\",        \n        \"agendas\": [\n            {\n                \"agendaname\": \"myAgenda\",\n                \"agendapath\": \"C:\\\\data\\\\myAgenda.wlp\"\n            }\n        ],\n        \"loadGenerator\": [\n            {\n                \"name\": \"localhost\",\n                \"type\": \"PC\"\n            }\n        ],        \n        \"schedule\": {\n            \"RampUpTime\": 20,\n            \"Duration\": 30,\n            \"RampDownTime\": 20,\n            \"MaxVC\": 100\n        }        \n    }\n}\n</code></pre>"},{"location":"automation/webload_cli/#sample-json-code-advanced","title":"Sample Json code - advanced","text":"<pre><code>{\n    \"test\": {\n        \"name\": \"Detailed script test\",\n        \"type\": \"agenda\",\n        \"agendas\": [\n            {\n                \"agendaname\": \"myAgenda\",\n                \"agendapath\": \"C:\\\\myAgenda.wlp\",\n                \"percentage\": 50,\n                \"execoptions\": [\n                    {\n                        \"Name\": \"UserAgentOption\",\n                        \"Value\": \"Mozilla/5.0\"\n                    }\n                ],\n                \"SleepOptions\": {\n                    \"SleepType\": \"1\",\n                    \"SetMaxSleepTime\": true,\n                    \"MaxSleepTime\": 10\n                }\n            },\n            {\n                \"agendaname\": \"jsBasedScript\",\n                \"agendapath\": \"C:\\\\jsBasedScript.js\",\n                \"percentage\": 50\n            }\n        ],\n        \"locations\": [\n            {\n                \"name\": \"us_east1\",\n                \"distribution\": 50\n            },\n            {\n                \"name\": \"us_west1\",\n                \"distribution\": 50\n            }\n\n        ],        \n        \"schedule\": {\n            \"RampUpTime\": 60,\n            \"Duration\": 10,\n            \"RampDownTime\": 20,\n            \"MaxVC\": 100,\n            \"LimitRounds\": true,\n            \"Rounds\": 20\n        },\n        \"slaManager\": [\n            {\n                \"name\": \"Check login time and page time\",\n                \"operator\": \"or\",\n                \"stats\": [\n                    {\n                        \"name\": \"Login Time\",\n                        \"type\": \"Current Value\",\n                        \"op\": \"&gt;\",\n                        \"value\": 10\n                    },\n                    {\n                        \"name\": \"Page Time\",\n                        \"type\": \"Current Value\",\n                        \"op\": \"&gt;\",\n                        \"value\": 5\n                    }\n                ],\n                \"message\": \"Login or page time is too high\",\n                \"msg\": \"2\"\n            }\n        ],\n        \"successOptions\": {\n            \"FailOnError\": true,\n            \"FailOnErrorsCount\": true,\n            \"FailOnErrorCountNumber\": 10,            \n            \"FailSevereError\": true\n        }\n    }\n}\n</code></pre>"},{"location":"automation/webload_cli/#generating-an-analytics-report-through-the-cli","title":"Generating an Analytics Report through the CLI","text":"<p>WebLOAD Analytics can be executed in command line mode. This enables incorporating WebLOAD Analytics in scripts. Two executables are available:</p> <ul> <li>WLAnalyticsCMD.exe \u2013 Automatically generates a report for a specified session, and publishes or prints it. WebLOAD Analytics then closes.</li> <li>WLAnalytics.exe \u2013 Launches the WebLOAD Analytics UI, and generates a report for a specified session.</li> </ul> <p>The executables are located in <code>&lt;Installation dir&gt;\\bin</code>.  For example:</p> <p><code>C:\\Program Files\\RadView\\WebLOAD\\bin.</code></p>"},{"location":"automation/webload_cli/#running-wlanalyticscmdexe","title":"Running WLAnalyticsCMD.exe","text":"<p>Use this executable to generate a report for a specified session, and publish or print it.</p>"},{"location":"automation/webload_cli/#syntax_3","title":"Syntax","text":"<p>WLAnalyticsCmd.exe \u2013m U|P {-t template_path}|{-p portfolio_path}</p> <p>{-s session_name}|{-ls session_path} [-f DOC|ODT|HTML|XLS|RTF|PDF] [-l report_location] [-n output_report_name] [-h]</p>"},{"location":"automation/webload_cli/#parameters_2","title":"Parameters","text":"ParameterDescriptionComments -m<p>Indicates the action. Specify one of the following</p><p>U \u2013 Publish.</p><p>P \u2013 Print.</p>Mandatory parameter. -t template_path<p>Generates a chart from a specified template.</p><p>You must specify the path to the template directory (either absolute or relative to the gallery).</p><p></p><p></p><p>You must specify one of the two options:</p><p>-t or \u2013p.</p> -p portfolio_path<p>Generates a report from a portfolio.</p><p>You must specify the path to the portfolio directory (either absolute or relative to the Portfolio category).</p> -s session_name<p>Specifies a session already loaded into WebLOAD. You must specify the session name.</p><p>Note: You can use this parameter multiple times to specify multiple sessions. This is necessary if you are generating a regression chart.</p><p></p><p></p><p></p><p></p><p></p><p></p><p>You must specify one of the two options:</p><p>-s or \u2013ls.</p> -ls session_path<p>Specifies a load session file to import into WebLOAD.</p><p>You must specify the full path.</p><p>Note: You can use this parameter multiple times to load multiple sessions. This is necessary if you are generating a regression chart.</p> -f<p>Specifies the output format for a published report. Select one of the following: DOC, ODT, HTML, XLS, RTF, or PDF.</p><p>If you do not specify an output format, the default format, specified in Analytics Preferences, is used.</p>Optional parameter. -l report_location<p>Specifies the location of the published report.</p><p>If you do not specify a location, the default location, specified in Analytics Preferences, is used.</p>Optional parameter. <p>-n</p><p>output_report_name</p>Specifies a name for the newly created report. If you do not specify a name, the application provides a default name.Optional parameter. -hDisplays the help.Optional parameter. <p>Note: Note that you must specify:</p> <ul> <li>Publish or print.</li> <li>A template or portfolio.</li> <li>A session, either previously loaded or to be imported.</li> </ul>"},{"location":"automation/webload_cli/#examples_2","title":"Examples","text":"<p>Example 1:</p> <p>To load the <code>mysession.ls</code> Load Session, generate a \u2018General/Load Size Summary\u2019 chart, and publish it in the default file format, in the default location, under the name <code>test-report</code>:</p> <p><code>WLAnalyticsCmd.exe -m U -t \"General\\Load Size Summary\" -ls \"C:\\mysession.ls\" \u2013n \"test-report\"</code></p> <p>Example 2:</p> <p>To use the loaded <code>first-session</code> Load Session, generate a \u2018Summary Portfolio\u2019 portfolio, and print it:</p> <p><code>WLAnalyticsCmd.exe -m P -p \"Summary Portfolio\" -s \u201cfirst- session\"</code></p> <p>Example 3:</p> <p>To use the loaded <code>first-session</code> and <code>second-session</code> Load Sessions, generate a \u2018Regression/Load Size Summary\u2019 regression chart, and publish it as a PDF file in C:\\myreports, using a default name:</p> <p><code>WLAnalyticsCmd.exe -m U -t \"Regression\\Load Size Summary\" -s</code></p> <p><code>\u201cfirst-session\" -s \"second-session\" \u2013f PDF \u2013l \u201cc:\\myreports\u201d</code></p>"},{"location":"automation/webload_cli/#running-wlanalyticsexe","title":"Running WLAnalytics.exe","text":"<p>Use this executable to open the WebLOAD Analytics UI, and open a report or generate a report for a specified session.</p>"},{"location":"automation/webload_cli/#syntax_4","title":"Syntax","text":"<p><code>WLAnalytics.exe {-t template_path}|{- p portfolio_path}</code></p> <p><code>{-s session_name}|{-ls session_path} [-h] [-noSplash]</code></p>"},{"location":"automation/webload_cli/#parameters_3","title":"Parameters","text":"ParameterDescriptionComments -t template_path<p>Generates a chart from a specified template.</p><p>You must specify the path to the template directory (either absolute or relative to the gallery).</p><p></p><p></p><p>You must specify one of the two options:</p><p>-t or \u2013p.</p> -p portfolio_path<p>Generates a report from a portfolio.</p><p>You must specify the path to the portfolio directory (either absolute or relative to the Portfolio category).</p> -s session_name<p>Specifies a session already loaded into WebLOAD. You must specify the session name.</p><p>Note: You can use this parameter multiple times to specify multiple sessions. This is necessary if you are generating a regression chart.</p><p></p><p></p><p></p><p></p><p></p><p></p><p>You must specify one of the two options:</p><p>-s or \u2013ls.</p> -ls session_path<p>Specifies a load session file to import into WebLOAD.</p><p>You must specify the full path.</p><p>Note: You can use this parameter multiple times to load multiple sessions. This is necessary if you are generating a regression chart.</p> -hDisplays the help.Optional parameter. -noSplashLaunches without a Splash screen.Optional parameter. <p>Note: Note that you must specify:</p> <ul> <li>A template, report, or portfolio.</li> <li>A session, either previously loaded or to be imported. </li> </ul>"},{"location":"automation/webload_cli/#examples_3","title":"Examples","text":"<p>Example 1:</p> <p>To open the WebLOAD Analytics UI, load the mysession.ls Load Session, and generate a \u2018General/Load Size Summary\u2019 chart:</p> <p><code>WLAnalytics.exe -t \"General\\Load Size Summary\" -ls \"C:\\mysession.ls\"</code></p> <p>Example 2:</p> <p>To open the WebLOAD Analytics UI, use the loaded first-session Load Session, and generate a \u2018Summary Portfolio\u2019 portfolio:</p> <p><code>WLAnalytics.exe -p \"Summary Portfolio\" -s \u201cfirst-session\"</code></p>"},{"location":"automation/webload_cli/#running-webload-recorder-testing-through-the-cli","title":"Running WebLOAD Recorder Testing through the CLI","text":"<p>You can initiate WebLOAD Recorder testing directly through the CLI. You can enter the WebLOAD Recorder launch command into a batch file or into an external script and WebLOAD Recorder will run directly, without user intervention, using the parameters specified.</p> <p>To run WebLOAD Recorder testing through the CLI:</p> <p>Enter the WebloadRecorder.exe command together with a series of optional parameters (described below) into your external script to automatically launch a WebLOAD Recorder test. When your script runs, the executable file will invoke WebLOAD Recorder and run the specified test according to the specified parameters.</p>"},{"location":"automation/webload_cli/#syntax_5","title":"Syntax","text":"<p>Use the following syntax to define the parameters for running a WebLOAD Recorder test through a Command Line Interface.:</p> <p><code>webloadide.exe [&lt;flags&gt;][&lt;project or session name to open&gt;] [&lt;session name to save to&gt;][&lt;Number of rounds to run&gt;]</code></p> <p>To run more than one session, append all relevant parameters at the end of the syntax. See examples 2 and 3 in Examples.</p>"},{"location":"automation/webload_cli/#parameters_4","title":"Parameters","text":"<p>When running a test invoked by the executable, you can specify the following parameters:</p> Parameter Description Comments Flags <p>/a - auto run</p><p>Automatically run the WebLOAD Recorder test without waiting for user input. If this flag is not specified, WebLOAD Recorder is opened with the specified project / session but the test is not automatically run. The system waits for user input.</p><p>/r - auto record</p><p>Start Recorder in recording mode - can be used for recording automation. Can also add  <code>/time</code> X to automatically stop recording after X seconds, for example  /time 30. Specify the <code>.wlp</code> (or .js) to save to. You can also use special link to control the recording - add transactions and stop recorindg, see Special Links </p> Optional parameter Project or session name to open The name of the <code>.wlp</code> file or <code>.wls</code> file (Project file or Session file) to run. Optional parameter Session name to save to The name of the <code>.wls</code> file containing the test data. This file will be saved in the current directory unless otherwise specified. Optional parameter Number of rounds to run The number of iterations to run during runtime. The default value is 1. Optional parameter <p>The parameters are all optional. If no parameters are entered, the executable launches WebLOAD Recorder and does not run a test. If the autorun flag  flag is not set, the <code>&lt; Session name to save to &gt;</code>, and the &lt; Number of rounds to run &gt; parameters are ignored.</p>"},{"location":"automation/webload_cli/#examples_4","title":"Examples","text":"<p>Example 1:</p> <p><code>WebloadRecorder.exe /r test1.wlp /time 60</code></p> <p>Start WebLOAD Recorder in Recording mode, ready to record any traffic that goes to localhost:9884 - for automation, point the traffic to this proxy. Save results to test1 project file and waits for user input. Stop recording after 60 seconds, or when getting stop signal. To stop or add transactions see special links.</p> <p>Tip: To correlate script automatically upon recording, change in WebLOAD Recorder, Tools -&gt; Recording and script generation options -&gt; Correlation Options -&gt; Correlation level to 'Use existing rules' or 'Discover rules' to trigger correlation for recorded scripts.</p> <p>Example 2:</p> <p><code>WebloadRecorder.exe test1.wlp</code></p> <p>This command opens WebLOAD Recorder with the test1 project file and waits for user input.</p> <p>Example 3:</p> <p><code>WebloadRecorder.exe /a test1.wlp test2.wlp 3</code></p> <p>This command:</p> <ul> <li> <p>Opens WebLOAD Recorder and automatically runs a test using the test1.wlp project file.</p> </li> <li> <p>Runs the project for three iterations.</p> </li> <li> <p>Saves the test results in the WebLOAD Recorder session file test1.wls, which includes all of the test data and results.</p> </li> </ul> <p>Example 4:</p> <p><code>WebloadRecorder.exe /a test1.wlp test1.wls 3 /a test2.wlp test2.wls 2</code></p> <p>This command:</p> <ul> <li> <p>Opens WebLOAD Recorder and automatically runs a test using the test1.wlp project file.</p> </li> <li> <p>Runs the project test1.wlp for three iterations.</p> </li> <li>Saves the test results in the WebLOAD Recorder session file test1.wls, which includes all of the test data and results.</li> <li>Opens the WebLOAD Recorder project file test2.wlp.</li> <li>Runs the project test2.wlp for two iterations.</li> <li>Saves the test results in the WebLOAD Recorder session file test2.wls, which includes all of the test data and results.</li> </ul>"},{"location":"automation/webload_cli/#special-link-during-recording","title":"Special Link During Recording","text":"<p>During recording, you can use these special links to trigger special behavior. This can be useful when automating recroding that is done through another software, for example when the script is running from Selenium and being recorded by WebLOAD.</p> <ul> <li><code>https://www.radview.com/stop-recording/</code> - instructs the recording to end</li> <li><code>https://www.radview.com/begin-transaction/?name=</code> - Add BeginTransaction with the given name</li> <li><code>https://www.radview.com/end-transaction/?name=</code> - Add EndTransaction with the given name</li> <li><code>https://www.radview.com/code-block/?</code> - Add JavaScript code block, See Adding Custom Code During Recording</li> </ul>"},{"location":"automation/webload_cli/#adding-custom-code-during-recording","title":"Adding Custom Code During Recording","text":"<p>WebLOAD Recorder allows you to inject custom JavaScript code into your test script while recording, by making a request to specific special URL. This is useful for Recording automation - you can use any automation platform that is capable of making requests - for example Selenium + Python, or Playright + nodejs, etc. Make an HTTP request to <code>https://www.radview.com/code-block/?</code></p> <p>Append query parameters to specify:</p> <ul> <li>The JavaScript code to inject</li> <li>The sections where the code should be inserted: <code>InitClient</code>, <code>InitAgenda</code>, <code>TerminateClient</code>, <code>TerminateAgenda</code></li> </ul>"},{"location":"automation/webload_cli/#parameters_5","title":"Parameters","text":"Parameter Description <code>JS</code> Optional. The JavaScript code to insert. <code>InitClient</code> Optional. Code will be inserted into the Init Client section. <code>InitAgenda</code> Optional. Code will be inserted into the Init Agenda section. <code>TerminateClient</code> Optional. Code will be inserted into the Terminate Client section. <code>TerminateAgenda</code> Optional. Code will be inserted into the Terminate Agenda section. <ul> <li>At least one of the parameters must be specified.</li> <li>All parameters must be URL- encoded.</li> </ul>"},{"location":"automation/webload_cli/#examples_5","title":"Examples","text":""},{"location":"automation/webload_cli/#insert-code-into-the-main-recording-agenda","title":"Insert code into the main recording agenda","text":"<p><code>https://www.radview.com/code-block/?JS=doLogin%28%22user%22%2C%20%22password%22%29</code></p>"},{"location":"automation/webload_cli/#codeblock-created","title":"CodeBlock created","text":"<pre><code>/***** WLIDE - ID:2 - CodeBlock *****/\ndoLogin(\"user\", \"password\")\n// END WLIDE\n</code></pre>"},{"location":"automation/webload_cli/#insert-code-into-multiple-specific-sections","title":"Insert code into multiple specific sections","text":"<p><code>https://www.radview.com/code-block/?JS=InfoMessage(%22dd%22)&amp;InitClient=message2&amp;InitAgenda=3&amp;TerminateClient=4&amp;TerminateAgenda=9</code></p>"},{"location":"automation/webload_jenkins/","title":"Running WebLOAD in Jenkins","text":"<p>Jenkins CI is a Continuous Integration server that is growing in popularity. Agile development teams use Jenkins to run their builds, tests and deployments as well as their performance tests if possible. Jenkins is extendable by means of plugins. As of WebLOAD 10.1, a WebLOAD plugin is available for Jenkins.</p> <p>To run WebLOAD jobs in Jenkins, you must:</p> <ol> <li> <p>Install a Jenkins CI server.</p> <p>Jenkins needs to be able to control a full WebLOAD installation (in which both the WebOLAD Console and WebOLAD Analytics are installed, and which has an active license). This can be done either by installing the Jenkins Master on the WebLOAD machine, or by setting up a Jenkins Slave (recommended).</p> <p>For instructions, refer to the Jenkins documentation at http://jenkins-ci.org/*.</p> <p>Note: If Jenkins is running as a Service, make sure that you are using a logged in user, and not the Local System Account.</p> </li> <li> <p>Install the WebLOAD plugin in Jenkins. This is a one-time task. Refer to Installing the WebLOAD Plugin for Jenkinsbelow.</p> </li> <li> <p>Define a WebLOAD job in Jenkins whenever desired. Refer to Creating a WebLOAD Job in Jenkins.</p> </li> </ol>"},{"location":"automation/webload_jenkins/#installing-the-webload-plugin-for-jenkins","title":"Installing the WebLOAD Plugin for Jenkins","text":"<p>To install the WebLOAD Plugin for Jenkins:</p> <ol> <li> <p>In the Jenkins dashboard (homepage), click Manage Jenkins.</p> <p></p> </li> <li> <p>In the Manage Jenkins page, click Manage Plugins.</p> <p></p> </li> <li> <p>Select the Available tab.</p> <p></p> </li> <li> <p>In the Available page:</p> <ol> <li>Select the WebLOAD Plugin in the list.</li> <li>Click Install without restart.</li> </ol> <p>You are returned to the Jenkins dashboard.</p> </li> </ol>"},{"location":"automation/webload_jenkins/#creating-a-webload-job-in-jenkins","title":"Creating a WebLOAD Job in Jenkins","text":"<ol> <li> <p>In the Jenkins dashboard (homepage), click New Job.</p> <p></p> </li> <li> <p>Enter a name for the new job, and define the type of job by selecting from the options displayed under the job name. Typically you might select Build a free- style software project or Copy existing Job.</p> <p></p> </li> <li> <p>Click OK.</p> <p>A standard Jenkins New Job page appears.</p> <p></p> </li> <li> <p>Define the project (for help, refer to Jenkins documentation). For example, you might click Build periodically to define a project that runs automatically every Thursday at 2 AM.</p> </li> <li> <p>In the Build section, click Add build step and select a step. The two steps offered by the WebLOAD plugin are Execute WebLOAD load session and Generate WebLOAD Analytics Report.</p> <p></p> <p>The screen refreshes to enable defining the settings of the build step. Refer to:</p> <ul> <li> <p>Defining the Execute Load Session Build Step </p> </li> <li> <p>Defining the Generate Analytics Report Build Step </p> </li> </ul> </li> <li> <p>Repeat the previous step as many times as desired to add as many build actions as desired.</p> </li> <li> <p>Click Add post-build action and specify a post-build action or actions. For example, if you specified the JUNIT output format for an Analytics report, you can select Publish JUnit test result report.</p> <p></p> </li> <li> <p>Click Save or Apply.</p> </li> </ol>"},{"location":"automation/webload_jenkins/#defining-the-execute-load-session-build-step","title":"Defining the Execute Load Session Build Step","text":"<p>If you select Execute WebLOAD load session as a build step, the following appears:</p> <p></p> <ol> <li> <p>Optionally click Advanced to further refine your definitions. The following appears:</p> <p></p> </li> <li> <p>Enter information in the fields, as described in this table.</p> Parameter Description Template File The name and path of the <code>*.tpl</code> (Template file) or <code>*.ls</code> file (Load Session file) to run. The template defines which agenda to run, on which load generator, and for how long. Load Session File <p>The name of the Load Session results file (*.ls) that will store the load session results. If you do not enter a name, the template file name will be used (and the .tpl suffix will be replaced with .ls)</p><p>This file will be saved in the workspace unless you enter a different path.</p> Execution duration The length of time (in seconds) that the test is to run. This setting overrides the template definitions. Allocate floating Virtual Clients The number of Virtual Client licenses to allocate when using WebRM License Server. Allocate floating Probing Clients The number of Probing Client licenses to allocate when using WebRM License Server. </li> </ol>"},{"location":"automation/webload_jenkins/#defining-the-generate-analytics-report-build-step","title":"Defining the Generate Analytics Report Build Step","text":"<p>If you select Generate WebLOAD Analytics Report as a build step, the following appears:</p> <p></p> <ol> <li> <p>Optionally click Advanced to further refine your definitions. The following appears:</p> <p></p> </li> <li> <p>Enter information in the fields, as described in this table.</p> Parameter Description Input Load Session File The Load Session file name (*.ls) for which to generate a report. The Load Session file was created by executing a WebLOAD Console load session. Output format <p>The output format of the report. Select one of the following:</p><p>- JUNIT - JUnit XML Report. Can be used in conjunction with the Post Build step Publish JUnit test result report. Available from WebLOAD 10.1.</p><p>- HTML - HTML Report</p><p>- DOC - Microsoft Word document</p><p>- ODT - OpenDocument format</p><p>- XLS - Microsoft Excel spreadsheet</p><p>- XLSX - Microsoft Excel spreadsheet (2007 and newer)</p><p>- RTF - Rich Text Format</p><p>- PDF - Portable Document Format</p><p>- CSV - Comma Separated Values (text)</p><p>- RAW - Export the report raw data in CSV (text) format</p> Portfolio Name <p>The templates portfolio to use in order to generate the report. You can specify any portfolio created in the WebLOAD Analytics tool. Note that the predefined portfolios are:</p><p>- Summary Portfolio \u2013 used by default</p><p>- Regression Portfolio \u2013 use when comparing several sessions. Available from WebLOAD 10.1</p><p>- Session Comparison Portfolio \u2013 use when comparing to a single baseline session</p><p>- Extended Summary Portfolio</p> Report name <p>The name of the generated report.</p><p>The name is used both as the report title and as the output filename. If you do not specify a name, the application provides a default name.</p> Compare to previous builds Compare to the session results of the defined number of previous builds. For example, if you enter 8, the report will compare the current build with the past eight builds. The previous result files (.ls) are expected to have the same name, in the previous build artifacts. Compare to sessions Compare to these specified Load Session files. The sessions should be entered as a comma separated list of *.ls files. Use absolute paths, or paths that are relative to the workspace. Location The location of the generated report, relative to the workspace. </li> </ol>"},{"location":"automation/webload_jenkins/#common-usage-scenarios-of-an-analytics-build-action","title":"Common Usage Scenarios of an Analytics Build Action","text":""},{"location":"automation/webload_jenkins/#generate-a-summary-report-of-the-last-build","title":"Generate a summary report of the last build","text":"<p>Used to present the results of the recently-run load session.</p> <ul> <li>Input Load Session File: The Load Session from the Execute Console command.</li> <li>Output format: PDF, DOC or HTML</li> <li>Portfolio Name: Summary Portfolio</li> </ul>"},{"location":"automation/webload_jenkins/#compare-last-build-to-x-number-of-previous-builds","title":"Compare last build to X number of previous builds","text":"<p>Used for regression testing against several previous runs of the Jenkins job (builds).</p> <ul> <li> <p>Input Load Session File: The Load Session from the Execute Console command.</p> </li> <li> <p>Output format: PDF, DOC or HTML</p> </li> <li> <p>Portfolio Name: Regression Portfolio</p> </li> <li> <p>Compare to previous builds: Number of previous builds to compare with, for example 8.</p> </li> </ul>"},{"location":"automation/webload_jenkins/#compare-last-build-to-a-known-session","title":"Compare last build to a known session","text":"<p>Used to compare the results to a base / benchmark load session.</p> <ul> <li>Input Load Session File: The Load Session from the Execute Console command.</li> <li>Output format: PDF, DOC or HTML</li> <li>Portfolio Name: Session Comparison Portfolio</li> <li>Compare to sessions: Path to the base session file, for example <code>C:\\base_results.ls</code></li> </ul>"},{"location":"automation/webload_jenkins/#generate-a-report-in-junit-format-for-the-last-build","title":"Generate a report in JUnit format for the last build","text":"<p>Used to export the validation results in JUnit format.</p> <ul> <li>Input Load Session File: The Load Session from the Execute Console command.</li> <li>Report Name: Enter a name for the report. For example, entering \u2018result\u2019 will create a \u2018result.xml\u2019 file.</li> <li>Output format: JUNIT</li> <li>Portfolio Name: Summary Portfolio</li> </ul> <p>Notes: </p> <ul> <li>Only templates with Validation Rules are exported.</li> <li>You can optionally instruct Jenkins to display the generated report. To do so, click Add post-build action, select Publish JUnit test result report and specify the report file name (result.xml in our example).</li> </ul>"},{"location":"automation/webload_openapi/","title":"Running WebLOAD using the Open REST API","text":"<p>You can run WebLOAD using a new REST Open API. With this API, you can remotely activate a test, remotely create Analytics Reports, and access any statistics that WebLOAD saves during a test.</p>"},{"location":"automation/webload_openapi/#accessing-the-rest-open-api","title":"Accessing the REST Open API","text":"<p>To access the REST Open API:</p> <ol> <li> <p>Install the WebLOAD Dashboard, which is part of the regular WebLOAD installation, as follows:</p> <p>In the Select Components window of the WebLOAD installation wizard, select either of the following options:</p> <ul> <li>Select Full Installation and check the WebLOAD Dashboard checkbox to have the dashboard installed locally as part of a full installation.</li> <li>Select Dashboard Server to only install a central dashboard server.</li> </ul> <p></p> </li> <li> <p>See REST API Reference</p> </li> </ol>"},{"location":"automation/webload_openapi/#understanding-how-to-use-the-webload-rest-open-api","title":"Understanding how to use the WebLOAD REST Open API","text":"<p>A description of the method and its parameters is embedded within each method in the Open API.</p> <ul> <li>The result of the Get Analytics method is an Analytics report, in the specified format (PDF, by default).</li> <li>The result of the Post Session method is that a specified load session starts running in the Console.</li> <li>The result of the other Open API methods is retrieved data in JSON format.</li> </ul>"},{"location":"console/appendix_a/","title":"Integrating with AppDynamics","text":"<p>This section describes how to integrate WebLOAD with AppDynamics.</p> <p>AppDynamics is an Application Performance Management (APM) solution that monitors, troubleshoots, and diagnoses problems in mission-critical applications.</p> <p>By integrating WebLOAD scripts with AppDynamics you will be able to identify slow or problematic transactions of scripts run by WebLOAD test sessions. The integration consists of two tasks:</p> <ol> <li>In WebLOAD \u2013 Specifying that a WebLOAD script should add a line in all transaction headers which will identify them as WebLOAD transactions. Refer toConfiguring WebLOAD Scripts for AppDynamics .</li> <li>In AppDynamics \u2013 Configuring AppDynamics to enable it to read the headers. The additional line enables AppDynamics to identify the corresponding transactions as WebLOAD transactions. Refer to Configuring AppDynamics to Recognize WebLOAD.</li> </ol>"},{"location":"console/appendix_a/#configuring-webload-scripts-for-appdynamics","title":"Configuring WebLOAD Scripts for AppDynamics","text":"<p>To enable WebLOAD for AppDynamics:</p> <ol> <li>Add the line <code>wlGlobals.AddWebLoadHeader=true</code> in the JavaScript code of the script.</li> </ol> <p>This causes WebLOAD to send extra data upon every request of the script. The extra data identifies the request as a WebLOAD request, lists the name of the currently running script, and lists the name of the corresponding transaction.</p>"},{"location":"console/appendix_a/#configuring-appdynamics-to-recognize-webload-transactions","title":"Configuring AppDynamics to Recognize WebLOAD Transactions","text":"<p>This section describes how to configure AppDynamics Lite and AppDynamics Pro to read WebLOAD transaction headers.</p>"},{"location":"console/appendix_a/#configuring-appdynamics-lite-to-recognize-webload-transactions","title":"Configuring AppDynamics Lite to Recognize WebLOAD Transactions","text":"<p>To configure AppDynamics Lite to recognize WebLOAD transactions:</p> <ol> <li> <p>In AppDynamics Lite, select Configure &gt; Transaction Detection.</p> <p></p> </li> <li> <p>In the Servlet transaction type:</p> <ol> <li>Check the option Enabled.</li> <li>Check the option Discover Transactions automatically for all Servlet requests, and name them by their URI.</li> </ol> </li> <li> <p>Click Configure Naming (adjacent to Discover Transactions automatically for all Servlet requests, and name them by their URI).</p> <p>The Servlet Transaction Naming Configuration window appears.</p> <p></p> </li> <li> <p>In the Servlet Transaction Naming Configuration window, specify the WebLOAD naming convention by performing the following:</p> <ol> <li>Select Use the full URI or Use a part of the URI.</li> <li>Select Name Transactions dynamically using part of the request.</li> <li>Select Use a header value in Transaction names.</li> </ol> </li> <li> <p>In the Header Name field, enter WebLOAD-TransactionName.</p> </li> <li>Click Save.</li> </ol> <p>When you run a WebLOAD test, AppDynamics displays the WebLOAD transactions in its Business Transactions list, as described in *Viewing WebLOAD Performance in AppDynamics.</p>"},{"location":"console/appendix_a/#configuring-appdynamics-pro-to-recognize-webload-transactions","title":"Configuring AppDynamics Pro to Recognize WebLOAD Transactions","text":"<p>In AppDynamics Pro, in addition to configuring AppDynamics to recognize WebLOAD transactions, you can also configure AppDynamics to add a \"WebLOAD- TransactionName\" prefix to each transaction name.</p> <p>To configure AppDynamics Pro to recognize WebLOAD transactions:</p> <p>Note: As a prerequisite, you must first create an account in AppDynamics. In the example shown below, the account name is called WebLOADTest.</p> <ol> <li> <p>In AppDynamics Pro, access the Applications menu and select the WebLOAD application.</p> <p></p> </li> <li> <p>Select Configure &gt; Instrumentation &gt; Transaction Detection.</p> <p></p> </li> <li> <p>In the Transaction Detection page, select the WebLOAD node (called WebLOADTest in our example) and select Use Custom Configuration for this Tier.</p> <p></p> </li> <li> <p>In Custom Rules, click the green + (plus) icon.</p> <p></p> </li> <li> <p>In the Select the Entry Point Type for this Rule window that appears, select Servlet and click Next.</p> <p>A New Business Transaction Match Rule \u2013 Servlet window appears, for defining a new rule.</p> <p></p> </li> <li> <p>Select the Transaction Match Criteria tab.</p> </li> <li> <p>In the Transaction Match Criteria tab:</p> <ol> <li>In URI, select Is Not Empty.</li> <li>In Header:<ul> <li>Select Check for parameter existence.</li> <li>In Parameter Name, enter WebLOAD-TransactionName.</li> </ul> </li> <li>Click Create Custom Match Rule.</li> </ol> </li> <li> <p>Select the new rule in the Custom Rules list.</p> <p></p> </li> <li> <p>In the Business Transaction Match Rule window that appears, select the Split Transactions Using Request Data tab.</p> <p></p> </li> <li> <p>In the Split Transactions Using Request Data tab:</p> <ol> <li>Check the option Split Transactions using request data.</li> <li>Select the option Use a header value in Transaction names and enter <code>WebLOAD-TransactionName</code> as the Header Name.</li> </ol> <p>When you run a WebLOAD test, AppDynamics displays the WebLOAD transactions in its Business Transactions list, as described in Viewing WebLOAD Performance in AppDynamics.</p> </li> </ol>"},{"location":"console/appendix_a/#viewing-webload-performance-in-appdynamics","title":"Viewing WebLOAD Performance in AppDynamics","text":"<p>After AppDynamics and WebLOAD are configured so AppDynamics can recognize WebLOAD transactions, running a load test in WebLOAD displays the corresponding business transactions in AppDynamics. You can view the WebLOAD transactions in AppDynamics to determine their health.</p> <p>To view WebLOAD transactions in AppDynamics:</p> <ul> <li>In AppDynamics, click Business Transactions to display the full list of top business transactions and their metrics.</li> </ul> <p>The below image shows a load session execution in the WebLOAD Recorder, and the corresponding view in AppDynamics Lite.</p> <p>Note that in AppDynamics Pro, the name of each WebLOAD application is prefaced with WebLOAD-TransactionName.</p> <p></p> <p>The external statistics are imported into the report.</p>"},{"location":"console/appendix_b/","title":"Integrating with Dynatrace","text":"<p>This section describes how to integrate WebLOAD with Dynatrace.</p> <p>Dynatrace is a suite of Application Performance Monitoring (APM) tools that enables in-depth real-time application monitoring.</p> <p>By integrating WebLOAD scripts with Dynatrace you can rapidly resolve and proactively prevent application performance problems. The integration consists of two tasks:</p> <ul> <li>Installing Dynatrace on your local computer.</li> <li>In WebLOAD \u2013 Enabling Dynatrace in the Dynatrace tab of the Global Options window. When Dynatrace is enabled, WebLOAD adds an identifier in all request headers which identifies them as WebLOAD requests.</li> </ul> <p>After integrating WebLOAD with Dynatrace, you can perform the following:</p> <ul> <li>Integrating with Dynatrace</li> <li>Monitoring a WebLOAD Load Session in Dynatrace</li> <li>Viewing in Dynatrace a WebLOAD Point of Interest<ul> <li>Specifying the Dynatrace System Profile</li> </ul> </li> <li>Viewing in Dynatrace the Transactions Related to WebLOAD Errors</li> </ul>"},{"location":"console/appendix_b/#monitoring-a-webload-load-session-in-dynatrace","title":"Monitoring a WebLOAD Load Session in Dynatrace","text":"<p>To monitor a WebLOAD Load Session in Dynatrace:</p> <ol> <li>Enable Dynatrace in The Dynatrace Tab .</li> <li>In the Dynatrace Monitoring page, click the Synthetic Request node.</li> </ol> <p></p> <p>A dropdown list of options appears, enabling you to access the various monitoring and drill-down options offered by Dynatrace.</p> <p></p>"},{"location":"console/appendix_b/#viewing-in-dynatrace-a-webload-point-of-interest","title":"Viewing in Dynatrace a WebLOAD Point of Interest","text":"<p>You can access Dynatrace directly from a WebLOAD\u2019s report window to view in Dynatrace the monitoring data of any point in a WebLOAD graph.</p> <p>To view Dynatrace data for a WebLOAD point of interest:</p> <ol> <li>Enable Dynatrace in The Dynatrace Tab .</li> <li>In a WebLOAD report, right-click a point in a graph and select DynaTrace.</li> </ol> <p></p> <ol> <li>A Dynatrace window appears, showing data for the time period starting from 10 minutes prior to the point of interest, and ending 10 minutes after the point of interest.</li> </ol> <p></p>"},{"location":"console/appendix_b/#specifying-the-dynatrace-system-profile","title":"Specifying the Dynatrace System Profile","text":"<p>When you enable Dynatrace in WebLOAD (refer to The Dynatrace Tab , by default WebLOAD specifies that points of interest viewed in Dynatrace will be viewed in the Monitoring system profile. If you wish to change this default setting, do the following:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Dynatrace tab.</p> </li> <li> <p>In the Timestamp field, change:</p> <p><code>rest/integration/opendashboard?source=live:Monitoring&amp;filter= tf:CustomTimeframe?</code></p> <p>To:</p> <p><code>rest/integration/opendashboard?source=live:&lt;Your-desired- system-profile&gt;&amp;filter=tf:CustomTimeframe?</code></p> </li> </ol> <p>Whenever you click a point of interest in WebLOAD and select DynaTrace, the point of interest will be displayed in the Dynatrace system profile you specified in the Timestamp field.</p>"},{"location":"console/appendix_b/#viewing-in-dynatrace-the-transactions-related-to-webload-errors","title":"Viewing in Dynatrace the Transactions Related to WebLOAD Errors","text":"<p>If an error occurs at any time during a test session, an error message displays in the Log Window. If you installed Dynatrace, you can access Dynatrace directly from WebLOAD\u2019s Log Window to view in Dynatrace the transaction associated with the error.</p> <p>To view a transaction in Dynatrace that is associated with a WebLOAD error:</p> <ol> <li> <p>Enable Dynatrace in The Dynatrace Tab .</p> </li> <li> <p>In the Log Window, double-click the paperclip icon adjacent to the error.</p> <p></p> </li> <li> <p>In the Event Viewer that appears, click the Dynatrace button</p> <p></p> </li> <li> <p>A Dynatrace window appears, displaying the details of the relevant transaction.</p> <p></p> </li> </ol>"},{"location":"console/appendix_c/","title":"Integrating with Nagios","text":"<p>This section describes how to integrate WebLOAD with Nagios. After integrating WebLOAD with Nagios, you can utilize data collected by Nagios to be used for WebLOAD monitoring purposes</p> <p>Nagios is a free and open source computer-software application that monitors systems, networks and infrastructure. Nagios offers monitoring and alerting services for servers, switches, applications and services. It alerts users when things go wrong and alerts them a second time when the problem has been resolved.</p> <p>The integration assumes you have installed and set up Nagios monitoring in your network.</p>"},{"location":"console/appendix_c/#instructing-pmm-to-collect-data-from-nagios","title":"Instructing PMM to Collect Data from Nagios","text":"<p>Nagios integration is carried out by adding the Nagios data source in the Performance Measurements Manager (PMM), and instructing the PMM which data, collected by Nagios, to retrieve.</p> <p>To instruct PMM to collect data from Nagios:</p> <ol> <li>Run the Performance Measurements Manager wizard, as described in Opening the Performance Measurements Manager .</li> <li>In the Selecting a Data Source screen, select External &gt; Nagios.</li> </ol> <p></p> <ol> <li>In the Selecting a Host screen, enter the Nagios host name, username and password.</li> </ol> <p></p> <ol> <li> <p>In the Selecting the Measurements to Monitor screen, do the following for each site/OS/host/device you wish to monitor</p> </li> <li> <p>Expand a site/OS/host/device by clicking the + adjacent to the item.</p> <p></p> </li> <li> <p>The sub components list all the statistics collected by Nagios for this item. Select the desired statistics.</p> </li> </ol> <p></p> <ol> <li> <p>After all the desired items and statistics are selected, click Next. The Wizard displays a summary of the host, data source, and measurements configured for monitoring.</p> </li> <li> <p>To accept the PMM configuration, click Finish.</p> </li> </ol> <p>The PMM Wizard closes and the selected configuration is added to the PMM main window.</p> <p></p>"},{"location":"console/appendix_c/#selecting-the-nagios-statistics-to-display-in-reports","title":"Selecting the Nagios Statistics to Display in Reports","text":"<p>After integrating WebLOAD with Nagios, you can specify, while running a session, which Nagios statistics to view in the report view.</p> <ol> <li>Open a report as described in Opening Reports .</li> <li>In the PM@<code>&lt;Nagios-host&gt;</code> node, select the statistics you wish to display in the report.</li> </ol> <p></p> <p>The following figure shows a report in Report view, displaying the statistics collected by Nagios that were selected to appear in the report.</p> <p></p>"},{"location":"console/appendix_d/","title":"Integrating with New Relic","text":"<p>This section describes how to integrate WebLOAD with New Relic. After integrating WebLOAD with New Relic, you can utilize data collected by New Relic to be used for WebLOAD monitoring purposes.</p> <p>New Relic is a cloud-based performance management solution for measuring and monitoring the performance of applications and infrastructure.</p>"},{"location":"console/appendix_d/#prerequisites","title":"Prerequisites","text":"<p>Prior to integrating New Relic in WebLOAD, make sure you fulfill the following prerequisites:</p> <ul> <li>You have installed and set up New Relic monitoring in your network.</li> <li>You have at least a New Relic PRO license.</li> <li>You have a New Relic API key, as described in Get or Generate a New Relic API Key.</li> </ul>"},{"location":"console/appendix_d/#get-or-generate-a-new-relic-api-key","title":"Get or Generate a New Relic API Key","text":"<p>To get or generate a New Relic API key:</p> <ol> <li>Access New Relic as a Pro user.</li> <li> <p>Navigate to User &gt; Account Settings.</p> <p></p> </li> <li> <p>Select Integrations &gt; API Keys.</p> <p></p> </li> <li> <p>In the API Keys page, in the Admin\u2019s API Key column, click (Show key) in the appropriate line.</p> <p></p> </li> <li> <p>Record the value of the API key. You will need to enter it in the PMM later on.</p> </li> </ol>"},{"location":"console/appendix_d/#instructing-pmm-to-collect-data-from-new-relic","title":"Instructing PMM to Collect Data from New Relic","text":"<p>New Relic integration is carried out by adding the New Relic data source in the Performance Measurements Manager (PMM), and instructing the PMM which data, collected by New Relic, to retrieve.</p> <p>To instruct PMM to collect data from New Relic:</p> <ol> <li> <p>Run the Performance Measurements Manager wizard, as described in Opening the Performance Measurements Manager.</p> </li> <li> <p>In the Selecting a Data Source screen, select External &gt; New Relic.     </p> </li> <li> <p>In the Selecting a Host screen, enter the API Key you had recorded in Get or Generate a New Relic API Key. Note that you can change the New Relic Root URL if required; in most cases the default value is the correct one.     </p> </li> <li> <p>In the Selecting the Measurements to Monitor screen, do the following for each site/OS/host/device you wish to monitor</p> <ol> <li> <p>Expand a site/OS/host/device by clicking the + adjacent to the item.</p> <p></p> </li> <li> <p>The sub components list all the statistics collected by New Relic for this item. Select the desired statistics.</p> <p></p> </li> </ol> </li> <li> <p>After all the desired items and statistics are selected, click Next. The Wizard displays a summary of the host, data source, and measurements configured for monitoring.</p> </li> <li> <p>To accept the PMM configuration, click Finish.</p> <p>The PMM Wizard closes and the selected configuration is added to the PMM main window.</p> <p></p> </li> </ol>"},{"location":"console/appendix_d/#selecting-the-new-relic-statistics-to-display-in-reports","title":"Selecting the New Relic Statistics to Display in Reports","text":"<p>After integrating WebLOAD with New Relic, you can specify, while running a session, which New Relic statistics to view in the report view.</p> <ol> <li>Open a report as described in Opening Reports .</li> <li> <p>In the PM@ node, select the statistics you wish to display in the report <p></p> <p>The following figure shows a report in Report view, displaying the statistics collected by New Relic that were selected to appear in the report.</p> <p></p>"},{"location":"console/appendix_e/","title":"WebLOAD Console Error Messages","text":"<p>This section describes the errors and log messages that can be generated by WebLOAD Console, as well as the JavaScript compiler and any human errors or user messages detected by WebLOAD Console at run-time. Log messages can also be added to the script by the user. The log messages are displayed in the Log Window.</p>"},{"location":"console/appendix_e/#message-severity","title":"Message Severity","text":"<p>Messages fall into four categories:</p> <ul> <li>Success / Info Message</li> <li>Minor Error</li> <li>Error</li> <li>Severe Error</li> </ul>"},{"location":"console/appendix_e/#success-info-message","title":"Success / Info Message","text":"<p>Success / Info Messages are added to the script by the user. Success / Info Messages can be used in order to facilitate debugging. They do not stop WebLOAD Console from running.</p>"},{"location":"console/appendix_e/#minor-error","title":"Minor Error","text":"<p>Minor Errors do not stop WebLOAD Console from running. However, they do indicate suspicious conditions. The source of the problem may be generated by the SUT, the connection to the server, networking etc.</p>"},{"location":"console/appendix_e/#error","title":"Error","text":"<p>Errors do not stop WebLOAD Console from running. However, they do stop the round and restart the script for the Virtual Client that encountered the error.</p>"},{"location":"console/appendix_e/#severe-error","title":"Severe Error","text":"<p>Severe Errors cause the Load Generator, on which the error was generated to stop immediately. A dialog box will be displayed.</p>"},{"location":"console/appendix_e/#webload-console-error-messages_1","title":"WebLOAD Console Error Messages","text":"<p>Connection errors are usually due to an error in the connection definition. For example, an incorrect name or address specification, or an incorrect proxy designation can cause an error. Most such specification errors are the result of errors in data entry. Verify your configuration settings and addresses with your system administrator.</p> <p>Careful attention to detail will prevent most errors from ever occurring. Errors are listed in alphabetical order.</p> Error Explanation Severity Analysis error Data analysis error. Error Cannot resolve DNS entry DNS address not found. Verify the URL in the JavaScript file. Severe Error Conditional GET error (HTTP code 304) Document has not been modified, as expected by a conditional GET statement. Minor Error Conflict error (HTTP code 409) Request could not be completed due to resource conflict. Check what other programs are currently running on your system. Error Connection failed Connection failed for any reason other than the reasons specified in this table. Severe Error Connection refused Connection refused by the server. Unable to access the server. Minor Error Connection timeout Connection has timed out. Reason for failure not specified. If this connection is essential for WebLOAD Console to continue, this error will be considered a Severe Error and WebLOAD Console will stop. If the rest of the test session is able to continue, this error will be a Minor Error only. Error / Severe Error Data retrieval error Data retrieval error. Cannot retrieve data from the server. Severe Error DeleteCookie error- Parameters Parameters missing from DeleteCookie function. Error DeleteCookie error-not found Error deleting cookie. Cookie not found. Error Error while reading Error reading data from the server. Error Forbidden, reason not specified (HTTP code 403) The specified URL address or server request is forbidden. Error Gateway error (HTTP code 502) Invalid gateway response to WebLOAD Console request. Error Gateway timeout (HTTP code 504) Gateway did not respond within specified timeout period. Reason for failure not specified. Error Illegal command Illegal JavaScript command. Severe Error Illegal request (HTTP code 400) Illegal server request. Error Internal server error (HTTP code 500) The server went down. Error Length required (HTTP code 411) More length is required for the current request than is presently available. Severe Error Load Generator disconnected The Load Generator was disconnected from the Console. This usually indicates that the Load Generator stopped operating due to an unexpected problem. Severe Error Method not allowed (HTTP code 405) Specified access or request method is not allowed. Severe Error No buffer space No buffer space available. Unable to access the server. Error Not Acceptable (HTTP code 406) Specified configuration, object description, parameters, authentication fields, or other submitted information is not acceptable. Severe Error Not implemented (HTTP code 501) Selected feature is not currently implemented. Severe Error Open connection failed Open connection has failed either due to an unspecified timeout or because the server refused the open connection. Error Other Failure due to any other reason not specified in this list. Severe Error Precondition failed (HTTP code 412) The current request failed due to failure in a necessary precondition to this request. Severe Error Proxy authentication required (HTTP code 407) Access to the requested proxy must be authenticated. Error Proxy required (HTTP code 305) You must use a proxy for the current test session. Minor Error Redirection error New location not found. Severe Error Request entity too large (HTTP code 413) Requested server object is too large to transfer successfully. Error Request timeout (HTTP code 408) Request was not completed within specified timeout period. Reason for failure not specified. If this request is essential for WebLOAD Console to continue, this error will be considered a Severe Error and WebLOAD Console will stop. If the rest of the test session is able to continue, this error will be of Error level only. Error / Severe Error Request URI too long (HTTP code 414) URI of requested object is too long to handle. Error Resource not available (HTTP code 410) The requested resource is not currently available from the server. Severe Error Send failed Request was not sent successfully to the server. Error Service temporarily unavailable (HTTP code 503) The specified service is temporarily not available. Error SetCookie error- Parameters Parameters missing from SetCookie function. Error SetCookie error SetCookie failure for unspecified reason. Error Socket failed <p>You are unable to reach this URL.</p><p>Stop the test session, and restart.</p> Severe Error Socket not bound <p>Socket not bound to an address.</p><p>Unable to access the server.</p> Error Unauthorized request (HTTP code 401) Request requires authorization and user authentication. For example, by specifying a username and password. Error Unsupported media type (HTTP code 415) The specified media format is not supported by WebLOAD Console at this time (for example, rewriteable CD\u2019s). Error Unsupported protocol The specified protocol is not supported by WebLOAD Console at this time (for example, fttp://\u2026). Severe Error Unsupported version of HTTP (HTTP code 505) The specified version of HTTP is not supported by WebLOAD Console at this time. Error URL not found (HTTP code 404) URL address as specified is not found. Verify the URL in the JavaScript file. Warning URL temporarily not correct (HTTP code 302) Requested resource has been temporarily moved to a different URL. Minor Error"},{"location":"console/appendix_f/","title":"Reference Materials","text":""},{"location":"console/appendix_f/#webload-console-files","title":"WebLOAD Console Files","text":"<p>The following is an explanation of the files associated with a WebLOAD Console Load Session.</p> WebLOAD Extension WebLOAD File Type WebLOAD.INI Configuration variables MONITOR.INI INI settings for the Console HOSTS.LST <p>List of local hosts sites read from your system\u2019s</p><p>LOCAL.HOSTS file</p> .JS FILES Script files for all Clients .TPL FILES Load Template files .LS FILES Load Session files .DAT FILES Load Session data files .ISD FILES Index statistics database files .SDB FILES Statistics database files .MIX FILES Script Mix files .MDB FILES Data Drilling files WebLOAD.TAR UNIX installation files .MDB Files Saved Log Window files .WLP Files WebLOAD Recorder Project files .WLS Files WebLOAD Recorder Session files .WLA Files WebLOAD Recorder Actual Repository files .WLE Files WebLOAD Recorder Expected Repository files"},{"location":"console/appendix_g/","title":"Glossary","text":"Glossary Term Description Response Time <p>The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested.</p><p>The value posted in the Current Value column is the average time it took the SUT to respond to an HTTP request during the last reporting interval.</p> Responses <p>The number of times the SUT responded to an HTTP request during the last reporting interval.</p><p>This number should match the number of successful hits.</p> Round Time <p>The time it takes one Virtual Client to finish one complete iteration of a script, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to finish one complete iteration of the script during the last reporting interval.</p> Rounds The total number of times the Virtual Clients attempted to run the script during the last reporting interval. Rounds Per Second <p>The number of times the Virtual Clients attempted to run the script, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of attempts (both successful and unsuccessful) per second during the last reporting interval.</p> Send Time <p>The time it takes the Virtual Client to write an HTTP request to the SUT, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to write a request to the SUT during the last reporting interval.</p> Server Performance Measurements <p>If you selected Performance Monitor statistics for the report, WebLOAD creates a row for them and reports their values in the Statistics Report.</p><p>For definitions of the statistics, see the Server Monitor Definition dialog box.</p><p>Be selective when choosing server performance measurements , otherwise the system resources required to manage the data might affect the Console.</p> Session Tree A graphic representation of a Load Template and status. It illustrates the different components of a test session, including Load Machines and Probing Clients, the scripts that they execute, and their status. Single Client See Probing Client Standard Deviation The average amount the measurement varies from the average since the beginning of the test. Successful Connections <p>The total number of times the Virtual Clients were able to successfully connect to the SUT during the last reporting interval.</p><p>This number is always less than or equal to the number of successful hits because several hits might use the same HTTP connection if the Persistent Connection option is enabled.</p> Successful Hits The total number of times the Virtual Clients made an HTTP request and received the correct HTTP response from the SUT during the last reporting interval. Each request for each gif, jpeg, html file, etc., is a single hit. Successful Hits Per Second <p>The number of times the Virtual Clients obtained the correct HTTP response to their HTTP requests divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful HTTP requests per second during the last reporting interval.</p> Successful Pages Per Second The value posted in the Current Value column is the number (sum) of successful requests per second during the last reporting interval. Successful Rounds The total number of times the Virtual Clients completed one iteration of the script during the last reporting interval. Successful Rounds Per Second <p>The number of times the Virtual Clients completed an entire iteration of the script, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful iterations of the script per second during the last reporting interval.</p> SUT The system running the Web application currently under test. The SUT (System Under Test) is accessed by clients through its URL address. The SUT can reside on any machine or on multiple machines, anywhere on the global Internet or your local intranet. Template See Load Template Templates Gallery The Templates Gallery is a single entity that contains predefined templates, user-defined templates, and portfolios. Test Program See Test Script Test Script The script. This defines the test scenario used in your Load Session. Scripts are written in JavaScript. Test Template See Load Template TestTalk The network agent. This program enables communication between the Console and the host computers participating in the test. Throttle Control A WebLOAD component that enables you to dynamically change the Load Size while a test session is in progress. Throughput (Bytes Per Second) The average number of bytes per second transmitted from the SUT to the Virtual Clients running the script during the last reporting interval. In other words, this is the amount of the Response Data Size, divided by the number of seconds in the reporting interval. Time to First Byte The time that elapsed since a request was sent until the Virtual Client received the first byte of data. User-defined Automatic Data Collection <p>If you have Automatic Data Collection enabled, WebLOAD creates three counters for each GET and POST statement in the script:</p><p>- The total number of times the Get and Post statements occurred</p><p>- The number of times the statements succeeded</p><p>- The number of times the statements failed during the last reporting interval.</p> User-defined counters <p>Your own counters that you can add to scripts using the SendCounter() and the SendMeasurement() functions (see the WebLOAD Scripting Guide). If there is a user-defined counter in the script that you are running, WebLOAD reports the counter\u2019s values in the Statistics Report.</p><p>The row heading is the name (argument) of the counter. That is, the row heading is the string in parenthesis in the SendCounter() or SendMeasurement() function call.</p><p>The value reported is the number of times the counter was incremented during the last reporting interval.</p> User-defined timer <p>Timers that you can add to scripts to keep track of the amount of time it takes to complete specific actions (see the WebLOAD Scripting Guide). If there are any timers in the scripts that you are running, WebLOAD reports their values in the Statistics Report.</p><p>The row heading is the name (argument) of the timer. That is, the row heading is the string in parenthesis in the SetTimer() function call. The timer represents the time it takes to complete all the actions between the SetTimer() call and its corresponding SendTimer() call, in seconds.</p><p>The value posted is the average time it took a Virtual Client to complete the actions between the pair of timer calls, in seconds, during the last reporting interval.</p> User-defined Transaction counters <p>Transaction functions that you can add to scripts for functional tests (see the WebLOAD Scripting Guide). If there is a user-defined transaction function in the script that you are running, WebLOAD reports three counters for it in the Statistics Report:</p><p>- The total number of times the transaction occurred</p><p>- The number of times a transaction succeeded</p><p>- The number of times a transaction failed during the last reporting interval.</p><p>The row heading is the name (argument) of the transaction. That is, the row heading is the string in parenthesis in the BeginTransaction() function call.</p> User-defined Transactions timers <p>A timer for user-defined transaction functions. If there is a user-defined transaction function in the script that you are running, WebLOAD reports a timer for it in the Statistics Report.</p><p>The row heading is the name (argument) of the user- defined transaction. That is, the row heading is the string in parenthesis in the BeginTransaction() function call.</p><p>The timer represents the average time it took to complete all the actions between the BeginTransaction() call and its corresponding EndTransaction() call, in seconds, during the last reporting interval.</p> Virtual Client <p>Artificial entities run by Load Generators. Each such entity is a perfect simulation of a real client accessing the System Under Test (SUT) through a Web browser.</p><p>Virtual Clients generate HTTP calls that access the SUT. The Load Generators that run Virtual Clients can reside anywhere on the Internet or on your local intranet.</p><p>Scripts are executed by all the Virtual Clients in parallel, achieving simultaneous access to the SUT. The size of the load on your SUT is determined by the number of Virtual Clients being generated. You may define as many Virtual Clients as needed, up to the maximum supported by your WebLOAD \u201cpackage.\u201d</p> WebLOAD Analytics WebLOAD Analytics enables you to analyze data, and create custom, informative reports after running a WebLOAD test session. WebLOAD Console See Console WebLOAD Recorder An easy-to-use tool for recording, creating, and authoring protocol scripts for the WebLOAD environment. WebLOAD Load Template See Load Template WebLOAD Session See Load Session WebLOAD Wizard A WebLOAD Wizard that steps you through the configuration process. Each screen of the WebLOAD Wizard contains text explaining the configuration process. The WebLOAD Wizard enables you to create a basic Load Template. After using the demo, you can use the Console menus to add functionality not available through the WebLOAD Wizard. WebRM See Resource Manager"},{"location":"console/cloud/","title":"Cloud Account Types and Their Properties","text":"<p>This document provides a detailed description of various cloud account types and their properties.</p>"},{"location":"console/cloud/#aws-ec2-cloud","title":"AWS EC2 Cloud","text":"<ul> <li>Description: AWS EC2 Cloud</li> </ul>"},{"location":"console/cloud/#parameters","title":"Parameters","text":""},{"location":"console/cloud/#credentials","title":"Credentials","text":"<ul> <li>Access Key (String; Optional): AWS Access Key. Use 'aws' or blank to use default credentials. Default credentials will try to use: Environment variables, Java system properties, The default credential profiles file, Amazon ECS container credentials, Instance profile credentials.</li> <li>Secret Access Key (Password): Secret Access Key matching the Access Key.</li> </ul>"},{"location":"console/cloud/#region","title":"Region","text":"<ul> <li>Region Name (List; Required):</li> <li>Values: us-east-1, us-west-1, us-west-2, eu-west-1, eu-west-2, eu-west-3, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, sa-east-1, af-south-1</li> <li>Default: us-east-1</li> <li>Description: AWS Region to run the instance.</li> </ul>"},{"location":"console/cloud/#instance","title":"Instance","text":"<ul> <li>Instance Type (String): Default is <code>c5.large</code>. Machine size to launch. Type needs to be available in the selected region and may have limitations like requiring VPC.</li> <li>Subnet Id (String): SubnetId. Required when using VPC. For example: subnet-60e6945c. Subnet should auto-assign a public IPv4 address.</li> </ul>"},{"location":"console/cloud/#advanced-parameters","title":"Advanced Parameters","text":"<ul> <li>Security Group Id (String): Security group id, allowing access from the console on ports 9000, 9010, 21, 10090-10100. If not specified, a 'RadView' security group will be created if it does not exist.</li> <li>Use Elastic IP (String): Default is <code>false</code>. If <code>true</code>, WebLOAD will allocate an elastic-ip to this instance if one is available.</li> <li>Use Private IP (String): Default is <code>false</code>. If <code>true</code>, WebLOAD will use the instance private-ip, not public-ip. This works only in a VPC environment where the console machine can access the load-generator.</li> <li>Custom Tag List (String): Custom tags to add to instance. Example: <code>tag1=value1;tag2=value2</code>.</li> <li>Image Id (String): Default is <code>Default</code>. Custom AMI ID expected to have WebLOAD configured and running.</li> <li>Spot Price (String): Launches instance as a spot request. Note: Spot instances depend on pricing and capacity and may be terminated without notice if the price goes up.</li> </ul>"},{"location":"console/cloud/#aws-ec2-cloud-dynamic","title":"AWS EC2 Cloud (Dynamic)","text":"<ul> <li>Description: AWS EC2 Cloud (Dynamic) - supports all regions by installing WebLOAD upon launch. Users must select an appropriate region and machine type.</li> </ul>"},{"location":"console/cloud/#parameters_1","title":"Parameters","text":""},{"location":"console/cloud/#credentials_1","title":"Credentials","text":"<ul> <li>Access Key (String; Optional): AWS Access Key. Use 'aws' or blank to use default credentials. Default credentials will try to use: Environment variables, Java system properties, The default credential profiles file, Amazon ECS container credentials, Instance profile credentials.</li> <li>Secret Access Key (Password): Secret Access Key matching the Access Key.</li> </ul>"},{"location":"console/cloud/#region_1","title":"Region","text":"<ul> <li>Region Name (String; Required):</li> <li>Default: us-east-1</li> <li>Description: AWS Region to run the instance.</li> </ul>"},{"location":"console/cloud/#instance_1","title":"Instance","text":"<ul> <li>Instance Type (String): Default is <code>c5.large</code>. Machine size to launch.</li> <li>Image Id (String): Default is <code>amzn2-ami-kernel-5.10-hvm-2.0.20240412.0-x86_64-gp2</code>. Base AMI expected to support CloudInit.</li> </ul>"},{"location":"console/cloud/#advanced-parameters_1","title":"Advanced Parameters","text":"<ul> <li>Init Script (String): Default is <code>cloud_init.sh</code>. Path to the script file to run when starting the instance. This script is expected to install and start WebLOAD. File must be in UNIX format.</li> <li>Download File Name (String): Default is <code>WebLoad-linux-v${VERSION}.${BUILD}.tar.gz</code>. Used by init-script for file download.</li> <li>Download URL (String): Default is <code>https://radview.s3.amazonaws.com/</code>. Path for downloading installation during initialization.</li> </ul>"},{"location":"console/cloud/#azure-cloud","title":"Azure Cloud","text":"<ul> <li>Description: Microsoft Azure Cloud</li> </ul>"},{"location":"console/cloud/#working-with-azure-in-webload","title":"Working with Azure in WebLOAD:","text":"<ul> <li>Create an Azure account</li> <li>Sign in the the Azure portal at https://portal.azure.com</li> <li>Go to \u201cCost Management + Billing\u201d</li> <li>View \u201cAzure Subscriptions\u201d / \u201cMy Subscriptions\u201d - note your Subscription ID</li> <li>Go to \u201cAzure Active Directory\u201d</li> <li>Goto \u201cProperties\u201d. Note the \u2018Directory ID\u2019 or \u2018Tenant ID\u2019. This is your Tenant ID</li> <li>App registrations - New Application Registration</li> <li>Type: Web app / API</li> <li>Name, URL - enter something, it\u2019s not important</li> <li>Note the Application ID - this is your identity</li> <li>Click \u2018Settings\u2019 - \u201cCertificates and Secrets\u201d (Keys - Passwords )</li> <li>Enter some description and duration and click \u2018Save\u2019, it will generate a value. Note that as your Credentials</li> <li>Add permissions</li> <li>\u2018All Services\u2019 -&gt; Subscriptions</li> <li>Click on your subscription</li> <li>\u2018Access Controls (IAM)\u2019     -\u2018+ Add\u2019 (\u2018Add role assignment\u2019)<ul> <li>Role - Contributor</li> <li>Select - type the application name you created in the previous step</li> <li>Click \u2018Save\u2019</li> </ul> </li> <li>Register providers</li> <li>\u2018All Services\u2019 -&gt; Subscriptions</li> <li>Click on your subscription</li> <li>Resource providers</li> <li>Search and \u2018Register\u2019 the following:<ul> <li>Microsoft.Advisor</li> <li>Microsoft.Compute</li> <li>Microsoft.DevTestLab</li> <li>Microsoft.Network</li> <li>Microsoft.ResourceHealth</li> <li>Microsoft.Security</li> <li>Microsoft.Storage</li> </ul> </li> <li>In WebLOAD - Tools - Cloud Options - Add Azure account with the details above</li> </ul>"},{"location":"console/cloud/#azure-parameters","title":"Azure Parameters","text":""},{"location":"console/cloud/#azure-credentials","title":"Azure Credentials","text":"<ul> <li>Identity (String; Required): Can be found in Azure Portal under Azure Active Directory &gt; App registrations &gt; Application ID.</li> <li>Credentials (Password; Required): The password value generated in Azure Active Directory &gt; App registrations &gt; Keys.</li> </ul>"},{"location":"console/cloud/#tenant-and-subscription","title":"Tenant and Subscription","text":"<ul> <li>Tenant Id (String; Required): Can be found in Azure Portal under Azure Active Directory &gt; Properties &gt; Directory ID.</li> <li>Subscription Id (String; Required): Can be found in Azure Portal under Cost Management + Billing &gt; Subscriptions.</li> </ul>"},{"location":"console/cloud/#region-region","title":"Region (Region)","text":"<ul> <li>Region Name (List; Required):</li> <li>Values: eastasia, southeastasia, centralus, eastus, eastus2, westus, northcentralus, southcentralus, northeurope, westeurope, japanwest, japaneast, brazilsouth, australiaeast, australiasoutheast, southindia, centralindia, westindia, canadacentral, canadaeast, uksouth, ukwest, westcentralus, westus2, koreacentral, koreasouth, francecentral</li> <li>Default: westus2</li> <li>Description: Region to run the instance.</li> </ul>"},{"location":"console/cloud/#advanced-parameters-azure","title":"Advanced Parameters (Azure)","text":"<ul> <li>Instance Spec (String): Default is <code>osFamily=CENTOS,osVersionMatches=8.3</code>. Specification query for instance.</li> <li>Image Publishers (String): Default is <code>OpenLogic</code>. Filters images based on publishers.</li> <li>Oauth Endpoint (String): Custom endpoint URL if required.</li> <li>Hardware Id (String): Specific hardware ID to use. Example: <code>westus2/Standard_D2as_v4</code>. Use 'list' to get options.</li> </ul>"},{"location":"console/cloud/#google-compute-engine-cloud","title":"Google Compute Engine Cloud","text":"<ul> <li>Description: Google Compute Engine. Create a project in Google Console; enable the Google Compute Engine API under APIs and auth &gt; APIs; create new Client ID as Service Account; download a JSON key and note the email address as identity.</li> </ul>"},{"location":"console/cloud/#parameters-gcp","title":"Parameters (GCP)","text":""},{"location":"console/cloud/#credentials-gcp","title":"Credentials (GCP)","text":"<ul> <li>Identity (String; Required): Identity is the service account email address.</li> <li>Credentials Path (Password; Required): Path to the service account client ID JSON Key file.</li> </ul>"},{"location":"console/cloud/#region-gcp","title":"Region (GCP)","text":"<ul> <li>Region Name (List; Required):</li> <li>Values: asia-east1-a, asia-northeast1-a, asia-south1-a, asia-southeast1-a, australia-southeast1-a, europe-north1-a, europe-west1-b, europe-west2-a, europe-west3-a, europe-west4-a, northamerica-northeast1-a, southamerica-east1-a, us-central1-a, us-east1-b, us-east4-a, us-west1-a, us-west2-a</li> <li>Default: us-west1-a</li> <li>Description: Region to run the instance.</li> </ul>"},{"location":"console/cloud/#instance-gcp","title":"Instance (GCP)","text":"<ul> <li>Min Cores (String): Default is <code>2</code>. Minimum number of CPU cores the machines should have.</li> <li>Min RAM (String): Default is <code>8000</code>. Minimum RAM in megabytes the machines should have.</li> <li>Min Disk Size (String): Minimum disk size in gigabytes the machines should have.</li> </ul>"},{"location":"console/cloud/#advanced-parameters-gcp","title":"Advanced Parameters (GCP)","text":"<ul> <li>Instance Spec (String): Default is <code>osFamily=CENTOS,osVersionMatches=8</code>. Specification query for instance.</li> <li>Hardware Id (String): Specific hardware ID to use. Use 'list' to get the available options.</li> <li>Credentials Out Path (String): When set, WebLOAD will store the access credentials in the specified path.</li> <li>Location Id (String): Location inside the region to use.</li> <li>Endpoint URL (String): Custom endpoint URL if required.</li> <li>Network (String): Network to use.</li> <li>Init Script (String): Path to a script file to run when starting the instance. This script is expected to install and start WebLOAD. File must be in UNIX format.</li> <li>Cloud Init (String): Default is <code>true</code>. Use cloud-init metadata to specify init-script; otherwise, connect using SSH and execute the script.</li> <li>Public Key (String): Existing SSH public key to authorize.</li> <li>SSH User (String): SSH user to use.</li> <li>SSH Password (String): SSH password to use.</li> <li>Private Key Path (String): Path to the SSH private key to use.</li> <li>Key Name (String): Key name to use for SSH Key pair access.</li> <li>Sudo Command (String): Default is <code>sudo</code>. Command to use when needing to run as root.</li> <li>Sh-Bang (String): Default is <code>#!/bin/bash</code>. The init script's first line.</li> <li>Download File Name (String): Default is <code>WebLoad-linux-v${VERSION}.${BUILD}.tar.gz</code>. Used by the init script to download files.</li> <li>Download URL (String): Default is <code>https://radview.s3.amazonaws.com/</code>. Used by the init script as the path to download installation files.</li> <li>Async (String): Default is <code>true</code>. If <code>true</code>, the machines will start asynchronously.</li> <li>Selenium Support (String): Default is <code>false</code>. If <code>true</code>, install Google Chrome for Selenium support.</li> <li>Security Group Id (String): Security group that allows access from the console on ports 9000, 9010. Created on the fly if not specified.</li> </ul>"},{"location":"console/cloud/#amazon-ecs-cloud","title":"Amazon ECS Cloud","text":"<ul> <li>Description: Amazon Elastic Container Service (ECS) facilitates containerized application deployment and management.</li> </ul>"},{"location":"console/cloud/#parameters-ecs","title":"Parameters (ECS)","text":""},{"location":"console/cloud/#credentials-ecs","title":"Credentials (ECS)","text":"<ul> <li>Access Key (String; Optional): AWS Access Key for authentication.</li> <li>Secret Access Key (Password; Optional): Matches the Access Key for secure authentication.</li> </ul>"},{"location":"console/cloud/#region-ecs","title":"Region (ECS)","text":"<ul> <li>Region Name (List; Required):</li> <li>Values: Includes various global regions for deploying ECS resources.</li> <li>Default: us-east-1</li> <li>Description: Defines the deployment region for containerized resources.</li> </ul>"},{"location":"console/cloud/#instance-ecs","title":"Instance (ECS)","text":"<ul> <li>Subnet Id (String): Specifies the subnet for deploying ECS tasks.</li> <li>Cluster (String): Default is <code>default</code>. Specifies the ECS cluster for resource allocation.</li> <li>CPU (String): Default is <code>2 vCPU</code>. Configures the number of virtual CPUs.</li> <li>Memory (String): Default is <code>4 GB</code>. Specifies memory allocation for tasks.</li> </ul>"},{"location":"console/cloud/#advanced-parameters-ecs","title":"Advanced Parameters (ECS)","text":"<ul> <li>Security Group Id (String): Defines security settings for task access.</li> <li>Execution Role (String): Default is <code>ecsTaskExecutionRole</code>. Specifies the role granting API permissions for ECS tasks.</li> <li>Image Id (String): Default is <code>Default</code>. Indicates a custom Docker image.</li> <li>Custom Tag List (String): Allows custom tagging of ECS tasks for better organization.</li> <li>Proxy Configurations (Multiple Parameters): Defines proxy-related configurations for network setups.</li> </ul>"},{"location":"console/cloud/#generic-cloud-jclouds-based","title":"Generic Cloud (Jclouds-based)","text":"<p>The Jclouds-based Generic Cloud supports various cloud providers and offers flexibility for configuring and managing cloud instances. The cloud implementation allows for interoperability across multiple cloud platforms, including AWS, Azure, Google Compute Engine, and others.</p>"},{"location":"console/cloud/#parameters-generic","title":"Parameters (Generic)","text":""},{"location":"console/cloud/#cloud-provider-generic","title":"Cloud Provider (Generic)","text":"<ul> <li>Provider (String; Required)</li> <li>Default Value: <code>aws-ec2</code></li> <li>Description: Specifies the cloud provider. Supported values include:<ul> <li>digitalocean2</li> <li>elastichosts-lon-b</li> <li>elastichosts-lon-p</li> <li>elastichosts-sat-p</li> <li>go2cloud-jhb1</li> <li>gogrid</li> <li>openhosting-east1</li> <li>profitbricks</li> <li>rackspace-cloudservers-uk</li> <li>rackspace-cloudservers-us</li> <li>serverlove-z1-man</li> <li>skalicloud-sdg-my</li> <li>softlayer</li> <li>byon</li> <li>cloudstack</li> <li>docker</li> <li>ec2</li> <li>elasticstack</li> <li>stub</li> <li>openstack-nova</li> <li>openstack-nova-ec2</li> <li>aws-ec2</li> <li>azurecompute</li> <li>azurecompute-arm</li> <li>google-compute-engine</li> </ul> </li> </ul>"},{"location":"console/cloud/#credentials-generic","title":"Credentials (Generic)","text":"<ul> <li>Identity (String; Required)</li> <li> <p>Description: Represents the identity used for authentication, such as a username or AWS Access Key.</p> </li> <li> <p>Credentials (Password; Required)</p> </li> <li>Description: Password or Secret Access Key associated with the identity.</li> </ul>"},{"location":"console/cloud/#region-generic","title":"Region (Generic)","text":"<ul> <li>Location (String; Required)</li> <li>Default Value: <code>us-east-1</code></li> <li>Description: Specifies the region or availability zone to use. Use <code>list</code> to retrieve the available options.</li> </ul>"},{"location":"console/cloud/#instance-generic","title":"Instance (Generic)","text":"<ul> <li>Min Cores (String; Required)</li> <li>Default Value: <code>2</code></li> <li> <p>Description: The minimum number of CPU cores the machine should have.</p> </li> <li> <p>Min RAM (String; Required)</p> </li> <li>Default Value: <code>8000</code></li> <li> <p>Description: The minimum amount of RAM (in MB) the machine should have.</p> </li> <li> <p>Min Disk Size (String; Optional)</p> </li> <li>Description: The minimum disk size (in GB) the machine should have.</li> </ul>"},{"location":"console/cloud/#advanced-parameters-generic","title":"Advanced Parameters (Generic)","text":""},{"location":"console/cloud/#instance-configuration","title":"Instance Configuration","text":"<ul> <li>Hardware Id (String; Optional)</li> <li> <p>Description: Specifies the hardware ID to use. Use <code>list</code> to get available options.</p> </li> <li> <p>EC2 AMI Query (String; Optional)</p> </li> <li>Default Value: <code>owner-id=137112412989;state=available;image-type=machine</code></li> <li> <p>Description: Filters AMIs based on the specified query. Defaults to Amazon-created AMIs.</p> </li> <li> <p>Instance Spec (String; Optional)</p> </li> <li>Default Value: <code>osFamily=AMZN_LINUX,imageNameMatches=amzn-ami.*,minCores=1</code></li> <li> <p>Description: Specification query for the instance.</p> </li> <li> <p>Credentials Out Path (String; Optional)</p> </li> <li> <p>Description: Path to store access credentials generated during setup.</p> </li> <li> <p>Endpoint URL (String; Optional)</p> </li> <li> <p>Description: Custom endpoint URL, if required.</p> </li> <li> <p>Init Script (String; Optional)</p> </li> <li> <p>Description: Path to a script file executed during instance initialization. This script is expected to install and configure services. Files must be in UNIX format.</p> </li> <li> <p>Cloud Init (String; Optional)</p> </li> <li>Default Value: <code>false</code></li> <li>Description: When set to <code>true</code>, uses cloud-init metadata to specify the init script. Otherwise, connects using SSH to execute the script.</li> </ul>"},{"location":"console/cloud/#authentication","title":"Authentication","text":"<ul> <li>Public Key (String; Optional)</li> <li> <p>Description: An existing SSH public key to authorize.</p> </li> <li> <p>SSH User (String; Optional)</p> </li> <li>Default Value: <code>ec2-user</code></li> <li> <p>Description: Specifies the SSH user for accessing the instance.</p> </li> <li> <p>SSH Password (String; Optional)</p> </li> <li> <p>Description: Password for SSH access.</p> </li> <li> <p>Private Key Path (String; Optional)</p> </li> <li> <p>Description: Path to the SSH private key for authentication.</p> </li> <li> <p>Install Private Key Path (String; Optional)</p> </li> <li>Description: Path to the private key to install for SSH access.</li> </ul>"},{"location":"console/cloud/#additional-settings","title":"Additional Settings","text":"<ul> <li>Key Name (String; Optional)</li> <li> <p>Description: Specifies the name of the SSH Key pair.</p> </li> <li> <p>Download File Name (String; Optional)</p> </li> <li>Default Value: <code>WebLoad-linux-v${VERSION}.${BUILD}.tar.gz</code></li> <li> <p>Description: File name used for downloading during the initialization process.</p> </li> <li> <p>Download URL (String; Optional)</p> </li> <li>Default Value: <code>https://radview.s3.amazonaws.com/</code></li> <li> <p>Description: URL path for downloading installation files.</p> </li> <li> <p>Sh-Bang (String; Optional)</p> </li> <li>Default Value: <code>#!/bin/bash</code></li> <li> <p>Description: The first line of the initialization script.</p> </li> <li> <p>Sudo Command (String; Optional)</p> </li> <li> <p>Description: Command used for running operations as root. Usually not required for AWS.</p> </li> <li> <p>Async (String; Optional)</p> </li> <li>Default Value: <code>true</code></li> <li> <p>Description: When set to <code>true</code>, allows the machines to start asynchronously.</p> </li> <li> <p>Selenium Support (String; Optional)</p> </li> <li>Default Value: <code>false</code></li> <li> <p>Description: When set to <code>true</code>, installs Google Chrome for Selenium testing support.</p> </li> <li> <p>Security Group Id (String; Optional)</p> </li> <li> <p>Description: Security group allowing access from the console on ports 9000, 9010. Created dynamically if not specified.</p> </li> <li> <p>Network (String; Optional)</p> </li> <li>Description: Specifies the network configuration for the instance.</li> </ul>"},{"location":"console/config_load_template/","title":"Configuring a Load Template Manually","text":"<p>This chapter describes the process of manually configuring a Load Template. Load Templates are configured in the Console through a sequential series of dialog boxes. Through these dialog boxes, you can select and schedule the script or Mix files to run during the test, define the number of Load Machines and Probing Clients to run each script and the number of Virtual Clients to run.</p> <p>Note: You cannot create Load Templates if you have not yet recorded (or otherwise created) any scripts. If you do not have any scripts to work with, you must create them with WebLOAD Recorder. </p>"},{"location":"console/config_load_template/#the-manual-test-configuration-workflow","title":"The Manual Test Configuration Workflow","text":"<p>The following diagram illustrates the workflow for manually configuring a load test.</p> <p></p>"},{"location":"console/config_load_template/#starting-a-new-template-manually","title":"Starting a New Template Manually","text":"<p>To create a new Load Template manually:</p> <ol> <li> <p>Select Create a new template manually on the WebLOAD Startup dialog box.</p> <p></p> </li> <li> <p>Click OK.    The WebLOAD Console appears.</p> </li> <li> <p>Click Scripts Selection in the Home tab of the ribbon,</p> <p>-Or-</p> <p>Right-click the Load Session item in the Script Tree and select Modify Script Selection.</p> <p>The script/Mix Selection dialog box opens. </p> </li> </ol>"},{"location":"console/config_load_template/#selecting-a-script","title":"Selecting a Script","text":"<p>Scripts are test scripts that describe user activity and are run during WebLOAD Console test sessions.</p> <p>WebLOAD Console supports two types of scripts:</p> <ul> <li>Single Scripts \u2013 which are lone test-scripts.</li> <li>Mix of Scripts \u2013 which are a combination of existing single scripts. Using a Mix you can simulate different groups of users performing different activities on the system under test (SUT) at the same time.</li> </ul> <p>Select the scripts to run through the script / Mix Selection dialog box.</p> <p></p>"},{"location":"console/config_load_template/#creating-load-templates-with-one-or-more-single-scripts","title":"Creating Load Templates with One or More Single Scripts","text":"<p>To create Load Templates with one or more singlescripts:</p> <ol> <li> <p>Click in the Script Path field and enter the name and the full path for the script or mix of scripts.</p> <p>The path name can be entered manually or through browsing the directory structure.</p> <p>To include additional scripts/mix of scripts, click Add and repeat step 1.</p> </li> <li> <p>To optionally open and view or edit a selected script, click View. WebLOAD Recorder opens displaying the selected script.</p> </li> <li> <p>To optionally open and view or edit a selected mix of scripts, click View.</p> <p>The Edit Mix dialog box opens (it is essentially identical to the Mix Creation Dialog Box.</p> </li> <li> <p>To optionally configure runtime options exclusive to a selected Script, click Options.</p> <p>The Script Options dialog box opens enabling you to define the runtime options for the selected script. For more information on Script options, see Setting Script Options.</p> </li> <li> <p>To optionally configure runtime options exclusive to a script in a selected mix, click View. In the Edit Mix dialog box that appears, select the script and click Options. The Script Options dialog box opens enabling you to define the runtime options for the selected script. For more information on script options, see Setting Script Options.</p> </li> <li> <p>Click OK.</p> <p>The scripts selected to run in the test are displayed in the Session Tree.</p> <p></p> </li> </ol>"},{"location":"console/config_load_template/#selecting-hosts","title":"Selecting Hosts","text":"<p>Hosts are the computer systems participating in the test session. Each host has an assigned task, acting as either a Load Machine or a Probing Client. Both Load Machines and Probing Clients are configured in the same Host Selection window. Hosts must be defined for each script or Mix file running in the test session.</p>"},{"location":"console/config_load_template/#opening-the-host-selection-dialog-box","title":"Opening the Host Selection Dialog Box","text":"<p>To open the host selection dialog box:</p> <ul> <li>Right-click the script or Mix icon in the Session Tree and select View Load Machines Selection,</li> </ul> <p>-Or-</p> <p>Select Load Machine Selection in the Home tab of the ribbon. The Host Selection dialog box opens.</p> <p></p> <p>In this dialog box, you define the host computers participating in the test. There are three fields in this dialog box. The Host Computers field, lists all of the host computers available for testing. The two fields to the right contain the systems defined as Load Machines and Probing Client Machines. Use the arrow buttons between the fields to change the roles of the host computers, or double-click systems in the Host Computers field to move them to the Load Machines field.</p> <p>Note: If you are running a script with Perfecto Mobile script, define a single Load Machine or a single Probing Client in order to simulate a single user.</p>"},{"location":"console/config_load_template/#defining-host-computers","title":"Defining Host Computers","text":"<p>To define a host computer:</p> <ol> <li> <p>Click Add.</p> <p>The Add Host Computer dialog box opens.</p> <p></p> </li> <li> <p>Enter the name or IP address of the host computer you want to add.</p> </li> <li> <p>Click OK.</p> <p>WebLOAD Console adds the machine to the Host Computer list.</p> </li> </ol>"},{"location":"console/config_load_template/#defining-load-machines","title":"Defining Load Machines","text":"<p>Load Machines are the machines that generate the Virtual Clients and bombard the system under test.</p>"},{"location":"console/config_load_template/#designating-a-host-computer-as-a-load-machine","title":"Designating a Host Computer as a Load Machine","text":"<p>To designate a host computer as a Load Machine:</p> <ol> <li>Select the Host from the Host Computer field.</li> <li> <p>Click the single arrow key  adjacent to the Load Machine field.</p> <p>-Or-</p> <p>Double-click the host.</p> <p>The selected Host moves to the Load Machine field.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/config_load_template/#designating-all-host-computers-as-load-machines","title":"Designating all Host Computers as Load Machines","text":"<p>To designate all host computers as Load Machines:</p> <ol> <li>Click the double arrow key  adjacent to the Load Machine field. All of the Host Computers move to the Load Machine field.</li> <li>Click OK.</li> </ol>"},{"location":"console/config_load_template/#defining-probing-client-machines","title":"Defining Probing Client Machines","text":"<p>Probing Clients act as single Virtual Clients to measure the performance of targeted activities and provide individual performance statistics of the SUT.</p>"},{"location":"console/config_load_template/#designating-a-host-computer-as-a-probing-client-machine","title":"Designating a Host Computer as a Probing Client Machine","text":"<p>To designate a host computer as a Probing Client Machine:</p> <ol> <li>Select the Host from the Host Computer field.</li> <li>Click the single arrow key  adjacent to the Probing Client Machines field. The selected Host moves to the Probing Client Machine field.</li> <li>Click OK.</li> </ol>"},{"location":"console/config_load_template/#deleting-a-host-computer","title":"Deleting a Host Computer","text":"<p>To delete a host computer:</p> <ol> <li>Select the host name from the Host Computer list.</li> <li> <p>Click Delete.</p> <p>The host is deleted from the Host Computer list.</p> </li> </ol>"},{"location":"console/config_load_template/#scheduling-the-test-session","title":"Scheduling the Test Session","text":"<p>The Schedule dialog box is used to specify the test parameters. Here you specify the size of the load to be generated on each Load Machine throughout the test.</p> <p>You can create a load schedule by:</p> <ul> <li>Manually defining time frames and the load to generate over each frame</li> <li>Using the Load Profiler</li> <li>A combination of both</li> </ul>"},{"location":"console/config_load_template/#creating-a-load-schedule-manually","title":"Creating a Load Schedule Manually","text":"<p>To create a load schedule manually:</p> <ol> <li> <p>Double-click a host in the Session Tree,</p> <p>-Or-</p> <p>Right-click the script the Load Machines are running and select Modify Load Machine Schedule.</p> <p>The Schedule Manually dialog box opens.</p> <p></p> </li> <li> <p>Expand the Load Machine tree using the + / - button adjacent to the Load Machine you want to schedule.</p> </li> <li> <p>Enter the number of days and the starting time to generate the load in the From field.</p> <p>The starting time is defined for each particular script relative to the beginning of the test.</p> <p>Note: Days are numbered 00 through to 99. Seconds are numbered 1 through 59. To enter one minute, use the 1:00 syntax, not 00:60.</p> </li> <li> <p>Enter the number of days and the ending time to generate the load in the To field.</p> <p>The ending time is defined for each particular Script relative to the beginning of the test. If the To field is left blank, WebLOAD Console continues generating the load until the From time in the next entry for this Load Machine, or if this is the last entry, until the test is stopped manually.</p> </li> <li> <p>Enter the number of Virtual Clients to generate during the time frame defined in steps 3 and 4.</p> </li> <li> <p>Schedule additional Virtual Client loads for this Load Machine:</p> <ol> <li>Click Add to add a blank line to the schedule grid.</li> <li>Repeat steps 3 through 5.</li> </ol> </li> <li> <p>Repeat steps 3 through 6 for each Load Machine or Probing Client defined in the Session Tree.</p> </li> <li> <p>Click OK.</p> <p>Note: The Limit run to X rounds option is disabled because you cannot set or change it for an individual load machine. This option can only be set at the script level.</p> </li> </ol>"},{"location":"console/config_load_template/#creating-a-load-schedule-with-the-load-profiler","title":"Creating a Load Schedule with the Load Profiler","text":"<p>To create a load schedule with the load profile:</p> <ol> <li> <p>Double-click a host in the Session Tree,</p> <p>-Or-</p> <p>Right-click the script the hosts are running and select Modify Load Machine Schedule.</p> <p>The Schedule Manually dialog box opens.</p> <p></p> </li> <li> <p>Click the Load Machine you want to schedule.</p> </li> <li> <p>Click the Load Profiler button.</p> <p>The Load Profiler opens.</p> <p></p> </li> <li> <p>Select a pattern from the Select scheduling model field at the top of the dialog box. For an explanation of each model, see Scheduling Models .</p> </li> <li> <p>Fill in the fields at the bottom of the dialog box.</p> </li> <li> <p>Click Append to include the load definition in the schedule,</p> <p>-Or-</p> <p>Click Replace to substitute the load definition for the one appearing in the Schedule Manually dialog box.</p> </li> </ol>"},{"location":"console/config_load_template/#completing-your-manual-load-template-configuration","title":"Completing Your Manual Load Template Configuration","text":"<p>After configuring the scripts to run, the Load Machines to generate the load, and the test schedule, you are ready to run your Load Session.</p> <p>To complete your manual Load Template configuration:</p> <ol> <li> <p>Click Start Session in the Session tab of the ribbon.</p> <p>A message box appears asking if you want to save the current Load Template.</p> <p></p> </li> <li> <p>Click Yes to save the current Load Template as a <code>*.tpl</code> file.</p> <p>Load Templates contain the parameters that you defined for the test, such as the scripts to run, participating hosts, and the test plan. Saving Load Templates saves you the time of reconfiguring the Load Session when repeating tests.</p> <p>For more information on running tests, see Running a Load Session .</p> </li> </ol>"},{"location":"console/connect_webrm/","title":"Connecting to WebRM","text":"<p>WebRM addresses corporate functional and performance testing efforts by managing and directing WebLOAD resources (Virtual Clients, Probing Clients and Consoles) for powerful and efficient sharing of testing resources and achieving load poling capability.</p> <p>WebRM enables multiple users involved in various stages of application development and testing to share testing resources. By distributing WebLOAD testing resources each developer can run a test session to simulate, validate, and pinpoint where performance problems occur at any stage of the development life cycle, thus eliminating design flaws and ensuring product quality. Using WebRM, WebLOAD resources can be used optimally to fulfill an organizations goals and priorities.</p> <p>WebRM can run on a separate machine from the other WebLOAD Consoles/Load Machines or can run on a machine that runs WebLOAD Consoles/Load Machines.</p> <p>WebRM controls the following WebLOAD resources:</p> <ul> <li>The number of concurrent connected WebLOAD Consoles.</li> <li>The number of Virtual Clients controlled by all connected Consoles simultaneously.</li> <li>The number of Probing Clients controlled by all connected Consoles simultaneously.</li> </ul> <p>For additional information about WebRM, see the WebRM User\u2019s Guide.</p>"},{"location":"console/connect_webrm/#how-does-webrm-work","title":"How Does WebRM Work","text":"<p>When you install WebRM, you apply your license file. The license file contains information regarding the total number of Virtual Clients, Probing Clients, and concurrent connected WebLOAD Consoles for which you are licensed.</p> <p>When installing your WebLOAD Console, select the location where you installed your WebRM server. WebLOAD will communicate with your WebRM server in order to request and grant testing resources for you. If the WebRM server is not running or is not accessible by the WebLOAD Console, the Console will issue an error message and will not open.</p> <p>When you open your WebLOAD Console you are prompted to request the number of Virtual Clients and Probing Clients you desire. These resources are granted to you as long as your WebLOAD Console is open, allowing you to complete your test session utilizing the allocated number of Virtual and Probing Clients.</p> <p>WebRM is very straightforward and easy to use. Much of your interaction with WebRM is behind the scenes. Once you have selected the resources you wish to use, you can configure WebRM to automatically grant you these same resources each time you open your WebLOAD Console.</p>"},{"location":"console/connect_webrm/#requesting-resources-from-webrm","title":"Requesting Resources from WebRM","text":"<p>Following the configuration of WebLOAD Console to work with WebRM, configure the connection settings by browsing to the machine where the WebRM server resides. (This is described in WebRM Installation in the WebRM User\u2019s Guide.) When opening your WebLOAD Console, the connection to WebRM occurs automatically. If the Console fails to connect to the WebRM server, the Console will not open.</p> <p>To request resources from WebRM:</p> <ol> <li> <p>Open your Console by selecting Start &gt;Programs &gt; RadView &gt; WebLOAD &gt; WebLOAD Console. The Request Resources dialog appears:</p> <p></p> </li> <li> <p>Enter the number of Virtual Clients and Probing Clients you will need for your test. If you request more than the number of resources allowed for your license, or more than are currently available, you will be prompted with a dialog stating that the resources you requested are unavailable. This dialog will also list what resources are currently available so that you can resubmit your request.</p> </li> <li> <p>If you know that you will require the same number of resources each time you connect to WebRM, check Always request same number of clients.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/connect_webrm/#updating-the-number-of-requested-resources","title":"Updating the Number of Requested Resources","text":"<p>You can easily change the number of resources granted to you.</p> <p>To change the number of resources granted to you:</p> <ol> <li> <p>In the WebLOAD Console, select Update Floating License Resources in the Home tab of the ribbon.</p> <p>The Request Resources dialog appears, displaying the resources currently granted to you.</p> </li> <li> <p>Edit the Virtual Client and Probing Client settings to reflect the new total number of Virtual and Probing clients you need.</p> </li> </ol>"},{"location":"console/console_features/","title":"WebLOAD Console Features","text":"<p>The WebLOAD Console is where you perform the majority of your load / performance testing activities.</p>"},{"location":"console/console_features/#the-webload-console","title":"The WebLOAD Console","text":"<p>The Console consists of the following:</p> <ul> <li>Console System button</li> <li>Quick Access toolbar</li> <li>Ribbon</li> <li>Session Tree</li> <li>Results window</li> <li>Status bar</li> </ul> <p>The Console manages the Load Session. It also:</p> <ul> <li>Configures Load Session hosts and scripts.</li> <li>Schedules Load Session scripts.</li> <li>Monitors the application\u2019s performance and integrity under the generated load.</li> <li>Manages the Load Session as it is running, allowing you to pause, stop and continue Load Session components as needed.</li> <li>Displays the current performance of the SUT and provides a final performance report for Virtual Clients and Probing Clients.</li> <li>Manages exporting of test reports.</li> </ul> <p>The WebLOAD Console component controls your test session. From the Console, you can:</p> <ul> <li>Specify the program (script) that the test session runs.</li> <li>Select the number of Virtual Clients to run.</li> <li>Define the hosts participating in the Load Session.</li> <li>Schedule tests.</li> <li>View performance reports.</li> </ul>"},{"location":"console/console_features/#opening-the-console","title":"Opening the Console","text":"<p>To open the Console:</p> <ul> <li>Select Start &gt; All Programs &gt; RadView &gt; WebLOAD &gt; WebLOAD Console,</li> </ul> <p>-Or-</p> <p>From your desktop, click the Console icon.</p> <p>The WebLOAD Console Startup dialog box appears, displaying a variety of shortcuts to the various WebLOAD Console components. After you select an option and start working, the WebLOAD main screen appears.</p> <p></p> <p>The Console is operated through its Console System button and ribbon at the top of the screen. Tests are configured through a series of dialog boxes.</p>"},{"location":"console/console_features/#console-elements","title":"Console Elements","text":"<p>When you first start WebLOAD Console, you see the Console window interface in Edit mode. The Console window displays different components in the two different modes:</p> <ul> <li>Edit Mode where you create your templates.</li> <li>Run Mode where you run your sessions and see the results. The Console window interface consists of the following elements.</li> </ul>"},{"location":"console/console_features/#title-bar","title":"Title Bar","text":"<p>The title bar displays the name and path of the current template or session.</p>"},{"location":"console/console_features/#console-system-button","title":"Console System Button","text":"<p>The Console System button provides access to the most commonly used tasks.</p> <p></p> Option Description New Starts a new Load Template. A new empty session Tree appears. Open <p>Enables opening any of the following:</p><p> - A saved Load Session. A Load Session is saved as a file of type *.ls. The Console displays a Session Tree window initialized to the settings saved in the file. </p><p> - A Load Template file of the type *.tpl. A Load Template file contains test configuration, the assigned scripts, the testing schedule, and the report configuration, without the test session results. </p> Save Saves a Load Template or Load Session. When a Load Session is saved, it includes the Load Template and the data accumulated running the test. Save As <p> Enables performing a Save or Save As operation </p><p> If the session tree is currently displaying a Load Session, the Save operation saves the current Load Session configuration and results to a file of type *.ls. The following information is saved: </p><p> - Selected hosts, both Probing Clients and Load Machines </p><p> - Assigned scripts for each host </p><p> - Test session schedule </p><p> - Report configuration </p><p> - Test session results (Performance Report data) </p><p> If the session tree is currently displaying a Load Template, the following information is saved: </p><p> - Selected hosts, both Probing Clients and Load Machines </p><p> - Assigned scripts for each host </p><p> - Test session schedule </p><p> - Report configuration </p> Goal-Oriented Test Wizard Opens the Goal-Oriented Test wizard. The Goal-Oriented Test wizard enables you to run goal-seeking performance testing. WebLOAD Wizard Opens the WebLOAD Wizard. This wizard walks you through the WebLOAD Console configuration process. Edit Template Switches from Run mode to Edit mode. Global Options Opens the Global Options dialog box. Use the global options to customize WebLOAD Console to your specifications, see Setting the Global Options . Default Options Opens the Default Options dialog box. Use the default settings to customize the script settings to your specifications. When building a new template or session, or editing an existing one, each new single script or script participating in a Mix is automatically assigned these defaults, see Setting Script Options. Current Session Options Opens the Current Session Options dialog box. Use the session settings to customize the current session to your specifications. This option will update the options for all scripts in the current session, see Setting Script Options . Script Options Opens the Script Options dialog box. Use the session settings to customize the current script to your specifications, see Setting Script Options . Print Prints the active chart or grid displayed in the Results window, with all contents and formats. Additional Information Displays additional information for the active template / Session. Recent files Lists the template / Session files you have most recently opened in the WebLOAD Console. To quickly reopen one of these files, click it. Exit Closes the Console."},{"location":"console/console_features/#quick-access-toolbar","title":"Quick Access Toolbar","text":"<p>The Quick Access toolbar provides shortcuts for your most common tasks. By default, the toolbar provides shortcuts to the Save, Open and Start Session commands. You can customize the toolbar to add any other WebLOAD Console command.</p> <p></p>"},{"location":"console/console_features/#ribbon","title":"Ribbon","text":"<p>The ribbon displays the commands you use to work with WebLOAD Console. In addition to the standard File tab, various tabs are provided to access functions specific to template creation and session management, such as the Session tab.</p> <p> </p>"},{"location":"console/console_features/#right-click-menus","title":"Right-click Menus","text":"<p>The right-click menus provide shortcuts to frequently performed actions.</p> <p>The specific list of shortcuts available depends on the area where you click the right mouse button.</p> <p>For example, the right-click menu displayed when you right-click the Load Session icon in the Session Tree in edit mode enables you to:</p> <ul> <li>Open the WebLOAD Wizard.</li> <li>Modify script selections.</li> <li>Delete the Load Template.</li> <li>Access the default and current session options.</li> <li>Access the SLA Manager.</li> </ul>"},{"location":"console/console_features/#status-bar","title":"Status Bar","text":"<p>At the bottom of the Console window, the status bar displays information about operations in progress.</p> <p>While a session is running, the status bar displays continually updated information about the Elapsed time since the session started running, and the Remaining time till session end (if known).</p>"},{"location":"console/console_features/#the-session-tree","title":"The Session Tree","text":"<p>The Session Tree displays in the left pane of the Console screen, and gives you a complete graphical overview of the test session including the scripts run, and the hosts running each script. The icons adjacent to the tree items enable you to view your test activity at a glance.</p> <p></p> <p></p> <p>During the test configuration phase, the Session Tree is a convenient interface for editing the test session. Clicking the WebLOAD Wizard icon in the Home tab of the ribbon starts the WebLOAD Wizard. Double-clicking a tree node opens the dialog box for configuring that tree item. Right-clicking a tree item prompts a menu that enables you to perform a number of functions on the test session. As you change your configuration through the Console configuration dialog boxes, the changes that you make are reflected in the Session Tree.</p> <p>While your test session is running, the Session Tree displays its progress. The Session Tree displays the scripts configured for running, the participants in the test, and their status. For more information on the status of the test, see Status Icons .</p>"},{"location":"console/console_features/#the-session-tree-structure","title":"The Session Tree Structure","text":"<ul> <li>The \u201croot\u201d of the tree, in the upper-most line, displays the Load Session icon.</li> <li>The first level branches display the scripts to be run during the test session. The scripts may be single scripts or a Mix of scripts. The icons displayed next to the script name indicate its status. For more information on the status of Session components, see Status Icons .</li> <li>The second level branches present the hosts participating in the test session. These hosts can be Load Machines or Probing Clients. A different icon represents each host type. The icons displayed adjacent to the hosts indicate their status. Several hosts can run the same script.</li> </ul>"},{"location":"console/console_features/#session-tree-icons","title":"Session Tree Icons","text":"<p>WebLOAD Console displays icons on each line of the Session Tree, making it easy to view your test elements and activity.</p> <p>The Session Tree icons are described in the following table:</p> Icon Session Component <p></p> <p> </p> Load Session \u2012 The root of the Session Tree. <p></p> <p> </p> Script \u2012 A single test script. <p></p> <p> </p> Mix of scripts \u2012 A combination of test scripts. <p></p> <p> </p> Load Machine \u2012 A machine used for generating Virtual Clients. <p></p> <p> </p> Cloud Load Machine \u2013 A cloud machine used for generating Virtual Clients. <p></p> <p> </p> Probing Client Machine \u2012 A machine used for generating Probing Clients. <p></p> <p> </p> Cloud Probing Client Machine \u2013 A cloud machine used for generating Probing Clients."},{"location":"console/console_features/#status-icons","title":"Status Icons","text":"<p>During runtime, status icons appear adjacent to each Load Session item (hosts, scripts) in the Session Tree, indicating the item\u2019s status.</p> <p>The status icons are described in the following table.</p> Icons Cloud Icons Description <p></p> <p> </p> <p></p> <p> </p> No current activity. <p></p> <p> </p> <p></p> <p> </p> Initialization completed successfully. Ready to run. <p></p> <p> </p> <p></p> <p> </p> Currently running. <p></p> <p> </p> <p></p> <p> </p> Temporarily paused. Remainder of Load Session continues running as usual. <p></p> <p> </p> <p></p> <p> </p> Currently stopped. <p></p> <p> </p> <p></p> <p> </p> An error has occurred."},{"location":"console/console_features/#navigating-the-session-tree","title":"Navigating the Session Tree","text":"<p>You can move through the Session Tree by expanding and collapsing nodes.</p> <p>The following table lists the keystrokes you can use to move in the Session Tree:</p> Key Result Up arrow Moves the selection up one item in the Session Tree. Down arrow Moves the selection down one item in the Session Tree. Right arrow Expands the selected item. If the selected item does not contain hidden items, behaves like down arrow. Left arrow Collapses the selected item. If the selected item does not contain exposed items, behaves like up arrow. Page Up / Home Moves the selection to the first item in the Session Tree. Page Down Moves the selection to the bottom item visible in the pane. End Moves the selection to the last item in the Session Tree. Plus sign \u201c+\u201d on the numeric keypad Expands the selected node. Minus sign \u201c-\u201d on the numeric keypad Collapses the selected node. Asterisk \u201c*\u201d on the numeric keypad Expands the entire tree below the selected node."},{"location":"console/console_features/#the-session-tree-in-edit-mode","title":"The Session Tree in Edit Mode","text":"<p>In edit mode, the Session Tree provides a complete graphical overview of the test session.</p> <p></p> <p>The following is a line-by-line explanation of the above Session Tree:</p> Line Num Icon Explanation 1  Load Session Indicates a Session Tree. 2 Script1 The script file to be run during the Load Session. 3 Windows7x64 <p> Describes the Load Machine for this test session. </p><p> The Load Machine icon is followed by the host name (Windows7x64). </p><p> A test session may include multiple Load Machines. </p> 4 Script2 The script file to be run during the Load Session. 5 localhost Describes the Probing Client Machine host for this test session. The Probing Client icon is followed by the Host name (localhost). A test session may include multiple Probing Client hosts. 6 Mix 1 The Mix file to be run during the Load Session. 7 Windows7x64 Describes the Load Machine for this test session. The Load Machine icon is followed by the host name (Windows7x64)."},{"location":"console/console_features/#right-click-options-in-edit-mode","title":"Right-Click Options in Edit Mode","text":"<p>Using the Session Tree you can define and modify Load Templates.</p> <p>The following options can be accessed by right-clicking a Session Tree component in edit mode:</p> <p>Table: Edit Mode Session Tree Options</p> Tree Item Options Description Load Session Open Wizard Opens the WebLOAD Wizard. Modify Scripts Selection Opens the script / Mix Selection dialog box to modify the selections. Delete Deletes the selected WebLOAD Console component and all sub-components. Default Options Opens the Default Options dialog box and enables setting new default options for each script added to a Load Session. Current Session Options Opens the Current Session Options dialog box and enables setting options for each script currently defined in the Load Session. SLA Manager Opens the SLA Manager dialog box for defining the conditions under which you want to receive log messages and optionally also an email notification. Script/Mix Open Wizard Opens the WebLOAD Wizard. Modify Load Machine  Selection Opens the Host Selection  dialog box and modify the Load Machines and Probing Client Machines defined  for the session. Modify Load Machine  Schedule Opens the Schedule Manually  dialog box and  modify the test schedule. Open Opens the script in  WebLOAD Recorder for editing. Delete Deletes the script. Rename Renames the script. View JavaScript Opens a window displaying the JavaScript  for the script. Copy Load Machine and Schedule Available for script only.  Copies the Load Machines and the load schedule defined for this script to the  clipboard. Paste Load Machine and Schedule Available for script only.  Pastes the Load Machines and the load schedule from the clipboard. Script Options Available for script only. Opens the Script  Options dialog box. For more information on these settings, seeSetting Script Options . Mix Options Available for Mix only.  Opens the Mix Creation dialog box, enabling  you to select a script from the Mix for which to change the options. Load Machine and Probing  Client Machine Modify Schedule Opens the Schedule Manually  dialog box enabling you to modify the scheduling parameters. Replace Replaces the host (from  the host list). Delete Deletes the host. Copy Schedule Copies the schedule  defined for the host to the clipboard. Paste Schedule Pastes the schedule from  the clipboard."},{"location":"console/console_features/#the-session-tree-in-run-mode","title":"The Session Tree in Run Mode","text":"<p>The Session Tree displays the complete configuration of the current Load Session. Status icons reflect the status of your Load Session.</p> <p>Through the Session Tree you can see:</p> <ul> <li>The scripts running in the test session.</li> <li>The hosts running each script.</li> <li>Each script and host\u2019s current operating status.</li> </ul> <p>Icons are displayed on each line of the tree, making it easy to view the test activity.</p> <p></p> <p>The following is a line-by-line explanation of the above Session Tree:</p> Line Num Icon Explanation 1  Load Session Indicates a Session Tree. 2 Script1 The script file to be run during the Load Session. 3  Windows7x64 (100, 100) <p> Describes the Load Machine for this test session. </p><p> The Load Machine icon, along with its status (currently running), is followed by the host name (Windows7x64). </p><p> A test session may include multiple Load Machines. </p><p> Two numbers follow each Load Machine entry: </p><p> - The first number is the maximum load that script schedules it to generate over the course of a test session. </p><p> - The second number is the current load being generated. </p><p> In this example, Windows7x64 is running under Script1, and has a maximum scheduled load of 100 Virtual Clients and is currently generating a load of 100 Virtual Clients. </p> 4 Script2 The script file to be run during the Load Session. 5  localhost Describes the Probing Client Machine host for this test session. The Probing Client icon, along with its status (currently running), is followed by the Host name (localhost). A test session may include multiple Probing Client hosts. 6  Mix 1 The Mix file to be run during the Load Session. 7  Windows7x64 (100, 100) <p> Describes the Load Machine for this test session. The Load Machine icon, along with its status (currently running), is followed by the host name (Windows7x64). </p><p> Two numbers follow each Load Machine entry: </p><p> - The first number is the maximum load that Mix schedules it to generate over the course of a test session. </p><p> - The second number is the current load being generated. </p><p> In this example, Windows7x64is running under Mix1, and has a maximum scheduled load of 100 Virtual Clients and is currently generating a load of 100 Virtual Clients. </p> <p>To the right of each Load Machine two numbers are displayed in parentheses, for example, sharony (25, 45). These display the load size currently being generated; followed by the maximum load size (number of Virtual Clients) the script is scheduled to generate. The current load size number will change according to the load schedule defined in the Schedule dialog box. Before a test session begins, the \u2018current\u2019 load size being generated is 0. In most modes of operation, the current load size will never exceed the maximum load size scheduled for that Script listed to the right of the current value.</p> <p>Note: Using Throttle Control, you can increase the current load size to exceed the maximum load size - but not while running the Goal-Oriented Test Session.</p> <p>In run mode you can right-click an item in the Session Tree to view the test parameters defined in the session.</p> <p></p>"},{"location":"console/console_features/#right-click-options-in-run-mode","title":"Right-Click Options in Run Mode","text":"<p>While in run mode, the following options can be accessed through the right mouse button:</p> Tree Item Options Description Load Session View Scripts Selection Opens the script / Mix Selection dialog box. Stop All Controls the test in progress. View Goals Opens the View Goals message box (available only during the Goal-Oriented Test Sessions) to display the goals defined in the test session. Reset all Load Generators Resets the Load Generators. Pause Resume Resumes execution of tests that have been paused. Throttle Control Opens the Throttle Control dialog box, enabling you to dynamically change the load generated on the fly. Throttle Control for the Load Session divides the new VC number evenly across all scripts. Default Options Opens the Default Options dialog box enabling you to view the default options for each script added to a Load Session. Current Session Options Opens the Default Options dialog box enabling you to view the options for each script currently defined in the Load Session. SLA Manager Opens the SLA Manager dialog box for defining the conditions under which you want to receive log messages and optionally also an email notification. Script / Mix View Load Machine Selection Opens the Load Machine Selection window. View Load Machine Schedule Opens the Load Machine Schedule window displaying the schedule defined for the script. Stop Controls the test in progress, enabling you to stop running the selected script. Pause Pauses the selected script while the test is in progress. Resume Resumes execution of the selected Scripts that have been paused. Throttle Control Opens the Throttle Control dialog box, enabling you to dynamically change the load generated on the fly. Throttle Control for the script/Mix divides the new VC number evenly across all Load Generator machines. Open Opens the script in WebLOAD Recorder. View Java Script Displays the JavaScript code in an external window. Script / Mix Options Opens the View Script / Mix dialog box, enabling you to edit the script options. Load Machine View Schedule Opens the Load Machine Schedule dialog box displaying the schedule defined for the Load Machine. Stop Controls the test in progress, enabling you to stop running the selected Load Machine. Pause Pauses the selected Load Machine while the test is in progress. Resume Resumes execution of the selected Load Machine while the test is in progress. Throttle Control Opens the Throttle Control dialog box, enabling you to dynamically change the load generated on the fly. Throttle Control for the Load Machine only changes the number of VCs for this Load Generator machine. <p>Note: In edit mode, the items in the pop-up menus are used to edit the test session configuration. See The Session Tree in Edit Mode .</p>"},{"location":"console/console_features/#the-results-window","title":"The Results Window","text":"<p>The Results window displays all of the reports opened during a test session. Use the tabs located at the top and the bottom of the window to view different reports. The following reports are available in the Results window.</p> Report Description Integrated Reports A report that can be configured to combine Performance data from the Load Machines, Probing Clients, Performance data on the SUT gathered from Performance Manager, and existing performance data from previously saved Load Sessions and external files. Statistic Reports A real-time monitor that displays the results of your test while you run it that can be saved and exported. <p> WebLOAD </p><p> Dashboard </p> Provides a summary of the performance statistics generated during the test session. Transactions Dashboard A real-time monitor that displays the transactions statistics in your test. Data Drilling Reports Provides a detailed description of all user-defined and named transactions to the instance level, including all hit failures and the reasons for them. Viewer Provides a graphic presentation of event failures displaying the actual events."},{"location":"console/console_features/#integrated-reports","title":"Integrated Reports","text":"<p>WebLOAD Integrated Reports provide both a graphical and statistical view of the performance of your application as it is being tested. Integrated Reports can be viewed while the test is in progress or saved for later analysis.</p> <p></p>"},{"location":"console/console_features/#statistics-reports","title":"Statistics Reports","text":"<p>WebLOAD collects approximately 35 different statistics during a test. Statistics Reports display the values for all of them.</p> <p></p>"},{"location":"console/console_features/#dashboard","title":"Dashboard","text":"<p>The Dashboard displays real-time statistical information about the test session including the number of Virtual Clients running, hits per day, pages per day and throughput.</p> <p></p>"},{"location":"console/console_features/#transactions-dashboard","title":"Transactions Dashboard","text":"<p>The Transactions Dashboard displays real-time statistical information about the transactions in your test, in graphical format.</p> <p></p>"},{"location":"console/console_features/#data-drilling-reports","title":"Data Drilling Reports","text":"<p>Data Drilling provides both a global and detailed account of hit successes and failures allowing you to verify the functional integrity of your Web application at the per- client, per-transactions, and per-instance level. The Data Drilling reports provide an extremely detailed yet easily accessible summary of all the statistical, timing, and performance information collected over the course of the test session.</p> <p></p>"},{"location":"console/console_features/#event-viewer","title":"Event Viewer","text":"<p>The Event Viewer displays an illustration of each event triggered during the test.</p> <p></p> <p>For further information regarding use of the Event Viewer, see Viewing Error Information in the Event Viewer .</p>"},{"location":"console/console_features/#log-window","title":"Log Window","text":"<p>The Log Window displays a summary of the test including all log messages detected by WebLOAD Console in run time that are generated by the Console, the JavaScript compiler and any user messages programmed in the test script.</p> <p></p> <p>For further information regarding use of the Log Window, see Viewing Error Information in the Log Window .</p>"},{"location":"console/console_features/#the-webload-console-startup-dialog-box","title":"The WebLOAD Console Startup Dialog Box","text":"<p>When you start WebLOAD Console, the WebLOAD Console Startup dialog box displays at the center of the screen, providing you with direct access to the WebLOAD Wizards, Load Templates and previously run Load Sessions.</p> <p></p> <p></p> Item Description WebLOAD  Wizard Opens the WebLOAD Wizard for creating a new  Load Template. Goal-Oriented  Test Wizard Opens the Goal-Oriented Test Wizard for  creating a new Load Template. Manual Opens a new blank Session Tree for creating a new template. Load Template Opens a saved Load Template (*.tpl). Enter the name of the saved  Load Template in the edit box. Load Session Opens a saved Load Session  (*.ls) including template data from a completed test. Enter the name of  the saved Load Session in the edit box. <p>Use either the Goal-Oriented Test Wizard to develop a goal-seeking performance test or the WebLOAD Wizard to develop a basic Load Template. Both of these wizards enable you to save your test parameters as a template that you can later edit manually using the Console ribbon.</p> <p>After developing a test with either of the wizards, you can save the test parameters as a Load Template. After running the test you can save the test parameters and results as a Load Session. You can then edit the test parameters by editing the Load Template or view the Load Session test results. For more information on Load Sessions and Load Templates, see Managing Load Templates and Load Sessions .</p>"},{"location":"console/console_features/#edit-mode-and-run-modes-of-operation","title":"Edit Mode and Run Modes of Operation","text":"<p>When you open a new test, WebLOAD Console is in Edit mode. In edit mode, you can edit the parameters of your test.</p> <p>When you run your test, WebLOAD Console switches to Run mode. When in run mode, you cannot edit the parameters of the test.</p> <p>If you are in Run mode and you wish to edit the test parameters, click the Edit Template  button in the Session tab of the ribbon to switch to edit mode.</p>"},{"location":"console/console_features/#the-console-in-edit-mode","title":"The Console in Edit Mode","text":"<p>In edit mode you can edit the Session Tree parameters. In run mode WebLOAD Console displays the configuration dialog boxes. Change from Run mode to Edit mode using the  Edit Template  button in the Session tab of the ribbon.</p> <p>To edit test session parameters:</p> <ul> <li>Place the cursor on a node in the Session Tree and click the right mouse button,</li> </ul> <p>-Or-</p> <p>Double-click an item in the Session Tree.</p>"},{"location":"console/console_features/#the-console-in-run-mode","title":"The Console in Run Mode","text":"<p>When you start running your Load Session, the Results window appears.</p> <p></p> <p>The following table describes the segments of the Console in Run mode:</p> Segment Function Session Run Toolbar Displays only during a test run. It contains buttons for controlling the test session. Session Tree Presents a graphic display of your test session. Results Window Displays all of the reports opened during a test session. Use the tabs located at the top and the bottom of the window to view different reports. Log Window Displays all of the error messages recorded during a test session. You can toggle the Log Window display on/off through theSession tab of the Console ribbon. Status Bar Indicates the program status."},{"location":"console/console_features/#the-console-ribbon-options","title":"The Console Ribbon Options","text":"<p>The Console ribbon is located at the top of the screen. This section discusses each of the WebLOAD Console ribbon tabs and their options .</p> <p></p>"},{"location":"console/console_features/#file-tab","title":"File Tab","text":"<p>The File tab includes the following functions for WebLOAD Console file management.</p> <p></p> New <p> Starts a new test session, creating a new WebLOAD Load Template </p><p> <code>(*.tpl)</code> file. </p><p> When you start a new Load Template an empty Session Tree is displayed on the screen. </p> Open <p> Enables opening any of the following: </p><p> - A saved Load Session. A Load Session is saved as a file of type </p><p> <code>*.ls</code>. The Console displays a Session Tree window initialized to the settings saved in the file. </p><p> - A Load Template file of the type <code>*.tpl</code>. A Load Template file contains test configuration, the assigned scripts, the testing schedule, and the report configuration, without the test session results. </p> Save <p> Enables performing a Save or Save As operation </p><p> If the session tree is currently displaying a Load Session, the Save operation saves the current Load Session configuration and results to a file of type <code>*.ls</code>. The following information is saved: </p><p> - Selected hosts, both Probing Clients and Load Machines </p><p> - Assigned scripts for each host </p><p> - Test session schedule </p><p> - Report configuration </p><p> - Test session results (Performance Report data) </p><p> If the session tree is currently displaying a Load Template, the following information is saved: </p><p> - Selected hosts, both Probing Clients and Load Machines </p><p> - Assigned scripts for each host </p><p> - Test session schedule </p><p> - Report configuration </p> Print Prints the report displayed with all contents and formats."},{"location":"console/console_features/#home-tab","title":"Home Tab","text":"<p>The Home tab includes functions for defining a Load Template</p> <p></p> <p></p> <p> WebLOAD </p><p> Wizard </p> Opens the WebLOAD Wizard. This wizard walks you through the WebLOAD Console configuration process. Goal-Oriented Test Wizard Opens the Goal-Oriented Test wizard. The Goal-Oriented Test wizard enables you to run goal-seeking performance testing. SLA Manager Opens the SLA Manager dialog box for defining the conditions under which you want to receive log messages and optionally also an email notification. Update Floating License Resources Opens the Update Resources dialog box. Performance Monitors Group Performance Measurements Manager Opens the Performance Measurements Manager dialog box for configuring the statistics parameters to be monitored. Add Remote PMM Open the Add PMM Probing Client dialog box for adding a Remote PMM script to the template. Edit Group Scripts Selection Opens the script / Mix Selection dialog box to modify the selections. Load Machine Selection This option is enabled only when a script is selected in the session tree. Opens the Host Selection dialog box to enable modifying the list of Load Machines and Probing Client Machines defined for the selected script or mix. Mix Creation Available for Mix only. Opens the Mix Creation dialog box, enabling you to select a script from the Mix for which to change the options. Schedule <p> This option is enabled only when a load machine or script are selected in the session tree. </p><p> - When a script is selected, opens the Schedule Manually dialog box, enabling you to modify the scheduling parameters for all the load machines running the script. </p><p> - When a single load machine is selected, opens the Schedule Manually dialog box, enabling you to modify the scheduling parameters for the load machine. </p> Delete Deletes the currently selected component. A message box pops up, asking for confirmation."},{"location":"console/console_features/#session-tab","title":"Session Tab","text":"<p>The Session tab is used to manage Load Sessions and view the results.</p> <p>The Reports group provides options for creating real-time and summary reports showing the performance data gathered by WebLOAD Console. A full description of all WebLOAD reports can be found in Running a Load Session .</p> <p></p> <p>The Session tab includes the following functions for Load Session management.</p> Tab Option Description Start Group Edit Template Switches from Run mode to Edit mode. Execution Group Start Session Starts executing the current Load Session. Stop All Stops all Load Session activities. A  message box pops up, asking for confirmation. Throttle Control Opens the Throttle Control dialog box. Use  Throttle Control to dynamically change the load while the session is in  progress. Reports Group Integrated  Report  Manager Opens an existing report from the reports list Transactions  Dashboard  Window Opens a Transactions  Dashboard tab, which displays real-time updates of transaction statistics in  a graphical display Open Statistics Opens a Statistics tab, which displays real-time updates of the  statistics measurements for Load Machines, Probing Clients, and the  performance measurements Dashboard  Window Opens a WebLOAD Dashboard  tab, which displays real-time updates of statistic measurements in a  dashboard-type display. Open Data Drilling Opens a Transactions tab, which displays  information on all user- defined and named transactions Export Statistics Group Export Report Provides three options:  \u009f Export to Excel \u2013 Exports  the displayed chart or grid to Microsoft  Excel.  \u009f Export to Tab File \u2013  Exports the displayed chart or grid to a tab  file  \u009f Export to HTML\u2013 Exports  the displayed chart or grid to HTML. Export All Provides three options:  \u009f Export All to Excel \u2013  Exports all statistics to Microsoft Excel.  \u009f Export All to Tab File \u2013  Exports all statistics to a tab file  \u009f Export All to HTML\u2013  Exports all statistics to HTML. Import Opens the Import External Statistics dialog  box to import statistics from an external file. Windows Group Cascade Windows Cascades the windows displayed in the WebLOAD Results window. Tile Horizontally Tiles the windows displayed in the WebLOAD Results window  horizontally. Tile Vertically Tiles the windows displayed in the WebLOAD  Results window vertically. View Group Log Window A toggle enabling hiding and displaying the  Log Window. The Log window is both floating and dockable, and can be placed  in any part of the screen."},{"location":"console/console_features/#tools-tab","title":"Tools Tab","text":"<p>The Tools tab provides the following functions.</p> <p></p> Tab Option Description Options Group Global Options Opens the Global Options dialog box. Use the global options to customize WebLOAD Console to your specifications, see Setting Global Options . Default Options Opens the Default Options dialog box. Use the default settings to customize the script settings to your specifications. When building a new template or session, or editing an existing one, each new single script or script participating in a Mix is automatically assigned these defaults, see Setting Script Options . Current Session Options Opens the Current Session Options dialog box. Use the session settings to customize the current session to your specifications. This option will update the options for all scripts in the current session, see Setting Script Options . Script Options Opens the Script Options dialog box. Use the session settings to customize the current script to your specifications, see Setting Script Options . Cloud Group Cloud Options Opens the Cloud Accounts dialog box, for creating a WebLOAD cloud account Terminate Cloud Machines Shuts down the cloud machines. Git Group Repository Settings Enables specifying basic Git repository settings, as prerequisites for WebLOAD support of basic Git operations. Commit Enables saving to the Git local repository any WebLOAD objects you are currently working on. Commit dir Enables saving to the Git local repository an entire folder with all its descendants. Pull from Repository Enables pulling data from the Git remote repository to the Git local repository. Push to Repository Enables pushing to the Git remote repository, all Commits you had made to the Git local repository. Open Git Gui Enables launching your Git UI from within WebLOAD. Applications Group WebLOAD  Recorder Opens WebLOAD Recorder. Use the WebLOAD  Recorder to record, edit, and debug load test scripts. For more information,  see theWebLOAD Recorder User\u2019s Guide. WebLOAD  Analytics Opens WebLOAD Analytics. Use the WebLOAD  Analytics to analyze data and create custom, informative reports after  running a WebLOAD test session. For more information, see theWebLOAD Analytics User\u2019s Guide."},{"location":"console/console_features/#help-drop-down","title":"Help Drop Down","text":"Menu Entry Description Contents Opens the WebLOAD Console Help screen, displaying the Contents tab. Search Opens the WebLOAD Console Help screen, displaying the Search tab. JavaScript References Opens the WebLOAD JavaScript Reference Manual Help screen, displaying the Contents tab. Scripting Guide Opens the WebLOAD Scripting Guide Help screen, displaying the Contents tab. WebRM Help Opens the WebRMUsers Help screen, displaying the Contents tab. License Information Opens the RadView License Information dialog box which displays information about your license."},{"location":"console/console_features/#about-button","title":"About Button","text":"About WebLOAD Console\u2026 Displays the program information, version number, and copyright."},{"location":"console/console_performance_reports/","title":"WebLOAD Console Performance Reports","text":"<p>The WebLOAD Dashboard and WebLOAD Transactions Dashboard display a summary of performance statistics generated during the test session. Integrated Reports enable you to configure a report that combines the following:</p> <ul> <li>Performance data from the Load Machines and Probing Clients</li> <li>Performance data on the SUT, gathered from Performance Monitors</li> <li>Existing performance data from a previously saved Load Session with data from the currently running Load Session</li> </ul> <p>Combining several different measurements into a single report gives you a more complete picture of your Web application\u2019s performance.</p>"},{"location":"console/console_performance_reports/#viewing-test-results-on-the-webload-dashboard","title":"Viewing Test Results on the WebLOAD Dashboard","text":"<p>The WebLOAD Dashboard displays real-time statistical information about the test session for the following categories:</p> Category Description Time The time during the test that the values displayed on the Dashboard were sampled. Running Virtual Clients The total number of Virtual Clients currently running. Rounds Executed The total number of times the script has been executed by all Virtual Clients. Failed Rounds The total number of rounds with errors. Failed Hits The total number of hits with errors. Hits Per Second The number of HTTP requests for information (pages, individual images, objects, or frames) made by Virtual Clients to the SUT per second. Calculated Hits Per Day The number of HTTP request for information made by Virtual Clients to the SUT per day. Pages Per Second The number of upper level request for information made by a Virtual Client to the system under test (SUT) per second. Calculated Pages Per Day The number of upper level request for information made by a Virtual Client to the system under test (SUT) per second. Throughput Per Second The average number of bytes per second transmitted from the SUT to the Virtual Clients running this script. Calculated Throughput Per Day The average number of bytes per day transmitted from the SUT to the Virtual Clients running this script. <p>To open the Dashboard:</p> <ul> <li>Click Dashboard Window in the Session tab of the ribbon.</li> </ul>"},{"location":"console/console_performance_reports/#viewing-test-results-on-the-webload-transactions-dashboard","title":"Viewing Test Results on the WebLOAD Transactions Dashboard","text":"<p>The WebLOAD Transactions Dashboard displays real-time statistical information about the transactions in a test session, in a line graph. Separate lines track each transaction. For additional information about graphs, see Viewing Integrated Reports .</p> <p></p> Category Description Transaction  Name The name of the transaction Value The last (current) value of the transaction  response time. Total Min The lowest value reported for this  transaction\u2019s response time since the beginning of the test. Total Max The highest value reported for this transaction\u2019s response time since the beginning of the test. Total Average The average value of the transaction response time. Total Successful Count The number of successful transactions. Successful TPS The number of successful transactions per second. Stdev The average amount this statistic varies from the average number in this script. Scale The scale of the graph\u2019s Y-Axis. For information about changing the Scale value, see Changing the Scale of a Report for a Selected Measurement. <p>To open the Transactions Dashboard:</p> <ul> <li>Click Transactions Dashboard Window in the Session tab of the ribbon.</li> </ul>"},{"location":"console/console_performance_reports/#opening-reports","title":"Opening Reports","text":"<p>To open reports:</p> <ol> <li> <p>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Report dialog box appears.</p> </li> <li> <p>Click New,</p> </li> </ol> <p>-Or-</p> <p>Select a report and click Edit. The Report dialog box appears.</p> <p></p> <p>Report data is organized in a tree structure. Report fields are organized into different \u201creport tree branches\u201d, illustrated in the Report Dialog Box figure.</p> <p>Report tree branches include:</p> <ul> <li>Total \u2012 Data collected for the session as a whole, including total load size, total number of rounds, and total number of pages.</li> <li>ScriptName@LoadGenerator \u2012 Data collected for all instances of the named script, running under the named Load Generator. Multiple branches may appear for a single script name, each one linked to a different Load Generator.</li> <li>ScriptName: Total \u2012 Data collected for all instances of the named script, running under all Load Generators participating in this test session.</li> <li>_Performance@LoadGenerator \u2013 Data collected for assessing Load Generator performance during this test session.</li> <li>SLA \u2013 Data collected for all SLA rules defined in the SLA Manager.</li> </ul> <p>Using the Report dialog box you can:</p> <ul> <li>Configure the items displayed in the test report.</li> <li>Rename the report.</li> <li>Import an existing report configuration.</li> <li> <p>Set a default report configuration.</p> </li> <li> <p>Apply a default report configuration.</p> </li> <li>Configure a report that compares existing performance data from a previously saved Load Session with data from the currently running Load Session.</li> </ul> <p>The following table describes the buttons in the Report dialog box.</p> Button Functionality Import <p>Imports a report configuration for the selected component in the configuration tree, from a previously saved Load Template. See Importing a Report Configuration for a Selected Component.</p><p>Note: Select an upper level component in the configuration tree to enable this button.</p> Import All Imports a report configuration from a previously saved Load Template, see Importing a Complete Report Configuration. Set as Defaults <p>Sets the current Integrated Report configuration as the default. This overrides the built-in default configuration.</p><p>Note: Select an upper level component in the configuration tree to enable this button.</p> Apply Defaults <p>Apples the default configuration. The defaults are set using the Set as Default option. Selecting this option configures the Integrated Reports to the defaults.</p><p>Note: Select an upper level component in the configuration tree to enable this button.</p> Regression Testing Add Session Imports performance data from a previously saved (existing) Load Session, see Importing Report Parameters from a Saved. Remove Session <p>Removes the selected Load Session from the performance data available for display in the report.</p><p>Note: Select an upper level component in the configuration tree to enable this button.</p> OK Confirms the selections made in this dialog box. The selected items are included in the Integrated Report. Cancel Closes this dialog box without accepting changes. Help Opens the online-help dialog box."},{"location":"console/console_performance_reports/#opening-an-existing-report","title":"Opening an Existing Report","text":"<p>To open an existing report:</p> <ol> <li> <p>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</p> </li> <li> <p>Select a report.</p> <p>The Open button is enabled and a description of the measurements included in the report appears at the bottom of the dialog box.</p> </li> <li> <p>Click Open.</p> <p>The Integrated Report displays in the Console Results Window. WebLOAD Console displays the results of your test in a graphical format. Click the Data Editor  toolbar button at the top of the Results Window to display your test results in a tabular format.</p> </li> </ol>"},{"location":"console/console_performance_reports/#editing-a-report","title":"Editing a Report","text":"<p>To edit a report:</p> <ol> <li>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</li> <li> <p>Select a report and click Edit. The Report dialog box appears.     </p> </li> <li> <p>Make the necessary changes, and click OK.</p> </li> </ol>"},{"location":"console/console_performance_reports/#renaming-a-report","title":"Renaming a Report","text":"<p>You can assign a meaningful name to a report. The default name for reports is \u201cReportX\u201d where X is a number that is incremented with each generated report.</p> <p>To rename a report:</p> <ol> <li>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</li> <li> <p>Select a report to rename.</p> <p>The Rename button is enabled and a description of the measurements included in the report appears at the bottom of the dialog box.</p> </li> <li> <p>Click Rename.</p> <p>The Rename Report dialog box appears.</p> <p></p> </li> <li> <p>Type a new name for the report.</p> </li> <li> <p>Click OK.</p> <p>The selected report is renamed.</p> </li> </ol>"},{"location":"console/console_performance_reports/#deleting-a-report","title":"Deleting a Report","text":"<p>To delete a report:</p> <ol> <li>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</li> <li> <p>Select a report to delete.</p> <p>A description of the measurements included in the report appears at the bottom of the dialog box.</p> </li> <li> <p>Click OK.</p> <p>The selected report is deleted.</p> </li> </ol>"},{"location":"console/console_performance_reports/#configuring-an-integrated-report","title":"Configuring an Integrated Report","text":"<p>You can configure an Integrated Report while the test is running. To view data from the WebLOAD Performance Monitor in your Integrated Report, see *Performance Measurements Manager.</p> <p>To configure an integrated report:</p> <ol> <li> <p>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</p> <p></p> </li> <li> <p>Click New.</p> <p>The New Report dialog box appears.</p> <p></p> </li> </ol> <p>The full tree of measurements, including all of the items that can be included in the report, are displayed in the Report dialog box. In addition, items configured to be collected in the Performance Measurements Manager are also displayed. Data for all of the items is accumulated during the test run.</p> <p>Select the parameters to view in the Integrated Report from the tree structure displayed in the Report dialog box. Only the results for the items that are checked are display in the Integrated Report.</p>"},{"location":"console/console_performance_reports/#selecting-measurements-for-the-integrated-report","title":"Selecting Measurements for the Integrated Report","text":"<p>The first time the Report dialog box appears, none of the items are selected. If you do not select any of the checkboxes, the Integrated Report is blank.</p> <p>You can configure the Integrated Report in one of several ways:</p> <ul> <li>Select the items to be included in the report manually.</li> <li>Select the checkbox adjacent to the measurement that you want to include in the Integrated Report. The options display in tree format. You can expand or compress the tree using the +/- buttons. If an upper level component is selected, all of the default subcomponents in that tree will be selected.</li> </ul> <p>Note: A gray circle next to a measurement indicates that no default subcomponents are defined (the upper level component cannot be selected). Right-click a measurement to be included in the report to prompt the pop-up menu that enables you to select the item.</p> <ul> <li>Select a WebLOAD Console default configuration by clicking the Apply Defaults</li> </ul> <p>button. WebLOAD Console selects the set of default measurements.</p> <ul> <li>Select Import All to apply a previously configured Integrated Reports test set, saved as a Load Template to your current test.</li> </ul> <p>The configuration is imported, even if it was designed for testing a different application.</p>"},{"location":"console/console_performance_reports/#changing-the-reports-parameters","title":"Changing the Reports Parameters","text":"<p>You can edit the timer options listed in the configuration tree in real time. While a test is running, you can:</p> <ul> <li>Add a user-defined timer that was not previously configured.</li> <li>Change the scale of the report.</li> </ul> <p>Timer information from Probing Clients and Load Machines are added to the configuration tree automatically in runtime, when the Console receives the timer data.</p> <p>You can define user-defined timers in the script to measure specific activity. For more information on Timers, see the WebLOAD Scripting Guide.</p>"},{"location":"console/console_performance_reports/#adding-a-user-defined-timer","title":"Adding a User-Defined Timer","text":"<p>To add a user-defined timer:</p> <ol> <li> <p>Right-click the upper level item in the configuration tree to which you would like to add a timer.</p> <p>A drop-down menu appears.</p> </li> <li> <p>Click Add Timer.</p> </li> <li>Enter the name of the timer in the text box.</li> <li>Select the timer attributes you would like to include in the report.</li> <li> <p>Click OK.</p> <p>The new timer is included in the Integrated Report.</p> </li> </ol>"},{"location":"console/console_performance_reports/#importing-report-parameters-from-a-saved-load-template","title":"Importing Report Parameters from a Saved Load Template","text":"<p>WebLOAD Console enables you to import a complete report configuration or to import a report configuration for a selected component in the Load Session.</p>"},{"location":"console/console_performance_reports/#importing-a-complete-report-configuration","title":"Importing a Complete Report Configuration","text":"<p>To import a complete report configuration:</p> <ol> <li>In the Reports dialog box, click Import All. The Open dialog box appears.</li> <li>Select the Load Template to import.</li> <li> <p>Click Open.</p> <p>The Import dialog box displays a list of reports contained in the selected Load Template.</p> </li> <li> <p>Select the report that contains the desired configuration.</p> </li> <li> <p>Click OK.</p> <p>The report is configured to display the same measurements.</p> </li> </ol> <p>Note: If the imported configuration contains a measurement not configured in the current report, WebLOAD Console ignores the measurement in the Load Template file and does not add it to the report.</p> <p>This function imports the Integrated Report test configuration from the selected Load Template file. None of the other information in the Load Template file is imported.</p>"},{"location":"console/console_performance_reports/#importing-a-report-configuration-for-a-selected-component","title":"Importing a Report Configuration for a Selected Component","text":"<p>To import a report configuration for a selected component:</p> <ol> <li>Select the upper level component in the configuration tree for which you want to import a report configuration.</li> <li> <p>Click Import.</p> <p>The Open dialog box appears.</p> </li> <li> <p>Select the Load Template to import and click Open.</p> <p>The Import dialog box displays a list of reports contained in the selected Load Template.</p> <p></p> </li> <li> <p>Select the report that contains the desired configuration. WebLOAD Console displays the list of components (Load Machines and Probing Clients) included in that report.</p> </li> <li> <p>Select the component that contains the desired configuration.</p> <p>The current component is configured to display the same measurements.</p> <p>Note: If the imported component contains a measurement that is not configured in the current report, WebLOAD Console ignores the measurement in the Load Template file. It does not add it to the report.</p> <p>This function imports the Integrated Report test configuration from the selected Load Template file. None of the other information in the Load Template file is imported.</p> </li> </ol>"},{"location":"console/console_performance_reports/#load-generator-performance-statistics","title":"Load Generator Performance Statistics","text":"<p>You can configure a report that displays a summary of Load Generator performance statistics generated during the test session. This is useful for analyzing your Load Generator capacity and gauging the load on the Load Generator itself. The Load Generator performance statistics include:</p> <ul> <li>Free memory \u2013 Free memory of the machine hosting the Load Generator</li> <li>Global CPU usage \u2013 The total CPU usage of the machine hosting the Load Generator</li> <li>Load Generator CPU usage - CPU usage of the Load Generator process</li> <li>Server Latency</li> </ul> <p>In addition, if the Show Performance Warnings option is selected in the Diagnostics tab of the Default/Current Session Options or Script Options, WebLOAD automatically sends warning messages when Load Generators are getting overloaded, so you know how to better utilize the Load Generators in your current and future tests.</p> <p>To add Load Generator statistics to an integrated report:</p> <ol> <li>Open a report, as follows:<ol> <li>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Reports dialog box appears.</li> <li>Click New to open a new report, or select an existing report and click Edit. The Report dialog box appears.</li> </ol> </li> <li> <p>Alternatively, click Update in the Integrated Report toolbar, to update the display in the report while a test is in progress.</p> <p>The Report dialog box appears.</p> <p></p> </li> <li> <p>Select items under _Performance@LoadGenerator to indicate the Load Generator measurements you want displayed in the Integrated Report.</p> </li> </ol>"},{"location":"console/console_performance_reports/#regression-testing","title":"Regression Testing","text":"<p>Regression testing enables you to compare Load Sessions while tests are running, or after the test session is completed. WebLOAD regression testing reports enable you to visualize, verify, and compare results over time to confirm that results only vary in ways that you expect them to.</p> <p>Regression testing enables you to configure a report that compares:</p> <ul> <li>Existing performance data from a previously saved or \u201cexpected\u201d Load Session with data from the currently running test session.</li> <li>Existing performance data from two previously saved Load Sessions.</li> </ul> <p>Combining performance results from several different Load Sessions into a single report enables you to view, verify and compare results over time and ensure that results only vary in ways that you expect them to.</p>"},{"location":"console/console_performance_reports/#configuring-an-integrated-report-to-include-data-from-previously-saved-load-sessions","title":"Configuring an Integrated Report to Include Data from Previously Saved Load Sessions","text":"<p>To configure an Integrated Report to include data from previously saved Load Sessions:</p> <ol> <li>Click Integrated Report Manager in the Session tab of the ribbon. The Integrated Report dialog box appears.</li> <li> <p>Click New.</p> <p>The Reports dialog box appears.</p> </li> <li> <p>In the Reports dialog box, click Add Session. The Open dialog box appears.</p> </li> <li>Select the Load Session ( *.ls) file to add and click Open. The Load Session is added to the Report dialog box.</li> <li>Configure the Integrated Report to include the measurements you want to view, see Configuring an Integrated Report . If a measurement is already selected in the current Load Session it is automatically selected in the Load Session selected to be included in the report.</li> <li> <p>Click OK.</p> <p>The report displays in the Console Results window.</p> </li> </ol>"},{"location":"console/console_performance_reports/#removing-a-previously-saved-load-session-from-the-integrated-report-configuration","title":"Removing a Previously Saved Load Session from the Integrated Report Configuration","text":"<p>To remove a previously saved Load Session from the Integrated Report configuration:</p> <ol> <li>Select the Load Session you want to remove from the Integrated Report configuration in the Reports dialog box.</li> <li> <p>Click Remove Session.</p> <p>The Load Session is removed from the Report dialog box, and any measurements displayed for that Load Session in the Console Results window are removed.</p> </li> </ol>"},{"location":"console/console_performance_reports/#viewing-integrated-reports","title":"Viewing Integrated Reports","text":"<p>In the Integrated Report, WebLOAD Console displays the results of your test in a line graph. Separate lines track each measurement selected in the report configuration.</p> <p></p> <p>The report above shows an Integrated Report that includes four measurements. Each is tracked on a different line graph. The line graphs are color-coded to match the measurements on the bottom half of the report.</p> <p>Features of this graph:</p> <ul> <li>The upper part of the report displays a line graph for each measurement tracked in the report. The X-Axis represents the elapsed time (in seconds) for this test session. The Y-Axis represents the actual value for each measurement, displayed as a percentage relative to the defined maximum Scale Value.</li> <li>Hover over a colored line graph to view the exact value for the selected point.</li> <li> <p>The scroll bar at the center of the screen provides you with a quick and easy way to access points in the test session currently not in focus.</p> </li> <li> <p>The lower part of the report displays a list of the measurements being tracked for each host and each session, the current value of the measurement and, in the last column on the right, the maximum Scale Value set for each measurement.</p> </li> <li>The Time Range field in the top right-hand corner displays the time scale for the</li> </ul> <p>X-Axis. In this graph, the X-Axis displays a window of 200 seconds out of the total time span of the Load Session. Using the arrows on the Time Range field, you can change the number of seconds to achieve the report display you desire.</p> <ul> <li>If you are tracking more than one measurement, the top graph shows multiple graph lines. To bring up a history focusing on a specific measurement, double-click a single measurement line in the Integrated Report.</li> </ul> <p></p>"},{"location":"console/console_performance_reports/#changing-the-scale-of-a-report-for-a-selected-measurement","title":"Changing the Scale of a Report for a Selected Measurement","text":"<p>To change the scale of a report for a selected measurement:</p> <ol> <li> <p>Right-click a specific measurement from the lower part of the report and select</p> <p>Change Scale from the pop-up menu,</p> <p>-Or-</p> <p>Double-click a specific measurement from the lower part of the report. The Change Scale dialog box appears.</p> <p></p> </li> <li> <p>Select one of the following:</p> <ul> <li>Auto Adjusted scale \u2013 This uses an automatic scaling algorithm that determines the best way for the measurements to be displayed in the chart view. The scale adjusts itself according to changes in real time and the value adjusts itself according to the scale value. The Y scale of an integrated report for a number of measurements is 0-100. The points of each chart series (specific measurements) are calculated according to the automatic scaling algorithm: Real value * 100 / scale value.</li> <li>User Adjusted scale \u2013 This enables you to manually set the scale value.</li> </ul> </li> <li> <p>Enter the new scale value.</p> </li> <li> <p>Click OK.</p> <p>The scale of the report for that measurement changes in real time. The scale value for a measurement can also be changed after the test has run.</p> </li> </ol>"},{"location":"console/console_performance_reports/#viewing-the-true-value-vs-relative-value-of-a-measurement","title":"Viewing the True Value vs. Relative Value of a Measurement","text":"<p>Each measurement displayed in the Integrated Reports has its own expression or value of measurement. For example, Timer results are measured in seconds. CPU is measured in terms of percentage of usage. Throughput is measured in kilobytes per second. All measurements appear as a percentage relative to the defined scale.</p> <p>To change the scale value of a measurement, see *Changing the Scale of a Report for a Selected Measurement. When you change the maximum value, WebLOAD Console displays the relative value of that measurement rather than the true value of a measurement.</p> <p>To view a measurement\u2019s value:</p> <ul> <li>Select the Data Editor toolbar button to display the relative value of the measurements in the chart.</li> <li>Select the Point Label toolbar button to display the real value of the measurements in the chart.</li> </ul> <p>Note: You can display the real value for a single line in the chart by right-clicking the desired line and selecting Point Label from the pop-up menu.</p>"},{"location":"console/console_performance_reports/#integrated-report-toolbar","title":"Integrated Report Toolbar","text":"<p>At the top of the Integrated Report, find the Integrated Report toolbar. This toolbar offers a variety of options for customizing the Integrated Report display, tailoring the colors, perspective, and dimension as needed.</p> <p>The following illustration shows the Integrated Report toolbar and the function of each toolbar button.</p> <p></p> Icon Toolbar Button Function <p></p><p></p> Copy to Clipboard <p>Captures a screen shot of the currently displayed chart to the paste buffer. Select one of the following formats:</p><p>\u009f    As a Bitmap</p><p>- As a Metafile</p><p>\u009f     As Text (data only)</p> <p></p><p></p> Palette Selector <p>Changes the color palette of the graph.</p><p>1. Click the arrow to display a drop-down of palette bars.</p><p>2. Select one of the palette bars. The palette colors are applied to the graph.</p> <p></p><p></p> 3D/2D Toggles between 2D and 3D view. <p></p><p></p> Axes Settings <p>Modifies the X-Axes and Y-Axes settings of the graph. Perform any of the following:</p><p>- Click  Grid to toggle the Horizontal Grid on and off.</p><p>- Click Interlaced to display the Horizontal Grid\u2019s rows with an alternating background color.</p><p>- Click  Grid to toggle the Vertical Grid on and off.</p><p>- Click Vertical Labels to toggle the X-Axes elapsed time labels to be displayed horizontally or vertically.</p><p>- Click Staggered to toggle the X-Axes elapsed time labels to be displayed in a staggered line or all on the same line.</p><p>- Click Show Labels to toggle the X-Axes elapsed time labeled on or off.</p><p>- Click Options\u2026 to display the Properties dialog box and configure the graph\u2019s advanced settings.</p> Point Labels Toggles whether to display labels for every point in the graph. The Point Labels are the true values of the measurements. Data Editor <p>Displays the relative values of the test results in a tabular format. The Data Editor\u2019s features are as follows:</p><p>- The names of all of the measurements and their attributes tracked in the Integrated Report display in the first column at the far left.</p><p>- The data accumulated during the Load Session, scaled into relative values, displays in tabular format in the table fields.</p><p>- Hovering over a value in the table highlights the values location in the graph.</p><p>- Double-clicking a value in the table enables you to modify the test result value.</p><p>Note: Right-click anywhere in the Data Editor to display a pop-up menu enabling you to select the Data Editor\u2019s location on the screen and customize the displayed text.</p> <p></p><p></p> Zoom <p>Toggles between an enlarged section of the graph and the full graph.</p><p>- Click the Zoom button and drag your mouse over an area in the graph to enlarge that area.</p><p>- Click the Zoom button again to display the full graph.</p> Update Updates items displayed in the Integrated Report while the test is in progress. Click the Update button to open the Report Configuration dialog box. Using this option, you can select the measurement to be displayed in the report. <p></p><p></p> Delete Deletes items from the Integrated Report while the test is in progress. Select the item you want to delete by clicking the Series indicator in the list appearing at the bottom and then click the Delete button. The item is immediately deleted from the report."},{"location":"console/create_load_templates/","title":"Creating Load Templates","text":"<p>Using WebLOAD Console, you create Load Templates to define the events to occur in the Load Session. This chapter describes how to quickly set up a Load Template. Load Templates define the participants (Clients and Servers) in the Load Session, the scripts to run, the number of Virtual Clients to emulate and the test schedule.</p>"},{"location":"console/create_load_templates/#webload-console-options-for-creating-load-templates","title":"WebLOAD Console Options for Creating Load Templates","text":"<p>WebLOAD Console provides three options for creating Load Templates:</p> <ul> <li> <p>Using the WebLOAD Wizard to build a basic Load Template. You define the scripts to run, the Load Machines on which to run the Virtual Clients and the test schedule. After creating a basic template with the wizard, you can change aspects of the configuration through the Console ribbon.</p> </li> <li> <p>Using the Goal-Oriented Test Wizard to create goal-seeking performance tests. Rather than running multiple tests to measure the performance at different loads, you can run the Goal-Oriented Test to measure the performance goal that you desire. You define the scripts to run and the goals to achieve and WebLOAD Console automatically schedules the test session and increases the number of Virtual Clients running until your goals are achieved.</p> </li> <li> <p>Manually using the Console ribbon.</p> </li> </ul> <p>The Load Template material is divided into the following chapters:</p> <ul> <li>Planning a Test Session  describes the stages involved in planning and executing a test session.</li> <li>Connecting to WebRM  describes the process of connecting to WebRM and requesting testing resources.</li> <li>Managing Load Templates and Load Sessions  provides information about working with Load Templates and Load Sessions.</li> <li> <p>Creating Load Templates with the WebLOAD Wizard  guides you through a basic template configuration using the WebLOAD Wizard.</p> </li> <li> <p>Creating Load Templates with Goal-Oriented Test  teaches you to configure a goal-seeking performance test.</p> </li> <li>Configuring a Load Template Manually  provides instructions for configuring a test template manually.</li> </ul> <p>After completing these chapters, you will have the basic skills necessary to create and run your own test.</p>"},{"location":"console/create_load_test_goal/","title":"Creating Load Templates with Goal- Oriented Test","text":"<p>WebLOAD Console offers the Goal-Oriented Test Wizard, a unique feature that enables goal-seeking performance testing.</p>"},{"location":"console/create_load_test_goal/#using-the-goal-oriented-test","title":"Using the Goal-Oriented Test","text":"<p>The Goal-Oriented Test is a predictive feature within WebLOAD Console that identifies the performance threshold of a Web application. You define one or multiple performance parameters and the Goal-Oriented Test automatically creates a schedule and increases the load until your Web application performance falls below the user- defined profile. The Goal-Oriented Test incorporates intelligent, distributed load generation capabilities for virtually unlimited load generation.</p> <p>Using the Goal-Oriented Test wizard to create a Load Template, you define:</p> <ul> <li>The script(s) to run</li> <li>The Load Machines on which the load is generated</li> <li>The performance goals to achieve</li> </ul> <p>You can also specify script options including the type of browser to emulate, connection speed, and playback sleep time options.</p> <p>Note: You cannot use the Goal-Oriented Test wizard if you have not yet recorded (or otherwise created) any scripts. If you do not have any scripts to work with, you must exit the wizard and create a script using one of the authoring tools, such as WebLOAD Recorder.</p>"},{"location":"console/create_load_test_goal/#how-does-the-goal-oriented-test-work","title":"How does the Goal-Oriented Test Work?","text":"<p>When operating WebLOAD Console manually, you specify the number of Virtual Clients that WebLOAD Console should simulate. The evaluation of the SUT\u2019s performance is based on this number. For example, you might configure WebLOAD Console to test the performance of your Web application when 200 Virtual Clients perform a certain function simultaneously. WebLOAD Console runs the test and may report that when 200 Virtual Clients are running, the application Response Time is \u201cx\u201d.</p> <p>The Goal-Oriented Test is different. The Goal-Oriented Test enables you to specify the performance goals that you want to achieve, and WebLOAD Console generates a Goal- Oriented Test test that automatically schedules a test to achieve the specified goals. For example, if your performance goal is for your application server\u2019s response time not to exceed three seconds, the Goal-Oriented Test devises the test for you. The</p> <p>Goal-Oriented Test tells you how many users your application server is able to accommodate when your performance goals are met.</p> <p>The Goal-Oriented Test is a unique WebLOAD Console feature. It enables you to devise your test to reflect the real way that you want to see your application performance. Many times, you do not know the number of clients that will access your site, but you do know the quality of service you want to achieve. Rather than running multiple tests to measure the performance at different loads, you can run the Goal- Oriented Test once, measuring the performance level you desire.</p>"},{"location":"console/create_load_test_goal/#the-goal-oriented-test-wizard-workflow","title":"The Goal-Oriented Test Wizard Workflow","text":"<p>The following diagram illustrates the Goal-Oriented Test Wizard workflow.</p> <p></p>"},{"location":"console/create_load_test_goal/#opening-the-goal-oriented-test-wizard","title":"Opening the Goal-Oriented Test Wizard","text":"<p>To open the Goal-Oriented Test Wizard:</p> <ol> <li>Select Goal-Oriented Test Wizard from the Console shortcut dialog box at the system startup,</li> </ol> <p>-Or-</p> <p>Click Goal-Oriented Test Wizard in the Home tab of the ribbon. The Goal-Oriented Test Wizard Welcome dialog box opens.</p> <p> 2. Click Next.</p> <p>The Goal-Oriented Test Wizard progresses to the Script Type screen.</p>"},{"location":"console/create_load_test_goal/#selecting-a-script-or-mix","title":"Selecting a Script or Mix","text":"<p>The next step in configuring a Goal-Oriented test is to define the type of script you want to run during your test session. Scripts are test scripts (scenarios) that describe user activity, and are used to test your Web application.</p> <p></p> <p>WebLOAD Console supports two types of scripts:</p> <ul> <li>Single Scripts \u2013 which are lone test-scripts.</li> <li>Mix of Scripts \u2013 which are a combination of scripts used to simulate groups of users performing different activities on the system under test (SUT) at the same time.</li> </ul> <p>To run a single script:</p> <ol> <li>Select Single Script.</li> <li>Click Next.</li> </ol> <p>WebLOAD Console progresses to the Script Selection screen. See Running Single Scripts .</p> <p>To run a Mix of Scripts:</p> <ol> <li>Select Mix.</li> <li>Click Next.</li> </ol> <p>WebLOAD Console progresses to the Mix Selection screen. See Running a Mix of Scripts .</p>"},{"location":"console/create_load_test_goal/#running-single-scripts","title":"Running Single Scripts","text":"<p>You must have a script to continue configuring a test with the Goal-Oriented Test Wizard. If you do not have any scripts to work with, you must exit the wizard and go into one of the authoring tools, for example WebLOAD Recorder, and create a script.</p> <p></p> <p>To run a script:</p> <ol> <li>Select the source of the script to be used for this test. Click the button and select an existing script from your system.</li> <li>To optionally open and view or edit the selected script, click View. WebLOAD Recorder opens displaying the selected script.</li> <li>To optionally configure runtime options exclusive to this script, click Options.     The Script Options dialog box opens enabling you to define the runtime options for the selected script. For more information on script options, see Setting Script Options .</li> <li>Click Next.     The Goal-Oriented Test Wizard progresses to the PMM Settings screen. See Selecting Performance Measurements .</li> </ol>"},{"location":"console/create_load_test_goal/#running-a-mix-of-scripts","title":"Running a Mix of Scripts","text":"<p>Using the Goal-Oriented Test Wizard you can run your test using a saved Mix or create a new Mix of scripts through the wizard. The following illustration shows the process for selecting a Mix of scripts to be used in a Goal-Oriented Test test.</p> <p></p> <p></p> <p>Using Mix you can prepare a combination of scripts, each performing a specific activity. Then you can tune your testing by changing the combination of scripts, and changing the weight of each script in the Mix.</p> <p>Combining scripts through a Mix can simulate different groups of users performing different activities on the SUT at the same time. Using a Mix is another way you can create test scenarios emulating real-life behavior.</p> <p></p> <p>To run a Mix of scripts:</p> <ol> <li> <p>Select the source for the Script Mix to be used for this test from the Mix Selection dialog box. You can either:</p> <ul> <li>Select Use an Existing Mix and click the  button to select a <code>*.mix</code> file from your system.</li> <li>Select Create a Mix to configure a new Mix.</li> <li>Click Next. WebLOAD Console progresses to the Mix Definition dialog box. See Defining a Mix.</li> </ul> </li> </ol>"},{"location":"console/create_load_test_goal/#defining-a-mix","title":"Defining a Mix","text":"<p>A Mix is a set of scripts, each performing different activity, to simulate groups of users performing different activities on the SUT at the same time. If you selected Use an Existing Mix on the script / Mix Selection screen, the selected Mix appears on the screen, enabling you to modify the Mix. You can also create a new Mix.</p> <p></p>"},{"location":"console/create_load_test_goal/#creating-a-mix","title":"Creating a Mix","text":"<p>To create a Mix:</p> <ol> <li>Enter a descriptive name in the Mix name field.</li> <li> <p>Specify whether the relative weights of the script refer to execution time or to number of virtual clients:</p> <ul> <li>Based on the number of virtual clients \u2013 The mix interprets the relative weights in terms of number of virtual users. For example, if the weight of Script A is 25 and of Script B is 75, the mix execution runs script A with 25% of the virtual users and script B with 75% of the users.</li> <li>Based on the execution time \u2013 The mix interprets the relative weights in terms of time. For example, if the weight of Script A is 25 and of Script B is 75, the mix execution run script A for 25% of the time and script B for 75% of the time.</li> </ul> </li> <li> <p>Click Add.        The Open dialog box appears, enabling you to select the script to add to the Mix.</p> </li> <li>Select a script from your file system and click Open. The script is added to the Mix.</li> <li> <p>Optionally, select the script and set any of the following parameters:</p> <ol> <li>Script name \u2013 Specify a name for the script and its particular settings. Keep in mind that in a mix, in addition to running different scripts, you can also run the same script under different settings. For example, a mix can contain two items: Script A running on Chrome, and the same Script A running on Mozilla Firefox. Give a different descriptive name to each of the two mix items.</li> <li>Weight \u2013 Specify the relative weight of this script, as a positive whole number. The application will run each script based on its weight in relation to the total of weights. When the total of weights is 100, the weight is equivalent to a percentage; however, this is not required. For example, if you specified a weight of 1 for Script A and a weight of 3 for Script B, then the system assigns script A a relative weight of 1/4, and to Script B the relative weight of 3/4. This is equivalent to a weight of 25 for Script A and 75 for Script B; in both cases, Script A will run 25% of the rounds, and Script B will run 75% of the rounds.</li> <li>Browser and Version \u2013 Select the browser type and browser version. Alternatively, click the Change button to edit the user agent definition. </li> <li> <p>Bandwidth \u2013 Specify a bandwidth. You can do this in one of two ways:</p> <ul> <li>Select a bandwidth from the drop-down list.</li> <li>Enter a number, to specify that number of bits per second.</li> </ul> </li> <li> <p>Max Connections \u2013 Specify the number of max connections for the load generator.</p> </li> </ol> </li> <li> <p>Optionally, click Options to set any of the settings available from the Script Options dialog box (such as the browser to emulate, connection settings and playback sleep options). This will change the settings of the currently selected item only.         The Script Options dialog box opens. For information on setting the Script Options, see Setting Script Options .</p> </li> <li>Repeat steps [3 ] through [6 ] to add additional scripts to the Mix.</li> <li>In the Weight box, type or select the relative weight for the Script. Click Make Equal to assign equal weight to all of the Scripts in the Mix.</li> <li>Click Save.        The Mix configuration is saved with the extension *.mix.</li> <li>Click Next.        WebLOAD Console progresses to the PMM Settings screen. See Selecting Performance Measurements .</li> </ol>"},{"location":"console/create_load_test_goal/#deleting-a-script-from-a-mix","title":"Deleting a script from a Mix","text":"<p>To delete a script from a Mix:</p> <ol> <li>Select the Script you want to delete from the Mix.</li> <li>Click Remove.</li> </ol>"},{"location":"console/create_load_test_goal/#viewing-a-script-from-a-mix","title":"Viewing a script from a Mix","text":"<p>To view a script from a Mix in the WebLOAD Recorder:</p> <ol> <li>Select the script you want to view.</li> <li>Click View.     The WebLOAD Recorder is launched, and displays the selected script.</li> </ol>"},{"location":"console/create_load_test_goal/#selecting-performance-measurements","title":"Selecting Performance Measurements","text":"<p>You can optionally open the Performance Measurements Manager and configure WebLOAD Console to collect performance statistics from your application server, database, and Web server while the test is running.</p> <p></p> <ol> <li> <p>Click Add Monitors to the Performance Measurements Manager and configure the performance statistics to monitor and display in real-time during the test.</p> <p>The Performance Measurements Manager opens. For more information on configuring the statistics to monitor, see Performance Measurements Manager .</p> </li> <li> <p>Click Next.     The Goal-Oriented Test Wizard progresses to the Host Selection screen. See</p> <p>Selecting Host Computers .</p> </li> </ol>"},{"location":"console/create_load_test_goal/#selecting-host-computers","title":"Selecting Host Computers","text":"<p>After selecting the script to use for the test, WebLOAD Console displays the Host Selection dialog box.</p> <p></p> <p>Hosts are the computer systems participating in the test session. In this dialog box you define the hosts to participate in the Goal-Oriented test. Host computers can be dedicated, local computers, or they can be computers which are rented on a temporary basis from the Amazon\u2122 Elastic Compute Cloud\u2122 (EC2). Hosts can act as Load Machines or Probing Client Machines.</p> <p>For more information about setting up EC2 computers as host computers, refer to Setting Up Cloud Computers .</p> <p>Load Machines:</p> <p>By selecting a list of Load Machines, you define a pool of Hosts that WebLOAD Console uses to generate a load until the Goal-Oriented Test goal is reached. To reach your defined goal, WebLOAD Console may need to generate a large number of users accessing the SUT. The number of users that can be generated on each host depends on the power of each host machine. Defining many machines as Load Machines allows for the simulation of more users throughout the Goal-Oriented test.</p> <p>Probing Client Machines:</p> <p>WebLOAD Console reports exact measurements for single Probing Clients. By defining Probing Client Machines on different hosts, you will receive exact performance measurements for that client, rather than averages calculated for users generated on Load Generators. By defining a list of Probing Client Machines, you can receive accurate measurements at different locations (depending on the location of the host).</p> <p>Therefore, it is recommended that you define at least one Probing Client Machine in a Goal-Oriented Test Session, see Defining Performance Goals .</p> <p>Note: If you are running a script with Perfecto Mobile script, define a single Load Machine or a single Probing Client in order to simulate a single user.</p>"},{"location":"console/create_load_test_goal/#adding-host-computers-to-the-host-computers-list","title":"Adding Host Computers to the Host Computers List","text":"<p>To add a host computer to the host computers list:</p> <ol> <li> <p>In the Host Selection dialog box, click Add. The Add Host Computer dialog box appears.</p> <p></p> </li> <li> <p>To add a local host computer, select Add by host name or IP address and enter the host computer name or IP address in the Address field.</p> </li> <li> <p>To add cloud host machines:</p> <ol> <li>Select Add Cloud host.     If you have not yet created a WebLOAD cloud account, a dialog box appears. Click OK and the Cloud Accounts dialog box appears. Create one or more WebLOAD cloud accounts as described in Creating WebLOAD Cloud Accounts .</li> <li>Select a WebLOAD cloud account from the Name drop-down box.</li> <li>In the Number of Machines field, enter the number of machines you wish to add from the selected WebLOAD cloud account.</li> <li>Repeat steps b-c to specify machines from another WebLOAD cloud account.     Optionally, click Cloud Options to add or modify WebLOAD cloud accounts. The Cloud Accounts dialog box appears. For information about the available actions, refer to the explanations following.</li> </ol> </li> <li> <p>Click OK.</p> <ul> <li>If you added a local host machine, the machine is added to the Load Machines list in the Host Selection dialog box, and is listed by the host name or IP address you entered.</li> <li>If you added cloud host machines, a list of machines is added to the Load Machines list in the Host Selection dialog box with the names \u201c<code>&lt;*WebLOAD Cloud Account Name*&gt;</code>&lt;X&gt;\u201d where X is a number that is incremented for each added cloud host machine.</li> </ul> <p>For defining Host Computers as Load Machines and Probing Clients, see Designating a Host Computer as a Load Machine  and Designating a Host Computer as a Probing Client Machine .</p> </li> </ol>"},{"location":"console/create_load_test_goal/#designating-a-host-computer-as-a-load-machine","title":"Designating a Host Computer as a Load Machine","text":"<p>To designate a host computer as a Load Machine:</p> <ol> <li> <p>Select a host from the Host Computer window.</p> <p>To add hosts not yet defined to the Host Computer window, see Adding Host Computers to the Host Computers List .</p> </li> <li> <p>Click the single arrow key adjacent to the Load Machine or Probing Clients window.</p> <p>The selected host moves to the Load Machine or Probing Clients window.</p> </li> <li> <p>Repeat steps 1 and 2 to define all of the hosts participating in the test.</p> </li> <li> <p>Click Next.</p> <p>After configuring the hosts participating in the Goal-Oriented test, the Goal- Oriented Test Wizard prompts you for the goals you want to achieve.</p> <p>The Goal Definition dialog box appears, see Defining Performance Goals .</p> </li> </ol> <p>Note: If you define a Probing Client host, the Probing Client Script Selection dialog box appears</p>"},{"location":"console/create_load_test_goal/#designating-all-host-computers-as-load-machines","title":"Designating all Host Computers as Load Machines","text":"<p>To designate all Host Computers as Load Machines:</p> <ul> <li>Click the double arrow key adjacent to the Load Machine window. All of the host computers move to the Load Machine window.</li> </ul> <p>Note: At least one system must be configured as a Load Machine to continue working with the wizard.</p>"},{"location":"console/create_load_test_goal/#designating-a-host-computer-as-a-probing-client-machine","title":"Designating a Host Computer as a Probing Client Machine","text":"<p>To designate a host computer as a Probing Client Machine:</p> <ol> <li>Select the host from the Host Computer window.</li> <li>Click the single arrow key adjacent to the Probing Client Machines window. The selected host moves to the Probing Client Machine window.</li> </ol>"},{"location":"console/create_load_test_goal/#deleting-a-host-computer","title":"Deleting a Host Computer","text":"<p>To delete a host computer:</p> <ol> <li>Select the host name from the Host Computer list.</li> <li>Click Delete.</li> </ol> <p>The host is deleted from the Host Computer list.</p>"},{"location":"console/create_load_test_goal/#configuring-probing-clients","title":"Configuring Probing Clients","text":"<p>If you designate a host computer as a Probing Client Machine, you are prompted to assign a script for each Probing Client participating in the test session. The following screen is displayed:</p> <p></p> <p>To assign a script for a Probing Client machine:</p> <ol> <li>Browse your file system for the script by clicking the button next to the Script Path field. The path and the name of the script you select are displayed in the fields.</li> <li>Click Next.</li> </ol>"},{"location":"console/create_load_test_goal/#defining-performance-goals","title":"Defining Performance Goals","text":"<p>After defining the host computers participating in your test, the Goal-Oriented Test Wizard prompts you for the performance goals you want to achieve in your test session.</p> <p></p>"},{"location":"console/create_load_test_goal/#about-the-goal-definition-dialog-box","title":"About the Goal Definition Dialog Box","text":"<p>The Goal Definition dialog box enables you to define the performance goals for the Goal-Oriented test. The defined goals are displayed at the top of the dialog box where you can see at a glance all of the participants in the test, the measurements being tested and the goals to be achieved.</p> <p>On the bottom of the dialog box define the (OR/AND) conditions of the goals where you specify whether at least one or all of the goals must be met. The buttons on the lower half of the dialog box are used for defining and editing these goals.</p>"},{"location":"console/create_load_test_goal/#the-goal-table","title":"The Goal Table","text":"<p>The goal table in the center of the dialog box contains the following fields:</p> Field Name Description Source <p>The source you are tracking to determine when your goal is reached. The source can be either:</p><p>- A Probing Client Machine</p><p>- A Load Machine</p><p>The source for Load Machines is \u201cTotal\u201d because your results are the average of all Virtual Clients. The Source for Probing Client Machines is the name of the Probing Client.</p> Measurement <p>The measurement or activity that you are testing such as:</p><p>- Response Time</p><p>- Hits Per Second</p><p>- Round Time</p> Type The type of measurement or activity being tested. This is the current slice average or current slice sum. Op The operator is the condition of the test. This may be either <code>&gt;=</code> or <code>&lt;=</code> depending on the measurement being tracked. Here you indicate whether the results should be greater than, or less than the desired value for the goal to be reached. For example, if the measurement being tracked were Response Time, you would select the operator &gt;= to achieve the goal when the time needed to receive a response from the server exceeds the limit for this goal. Value The limit that determines when this goal is achieved. Report When this field is checked, the default Integrated Report includes the measurement for which the performance goal is defined. The Report field is selected by default."},{"location":"console/create_load_test_goal/#operator","title":"Operator","text":"<p>Below the Goal Table are the Operator radio buttons. When more than one goal is defined, the Operator enables you to establish the conditions under which the goal will be achieved.</p> <ul> <li>Select OR to require only one expression to be true for the goal to be achieved.</li> <li>Select AND to require all expressions to be true for the goal to be achieved.</li> </ul>"},{"location":"console/create_load_test_goal/#control-buttons","title":"Control Buttons","text":"<p>Below the Operator radio buttons, are the following control buttons:</p> Button Description Add Goal Open the Add Goal dialog box to add a new measurement to the test goals. Delete Delete a test goal. Defaults Open the Default Goals dialog box. For more information on using Defaults, see Setting and Using Defaults . Set As Defaults Set the current goals as default measurements and save them for future use."},{"location":"console/create_load_test_goal/#adding-performance-goals","title":"Adding Performance Goals","text":"<p>Goals are configured by defining boundary values for selected WebLOAD Console measurements. Goals define the performance level you expect from the SUT. WebLOAD Console increases the load and runs the test until the defined goals are reached.</p> <p>To add performance goals:</p> <ol> <li> <p>Click the Add Goal button to add measurements on which to base your goals.</p> <p></p> <p>The Goal Definition dialog box opens. All of the WebLOAD Console built-in measurements are displayed in a tree structure.</p> </li> <li> <p>Optionally add a previously-defined custom measurement of type Timer to the tree, as follows:</p> <ol> <li>Click Add Timer. A new node appears in the Goal Definition dialog box, with an empty name field.</li> <li>Enter the timer\u2019s name in the name field.</li> </ol> </li> <li> <p>Optionally add to the tree, measurements based on a previously-defined transaction (which you created when editing the script in the WebLOAD Recorder), as follows:</p> <ol> <li>Click Add Transaction.</li> <li>In the Add Transaction dialog box that appears, enter the transaction name.</li> </ol> <p>Seven measurements, based on the specified transaction, are automatically added to the tree. For example, if you add the previously-defined \u201cLogin\u201d transaction, the following seven measurements are added.</p> <p></p> </li> <li> <p>To create rule conditions, select the checkbox adjacent to the measurements to include in the goal definition.</p> <p>For example, to define a test goal for the response time not to exceed 5 seconds, select the checkbox adjacent to Response Time.</p> <p>Note: A gray circle next to a measurement indicates that no default subcomponents are defined (the upper level component cannot be selected). To select subcomponents, click the + to expand the tree. </p> </li> <li> <p>Click OK.</p> <p>WebLOAD Console closes the list and opens a row for each of the selected measurements in the Goal Definition dialog box.</p> <p></p> </li> <li> <p>Click in the Op field and select an operator from the drop-down list.</p> </li> <li>Click in the Value field and type a boundary value for the goal.</li> <li>Ensure that the Report field is checked to include the goal measurement in the Goal-Oriented Test default Integrated Report.</li> <li> <p>Click Next.</p> <p>WebLOAD Console displays the Acceleration dialog box. For additional information, see Defining the Acceleration Rate .</p> </li> </ol>"},{"location":"console/create_load_test_goal/#configuring-a-goal-an-example","title":"Configuring a Goal - An Example","text":"<p>Suppose your goal is for your Web application server Response Time not to exceed five seconds.</p> <p>To configure the goal:</p> <ol> <li> <p>Click Add Goal.</p> <p>The Goal Definition window is displayed.</p> </li> <li> <p>Select Response Time from the list of measurements and click OK.</p> <p>This measurement is displayed in the table on the Goal Definition dialog box.</p> </li> <li> <p>Because the goal is for the Response Time not to exceed five seconds, select the operator &gt;= and the Goal Value 5 by modifying the Op and Goal Value cells.</p> <p>When you run the test, WebLOAD Console increases the load on the SUT until the Response Time for each simulated user reaches or exceeds five seconds and then it stops the test.</p> </li> </ol>"},{"location":"console/create_load_test_goal/#deleting-a-goal","title":"Deleting a Goal","text":"<p>To delete a goal:</p> <ol> <li>Select the goal to be deleted on the Goal Definition screen by clicking the number to the left of the goal.</li> <li>Click Delete.     The goal is removed from the Goal Definition dialog box.</li> </ol>"},{"location":"console/create_load_test_goal/#setting-and-using-defaults","title":"Setting and Using Defaults","text":"<p>The Goal-Oriented Test Wizard enables you to save goals that you have defined, and reuse them in subsequent tests. To do this, set your defined goals as the default, and then use the defaults in later tests.</p>"},{"location":"console/create_load_test_goal/#setting-defaults","title":"Setting Defaults","text":"<p>The Set As Default button sets all of the Goals located on the Goal Definition dialog box as defaults. This operation overrides any previous default configurations.</p>"},{"location":"console/create_load_test_goal/#to-set-defaults","title":"To set defaults:","text":"<ol> <li>Configure the test goals that you want to save as the default.</li> <li>Click Set As Defaults.</li> </ol>"},{"location":"console/create_load_test_goal/#using-defaults","title":"Using Defaults","text":""},{"location":"console/create_load_test_goal/#to-use-defaults","title":"To use defaults:","text":"<ol> <li> <p>On the Goal Definition dialog box, click Default. The Goal Defaults dialog box appears.</p> <p></p> </li> <li> <p>Select the goal to be included in the Goal-Oriented Test test session by selecting the number to the left of the goal (use the Ctrl or Shift keys to select more than one goal).</p> </li> <li> <p>Click OK.</p> <p>The goal(s) are added to the test definition.</p> </li> </ol>"},{"location":"console/create_load_test_goal/#defining-the-acceleration-rate","title":"Defining the Acceleration Rate","text":"<p>The Goal-Oriented Test increases the number of Virtual Clients accessing the application until the performance goals are met. The acceleration rate is the rate at which WebLOAD Console increases the number of Virtual Clients accessing the SUT at each acceleration step. Use a large number of clients for a fast acceleration to reach your goals quickly. Set WebLOAD Console to increment the number of Virtual Clients more slowly for fine-tuned results.</p> <p></p> <p>To define the acceleration rate:</p> <ol> <li> <p>Click the slider and move up and down the scale to select an acceleration rate. RadView recommends:</p> <ul> <li>Accelerating at a rate of 15 Virtual Clients to reach your goals quickly.</li> <li>Accelerating at a rate of 5 Virtual Clients for fine-tuned results.</li> </ul> </li> <li> <p>Type or select the initial load to begin the Goal-Oriented Test Session in the Start load with Virtual Clients box.</p> </li> <li>The Goal-Oriented Test automatically optimizes the load distribution of Virtual Clients among the Load Generators participating in the test. To override this feature and distribute the load evenly between the Load Generators select the Distribute load evenly amongst Load Generators checkbox.</li> <li> <p>Click Next.</p> <p>The wizard progresses to the Goals Achieved dialog box.</p> <p>Note: The number of users that WebLOAD Console can generate on any given Load Machine in an efficient manner (so that the addition of users will not reduce the performance on that machine) is dependent on the power of the host machine. When WebLOAD Console estimates that it has reached the maximum output on a specific host, a log message is sent. WebLOAD Console continues to accelerate the load until the end of the Goal-Oriented test session. </p> </li> </ol>"},{"location":"console/create_load_test_goal/#defining-webload-consoles-action-once-the-goals-are-reached","title":"Defining WebLOAD Console\u2019s Action Once the Goals are Reached","text":"<p>After configuring your Goal-Oriented test you must define WebLOAD Console\u2019s response once the test goals are reached.</p> <p></p> <p>The Goal-Oriented Test can be set to stop, to continue testing under the same load, or to continue accelerating the number of Virtual Clients.</p> <p>To set WebLOAD Console to stop:</p> <ol> <li>Select Stop.</li> <li>Click Next.</li> </ol> <p>The wizard progresses to the Finish dialog box.</p> <p>To set WebLOAD Console to continue running with the same load:</p> <ol> <li>Select Continue with the same load.</li> <li>Type or select the amount of time (in minutes) that WebLOAD Console should continue running with the same load after the test goals are reached.</li> <li>Click Next.</li> </ol> <p>The wizard progresses to the Finish dialog box.</p> <p>To set WebLOAD Console to continue accelerating the number of Virtual Clients:</p> <ol> <li> </li> <li>Type or select the amount of time (in minutes) that WebLOAD Console should continue accelerating the load after the test goals are reached.</li> <li>Click Next.</li> </ol> <p>The wizard progresses to the Finish dialog box.</p>"},{"location":"console/create_load_test_goal/#select-continue-with-the-same-acceleration","title":"Select Continue with the same acceleration.","text":""},{"location":"console/create_load_test_goal/#finishing-the-goal-oriented-test-wizard","title":"Finishing the Goal-Oriented Test Wizard","text":"<p>The product of your testing is the WebLOAD report, where you can see how your Web application handles the load that you tested. The Goal-Oriented Test Wizard automatically generates a predefined report that measures:</p> <ul> <li>Load Size (the number of Virtual Clients being generated)</li> <li>The WebLOAD Console measurements for which goals are defined</li> </ul> <p>WebLOAD Console saves all of the values for the complete set of measurements. You can decide after the test has run to display the results never before requested.</p> <p></p> <p>To finish the Goal-Oriented Test Wizard:</p> <ol> <li> <p>From the Finish dialog box, click Finish.</p> <p>A message box appears asking if you want to save the current Load Template.</p> <p></p> </li> <li> <p>Click Yes to save the current Load Template as a <code>*.tpl</code> file.</p> <p>Load Templates contain the parameters that you defined for the test, such as the participating hosts in a test and the test plan. Using Load Templates saves you the time of reconfiguring the Load Session when repeating tests.</p> <p>The Goal-Oriented Test Wizard is finished and the test begins. WebLOAD Console displays the Goal-Oriented Test Default Report.</p> </li> </ol>"},{"location":"console/create_load_test_goal/#viewing-the-goal-oriented-test-default-report","title":"Viewing the Goal-Oriented Test Default Report","text":"<p>When running a Goal-Oriented test session, the WebLOAD Goal-Oriented Test Default Report opens automatically in Chart View.</p> <p></p> <p>Real-time results are displayed in graphs on the right side of the Console screen. The following elements are displayed on the screen:</p> Elements Description Ribbon Contains options for configuring and controlling the Goal-Oriented test session. Session Tree Presents a graphical display of your Goal-Oriented test session. Results Window All of the reports opened during the Goal-Oriented test session will appear in this window. Use the tabs located at the top and bottom of the window to view different reports. Status Bar Indicates the program status. <p>The Goal-Oriented Test Session continues running until the performance goals are achieved. When the performance goals are reached, WebLOAD Console displays a message box with the test results.</p> <p>The following is an example of a Test Results message box:</p> <p></p> <p>Click Details to examine the original goal settings and statistics for them. A complete report displayed as follows:</p> <p></p> <p>Note: You can view the Details Report window while the test is running by right- clicking the Load Session icon in the Session Tree.</p>"},{"location":"console/create_template_wizard/","title":"Creating Load Templates with the WebLOAD Wizard","text":"<p>The easiest way to configure a Load Template is using the WebLOAD Wizard.</p>"},{"location":"console/create_template_wizard/#using-the-webload-wizard-to-create-load-templates","title":"Using the WebLOAD Wizard to Create Load Templates","text":"<p>Using the wizard to create a Load Template, you define the following:</p> <ul> <li>Script(s) to run</li> <li>Load Machines on which the load is generated</li> <li>Number of Virtual Clients to run</li> <li>Load schedule</li> </ul> <p>You can also specify script options including the type of browser to emulate connection speed, and playback sleep time options.</p> <p>The WebLOAD Wizard walks you through the configuration process step-by-step. Each screen of the WebLOAD Wizard contains text explaining the configuration process.</p> <p>After creating a Load Template with the WebLOAD Wizard, you can add functionality, not available in the wizard, through the Console ribbon. The Console allows you access to any part of the configuration process at any time. For details about the Console ribbon, see The Console Ribbon Options .</p> <p>Note: You cannot use the WebLOAD Wizard if you have not yet recorded (or otherwise created) any scripts. If you do not have any scripts to work with, you must exit the wizard and create a script using one of the authoring tools, such as WebLOAD Recorder.</p>"},{"location":"console/create_template_wizard/#the-webload-wizard-workflow","title":"The WebLOAD Wizard Workflow","text":"<p>The following diagram illustrates the WebLOAD Wizard workflow:</p> <p></p>"},{"location":"console/create_template_wizard/#opening-the-webload-wizard","title":"Opening the WebLOAD Wizard","text":"<p>To open the WebLOAD Wizard:</p> <ol> <li> <p>Select WebLOAD Wizard from the WebLOAD Startup dialog box,</p> <p>-Or-</p> <p>Click WebLOAD Wizard in the Home tab of the ribbon. The WebLOAD Wizard Welcome dialog box opens.</p> <p></p> </li> <li> <p>Click Next.</p> <p>The WebLOAD Wizard progresses to the script/Mix Type dialog box.</p> </li> </ol>"},{"location":"console/create_template_wizard/#selecting-a-script-or-mix","title":"Selecting a script or Mix","text":"<p>The next step in a WebLOAD session is to select the type of script you want to run during your test session. A script is the test script used to test your application.</p> <p></p> <p>WebLOAD Console supports two types of scripts:</p> <ul> <li>Single scripts \u2012 lone test-scripts.</li> <li>Mix of scripts \u2012 a combination of scripts. Use a Mix to simulate different groups of users performing different activities on the SUT at the same time.</li> </ul> <p>To run a single script:</p> <ol> <li>Select Single Script.</li> <li>Click Next.</li> </ol> <p>WebLOAD Console progresses to the Script Selection dialog box. </p> <p>To run a Mix of scripts:</p> <ol> <li>Select Mix.</li> <li>Click Next.</li> </ol> <p>WebLOAD Console progresses to the Mix Selection dialog box. See Selecting a Mix.</p>"},{"location":"console/create_template_wizard/#selecting-a-script","title":"Selecting a Script","text":"<p>The WebLOAD Wizard enables you to create a test using previously recorded scripts. If you do not have any scripts to work with, you must exit the wizard, and create a script using one of the authoring tools, such as WebLOAD Recorder.</p> <p></p> <p>To select a script:</p> <ol> <li>Click the button to select the source of the script to be used for the test.</li> <li>To optionally open and view or edit the selected Script, click View. WebLOAD Recorder opens, displaying the selected script.</li> <li> <p>To optionally configure runtime options exclusive to this script, click Options.</p> <p>The Script Options dialog box opens enabling you to define the runtime options for the selected script. </p> </li> <li> <p>Click Next.</p> <p>The WebLOAD Wizard progresses to the Host Selection dialog box. See Selecting Host Computers .</p> </li> </ol>"},{"location":"console/create_template_wizard/#selecting-a-mix","title":"Selecting a Mix","text":"<p>The WebLOAD Wizard enables you to run your test using a saved Mix or to create a new Mix of scripts through the wizard. If you do not have any scripts to work with, to create a Mix, you must exit the wizard, and create a script using one of the authoring tools, such as WebLOAD Recorder.</p> <p></p> <p>To select a Mix:</p> <ol> <li> <p>Select the source of the Mix to be used for the test on the Mix Selection screen:</p> <ul> <li> <p>Select Use an Existing Mix and click the button to select an existing Mix (*.mix) from your system.</p> </li> <li> <p>Select Create a Mix to build a new Mix.</p> </li> </ul> </li> <li> <p>Click Next.</p> <p>WebLOAD Console progresses to the Mix Creation dialog box. </p> </li> </ol>"},{"location":"console/create_template_wizard/#creating-a-mix","title":"Creating a Mix","text":"<p>A Mix is a set of scripts, each performing different activity, to simulate groups of users performing different activities on the SUT at the same time. If you selected Use an Existing Mix on the script / Mix Selection screen, the selected Mix appears on the screen, enabling you to modify the Mix. You can also create a new Mix.</p> <p></p> <p>To create a new Mix:</p> <ol> <li> <p>Enter a descriptive name in the Mix name field.</p> </li> <li> <p>Specify whether the relative weights of the script refer to execution time or to number of virtual clients:</p> <ul> <li>Based on the number of virtual clients \u2013 The mix interprets the relative weights in terms of number of virtual users. For example, if the weight of Script A is 25 and of Script B is 75, the mix execution runs script A with 25% of the virtual users and script B with 75% of the users.</li> <li>Based on the execution time \u2013 The mix interprets the relative weights in terms of time. For example, if the weight of Script A is 25 and of Script B is 75, the mix execution run script A for 25% of the time and script B for 75% of the time.</li> </ul> </li> <li> <p>Click Add.</p> <p>The Open dialog box appears, enabling you to select the Script to add to the Mix.</p> </li> <li> <p>Select a script from your file system and click Open. The script is added to the Mix.</p> </li> <li> <p>Optionally, select the script and set any of the following parameters:</p> <p>a. Script \u2013 Specify a name for the script and its particular settings.</p> <p>Keep in mind that in a mix, in addition to running different scripts, you can also run the same script under different settings. For example, a mix can contain two items: Script A running on Chrome, and the same Script A running on Mozilla Firefox. Give a different descriptive name to each of the two mix items.</p> <p>b. Weight \u2013 Specify the relative weight of this script, as a positive whole number. The application will run each script based on its weight in relation to the total of weights. When the total of weights is 100, the weight is equivalent to a percentage; however, this is not required. For example, if you specified a weight of 1 for Script A and a weight of 3 for Script B, then the system assigns script A a relative weight of 1/4, and to Script B the relative weight of 3/4. This is equivalent to a weight of 25 for Script A and 75 for Script B; in both cases, Script A will run 25% of the rounds, and Script B will run 75% of the rounds.</p> <p>c. Browser and Version \u2013 Select the browser type and browser version. Alternatively, click the Change button  to edit the user agent definition. </p> <p>d. Bandwidth \u2013 Specify a bandwidth. You can do this in one of two ways:</p> <pre><code>     - Select a bandwidth from the drop-down list.\n     - Enter a number, to specify that number of bits per second.\n</code></pre> <p>e. Max Connections \u2013 Specify the number of max connections for the load generator.</p> </li> <li> <p>Optionally, click Options to set any of the settings available from the Script Options dialog box (such as the browser to emulate, connection settings and playback sleep options). This will change the settings of the currently selected item only.</p> <p>The Script Options dialog box opens. For information on setting the Script Options, see Setting Script Options .</p> </li> <li> <p>Repeat steps 2 through 5 to add additional scripts to the Mix.</p> </li> <li> <p>Click Save.</p> <p>The Mix configuration is saved with the extension *.mix.</p> </li> <li> <p>Click Next.</p> <p>The WebLOAD Wizard progresses to the Host Selection dialog box. See Selecting Host Computers .</p> </li> </ol>"},{"location":"console/create_template_wizard/#deleting-a-script-from-a-mix","title":"Deleting a script from a Mix","text":"<p>To delete a script from a Mix:</p> <ol> <li>Select the Script you want to delete from the Mix.</li> <li>Click Remove.</li> </ol>"},{"location":"console/create_template_wizard/#viewing-a-script-from-a-mix","title":"Viewing a script from a Mix","text":"<p>To view a script from a Mix in the WebLOAD Recorder:</p> <ol> <li>Select the script you want to view.</li> <li>Click View.</li> </ol> <p>The WebLOAD Recorder is launched, and displays the selected script.</p>"},{"location":"console/create_template_wizard/#selecting-host-computers","title":"Selecting Host Computers","text":"<p>On the Host Selection dialog box you define the host computers participating in the test session. Host computers can be dedicated, local computers, or they can be computers which are rented on a temporary basis from the Amazon\u2122 Elastic Compute Cloud\u2122 (EC2). Host computers are assigned to be either Load Machines or Probing Client Machines.</p> <p></p>"},{"location":"console/create_template_wizard/#load-machines","title":"Load Machines","text":"<p>By selecting a group of Load Machines, you define the pool of computers WebLOAD Console uses to generate the Virtual Clients. The number of Virtual Clients that can be generated on each host is dependent on the power of each host machine.</p>"},{"location":"console/create_template_wizard/#probing-client-machines","title":"Probing Client Machines","text":"<p>Probing Clients are single instances of Virtual Clients running WebLOAD Console while the Load Machines bombard your Web application. WebLOAD Console reports exact measurements for Probing Clients.</p> <p>This dialog box has three windows. The large window on the left, entitled Host Computers, displays all the host computers defined for testing. The two windows to the right contain the systems defined as Load Machines and Probing Client Machines. Use the arrow buttons between the windows to change the roles of the host computers.</p> <p>Your local system is automatically defined as the default Load Machine.</p> <p>Notes:</p> <p>At least one system must be configured as a Load Machine to continue working with the wizard.</p> <p>After configuring the hosts participating in the test session, the WebLOAD Wizard progresses to the Schedule dialog box. See Scheduling the Load Session .</p> <p>If you are running a script with Perfecto Mobile script , define a single Load Machine or a single Probing Client in order to simulate a single user. </p>"},{"location":"console/create_template_wizard/#setting-up-cloud-computers","title":"Setting Up Cloud Computers","text":"<p>WebLOAD supports using Amazon EC2 Cloud servers as an alternative to acquiring and maintaining physical load-generators.</p> <p>The workflow for setting up EC2 computers for WebLOAD is as follows:</p> <ol> <li>Creating an Amazon EC2 Account. For instructions, refer to http://aws.amazon.com/ec2/.</li> <li>Creating WebLOAD Cloud Accounts.</li> </ol>"},{"location":"console/create_template_wizard/#creating-webload-cloud-accounts","title":"Creating WebLOAD Cloud Accounts","text":"<p>After creating an Amazon cloud account, create a WebLOAD cloud account in which you specify your Amazon security credentials, the specific Amazon region where the machines should be located, and the WebLOAD image to install on the Amazon machines.</p> <p>Note that you can use the same Amazon cloud account to create multiple WebLOAD cloud accounts. For example, to simulate a scenario where some users are located in US East and some in EU West, create two WebLOAD cloud accounts. Enter the same Amazon cloud account credentials in both, but specify a different region for each.</p> <p>To create WebLOAD cloud accounts in WebLOAD Console:</p> <ol> <li> <p>Click Cloud Options in the Tools tab of the ribbon. The Cloud Accounts dialog box appears.</p> <p></p> </li> <li> <p>Click Add to define a WebLOAD cloud account.</p> </li> <li> <p>Enter a name describing the account in the Name field. For example, Cloud US.</p> </li> <li> <p>Enter the Amazon cloud security credentials in the Access Key ID and Secret Access Key fields. To determine the security credentials, perform the following:</p> <p>a. Log into your EC2 Amazon account and click Your Account &gt; Security Credentials. A dialog box appears displaying your Access Key ID. Your Secret Access Key is hidden by default.   b. Click Show to display the Secret Access Key.</p> <p>Alternatively, in the Cloud Accounts window, click here to open the Amazon AWS Accounts screen. In this screen you can create an Amazon cloud account, or enter your Amazon credentials if you had already created an Amazon cloud account.</p> </li> <li> <p>In the Region drop-down box, you can select a specific Amazon data-center for use, by region. In the adjacent field you can optionally enter a specific URL for the cloud end-point. Any end-point which supports the EC2 API is a valid option for this field.</p> </li> <li> <p>In the AMI ID drop-down box, select a specific Amazon Machine Image for use. If you have unique requirements, you can select Other and contact RadView support for advice.</p> </li> <li> <p>In the Type drop-down box, specify the type of Amazon machine. We recommend the C1 High-CPU Medium (this is the default option).</p> </li> <li> <p>Optionally, click Get Status to verify the details of the cloud you created.</p> </li> <li> <p>For every additional WebLOAD cloud account you wish to create, repeat steps [2]-[8.].</p> </li> <li> <p>In the General section, specify the global policy for shutting-down Cloud Machines. The policy applies to all the WebLOAD cloud accounts you create.</p> <p>In the Stop cloud machines when session end drop-down box, define whether the Cloud Machines being used during a session are to be automatically shut down upon stopping the session (thereby stopping the timer for payment). The possible options are:</p> <ul> <li>Prompt User</li> <li>Stop Always</li> <li>Don\u2019t Stop</li> </ul> <p>Keep in mind the following:</p> <ul> <li> <p>It takes Amazon approximately 15 minutes to prepare the Cloud Machines. If you select Stop Always, this process will need to be repeated after every session stop, even if you want to run multiple sessions or if you stopped a session prematurely with the intention of restarting the session immediately.</p> </li> <li> <p>If you select Don\u2019t Stop, the Cloud Machines will not be automatically stopped when you end a session. This means that you will continue to be charged for those machines even after a session ends successfully. Click Terminate Cloud Machines in the Tools tab of the ribbon to manually shut down the Cloud Machines and stop the payment timer.</p> </li> </ul> </li> <li> <p>Click OK. The credentials are saved and the use of Cloud Machines as host computers is now supported.</p> </li> </ol>"},{"location":"console/create_template_wizard/#adding-host-computers","title":"Adding Host Computers","text":"<p>To add a host computer:</p> <ol> <li> <p>In the Host Selection dialog box, click Add. The Add Host Computer dialog box appears.</p> <p></p> </li> <li> <p>To add a local host computer, select Add by host name or IP address and enter the host computer name or IP address in the Address field.</p> </li> <li> <p>To add cloud host machines:</p> <p>a.Select Add Cloud host.</p> <p>If you have not yet created a WebLOAD cloud account, a dialog box appears. Click OK and the Cloud Accounts dialog box appears. Create one or more WebLOAD cloud accounts as described in Creating WebLOAD Cloud Accounts .</p> <p>b. Select a WebLOAD cloud account from the Name drop-down box.</p> <p>c. In the Number of Machines field, enter the number of machines you wish to add from the selected WebLOAD cloud account.</p> <p>d. Repeat steps [b] to specify machines from another WebLOAD cloud account.</p> <p>Optionally, click Cloud Options to add or modify WebLOAD cloud accounts. The Cloud Accounts dialog box appears. For information about the available actions, refer to the explanations following.</p> </li> <li> <p>Click OK.</p> <ul> <li> <p>If you added a local host machine, the machine is added to the Load Machines list in the Host Selection dialog box, and is listed by the host name or IP address you entered.</p> </li> <li> <p>If you added cloud host machines, a list of machines is added to the Load Machines list in the Host Selection dialog box with the names \u201c<code>&lt;*WebLOAD Cloud Account Name*&gt;</code>&lt;X&gt;\u201d where X is a number that is incremented for each added cloud host machine.</p> </li> </ul> <p>For defining host computers as Load Machines and Probing Clients, see Designating a Host Computer as a Load Machine , and Designating a Host Computer as a Probing Client Machine .</p> </li> </ol>"},{"location":"console/create_template_wizard/#designating-a-host-computer-as-a-load-machine","title":"Designating a Host Computer as a Load Machine","text":"<p>To designate a host computer as a Load Machine:</p> <ol> <li> <p>Select the host from the Host Computers window and click the single arrow key adjacent to the Load Machine window.</p> <p>-Or-</p> <p>Double-click the host.</p> <p>The selected host moves to the Load Machines window.</p> </li> <li> <p>To designate additional Load Machines repeat steps 1 and 2.</p> </li> </ol> <p>After assigning all Load Machines and Probing Client Machines, click Next. The wizard progresses to the Schedule dialog box. See Scheduling the Load Session .</p>"},{"location":"console/create_template_wizard/#designating-all-host-computers-as-load-machines","title":"Designating all Host Computers as Load Machines","text":"<p>To designate all host computers as Load Machines:</p> <ul> <li>Click the double arrow key  adjacent to the Load Machines window. All of the host computers move to the Load Machines window.</li> </ul>"},{"location":"console/create_template_wizard/#designating-a-host-computer-as-a-probing-client-machine","title":"Designating a Host Computer as a Probing Client Machine","text":"<p>Probing Clients act as single Virtual Clients to measure the performance of targeted activities and provide individual performance statistics of the SUT.</p> <p>Note: Probing Client Machines cannot run Mix scripts.</p> <p>To designate a host computer as a Probing Client Machine:</p> <ol> <li>Select the host from the Host Computers window.</li> <li>Click the single arrow key adjacent to the Probing Client Machines window. The selected host moves to the Probing Client Machine window.</li> <li>After assigning all Load Machines and Probing Client Machines, click Next.</li> </ol> <p>The wizard progresses to the Schedule screen. See Scheduling the Load Session .</p>"},{"location":"console/create_template_wizard/#replacing-a-load-machine-or-probing-client-machine","title":"Replacing a Load Machine or Probing Client Machine","text":"<p>To replace a Load Machine or Probing Client Machine:</p> <ol> <li> <p>From the Host Selection dialog box, select the host computer in the Load Machines or Probing Client Machine window and click the left arrow button   .</p> <p>-Or-</p> <p>In the Load Machines window, double-click the host computer.</p> <p>The host computer is moved from the Load Machines or Probing Client Machine window to the Host Computers window.</p> </li> <li> <p>From the Host Computers window, select a host computer.</p> </li> <li>Click the right arrow button.    The host computer is moved from the Host Computers window to the Load Machines or Probing Client Machine window.</li> </ol>"},{"location":"console/create_template_wizard/#deleting-a-host-computer","title":"Deleting a Host Computer","text":"<p>To delete a host computer:</p> <ol> <li>Select the host name from the Host Computers list.</li> <li> <p>Click Delete.</p> <p>The host is deleted from the Host Computers list.</p> </li> </ol>"},{"location":"console/create_template_wizard/#scheduling-the-load-session","title":"Scheduling the Load Session","text":"<p>When you schedule a test session, you define the load to be generated throughout the Load Session.</p> <p>Use the Schedule dialog box to plan your test session.</p> <p></p> <p>To schedule the Load Session:</p> <ol> <li> <p>Define how you want to distribute the load between the Load Machines running the script.</p> <ul> <li>Select Individual scheduling to instruct WebLOAD Console how to distribute the load over the Load Machines throughout the test.</li> <li>Select Collective scheduling to distribute the load evenly between the Load Machines.</li> </ul> </li> <li> <p>Click Next.</p> <ul> <li>If you selected Collective scheduling, the WebLOAD Wizard progresses to the Collective Scheduling screen. </li> <li>If you selected Individual scheduling, the Wizard progresses to the Individual Scheduling screen. </li> </ul> </li> </ol>"},{"location":"console/create_template_wizard/#collectively-distributing-the-load","title":"Collectively Distributing the Load","text":"<p>WebLOAD simplifies the process of scheduling the test session by enabling you to automatically distribute the load between the Load Machines, saving you the time of creating a load schedule for each Load Machine individually.</p> <p></p> <p>You can create a load schedule by any combination of the following methods:</p> <ul> <li>Manually defining time frames and the load to generate over each frame</li> <li>Manually limiting the run by number of rounds</li> <li>Using the Load Profiler</li> </ul>"},{"location":"console/create_template_wizard/#creating-a-collective-load-schedule","title":"Creating a Collective Load Schedule","text":"<p>To create a collective load schedule manually:</p> <ol> <li> <p>Enter the number of days and the starting time to generate the load in the From field.</p> <p>The starting time is defined for each particular script relative to the beginning of the test session.</p> <p>Note: Days are numbered 00 through to 99. Following them are hours:minutes:seconds. Seconds are numbered 1 through 59. To enter one minute, use the 1:00 syntax not 00:60.</p> </li> <li> <p>Enter the number of days and the ending time to generate the load in the To field.</p> <p>The ending time is defined for each particular script relative to the beginning of the test session.</p> <p>If the To field is left blank, WebLOAD Console continues generating the load until the From time in the next entry for this script, or, if this is the last entry for this script, until the test session is stopped manually.</p> </li> <li> <p>Under Load Size enter the number of Virtual Clients to generate during the time frame defined in steps 1 and 2. The load is distributed equally among the Load Machines defined for the script.</p> </li> <li> <p>Optionally, schedule additional Virtual Client loads for this script:</p> <ol> <li>Click Add to add a blank line to the schedule grid.</li> <li>Repeat steps 1 through 3.</li> </ol> </li> <li> <p>Click Next.</p> <p>WebLOAD Console displays the Finish dialog box.</p> <p>The WebLOAD Wizard continues the configuration process with the Finish dialog box. For further instructions, see Completing the WebLOAD Wizard .</p> </li> </ol>"},{"location":"console/create_template_wizard/#limiting-a-run-by-number-of-rounds","title":"Limiting a Run by Number of Rounds","text":"<p>To limit a run by the number of rounds</p> <ul> <li>Enter the number of rounds in the Limit Run to field.</li> </ul>"},{"location":"console/create_template_wizard/#creating-a-collective-load-schedule-with-the-load-profiler","title":"Creating a Collective Load Schedule with the Load Profiler","text":"<p>To create a collective load schedule with the Load Profiler:</p> <ol> <li> <p>Select an entry in the schedule grid by clicking it to enable the Load Profiler button for that entry.</p> </li> <li> <p>Click the Load Profiler button. The Load Profiler opens.     </p> </li> <li> <p>Select a schedule pattern from the Scheduling model field at the top of the dialog box. For an explanation of each model, see Scheduling Models .</p> </li> <li> <p>Fill in the fields at the bottom of the dialog box.</p> </li> <li> <p>Click Append to include the load definition in the schedule,</p> <p>-Or-</p> <p>Click Replace to substitute the load definition for the one appearing in the Schedule dialog box.</p> </li> </ol>"},{"location":"console/create_template_wizard/#individually-scheduling-the-load","title":"Individually Scheduling the Load","text":"<p>You can schedule the load to be generated on each Load Machine participating in the test session individually, enabling you to distribute the load based on the strengths of the Load Machines running in the test session.</p> <p></p>"},{"location":"console/create_template_wizard/#scheduling-the-session-individually","title":"Scheduling the Session Individually","text":"<p>To schedule the session individually:</p> <ol> <li> <p>Expand the Load Machine tree using the + / - button adjacent to the Load Machine you want to schedule.</p> </li> <li> <p>Limit the run by time, by number of rounds, or both. If you limit the run by setting both a time condition and a number of rounds condition, then the run will stop as soon as one of the conditions is fulfilled</p> </li> </ol> <p>1.To limit the run by time, perform the following for each Load Machine or Probing Client Machine defined in the Session Tree.</p> <pre><code>a. Enter the number of days and the starting time, to generate the load in the **From** field.\n\n The starting time is defined for each particular script relative to the beginning of the test session.\n\n  **Note:** Days are numbered 00 through to 99. Following the days are the hours, minutes, and seconds in the following format: hours:minutes:seconds. Seconds are numbered 1 through 59. To enter one minute, use the 1:00 syntax not 00:60.\n\n  a. Enter the number of days and the ending time, to generate the load in the **To** field.\n\n   The ending time is defined for each particular script relative to the beginning of the test session. If the **To** field is left blank, WebLOAD Console continues generating the load until the From time in the next entry for this Load Machine, or if this is the last entry, until the test session is stopped manually.\n</code></pre> <ol> <li> <p>In the Virtual Clients field enter the number of Virtual Clients to generate during the time frame defined in steps (a) and (b).</p> </li> <li> <p>You can optionally schedule additional Virtual Client loads for this Load Machine:</p> <pre><code>1. Click **Add** to add a blank line to the schedule grid.\n1. Repeat steps (a) through (c).\n</code></pre> </li> <li> <p>To limit the run by number of rounds, enter the number of rounds in the Limit Run to field.</p> </li> <li> <p>Click Next.</p> <p>The WebLOAD Wizard continues the configuration process with the Finish screen. For further instructions, go to Completing the WebLOAD Wizard .</p> </li> </ol>"},{"location":"console/create_template_wizard/#scheduling-a-session-individually-with-the-load-profiler","title":"Scheduling a Session Individually with the Load Profiler","text":"<p>To schedule a session individually with the Load Profiler:</p> <ol> <li> <p>Click the Load Profiler button.</p> <p>The Load Profiler opens.</p> <p></p> </li> <li> <p>Select a pattern from the Scheduling model field at the top of the dialog box. For an explanation of each model, see Scheduling Models .</p> </li> <li>Fill in the fields at the bottom of the dialog box.</li> <li> <p>Click Append to include the load definition in the schedule,</p> <p>-Or-</p> <p>Click Replace to substitute the load definition for the setting in the Schedule dialog box.</p> </li> </ol>"},{"location":"console/create_template_wizard/#scheduling-models","title":"Scheduling Models","text":"<p>WebLOAD Console includes numerous scheduling models to provide a wide variety of options and aid you in quickly achieving a schedule that meets you testing goals.</p>"},{"location":"console/create_template_wizard/#linear-scheduling-model","title":"Linear Scheduling Model","text":"<p>The linear model increases the load with linearly increasing values. Using this model you need to define:</p> <ul> <li>Total time in minutes \u2012 the number of minutes to generate the load using this model.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients from which to begin.</li> <li>Concluding number of Virtual Clients \u2012 the number of Virtual Clients with which to end.</li> </ul> <p>For example, using this model the load will start at the value defined in the Starting number of Virtual Clients field and increase (automatically calculating the intervals when the load should increase) over the time specified in the Total time in minutes field to the number of Virtual Clients defined in the Concluding number of Virtual Clients field.</p>"},{"location":"console/create_template_wizard/#random","title":"Random","text":"<p>The random model scatters the load with no discernible pattern. Using this model, you need to define:</p> <ul> <li>Total time in minutes \u2012 the number of minutes to generate the load using this model.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients from which to begin.</li> <li>Min Virtual Clients \u2012 the absolute minimum number of Virtual Clients to generate.</li> <li>Max Virtual Clients \u2012 the absolute maximum number of Virtual Clients to generate.</li> </ul> <p>For example, using this model the load will start at the value defined in the Starting number of Virtual Clients field and randomly increase and decrease the load between the min and max load values with no relationship or trend between each interval until the time defined in the Total time in minutes field has expired.</p>"},{"location":"console/create_template_wizard/#incrementing-intervals","title":"Incrementing Intervals","text":"<p>The incrementing intervals model generates an increasing load in intervals while returning to the base load between intervals.</p> <p>Using this model, you need to define:</p> <ul> <li>Total time in minutes \u2012 the number of minutes to generate the load using this model.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients to begin from, and to return to between each interval.</li> <li>Time between each interval (T1) \u2012 the amount of time to wait before increasing the load for each interval.</li> <li>Time of each interval (T2) \u2012 the length of time for each interval.</li> <li>Increase in Virtual Clients in each interval \u2012 the number of Virtual Clients to add each interval (over the load generated in the last interval).</li> </ul> <p>For example, using this model the load will start at the base number of Virtual Clients, increase for the time defined as T2, return to the base load and then increase again.</p> <p>Each subsequent increase will be the number of Virtual Clients from the previous interval plus the increment.</p>"},{"location":"console/create_template_wizard/#incrementing-intervals-time-calculate","title":"Incrementing Intervals (Time Calculate","text":"<p>The incrementing intervals (time calculate) model generates an increasing load in intervals while returning to the base load between intervals. The schedule stops when the concluding number of Virtual Clients is achieved.</p> <p>Using this model you need to define:</p> <ul> <li>Concluding number of Virtual Clients \u2012 the number of Virtual Clients with which to end.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients to begin from, and to return to between each interval.</li> <li>Time between each interval (T1) \u2012 the amount of time to wait before increasing the load for each interval.</li> <li>Time of each interval (T2) \u2012 the length of time for each interval.</li> <li>Increase in Virtual Clients in each interval \u2012 the number of Virtual Clients to add each interval (over the load generated in the last interval).</li> </ul> <p>For example, using this model the load will start at the base number of Virtual Clients, increase for the time defined as T2, return to the base load and then increase again.</p> <p>Each subsequent increase will be the number of Virtual Clients from the previous interval plus the increment until the concluding number of Virtual Clients is achieved. The time it takes to complete the task is calculated automatically by WebLOAD Console based on the parameters defined.</p>"},{"location":"console/create_template_wizard/#step-increments","title":"Step Increments","text":"<p>The step interval model generates an increasing load in intervals. Using this model you need to define:</p> <ul> <li>Total time in minutes \u2012 the number of minutes to generate the load using this model.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients from which to begin.</li> <li>Time of each interval \u2012 the length of time for each interval.</li> <li>Increase in Virtual Clients each interval \u2012 the number of Virtual Clients to increase each interval.</li> </ul> <p>For example, using this model the load will start at the value defined in the Start number of Virtual Clients field, and increase gradually the amount of user defined in the Increase in Virtual Clients each interval field.</p>"},{"location":"console/create_template_wizard/#step-increments-time-calculate","title":"Step Increments (Time Calculate)","text":"<p>The step interval model generates an increasing load in intervals until a defined load size is reached. The time to complete the scheduled model is calculated automatically by WebLOAD Console based on the parameters defined.</p> <p>Using this model you need to define:</p> <ul> <li>Concluding number of Virtual Clients \u2012 the number of Virtual Clients with which to end.</li> <li>Starting number of Virtual Clients \u2012 the number of Virtual Clients from which to begin.</li> <li>Time of each Interval \u2012 the length of time for each interval.</li> <li>Increase in Virtual Clients in each interval \u2012 the number of Virtual Clients to increase each interval.</li> </ul> <p>For example, using this model the load will start at the value defined in the Starting number of Virtual Clients field, and increase gradually the amount of user defined in the Increase in Virtual Clients each interval field until the concluding number of Virtual Clients is achieved.</p>"},{"location":"console/create_template_wizard/#ramp-up","title":"Ramp Up","text":"<p>The ramp up model generates an increasing load over a set time frame until reaching a defined maximum load size. The maximum load size is then run for a set period and then the load is reduced back to the base load again over a time frame defined by the user. The load increments are calculated automatically by WebLOAD Console based on the parameters defined.</p> <p>Using this model you need to define:</p> <ul> <li>Min Virtual Clients \u2012 the number of Virtual Clients from which to begin.</li> <li>Max Virtual Clients \u2012 the maximum number of Virtual Clients to generate using this model.</li> <li>Ramp up time \u2012 the time interval over which to increase the load in order to reach the max load size.</li> <li>Time to run Max Virtual Clients \u2012 the time frame to run the load at the max number of Virtual Clients.</li> <li>Ramp down time \u2012 the time interval over which to decrease the load in order to return to the minimum number of Virtual Clients.</li> </ul> <p>For example, using this model the load will start at the value defined in the Min Virtual Clients field, and increase over the time frame defined in the Ramp up time field to reach the number of Virtual Clients defined in the Max Virtual Clients field. The test will then continue running with the maximum number of Virtual Clients for the period of time defined in the Time to run Max Virtual Clients field after which, load will return to the base number of Virtual Clients value over the time frame set in the Ramp down time field.</p>"},{"location":"console/create_template_wizard/#user-defined","title":"User Defined","text":"<p>The user-defined model generates the load based on values extracted from a data file. The time to complete the scheduled model is defined by the user as is the minimum and maximum number of Virtual Clients.</p> <p>Using this model you need to define:</p> <ul> <li>Total time in minutes \u2012 the number of minutes to generate the load using this model.</li> <li> <p>Min Virtual Clients \u2012 the absolute minimum number of Virtual Clients to generate over the schedule. At no point in the schedule should the number of Virtual Clients dip below this value.</p> </li> <li> <p>Max Virtual Clients \u2012 the absolute maximum number of Virtual Clients to generate over the schedule. At no point in the schedule should the number of Virtual Clients rise above this value.</p> </li> <li>Data file name \u2012 the name and location on the data file to read values from for generating the load.</li> <li>Delimiter \u2012 the delimiter used in the data file from which values are read to generate the load size.</li> </ul> <p>Using this model the WebLOAD Scheduler will read values from the assigned data file and generate the load based on the values in the file. The number of Virtual Clients will fluctuate based on the number of values in the file and the time frame for which the schedule is set to run. Although the load values are based on the values in the file, the values you define for the minimum and maximum number of Virtual Clients are used to make sure that, at no time during this schedule, the number of Virtual Clients falls below the minimum value or rises above the maximum values defined. That is, the number of Virtual Clients values from the file are proportionally modified to fit within the minimum and maximum number of Virtual Clients values. For example, if your data file contains the values 50 and 100 over 1 minute and you define the minimum and maximum number of Virtual Clients as 1 and 10, WebLOAD Console automatically adjusts the values in the data file to 5 and 10 over 1 minute.</p> <p>You can define a text document containing the different numbers of Virtual Clients you want and WebLOAD Console spreads those numbers out evenly during the test. For example, if your test is defined to run for ten minutes and your text file defines five numbers, then the number of Virtual Clients changes every two minutes according to the values in the file.</p> <p>The following figure displays a sample text document. To use the file for the test, the name of the file is entered in the Data file name field.</p> <p></p>"},{"location":"console/create_template_wizard/#selecting-the-performance-measurements","title":"Selecting the Performance Measurements","text":"<p>The WebLOAD Wizard enables you to open the Performance Measurements Manager and configure WebLOAD Console to collect performance statistics from your application server, database, and Web server while the test is running.</p> <p></p> <ul> <li>Click Add Monitors to configure the performance statistics to monitor and display in real-time during the test session.</li> </ul> <p>The Performance Measurements Manager opens. For more information on configuring the statistics to monitor, see Performance Measurements Manager .</p>"},{"location":"console/create_template_wizard/#completing-the-webload-wizard","title":"Completing the WebLOAD Wizard","text":"<p>The product of your performance testing is the WebLOAD report. Here you can see how your Web application handles the load that you have tested. The WebLOAD Wizard automatically generates a predefined report that measures:</p> <ul> <li>Hits per Second</li> <li>Round Time (the amount of time required to run one round of the script)</li> <li>Number of Virtual Clients</li> <li>Throughput (the number of bytes per second transmitted from the SUT)</li> </ul> <p>WebLOAD Console saves all the values for the complete set of measurements. You can decide after the test has run to display the results never before requested.</p> <p></p> <p>To complete the WebLOAD Wizard:</p> <ol> <li> </li> <li> <p>Click Finish. </p> </li> </ol> <p>A message box appears asking if you want to save the current Load Template.</p> <p></p> <ol> <li>Click Yes to save the current Load Template as a *.tpl file.</li> </ol> <p>Load Templates contain the parameters that you defined for the test session, such as scripts to run, participating hosts, and the test plan. Using Load Templates saves you the time of reconfiguring the Load Session when repeating tests. For more information on Load Templates see Managing Load Templates .</p> <p>The WebLOAD Wizard closes and the load test begins.</p>"},{"location":"console/create_template_wizard/#check-to-run-this-load-template-immediately","title":"Check To run this Load Template immediately.","text":""},{"location":"console/create_template_wizard/#after-completing-the-webload-wizard","title":"After Completing the WebLOAD Wizard","text":"<p>After you have completed the WebLOAD Wizard you can do the following:</p> <ul> <li>Run the Wizard to add a new script/mix to the template</li> <li>Edit the Load Template</li> <li>View the test results</li> <li>Modify the host selection</li> <li>Modify the load schedule</li> </ul>"},{"location":"console/create_template_wizard/#adding-a-new-scriptmix-to-the-template","title":"Adding a New Script/Mix to the Template","text":"<p>If you want to add an additional combination of script/mix, host selection and load schedule, right click the Load Session and select Open Wizard. Complete the wizard.</p>"},{"location":"console/create_template_wizard/#editing-the-load-template","title":"Editing the Load Template","text":"<p>After completing the WebLOAD Wizard, a Load Template with one Load Machine is created. You can save this Load Template for future Load Sessions. The Load Template can then be edited through the Console ribbon and button.</p>"},{"location":"console/create_template_wizard/#viewing-the-webload-wizard-default-report","title":"Viewing the WebLOAD Wizard Default Report","text":"<p>The WebLOAD Wizard automatically generates a predefined report that measures:</p> <ul> <li>Hits per Second</li> <li> <p>Round Time (the amount of time required to run one round of the script)</p> </li> <li> <p>Load Size (the number of Virtual Clients being generated)</p> </li> <li>Throughput (the number of bytes per second transmitted from the SUT)</li> </ul> <p>You can configure your own report through the Console Reports menu. WebLOAD Console saves all of the values for the complete set of measurements. You can display the results never before requested.</p>"},{"location":"console/create_template_wizard/#modifying-the-host-selection","title":"Modifying the Host Selection","text":"<p>After closing the WebLOAD Wizard you can edit the parameters in the Host Selection dialog box.</p> <p>To modify the host selection:</p> <ol> <li>Click Load Machine Selection in the Home tab of the ribbon. The Host Selection dialog box opens.</li> <li>Make the changes as needed.</li> <li>Click OK.</li> </ol> <p>The host selection parameters are changed.</p> <p>Note: If after closing the WebLOAD Wizard you want to edit parameters in the Host Selection dialog box, click Load Machine Selection in the Home tab of the ribbon. </p>"},{"location":"console/create_template_wizard/#modifying-the-load-schedule","title":"Modifying the Load Schedule","text":"<p>After closing the WebLOAD Wizard you can edit the parameters in the load schedule.</p> <p>To modify the load schedule:</p> <ol> <li>Click Schedule in the Home tab of the ribbon. The Schedule Manually screen appears.</li> <li>Make the changes.</li> <li>Click OK.</li> </ol> <p>The load schedule is changed.</p>"},{"location":"console/data_drilling_reports/","title":"Data Drilling Reports","text":"<p>The WebLOAD Data Drilling Reports provide a graphic illustration of the problematic tables, making it simple to locate and correct the source of the error.</p> <p>Data Drilling reports are available after the Load Session has completed.</p>"},{"location":"console/data_drilling_reports/#data-drilling-reports_1","title":"Data Drilling Reports","text":"<p>Data Drilling provides both a global and detailed account of hit successes and failures allowing you to verify the functional integrity of your Web application at the per- client, per-transactions and per-instance level. The Data Drilling reports provide an extremely detailed yet easily accessible summary of all the statistical, timing and performance information collected over the course of the test session, which includes:</p> <ul> <li>A named entry for each HTTP action in the script. Information is automatically saved for all actions tested using the Functional Verification Wizard. Information is also saved for all user-defined or manually named transactions.</li> </ul> <p>Click a specific entry to zoom in on the detailed information available for that action. For each HTTP action tested and verified by your test script, WebLOAD Console provides a complete breakdown of all relevant information, including:</p> <ul> <li> <p>A hierarchical tree of all the \u2018sub-steps\u2019 needed to complete the specified action. For example, a single Get of a simple Web page may include multiple \u2018sub-Gets\u2019 or hits of the various frames found on that page, each with its own pictures and tables, each of which is also listed with its own \u2018sub-sub-Get\u2019.</p> <p>Note: WebLOAD Console works with the \u2018visual set\u2019 of Web page elements associated with each action. Only the targeted frames that were actually accessed during a specific action will be saved as part of the DOM for that action, and not necessarily every single peripheral frame associated with the parent Web page.</p> </li> <li> <p>Detailed information about the time required for each action and sub- transaction, including low-performance flags for actions that complete correctly, but take longer than a user-set time threshold to complete.</p> </li> <li> <p>A hierarchical tree of all the objects accessed or otherwise associated with the specified action, together with detailed information about the time required to access each object. The timing information is broken down into the time required for each HTTP activity associated with that object, including connect time, send time, wait time (time to first byte), and final receive time.</p> </li> <li>Entries for every timer triggered during the test session, including user- defined timers, WebLOAD-defined built-in timers, and automatic timers triggered each time ActiveX or Java object methods are activated. Click a timer entry to bring up detailed information about that timer.</li> <li>Entries for every error event triggered during the test session by both WebLOAD Console and user-defined verification functions. Click an event entry to bring up detailed information about that event.</li> </ul> <p>Note: Data Drilling is only available to you if:</p> <ul> <li>You initiated user-defined transactions in the scripting for functional testing.</li> <li>You configured Automatic data collection in the Functional Testing tab of the Script Options dialog box or Default/Current Session Options dialog boxes. </li> </ul>"},{"location":"console/data_drilling_reports/#opening-a-data-drilling-report","title":"Opening a Data Drilling Report","text":"<p>To open a Data Drilling report:</p> <ul> <li>Select Open Data Drilling in the Session tab of the ribbon.</li> </ul>"},{"location":"console/data_drilling_reports/#viewing-the-transaction-grid","title":"Viewing the Transaction Grid","text":"<p>The Transaction Grid is the entry point for accessing the Data Drilling reports provided by WebLOAD Console.</p> <p></p> <p>The Transaction Grid displays summary information for all user-defined and named transactions incorporated in the Script including:</p> Attribute Explanation Transaction Name The name of the transaction. Total Count The total number of times the transaction was executed. Successful Count The number of successful executions of the transaction. Failed Count The number of failed executions of the transaction. Marked Count The number of times a lower level transaction, meaning a transaction nested within a higher level transaction, failed within the current transaction. <p>Note: Some of the transactions include both successes and failures.</p>"},{"location":"console/data_drilling_reports/#viewing-the-transaction-reason-failure-grid","title":"Viewing the Transaction Reason Failure Grid","text":"<p>The Transaction Reason Failure grid lists the reasons for the transaction failure, together with the total failure count for that transaction.</p> <p></p> <p>The UpdateAccount transaction is highlighted in the Transaction Grid. The Reason for the UpdateAccount transaction failure, Transfer incomplete displays immediately below the Transaction Grid. The Transaction Failure Reason Grid displays why two of the UpdateAccount transactions failed.</p>"},{"location":"console/data_drilling_reports/#viewing-the-instance-grid","title":"Viewing the Instance Grid","text":"<p>The Instance Grid lists the individual instances of transaction failure, together with specific details about each instance.</p> <p>The following information is included for each transaction instance displayed in the grid:</p> Attribute Explanation Severity The severity level of this Transaction Instance failure, based on the return code set by the script in the Verification function. Reason The reason that the Transaction Instance failed based on information supplied by the script in the SetFailureReason function. Time The time that this Transaction Instance began execution, relative to the beginning of the current test session. Duration The time it took to complete the Transaction Instance. If the Transaction Instance failed, the duration is the time until the transaction failed. Total Load Size The total number of Virtual Clients running on the Load Generator during this Transaction Instance. Thread Number The number of the current thread running during this Transaction Instance. Round Number The number of the current round running during this Transaction Instance. Load Generator The name of the Load Generator that executed the Transaction Instance. <p>The Instance Grid incorporates functional testing with performance testing and provides you with a detailed description of exactly which Transaction Instance failed, why it failed, and what else occurred at that point in the script execution for that Load Generator.</p>"},{"location":"console/data_drilling_reports/#viewing-the-parent-transaction-instance-tree","title":"Viewing the Parent Transaction Instance Tree","text":"<p>The Parent Transaction Instance Tree:</p> <ul> <li>Provides a graphic presentation of the relationships between all of the parent and children transactions, providing a detailed breakdown of all sub-events that occurred as part of the selected Transaction. For example, a transaction may involve a series of steps, including opening a connection, sending a signal, waiting, receiving a response, etc.</li> <li>Lists all of the details about the selected Instance provided in the Instance Grid.</li> </ul> <p>A transaction is selected in the tree at the left. The fact that this transaction triggered an error is indicated by the blue flag icon next to the transaction and the blue color of the transaction itself.</p> <p>The properties for the selected Transaction Instance are displayed in a table on the right side of the window. The Transaction Instance Tree provides a broad understanding of how the failed Transaction Instance fits into the general script execution.</p> <p></p>"},{"location":"console/data_drilling_reports/#viewing-the-child-transaction-instance-tree","title":"Viewing the Child Transaction Instance Tree","text":"<p>Child transactions are selected on the tree at the left. The fact that the transaction triggered an error is indicated by the blue flag on the icon next to the transaction and the blue color of the transaction itself in the tree. Details of the error are provided in the table at the right.</p> <p>In the image below, the selected child transaction triggered an HTTP ERROR of severity Minor Error. The corresponding error entry in the Log Window is highlighted.</p> <p></p> <p>To see more information about the actual event that triggered this error, double-click the child transaction branch in the tree to expand its own sub tree, including its own Events sub-branch. Double-click more entries under the Events sub-branch to display more information about each selected item on the table at the right.</p> <p></p> <p>By working your way through the multiple levels of the Data Drilling reports you can achieve a complete picture of the exact point at which your script failed, along with a complete history of the general system and events that led up to the failure. This level of detailed information simplifies your work when testing and debugging your website.</p>"},{"location":"console/export_performance_reports/","title":"Exporting Performance Reports","text":"<p>Performance Reports are the product of your test session. Performance Reports enable you to combine several different measurements into a single report. You are able to view the data accumulated in the NT and Unix Performance Monitors together with the performance data from the Load Generators and Probing Clients. All of the data displayed in the Integrated Reports and Statistics can be exported to HTML, Microsoft Excel and to Tab files. Statistics from external files can also be imported to your reports.</p>"},{"location":"console/export_performance_reports/#report-export-import-options","title":"Report Export / Import Options","text":"<p>WebLOAD Console enables you to export the following types of reports, and import external statistics:</p> <ul> <li>Reports containing only the data specified.</li> <li>General reports containing all the data from your test session.</li> </ul> <p>Access the export / import options through the Reports menu in the menu bar. The following table describes each export / import option.</p> Category Description Export Exports selective WebLOAD Console report data. Export All Exports all of the statistical data gathered by WebLOAD Console throughout the test session. Import External Statistics Imports statistical data from an external file into your report."},{"location":"console/export_performance_reports/#exporting-selective-webload-report-data","title":"Exporting Selective WebLOAD Report Data","text":"<p>The following is a graphic presentation of an Integrated Report. This report displays the data for Load Size, Hits Per Second, Response Time, and Process Time.</p> <p></p> <p>The screen below displays the data for the Response Time in tabular format.</p> <p></p> <p>All examples in this section refer to these reports.</p>"},{"location":"console/export_performance_reports/#exporting-performance-reports-to-excel","title":"Exporting Performance Reports to Excel","text":"<p>You can view all of the data available in the Performance Reports from a single Excel spreadsheet. After you have exported a Performance Report to Excel, you work with the exported spreadsheet as you would with any other Excel spreadsheet.</p> <p>To export Performance Reports to Excel:</p> <ol> <li>Display the Integrated Report you want to export. If there is more than one report open, focus on the report you want to export.</li> <li> <p>Click Export Report \u0086 Export to Excel in the Session tab of the ribbon.</p> <p>The report is sent to Excel, which opens automatically and displays the Integrated Report.</p> <p>Notes:</p> <p>If Excel is not installed, you receive the following error: Cannot Open Excel.</p> <p>Exporting a large amount of data to Excel may take some time. Wait until the export to Excel has completed before continuing work with the Console.</p> </li> <li> <p>Save the Excel file.</p> <p>The following screen shows an Integrated Report after it is exported to an Excel spreadsheet. This screen shows a tabular presentation for a graphic screen displayed in WebLOAD Console.</p> <p></p> </li> </ol> <p>Features of this report:</p> <ul> <li>The first column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains the name of each measurement in the following format: Script / Measurement / Attribute. The names of the measurements are color-coded to match the measurements in the Chart View of the report.</li> <li>Integrated Reports displayed in Chart View are exported to Excel in tabular format.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency and the delimiters of your exported report.</p>"},{"location":"console/export_performance_reports/#exporting-performance-reports-to-a-tab-file","title":"Exporting Performance Reports to a Tab File","text":"<p>To export Performance Reports to a Tab file:</p> <ol> <li>Display the report you want to export. If there is more than one report open, focus on the report you want to export.</li> <li>Click Export Report \u0086 Export to Tab File in the Session tab of the ribbon. The Windows Save As dialog box appears.</li> <li>Enter the name of your new Tab file. The file has a *.tab extension.</li> <li>Click Save.</li> </ol> <p>Once the file is saved, it is displayed. Configure the viewer and the view options using the Export options dialog box, see Customizing the Export File .</p> <p>This image shows an Integrated Report after it is exported to a Tab file and opened in Microsoft Word (using tab as a delimiter). You can change the presentation of this file using the Export options dialog box.</p> <p></p> <p>Features of this Report:</p> <ul> <li>The first column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains of the name of each measurement in the following format: Script / Measurement / Attribute.</li> <li>Integrated Reports displayed in Chart View is exported to Tab files in tabular format.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency, the delimiters of your exported table, the viewer, and the view options.</p>"},{"location":"console/export_performance_reports/#exporting-performance-reports-to-html","title":"Exporting Performance Reports to HTML","text":"<p>To export Performance Reports to HTML:</p> <ol> <li>Display the report you want to export. If there is more than one report open, focus on the report you want to export.</li> <li>Click Export Report \u0086 Export to HTML File in the Session tab of the ribbon. The report is displayed in HTML.</li> </ol> <p></p> <p>Features of this Report:</p> <ul> <li>The first column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains of the name of each measurement in the following format: Script / Measurement / Attribute.</li> <li>Integrated Reports displayed in Chart View is exported to HTML in tabular format.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency, the delimiters of your exported table, the viewer, and the view options.</p>"},{"location":"console/export_performance_reports/#exporting-all-statistical-data","title":"Exporting All Statistical Data","text":"<p>WebLOAD Console provides a wealth of statistical information about the performance of the Web system under test. All of the statistical data gathered by WebLOAD Console can be exported to Microsoft Excel, Tab files and HTML. Exporting the WebLOAD Console statistical data allows you to view and manipulate your data and perform cross report comparisons.</p>"},{"location":"console/export_performance_reports/#exporting-all-statistics-to-excel","title":"Exporting All Statistics to Excel","text":"<p>To export all Statistics to Excel:</p> <ul> <li>Click Export All &gt; Export All to Excel in the Session tab of the ribbon.</li> </ul> <p>Excel opens automatically and displays all of the Statistics gathered by WebLOAD Console.</p> <p>The following screen shows the Statistics as they appear when exported to Excel.</p> <p></p> <p>Features of this report:</p> <ul> <li>The first column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains the name of each measurement in the following format: Script / Measurement / Attribute.</li> <li>Data is exported to Excel by columns. When the end of a sheet is reached, a new Excel sheet is opened.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency and the delimiters of your exported table.</p>"},{"location":"console/export_performance_reports/#exporting-all-statistics-to-a-tab-file","title":"Exporting All Statistics to a Tab File","text":"<p>To export all statistics to a Tab file:</p> <ol> <li>Click Export All \u0086 Export All to Tab File in the Session tab of the ribbon. The Windows Save As dialog box appears.</li> <li>Enter the name of your new Tab file. The file has a *.tab extension.</li> <li> <p>Click Save.</p> <p>Once the file is saved, the data is displayed.</p> </li> </ol> <p>Change the presentation of this file using the Export options dialog box.</p> <ul> <li>The left column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains the name of each measurement in the following format: Script / Measurement / Attribute.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency, the delimiters of your exported table, the viewer, and the view options.</p>"},{"location":"console/export_performance_reports/#exporting-all-statistics-to-html","title":"Exporting All Statistics to HTML","text":"<p>To export all statistics to HTML:</p> <ul> <li>Click Export All \u0086 Export All to HTML File in the Session tab of the ribbon. Change the presentation of this file using the Export options dialog box.</li> <li>The left column contains the times (in seconds) that the measurement values were recorded.</li> <li>The top row contains the name of each measurement in the following format: Script / Measurement / Attribute.</li> </ul> <p>See Customizing the Export File , for information on configuring the sampling frequency, the delimiters of your exported table, the viewer, and the view options.</p>"},{"location":"console/export_performance_reports/#customizing-the-export-file","title":"Customizing the Export File","text":"<p>Before data is exported you can define the way the data is displayed in the exported file.</p> <p>To customize the export file:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button. The Global Options dialog box opens.</p> </li> <li> <p>Select the Export tab.</p> <p>The Export tab is displayed.</p> <p></p> <p>The Export tab contains the following fields:</p> Field Name Description Export every statistics reporting The frequency of the number of samples exported. For example, if 1 is entered for this value, WebLOAD Console exports every sample taken. If 2 is entered for this value, WebLOAD Console exports every second sample. When configuring this option, you must consider the setting selected for sampling. If for example, the Statistics Reporting Resolution is set to 20 seconds and Export Every Statistics Reporting is set to 2, the measurement exported reflects a sampling every 40 seconds. The measurements are the measurements taken at the intervals: 20, 60, 100, 140\u2026 This option is useful in cases where there is a large amount of data due to a long test session. Open viewer when exporting Select this checkbox to launch the Tab File and HTML Default Viewer after the Tab or HTML file is exported. This is selected by default Tab File delimiter <p>Definition of the delimiter used when exporting the statistical data to a tab file. All strings can be used as delimiters by entering the string in the Tab File Delimiter field.</p><p>- To use tab characters as delimiters enter \\t.</p><p>- To use a new line as a delimiter, enter \\r or \\n.</p><p>- To use a space as a delimiter, use \\s.</p> Tab\\HTML File default directory The default directory for saving Tab and HTML files. Tab File default viewer The default viewer to open after the Tab file is exported. </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/func_verifi_test/","title":"Functional Verification Testing","text":"<p>WebLOAD Console combines unified load, performance, and functional testing into a single process, allowing you to verify the scalability and integrity of Web applications at the per-client, per-transaction, and per-instance level under user-defined load conditions. By creating and analyzing the Document Object Model (DOM) for every Virtual Client during a test session, WebLOAD Console is able to verify each success and failure and present detailed information to you about each transaction.</p> <p>The WebLOAD Functional Verification Test Tool is an easy-to-use tool which automates the process of inserting verification tests into the script and verifies that the links, images, forms, tables and frames in your Web application continue to act as expected.</p> <p>WebLOAD Console also enables you to insert application level transactions into the script and define verification criteria, which compare expected outcomes against actual ones. WebLOAD Console tracks the success and failure rates of the transactions for each Virtual Client and integrates the data into the WebLOAD Statistics Report. You can find additional information about functional testing in the WebLOAD Recorder User\u2019s Guide.</p>"},{"location":"console/func_verifi_test/#the-functional-testing-tab","title":"The Functional Testing Tab","text":"<p>The verification tests you specify within WebLOAD Console are performed on all Web pages in the script. To configure verification tests on all pages, set the global verification options through the Default / Current Session Options &gt; Functional Testing dialog box. This section describes the options available through the Functional Testing tab.</p>"},{"location":"console/func_verifi_test/#opening-the-functional-testing-tab","title":"Opening the Functional Testing Tab","text":"<p>To open the Functional Testing tab:</p> <ul> <li>Click Default Options in the Tools tab of the ribbon or select Default Options</li> </ul> <p>from the Console System button to set the verification tests to run for all scripts,</p> <p>-Or-</p> <p>Click Current Session Options in the Tools tab of the ribbon or select Current Session Options from the Console System button to set the verification tests to run for the current session.</p> <p>The Functional Testing tab opens.</p> <p></p> <p>No global verification tests are selected by default.</p> <p>The Functional Testing tab enables you to insert verification tests into the script that verify that the links, images, forms, tables, titles, and frames on your Web application continue to act as expected. You can also set tests to verify selected text and to report the default values presented on each form. Each test can be assigned a different severity level.</p> <p>Note: Tests set through the Current Sessions Options dialog box override the Default Options dialog box settings.</p> <p>You can choose to compare any or all of the following:</p> <ul> <li>Each Web page title.</li> <li>For each collection of forms, frames, images, and links, the URL and the number of each object within each collection, as well as the number of elements found on each form.</li> <li>The number of tables and/or structure. You can also:</li> <li>Search for a specific user-defined string throughout the script.</li> <li>Report the default values for each element in all forms found in the script.</li> <li>Select the tests you want to run and specify the severity level of the test results, which determines how the script will continue to execute.</li> </ul> <p>For information on severity levels, see Verification Function Return Values .</p>"},{"location":"console/func_verifi_test/#selecting-the-tests-to-perform","title":"Selecting the Tests to Perform","text":"<p>Once the Functional Testing tab is open, you must decide which tests you want to perform. The tests are performed on all pages in the script.</p> <p>WebLOAD Console enables you to select specific tests to run.</p> <p>In each case you can specify the severity level in case of test failure, which determines whether the script will continue to execute or not.</p> <p>For full details, see Verification Function Return Values .</p>"},{"location":"console/func_verifi_test/#verifying-text","title":"Verifying Text","text":"<p>Use Text verifications to verify the absence or presence of selected text expressions within your Web page.</p> <p>To insert a text verification test into your script:</p> <ol> <li> <p>Open the Functional Testing tab, as described in Opening the Functional Testing Tab.</p> </li> <li> <p>Select the Verification checkbox.</p> </li> <li> <p>Select the percentage of time the tests should be performed. This is the percentage of Virtual Clients that will perform the verification tests.</p> </li> <li> <p>Select the checkbox adjacent to the Text Search test.</p> <p>Note: Selecting a lower level checkbox selects and highlights the upper level checkbox.</p> </li> <li> <p>Select the severity level from the drop-down list next to the test. </p> </li> <li> <p>Enter a literal string with the text for which you are searching in the Text field. The text string is case sensitive.</p> <p>A search on the specified text is performed throughout the entire HTML, including the tags.</p> </li> <li> <p>Select the type of test to run from the drop-down list in the Option field:</p> <ul> <li>Find \u2012 The verification test will pass if the selected text is found in the current Web page.</li> <li>Not to Find \u2012 The verification test will fail if the selected text is found in the current Web page.</li> </ul> <p>For example, to ensure that the word error does not appear on the page during runtime, enter the word error in the Text field, and select Not to Find. If the text error is found on the page, WebLOAD Console will report the error.</p> </li> <li> <p>Select the severity level from the Severity drop\u2013down list. For further information, see Verification Function Return Values .</p> </li> <li> <p>Click Add to add another string to the list of Text Search strings.</p> </li> <li> <p>Click Delete to delete a selected string from the list of Text Search strings.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/func_verifi_test/#user-defined-transactions-and-verification","title":"User-Defined Transactions and Verification","text":"<p>Using WebLOAD Console, you can define application-level transaction and verification criteria to determine whether the transaction succeeded or failed. When a user-defined transaction executes, WebLOAD Console initiates a timer and a counter. The timer measures the time required to execute the transaction. The counter tracks the success and the failure rate of the transactions, based on user-defined criteria. For each transaction, the counter automatically increments either the \u201csuccessful transaction count\u201d or the \u201cfailed transaction count.\u201d WebLOAD Console also lets you define the behavior of the program depending on the transaction results.</p> <p>WebLOAD Console tracks all of the results from user-defined transactions and integrates the data into the WebLOAD Statistics Report, including the timer and counter statistics as well as statistics on specific failures. The results are then automatically displayed with the other WebLOAD Console statistical information.</p>"},{"location":"console/func_verifi_test/#including-a-user-defined-transaction-in-your-script","title":"Including a User-Defined Transaction in your script","text":"<p>Application-level transactions and verifications are defined through the WebLOAD Recorder script editing functions. See the WebLOAD Recorder User\u2019s Guide for more information.</p>"},{"location":"console/func_verifi_test/#user-defined-transactions-and-verification-syntax","title":"User-Defined Transactions and Verification Syntax","text":"<pre><code>BeginTransaction(\u201c&lt;Transaction-Name&gt;\u201c)\n      &lt;any valid JavaScript statements&gt;\nEndTransaction(\u201c&lt;Transaction-Name&gt;\u201c,\n            &lt;Verification-Expression&gt;,&lt;Save-Flag&gt;)\n</code></pre> <p>Where:</p> <ul> <li> <p><code>Transaction-Name</code> is a user-supplied string.</p> </li> <li> <p><code>Verification-Function</code> (optional) is the name of the function to be called that evaluates the transaction severity level (MinorError, Error, SevereError or Custom Function). If no such expression is present, the default value is Success.</p> </li> <li> <p><code>save-flag</code> is an optional Boolean flag specifying whether WebLOAD Console should save only the results of problematic transaction instance that triggered an error (default), or save all transaction instances.</p> </li> </ul>"},{"location":"console/func_verifi_test/#user-defined-transaction-example","title":"User-Defined Transaction Example","text":"<p>The following example illustrates implementing a user-defined transaction:</p> <pre><code>BeginTransaction(\u201cUpdateBankAccount\u201d)\n   /* The user-defined transaction \u201cUpdateBankAccount\u201d starts*/ \ntry {\nwlHttp.ExpectNavigation(\u201chttp://\u2026\u201d) \nwlHttp.Navigate(\"www.....com\u201d)\nwlHttp.SyncDOM(1);\n}\n\n   /* The body of the transaction\\*/\n&lt;any valid JavaScript statement&gt;\n\nEndTransaction(\u201cUpdateBankAccount\u201d,\n   UpdateBankAccount\\_VerificationFunction()) \nfunction UpdateBankAccount\\_VerificationFunction()\n\n{\n   return WLSuccess;\n}\n\n/* The user-defined transaction \u201cUpdateBankAccount\u201d ends\\*/\n</code></pre> <p>Note: The user-supplied UpdateBankAccount_VerificationFunction() is called to determine whether the transaction succeeded or failed. This function can be defined either in the script or in an included file.</p> <p>If during the test the above transaction succeeded 15 times and failed 5 times, and it took an average of 1.2 seconds for the transaction to execute, the Statistics Report displays as follows:</p> Total UpdateBankAccount transactions 20 Successful UpdateBankAccount transactions 15 Failed UpdateBankAccount transactions 5 UpdateBankAccount timer 1.2 sec <p>Note: The transaction timer measures the time it took to execute the code between the BeginTransaction statement and the EndTransaction statement.</p>"},{"location":"console/func_verifi_test/#verification-function-return-values","title":"Verification Function Return Values","text":"<p>You define the pass/fail criterion for user-defined transactions. For each verification test you must also specify the severity level of a failure. The severity level determines the execution path when the main script resumes control. Thus, depending on the severity level, you can program the test to ignore the failure, jump to the next navigation block, or stop the test. Extreme failures with high severity levels can be set to abort the test, whereas less severe failures can be ignored.</p> <p>You set the severity level in the return statement of the verification function. The assigned severity levels and their results are handled in the same manner as other test failure results in WebLOAD Console. All failures are logged and are displayed in the WebLOAD Console log window. Refer to Appendix C: WebLOAD Console Error Messages  for more details on severity levels.</p> <p>Transactions may be assigned one of the following return values:</p> Severity Level WebLOAD Behavior Success The transaction completed successfully. MinorError The specific transaction failed, but the script continues to execute from the following statement. Error The specific transaction failed. The script continues from the next navigation block. SevereError The specific transaction failed. The Load Generator on which the error occurred is stopped. <p>Note: If a return value (<code>return()</code>) is not specified, the default value is Success, indicating that the transaction completed successfully. </p>"},{"location":"console/func_verifi_test/#reporting-events","title":"Reporting Events","text":"<p>WebLOAD Console enables you to record specific events and transaction instances as they occur. This information is very useful when analyzing website performance with Data Drilling, described in Data Drilling .</p> <p>Record transaction events with the following syntax:</p> <p><code>ReportEvent (\u201c&lt;event-name&gt;\u201c, [\u201c&lt;description&gt;\u201c])</code></p> <p>Where:</p> <ul> <li><code>event-name</code> is a string that identifies the specific event.</li> <li><code>description</code> is an optional string providing more information about the specific event.</li> </ul>"},{"location":"console/func_verifi_test/#tracking-reasons-for-transaction-failure","title":"Tracking Reasons for Transaction Failure","text":"<p>WebLOAD Console enables you to specify possible reasons for the failure of a given transaction. WebLOAD Console tracks the reasons for failure individually, in the Statistics Reports. The reasons for the transaction failure must be specified in the verification function.</p> <p>The default reason for failure of basic transactions is General-Failure. Unless another reason for failure is specified, this is set automatically whenever the transaction fails.</p> <p>Set the reason for a transaction failure using the following syntax:</p> <p><code>SetFailureReason (\u201c&lt;failure-reason&gt;\u201c)</code></p> <p>For example:</p> <p>Continuing the UpdateBankAccount transaction example described in User-Defined Transactions and Verification (see User-Defined Transactions and Verification Syntax , the UpdateBankAccount verification function might appear as follows:</p> <pre><code>function UpdateBankAccount_VerificationFunction()\n{\n    VerifyUpdateBankAccount () { \n      if &lt;Condition-success&gt; then\n         return(WLSuccess)} \n         else\n      if (document. URL == \u201c../no-login\u201d) then { \n         SetFailureReason(\u201cUser Not Logged\u201d) \n         return(WLError) }\n      else\n      if (document.URL == \u201c...wrong-    password\u201d) then { \n         SetFailureReason(\u201cWrong Password\u201d) \n         return(WLError); }\n      else\n         return(WLSevereError)\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>Return(WLSuccess)</code> \u2012 indicates that the actual transaction succeeded and it is added to the SuccessfulUpdateBankAccount transactions counter.</li> <li>The <code>SetFailureReason()</code> function accepts a string as a parameter. This string is used to identify the cause of the transaction failure (\u201cUser Not Logged\u201d, <code>\u201cWrong Password\u201d</code>, etc.). This data enables tracking of the number of failures that occur for a specific reason, as well as the time that the failures occurred.</li> <li>When the reason for failure is <code>\u201cUser Not Logged\u201d</code> or <code>\u201cWrong Password\u201d</code>, the severity level is Error. Consequently, when the main script resumes control the current round aborts and a new round commences.</li> <li>If you mark the transaction as failed, but do not specify any failure reason, the system registers a <code>\u201cGeneral Failure\u201d</code> which is the default failure severity.</li> </ul> <p>If during the execution of a test the above transaction succeeded 15 times and failed 5, and the <code>SetFailureReason()</code> function was called 3 times with the string <code>\u201cWrong Password\u201d</code> and 2 times with the string <code>\u201cUser Not Logged\u201d</code>, the Statistics Report appears as follows:</p> Test Time Total UpdateBankAccount transactions 20 Successful UpdateBankAccount transactions 15 Failed UpdateBankAccount transactions 5 Failed UpdateBankAccount transactions: Wrong Password 3 Failed UpdateBankAccount transactions: User Not Logged 2 UpdateBankAccount timer 1.2 sec <p>All of the selected tests are performed on all pages in the script when you run a WebLOAD Console test session. Verification test failures are automatically added to the Data Drilling reports. All verification test failures are also displayed in the Event Viewer that highlights the \u201cactual\u201d results, described in *Viewing Verification Test Results.</p>"},{"location":"console/func_verifi_test/#viewing-verification-test-results","title":"Viewing Verification Test Results","text":"<p>After running your script, WebLOAD Console provides information on all major events that occurred during runtime such as verification failures and error messages.</p> <p>When a verification test fails:</p> <ul> <li>The failure is logged in the Log Window, described in *Viewing Error Information in Log window.</li> <li>The failure is added to the Data Drilling report, described in Data Drilling .</li> </ul> <p>All verification failures can be viewed in the Event Viewer, which displays the \u201cactual\u201d results, and a description of the error. The Event View can be accessed through either the Log Window or the Data Drilling reports, as described here.</p>"},{"location":"console/func_verifi_test/#viewing-error-information-in-the-log-window","title":"Viewing Error Information in the Log Window","text":"<p>If an error occurs at any time during the test session, an error message displays in the Log Window. A browser error or a Minor Error does not cause the test session to stop. An Error stops the current round. A Severe Error terminates the session upon completion of the current navigation block.</p> <p>A description of each error is listed in the Log Window. You can select whether to display or hide the error log using the Log Window checkbox in the Session tab of the window.</p> <p></p> <p>The Log Window displays the following additional information about your test session results:</p> <ul> <li>Message Status \u2012 The result and severity of each message. Messages fall into four categories:<ul> <li>Success / Info Message</li> <li>Minor Error</li> <li>Error</li> <li>Severe Error</li> </ul> </li> <li>Attachments \u2012 Double-click the paperclip adjacent to the message to view additional information.</li> <li>Time \u2012 The duration of the action specified in the Message column.</li> <li>Generator Name \u2012 The generator that originated the message.</li> <li>Script Name \u2012 The script that originated the message.</li> <li>Client Number \u2013 The number of the client that originated the message.</li> <li>Message \u2012 The runtime action and information about failed actions.</li> <li>Timestamp \u2012 The date and time on which the action specified in the Message column is completed.</li> </ul> <p>To view more information on an error:</p> <ul> <li>Double-click the paperclip adjacent to the verification failure in the Log Window. The Event Viewer opens.</li> </ul> <p>Note: The Event Viewer is only available after the test session is complete.</p>"},{"location":"console/func_verifi_test/#viewing-error-information-in-the-event-viewer","title":"Viewing Error Information in the Event Viewer","text":"<p>When you double-click a verification failure in the Log Window, the Event viewer opens. The Event Viewer displays the Actual views of the object that triggered the failure, with the object highlighted. A description of any errors that occurred during the test run appears below.</p> <p></p> <p>Double-click the description below the viewer to highlight any changes relating to the error.</p> <p>Note that if you integrated WebLOAD with Dynatrace, a Dynatrace button appears in the Event Viewer window. Clicking the button opens a Dynatrace window displaying the relevant transaction. </p>"},{"location":"console/func_verifi_test/#printing-the-contents-of-the-log-window","title":"Printing the Contents of the Log Window","text":"<p>To print the contents of the log window:</p> <ol> <li>Right-click inside the log window.</li> <li>Select Print from the right-click menu. The Print Setup dialog appears.</li> <li>Select a printer and click OK.</li> </ol>"},{"location":"console/func_verifi_test/#saving-the-contents-of-the-log-window","title":"Saving the Contents of the Log Window","text":"<p>To save the contents of the log window:</p> <ol> <li>Right-click inside the log window.</li> <li>Select Save from the right-click menu. The Save As dialog appears.</li> <li>In the File Name field, type in the name for the file.</li> <li>Click Save.</li> </ol> <p>The file is saved with the extension *.mdb.</p> <p>You can view the saved log file using Microsoft Access or Excel.</p>"},{"location":"console/func_verifi_test/#data-drilling","title":"Data Drilling","text":"<p>When testing the integrity of your Web application, it is important to see not only if a given transaction succeeded or failed, but also the reasons for the failure to pinpoint the transaction\u2019s exact weak points and bottlenecks. Data Drilling enables you to display a detailed description of all user-defined and named transactions to the instance level.</p> <p>With Data Drilling you can view all transaction failures and the reasons for them. Data Drilling reports provide a complete breakdown of all information about a selected event. Click an event entry to bring up detailed information about that event in the Event Viewer. The Event Viewer provides a graphic illustration of the verification failure event, displaying the \u201cactual\u201d results, and a description of the error.</p> <p>Note: Data Drilling is only available to you if:</p> <ul> <li>You initiated user-defined transactions in the scripting for functional testing.</li> <li>You configured Automatic data collection in the Functional Testing tab of the Script Options dialog box or Default/Current Session Options dialog boxes. </li> </ul>"},{"location":"console/getting_started/","title":"Getting Started","text":"<p>WebLOAD accurately simulates Internet users\u2019 behavior and models real-life demands on your Web application to predict capacity requirements, report bottlenecks, and report weak links in your application before deployment.</p> <p>This chapter introduces WebLOAD, the WebLOAD test components and an overview of WebLOAD\u2019s capabilities and features.</p>"},{"location":"console/getting_started/#welcome-to-webload","title":"Welcome to WebLOAD","text":"<p>WebLOAD delivers the following for maximum testing performance, ease of use and value:</p> <ul> <li>Full client-side JavaScript support.</li> <li>Document Object Model (DOM) access.</li> <li>JavaScript-based test scripting.</li> <li>Seamless integration with Web application servers.</li> <li>Automated operation.</li> <li>Single-point management and real-time graphical and statistical reporting.</li> </ul> <p>WebLOAD verifies the scalability and integrity of Web applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the Web application under load.</p> <ul> <li>WebLOAD is powerful. WebLOAD unifies performance, scalability and integrity testing into a single process for accurate and timely verification of your Web application, under load defined conditions. WebLOAD provides you with unmatched flexibility for defining and parameterizing Virtual Clients such as connection speed, browser types, multithreading, and SSL encryption strength, for absolute control while simulating real-world conditions.</li> <li> <p>WebLOAD is easy to use. Recording a test script is as easy as using a browser, with WebLOAD Recorder recording each step. WebLOAD Recorder requires no programming and is operated using an intuitive, graphical user interface to create visual scripts. These visual scripts can later be enhanced by modifying the automatically generated script. Scripts developed in WebLOAD Recorder can be run in WebLOAD to emulate Virtual Clients for load testing, or can be run in WebLOAD Console to emulate Virtual Clients for load testing.</p> </li> <li> <p>WebLOAD is efficient. WebLOAD delivers unmatched levels of load generation through its optimized architecture and use of operating systems. You can freely incorporate additional systems for virtually unlimited testing loads.</p> </li> <li>WebLOAD is simple. WebLOAD automatically finds the performance threshold of your Web application through Goal-Oriented testing. Simply define target performance parameters and WebLOAD generates and increases the number of Virtual Clients accessing the application until performance levels can no longer be sustained.</li> </ul>"},{"location":"console/getting_started/#how-does-webload-work","title":"How Does WebLOAD Work?","text":"<p>WebLOAD tests Web applications by generating Virtual Clients that simulate real- world loads. Virtual Clients emulate the actions of human users by performing typical actions on your Web application. By increasing the number of Virtual Clients, you increase the load on the system. You create visual JavaScript-based test scripts that define the behavior of the Virtual Clients and WebLOAD executes these test scripts monitoring the application response graphically and statistically, and presenting the test results in real time.</p> <p>WebLOAD incorporates functional verification into the scalability testing process allowing you to accurately verify the scalability and integrity of your Web applications at the per-client, per-transaction, and per-instance level under defined load conditions. WebLOAD saves the test results, including data from the Load Machines (described in the following paragraphs) and the hosting hardware\u2019s performance monitor. You can view all or part of the data in real time, or after the test session is complete, in tabular format or in graphical format.</p> <p>The WebLOAD test process includes:</p> <ol> <li>Planning the test</li> <li>Creating scripts</li> <li>Creating Load Templates</li> <li>Running the test</li> <li>Analyzing the test results</li> </ol> <p>This guide describes steps 1, 3, 4, and 5 in the test creation process in detail. Information on performing step 2, Creating scripts is available in the WebLOAD Recorder User\u2019s Guide.</p>"},{"location":"console/getting_started/#webload-architecture","title":"WebLOAD Architecture","text":"<p>The following diagram illustrates the configuration for a typical WebLOAD test.</p> <p></p> <p>The Console sets up, runs and controls a test session. At the Console, you can:</p> <ul> <li>Define the hosts participating in the load test</li> <li>Specify the test scripts that the load test executes</li> <li>Schedule tests</li> <li>View performance reports</li> </ul> <p>Load Machines are hosts, which run Load Generator software simulating multiple Virtual Clients simultaneously accessing your System Under Test (SUT). One Load Machine can run multiple Load Generators.</p> <p>Load Generators execute tests that \u201cbombard\u201d the System Under Test with a large load, to enable complete scalability and stress testing.</p> <p>The tests consist of multiple simultaneous requests made by Virtual Clients (which emulate Web browsers) to Web servers. Load Machines can run multiple threads.</p> <p>The System Under Test (SUT) is where the Web system under test resides. The SUT does not require that WebLOAD software be installed on it.</p> <p>The Probing Client Machines are also hosts. They run Probing Client software, which simulates a single Virtual Client accessing the SUT and runs at the same time as Load Machines, to further measure the performance of the SUT under load. WebLOAD returns exact values for Probing Client performance, in contrast to Load Machines, which return average values of Virtual Client performance.</p> <p>Additional WebLOAD components are:</p> <ul> <li>WebLOAD Recorder \u2013 A tool for recording, creating, and authoring protocol test scripts for the WebLOAD environment. For more information, see the WebLOAD Recorder User\u2019s Guide.</li> <li>TestTalk \u2013 A network agent that facilitates communication between the Console and hosts, either Load Machines or Probing Client Machines. TestTalk must be installed on both the Console and the hosts. TestTalk runs in the background and does not interfere with any other program running on your system.</li> <li>WebLOAD Analytics \u2013 enables you to generate a variety of reports based on performance data and statistics gathered by WebLOAD. Use WebLOAD Analytics to select a Load Session and generate predefined or custom reports displaying the results of the test.</li> <li>WebRM \u2013 distributes and circulates WebLOAD testing resources (Virtual Clients and Probing Clients) amongst users on a \u201cneed to use\u201d basis. WebRM is packaged with a maximum number of Virtual Clients, Probing Clients and WebLOAD Console seats, as defined by the WebLOAD license.</li> </ul>"},{"location":"console/getting_started/#what-is-the-product-of-your-webload-testing","title":"What is the Product of Your WebLOAD Testing?","text":"<p>WebLOAD continuously samples the activity while a Load Session is in progress, and saves a wide variety of measurement data. You can view all or part of the data in real time or after the Load Session is complete. Data can be displayed in tabular format or in graphical format. At the conclusion of a Load Session, data can automatically be exported to a spreadsheet program, HTML or as a tab-delimited file to a database application. Reports can also be created using WebLOAD Analytics.</p>"},{"location":"console/getting_started/#http-client","title":"HTTP Client","text":"<p>Using the HTTP client testing mode, testers can simulate the user scenario at the protocol level. Each Virtual Client sends HTTP methods (and/or other protocol calls) to the server based on the recorded script. This is a low-level, \u201cnuts-and-bolts\u201d approach that focuses on specific internal implementation commands, such as HTTP transactions.</p> <p>Scripts created for HTTP Client mode focus on HTTP transactions. HTTP Client scripts are created through the WebLOAD Recorder. The WebLOAD Recorder is an easy-to- use tool that facilitates the writing of test scripts for HTTP Client mode. The WebLOAD Recorder records your actions as you navigate through a Web application, automatically generating a script that reflects your actions in JavaScript, writing the GET and POST HTTP protocol commands that correspond to your browser activities. You can then use these scripts to test the performance of your Web application during WebLOAD test sessions.</p> <p>Working in HTTP Client mode provides users with the most efficient, portable, powerful work mode. HTTP Client mode is portable to many operating systems, including all different flavors of Windows, Linux, Solaris, and so on. HTTP Client mode runs so efficiently that users can achieve large benchmarks by simulating extremely heavy test loads of thousands of clients. HTTP Client mode also provides the most comprehensive, detailed statistical analysis and test reports.</p> <p>Working in HTTP Client mode does require a certain level of programming sophistication, since it can require hands-on programming of the JavaScript scripts with HTTP protocol code, as described in the WebLOAD JavaScript Reference Guide. HTTP Client mode scripts are designed to be run only on WebLOAD.</p>"},{"location":"console/getting_started/#http-client-feature-summary","title":"HTTP Client Feature Summary","text":"<p>The following table summarizes the features of the HTTP Client mode:</p> Feature HTTP Client <p>Average Load per Machine*</p><p>*single CPU, 1GB memory</p> Up to 1000 JavaScript scripts YES Complex Objects (Flash, ActiveX, etc.) YES, if using HTTP Single Script for WebLOAD Recorder YES Authoring Tool YES Portable to UNIX, etc. YES Detailed Statistics YES HTTP Manipulations YES Backward Compatibility (V5.0) YES"},{"location":"console/getting_started/#webload-features","title":"WebLOAD Features","text":"<p>Using WebLOAD, you have access to all the features described in this section, including multiple functionality, protocols, and supported environments.</p> <p>Table: WebLOAD Features</p> Feature Benefit(s) Supported Protocols HTTP 1.0 and 1.1 Support Comprehensive support for HTTP 1.0 and 1.1 including cookies, proxies, SSL, client certificates, authentications, persistent connections, and chunked transfer coding. SSL Updates Support for the new SSL standard (TLS 1.0). SSL Bit Limit Enables you to set a limit on the maximum number of bits available to Virtual Client for SSL encryption. Custom HTTP Headers Define, edit, and manipulate HTTP headers. Custom User-Agents Various hand-sets can be emulated by defining custom user-agents. AJAX Support Supports automatic recording of AJAX calls into the test script, enabling debugging and full access to all request data (headers and body), both in the script and during run time. WebLOAD supports various formats: XML, JSON, other text-based formats, and binary data. In your script, you can define AJAX requests to be executed concurrently, better simulating the way they are executed by a web browser. SOAP/Web Services Support Built-in support for recording Web service calls into the script, providing you with access to both the SOAP envelope and payload for debugging and parameterization. Authentication Methods Native support for NTLM and Kerberos. Comprehensive Support for Dynamic Content WebLOAD delivers comprehensive support for dynamic applications, including Web 2.0 technologies such as AJAX. Internet Protocol Support Native support for FTP, SMTP, POP3, IMAP, NNTP, LDAP, TCP, UDP, and Telnet provides support for non-HTTP protocols. ODBC Support Native support from WebLOAD Java Script for ODBC commands to be integrated in a script. Specific support for Oracle, MS SQL and MySQL databases. Multimedia protocols support WebLOAD Multimedia Add-on, supporting RTSP/RTP streaming protocol, for generating scripts for testing multimedia websites. Radius protocol support Supports adding Radius capabilities to WebLOAD scripts, for a complete simulation of a user-scenario that includes authentication for a Radius server. Adobe Flex support The WebLOAD Adobe Flex Add-on supports recording and executing an Adobe Flex script with AMF 0 / 3 protocol. Supported Programming Interfaces XML Document Object Model support WebLOAD provides full support for using the XML Document Object Model. Using XML DOM objects, WebLOAD Scripts are able to both access XML site information and generate new XML data to send back to the server for processing, taking advantage of all the additional benefits that XML provides. COM Support WebLOAD Java Script provides direct object access to any component that has a COM wrapping and an Idispatch interface. Java from JavaScript WebLOAD supports full Java access from your JavaScript scripts. Full Java support means that your WebLOAD Scripts not only test access time to an HTML page, they can also invoke and run Java classes used by the Java applications embedded within an HTML page. Script Authoring Automatic Script Recording Automatically generate the script by recording protocol level traffic using a proxy-based recorder. Automatic proxy settings available for leading browsers, such as Microsoft Internet Explorer and Mozilla Firefox. The script is generated during recording. Additional information on the recorded pages can be viewed in the Browser View, HTTP Headers View, HTML View, and DOM View. Sleep Recording Enables you to automatically record \u201cthink\u201d time in the script to provide a more realistic simulation of users accessing your Web application. JavaScript Script Definition (as part of WebLOAD Recorder) Delivers the familiarity and scripting power of a full programming language for maximum flexibility, including writing, editing and extending. Script Authoring (as part of WebLOAD Recorder) Automatically generates test scripts in JavaScript from a standard Web browser. Advanced Script Debugging A fully functional debugger that enables the execution of scripts. The debugger supports break-points, step-by-step debugging, watch, and variable windows. In addition, there are the following views for execution output: Browser View, HTTP Headers View, HTML View, DOM View and Log View. Data Driven Load Testing Use real data to emulate realistic scenarios where many different users are accessing your Web application simultaneously. For example, you can use different user-names and passwords for different Virtual Clients. Include Files Provides modularity by enabling you to reference JavaScript source code in multiple scripts using the IncludeFile command. Copy Files Enables you to copy files from the Console to a Load Machine. The CopyFile command is important if your test uses a script that references auxiliary files such as input files, output files, or other files, while the script and its auxiliary files reside on the Console. Output Files Enables you to save script output for later study and analysis. The wlOutputFile object lets you write script output messages to an output file. Input Files Enables you to parameterize your script to create variance in the business process that is simulated by Virtual Clients. Use the GlobalInputFile Building Block and the wlInputFile object to read values from external files and use them as input to your application. Correlation Engine A rule-based correlation engine, which automatically correlates dynamic parameters \u2013 such as session ID \u2013 in your script immediately after recording. Global User Variables Global User Variables enable you to share data between Load Generators and Load Machines. Load Test Definition Easy User Interface Settings for Runtime Options for each Script Enables you to customize the runtime options through the Console User Interface. Save Test Scenarios Saves test scenarios for accurate before/after comparisons and for re- executing test sessions. Comprehensive Performance Measurements Over 25 performance metrics for maximum testing flexibility and accuracy. First Byte Statistic First Byte is the time it takes a Virtual Client to receive the first byte of data. User-defined Timers Measure specific activities for identifying performance bottlenecks. Automatic Transactions All transactions in the script are automatically turned into Named Transactions, eliminating the need to manually create timers for all transactions. Automatic named transaction enhancements - Object level and HTTP level WebLOAD automatically creates a sub transaction for all content and automatically breaks down every HTTP command into s elements (open, send, wait, receive). User-Defined Transactions Defines specific user-activities in the application as transactions and measures their performance. Performance Threshold Transactions can be defined as failed, according to the amount of time the transaction takes. Real-Time Server Side Statistics Using WebLOAD you can monitor a variety of server-side applications, databases, systems, and Web-server statistics. You can configure the WebLOAD Performance Measurement Monitor (PMM) to display real-time performance statistics for services available from the server including the percentage of CPU usage, memory usage, etc. Supported Server Side Statistics for Open Interoperability Server side statistics can be collected over generic protocols and interfaces such as SNMP, JMX, Perfmon (Windows) and a Generic Unix performance collector. Specific pre-configured collectors exist for the following servers, using the generic protocols: BEA WebLogic, IBM WebSphere 5, Microsoft Active Server Pages, Microsoft ASP .NET, Oracle, Microsoft SQL Server, MySQL, Windows NT/2000/XP, Unix platforms, Windows .NET Framework, Microsoft IIS, Apache, Sun One (former iplanet 6), and Microsoft Media Server. Enhanced Statistic Setting ESS provides additional statistical information on the WebLOAD metrics. Sleep Time Control Settings Easily controls sleep behavior on the fly to save script development time. Pass/Fail Definitions Set rules to define the success or failure of test sessions. Script Level Options Unique options can now be set for each script in the test session. Load Profiler Create schedules based on pre-defined visual templates for easier and faster scheduling. Global Functional Verification Global Functional Verification enables you to select verification tests to run on all pages returned from the server from a list of predefined tests. Browser Cache Imitates the Web browser cache activity to provide a realistic simulation of Web activity. Variable Connection Speed Enables you to define a load as coming from different connection speeds (i.e., 14400, 28800\u2026). File Locations <p>Supplies a default directory for files used and generated by WebLOAD, including:</p><p>- Sessions</p><p>- Templates</p><p>- IncludeFiles</p><p>- CopyFiles</p><p>- Scripts</p> Load Test Execution Single-Point Management Console for managing WebLOAD setup, testing, monitoring and reporting. Throttle Control Vary the number of Virtual Clients on the fly to create \u201cwhat-if\u201d scenarios as you change the load conditions. Probing Client Simulates a single user-scenario and gets user-level measurements and statistics for better analysis of your system\u2019s performance. Goal-Oriented testing The Goal-Oriented Test enables the user to specify performance thresholds and then automatically raise the user load settings until the application reaches the desired performance goals. Unlimited Load Generation Optimized, distributed architecture for unlimited load generation with minimal resources, using multiple Load Machines. Efficient Load Generation Optimized architecture, keeping Virtual Client memory footprint and CPU utilization to the minimum, and facilitating maximal number of Virtual Clients per Load Machine. Support for Keep-Alive Supports persistent connections with Web applications for accurate simulation of Web browser behaviors. Supports Multithreading Provides accurate real-world simulation of Web browser behavior. Synchronization Point Enables you to ensure that all Virtual Clients execute a given command simultaneously. Diagnostics Options The Diagnostic options can be enabled when developing a script or for tracking problems in existing scripts. Command Line Activation Allows you to initiate testing through a command line interface. You can enter the WebLOAD launch command into either a batch job or an external script. WebLOAD runs directly, without user intervention, using the parameters specified. Remote PMM Enables collecting performance statistics from SUT machines that are behind a firewall. Integration with defect tracking systems Allows opening bugs from WebLOAD and posting them into an external defect tracking tool. SLA Manager Supports sending error messages and optionally also notifications (via email) when pre-defined conditions occur during the execution of the load test. Load Test Analysis &amp; Reports Real-time Dashboard View test execution statistics in real-time for a quick and automated overview of test performance. Real-Time Analysis Graphical and statistical analysis of test sessions while the test session is running. Real-Time Reports and Graphs WebLOAD\u2019s Integrated Reports let you see the results of your test in real-time. Test results can be viewed on the test, script, page and object level. Reports include over 75 metrics including response time, hit per seconds, pages per second etc. Data Drilling When testing the integrity of your Web application, it is important to verify whether a given transaction succeeded or failed, as well as to determine the reasons for the failure. Data Drilling enables you to display a detailed description of all user-defined and named transactions to the instance level. Real-Time Transactions Dashboard Graphical analysis of transaction statistics in real-time. Error Path Zoom In/Out and Coloring The path of the failed transaction is colored and expanded in the Data Drilling reports to emphasize the failed transaction. A zoom in/out feature offers the ability to expand or collapse the Data Drilling tree according to the error path. Regression Testing Regression testing enables you to compare Load Sessions while tests are running, or after the Load Session is complete. Microsoft Excel Integration Automatically exports all test session data to Microsoft Excel for easy storage and reference. Export Load Session data Additional support for exporting all test session data to HTML and tabbed file formats. WebLOAD Analytics WebLOAD Analytics provides comprehensive reports including failure rates. It automates the process of manually creating reports from WebLOAD performance data. Easily and quickly view these pre- configured reports to gain better insight to performance and scalability issues of your Web applications. Comprehensive Test Session Reports Save and compare graphical and statistical test reports for measuring the performance of an application over time. HTML reports Export WebLOAD\u2019s reports to HTML format. Predefined Default Reports WebLOAD supplies six predefined reports to provide you with a fast and easy way to view the information of interest to you in real time without having to spend time configuring the measurements to appear in the reports. Extensibility WebLOAD SDK <p>WebLOAD SDK enables external developers and users to add functionality to WebLOAD in the following areas:</p><p>- Protocol driver extension</p><p>- PMM extension</p><p>- Toolbox (Building Block) extension</p><p>- User-agent extension</p><p>- Report Template extension</p><p>- Object (Java) connector extension</p><p>- JavaScript language extension</p> Various Productivity Features Enterprise WebLOAD resource pooling and sharing (using WebRM) <p>Addresses corporate functional and performance testing efforts by organizing, managing and directing WebLOAD resources (Virtual Clients, Probing Clients and WebLOAD Consoles).</p><p>WebRM enables multiple users involved in various stages of application development and testing to share testing resources. By distributing WebLOAD testing resources each developer can run a test session to simulate, validate, and pinpoint where performance problems occur at any stage of the development life cycle, thus eliminating design flaws and ensuring product quality.</p>"},{"location":"console/getting_started/#how-are-tests-defined","title":"How are Tests Defined?","text":"<p>WebLOAD tests are configured by creating Load Templates, which define the events to occur in the test session. Using the WebLOAD Wizard, you can quickly and easily define basic Load Templates that include:</p> <ul> <li>The scripts (test scripts) to run</li> <li>The machines on which to run the test</li> <li>The number of Virtual Clients to run</li> <li>The test schedule</li> </ul> <p>After creating a basic Load Template with the WebLOAD Wizard you can modify the template to include advanced features, such as connection speed, browser type, and pass/fail definitions, through the WebLOAD Console ribbon.</p>"},{"location":"console/getting_started/#configuring-webload","title":"Configuring WebLOAD","text":"<p>A Load Session includes the following components:</p> Component Description Console <p>The Console controls set up, manages a Load Session, and displays the Load Session results.</p><p>It is recommended that the Console reside on its own separate system and not be installed on systems running Load Generators or Probing Clients.</p> <p>SUT</p><p>(System Under Test)</p> The Web application to be tested. WebLOAD can test any Web application that can be accessed through a Web browser, on the Internet or intranet. The SUT requires no special software. Load Machine The host(s) that runs Load Generators. The Load Generators bombard the SUT with user-defined transactions for testing scalability and integrity of the SUT. Probing Client Machine (optional) The host(s) that run Probing Clients. A Probing Client runs at the same time as load testing. WebLOAD generates exact values for the Probing Client performance as opposed to averages for Load Generator performance. WebRM WebRM distributes and circulates WebLOAD testing resources (Virtual Clients, Probing Clients, and WebLOAD Consoles) amongst users on a \u201cneed to use\u201d basis. <p>The following diagram shows a simple WebLOAD test configuration. The Load Machine and the Probing Client Machine both access the SUT. The Console controls the test from a separate system. All three computers are networked.</p> <p></p>"},{"location":"console/getting_started/#required-software-for-each-load-session-component","title":"Required Software for each Load Session Component","text":"Test Session Component Required Software for Running Test Session Component Console <p>- TestTalk</p><p>- Console</p> SUT (System Under Test) None Load Generator TestTalk Probing Client (optional) TestTalk Shared disk (optional) None"},{"location":"console/getting_started/#example-of-a-test-configuration","title":"Example of a Test Configuration","text":"<p>The following diagram illustrates a typical WebLOAD test configuration.</p> <p></p> <p>This test session has three participating host computers. Two hosts act as Load Machines, and one host is a Probing Client Machine. In this configuration, the Console is run on a separate system. All systems are on a network with a shared disk that contains the script.</p>"},{"location":"console/getting_started/#the-console","title":"The Console","text":"<p>In the diagram above, the Console is a node on the network along with the host computers in the test session, and the shared disk. The Console communicates with the hosts that are testing the SUT through the TestTalk network agent. The Console controls the test setup, management and reporting.</p> <p>Note: Running a Load Machine on the same system running the Console software is not recommended.</p>"},{"location":"console/getting_started/#the-load-machine","title":"The Load Machine","text":"<p>Web application tests can be run from either one Load Machine, or from several hosts simultaneously. The test load can be greater if the load is divided between multiple systems. For example, if one host can simulate 100 simultaneous Virtual Clients, a second host with the same capacity can simulate an equal number of Virtual Clients. When the two hosts run simultaneously, they can simulate double that number.</p>"},{"location":"console/getting_started/#probing-client","title":"Probing Client","text":"<p>The Probing Client resides on the network with the other hosts in the test session. The Probing Client tests the performance of the SUT while it is being bombarded by the Load Machines. In this test session there is one Probing Client, however WebLOAD can support multiple Probing Clients in a test session. WebLOAD generates exact values for the Probing Client performance as opposed to averages for Load Machine performance.</p>"},{"location":"console/getting_started/#sharing-a-script","title":"Sharing a script","text":"<p>You can increase the size of the test load by distributing the load generation tasks over multiple Load Machines. You may want all of these Load Machines to test the SUT using the same script. There are several ways to share a script over multiple systems.</p>"},{"location":"console/getting_started/#shared-disk","title":"Shared Disk","text":"<p>You can configure a shared disk that can be accessed by all the systems on the network, as shown in the previous diagram. The script can then reside on the shared disk, and can be used by all systems for testing. Thus there is only one copy of the script, and all the relevant hosts run it from the shared disk.</p> <p>In this configuration, you must make sure that in the script configuration all hosts refer to the shared disk and are mapped to the same logical name. On one host the logical name of the shared disk may be \u201cK\u201d while on another host the logical name may be \u201cL\u201d. Each host must configure the script using the correct logical name.</p>"},{"location":"console/getting_started/#copying-the-test-program-to-each-host","title":"Copying the Test Program to Each Host","text":"<p>Copy the script to each host participating in the test. Verify that the most updated copy of the script resides on each system.</p>"},{"location":"console/getting_started/#working-with-a-firewall","title":"Working with a Firewall","text":"<p>If your machine configuration is similar to the one illustrated below, no special WebLOAD configuration is necessary.</p> <p></p> <p>In some cases you may want to use machine resources in the test session that reside on different sides of a firewall. In this case, you must change your initial settings to enable WebLOAD to accommodate this unique configuration.</p> <p>The following diagrams illustrate situations where the Load Machine and the Console are on opposite sides of the firewall.</p> <p></p> <p></p> <p>The following configuration is required to enable data transfer through the firewall. Generally, the rules that need to be added to the firewall are:</p> <ul> <li>Allow outgoing TCP from the Console all ports to Probing Client port 9000.</li> <li>Allow incoming TCP from Probing Client port 9000 to Console all ports (options=ackonly).</li> </ul>"},{"location":"console/getting_started/#managing-the-communication-between-the-systems-in-your-load-session","title":"Managing the Communication Between the Systems in your Load Session","text":"<p>The WebLOAD Console must be able to communicate with all of the hosts in your test session, those that run WebLOAD modules and those that run components of the SUT. All of the hosts must be on a common Local Area Network (LAN) or Wide Area Network (WAN). In addition to the physical network, all of the hosts running a WebLOAD module must be running TestTalk, the WebLOAD network agent, which is installed with WebLOAD.</p>"},{"location":"console/getting_started/#working-with-testtalk","title":"Working with TestTalk","text":"<p>TestTalk enables communication between the hosts in your Load Session. Each of the hosts participating in the test session must be running TestTalk in the background for the test to execute successfully.</p> <p>TestTalk is automatically run when you start the Console. While TestTalk is running, the TestTalk icon is displayed in the Status bar.</p> <p>Caution: Do not close TestTalk in the middle of a test session. This can cause unexpected behavior. When shutting down the system, be sure to shut down the Console first and only then shut down TestTalk.</p>"},{"location":"console/getting_started/#viewing-the-network-configuration","title":"Viewing the Network Configuration","text":"<p>To view the network configuration:</p> <ul> <li>Right-click the TestTalk icon in the tray and select Net Configuration.</li> </ul> <p>The following TestTalk message box appears.</p> <p></p> <p>The information displayed in the TestTalk message box includes:</p> Item Description Computer\u2019s name The name of your computer. You must know the name of each of the hosts to configure your test session. If you are not familiar with the name of your host, open TestTalk at that host and view the name in this message box. Computer\u2019s address The IP address. You need this information to ping a host if you want to verify that it is connected to the network."},{"location":"console/getting_started/#required-connections","title":"Required Connections","text":"<p>WebLOAD can only run a test when the hosts participating in the test session are properly connected. Each participating host must have two types of connections. If either of these connections is not complete, you may experience problems running WebLOAD.</p> <ul> <li>Physical connection</li> </ul> <p>The hosts in the test session must all be physically connected to the network. They must be turned on and the connection must be live.</p> <ul> <li>Connected by network agent</li> </ul> <p>All of the hosts in the test session must be running TestTalk as a background process. Only the host controlling the tests must be running the Console.</p>"},{"location":"console/getting_started/#testing-your-connection","title":"Testing Your Connection","text":"<p>To test your connection:</p> <ol> <li> <p>Ping the host to test its physical connection to the network. This is described in Managing the Communication Between the Systems in your Load Session . If the host is not connected properly to the network, connect it and rerun WebLOAD.</p> </li> <li> <p>If the ping is acknowledged, verify that TestTalk is running on the host. This is done by checking the actual host to verify that the TestTalk program is functioning. If TestTalk is not running, open TestTalk by selecting Start &gt; Programs &gt; RadView WebLOAD &gt; TestTalk and retry the program.</p> <p>TestTalk runs in the background. Error messages are displayed on the program window. Check this window for any error messages that may explain the problem.</p> </li> <li> <p>If there is still a problem with the host, you may be experiencing problems not related to TestTalk. Restart the system and rerun WebLOAD.</p> </li> </ol>"},{"location":"console/getting_started/#pinging-a-host","title":"Pinging a Host","text":"<p>You can test a host\u2019s physical connection to the Console by pinging the remote host. The response that the Console receives from the ping indicates the status of the connection to the remote computer.</p>"},{"location":"console/getting_started/#to-ping-a-host","title":"To ping a host:","text":"<ul> <li>From the operating system, type ping systemname. Example:</li> </ul> <p><code>c:&gt; ping systemname</code></p>"},{"location":"console/getting_started/#acknowledgments-from-a-ping","title":"Acknowledgments from a Ping","text":"<p>You can receive several types of acknowledgments from a ping:</p> <ul> <li>Ping systemname with 32 bytes of data.</li> </ul> <p><code>reply from 192.114.35.1: bytes = 32 time = 1ms TTL = 255</code> </p> <p><code>reply from 192.114.35.1: bytes = 32 time = 1ms TTL = 255</code> </p> <p><code>reply from 192.114.35.1: bytes = 32 time = 1ms TTL = 255</code> </p> <p><code>reply from 192.114.35.1: bytes = 32 time = 10ms TTL = 255</code></p> <p>This acknowledgment indicates that the host is connected properly. If you receive this response, and WebLOAD continues to return an error, test the TestTalk network agent.</p> <ul> <li>Bad IP address systemname.</li> </ul> <p>Indicates that the remote host is not connected properly. The host must be physically connected to the network, and configured properly.</p> <ul> <li>Request timed out.</li> </ul> <p>Indicates that the IP address is known to the Console, however the host is not currently working. The host must be turned on and tested again.</p>"},{"location":"console/getting_started/#troubleshooting-communications","title":"Troubleshooting Communications","text":"<p>On occasion, you may have trouble with a WebLOAD host. Refer to the following table for possible solutions.</p> Problem Solution <p>At the beginning of a test session, the host prompts:</p><p><code>All hosts are stopped</code>.</p><p>This indicates that none of the hosts are accessible and the Domain Name Server (DNS) cannot recognize a host name.</p> <p>Test your connection, as described in</p><p>Testing Your Connection .</p> <p>At the beginning of a test session, a host prompts:</p><p><code>Load Session Setup \u2013timed out, not completed.</code></p><p>This indicates that at least one host is not accessible and the Domain Name Service (DNS) cannot recognize a host name.</p> <p>Test your connection, as described in</p><p>Testing Your Connection .</p> Your system starts, but the test session times out during operation. <p>Test your connection, as described in</p><p>Testing Your Connection .</p><p>Check the names of the computers in the TestTalk Help menu, under Net Configuration. Verify that there is complete consistency between the names of the computers and the names used in WebLOAD.</p> WebLOAD reports unexpected results from a test. Access the System Under Test (SUT). If you have a good connection, the test results are accurate. <p>The system issues the message:</p><p><code>Error loading script\u2026</code></p> The Console must specify the complete path of the script that is used by the remote host. For example, if the script is on a shared disk, the name of the disk in the path specified by the Console, must be the same name used by the remote host."},{"location":"console/introducing_webload/","title":"Introducing WebLOAD","text":"<p>The WebLOAD introductory material gives you an overall view of WebLOAD and consists of the following chapters:</p> <ul> <li>Getting Started  describes WebLOAD, how WebLOAD works, the WebLOAD components, and features.</li> <li>WebLOAD Console Features  describes the features available through the Console ribbon and button.</li> </ul>"},{"location":"console/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD, the premier performance, scalability, and reliability testing solution for internet applications.</p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load.</p> <p>This section provides a brief introduction to WebLOAD technical support, including both documentation and online support.</p>"},{"location":"console/manage_load_templates_sessions/","title":"Managing Load Templates and Load Sessions","text":"<p>Load Templates define the events that occur in the test including:</p> <ul> <li>The scripts to run</li> <li>The hosts participating in a test session</li> <li>The test schedule</li> <li>The number of Virtual Clients to run</li> </ul> <p>Load Templates save you the time of reconfiguring the test when you are repeating tests. Load Sessions include the test definitions in the Load Template along with test results.</p>"},{"location":"console/manage_load_templates_sessions/#managing-load-templates","title":"Managing Load Templates","text":"<p>Load Templates define the events that occur in the test. You create test definitions manually or using one of the WebLOAD Wizards (WebLOAD or Goal-Oriented Test) available with WebLOAD. After creating a test definition, WebLOAD Console prompts you to save the test configuration as a Load Template. Load Templates contain complete test definitions including:</p> <ul> <li>Scripts</li> <li>Information on participating hosts</li> <li>Host schedules</li> <li>Virtual Clients to run</li> <li>Run time configuration options</li> <li>Report configurations</li> </ul> <p>Load Templates include all test information except for the test results. Load Template files are saved as *.tpl files. Load Templates can be edited using the Console ribbon and button. You can then save the Load Template for future test iterations. For example, if you build a test in the WebLOAD Wizard you can call it up in the Console and edit the Load Template manually, changing perhaps the hosts, the number of Virtual Clients and even the script. Use the commands in the File tab of the ribbon to create, open and save.</p>"},{"location":"console/manage_load_templates_sessions/#creating-a-new-load-template","title":"Creating a New Load Template","text":"<p>When you create a new Load Template, you define the events to occur in the test. A blank Session Tree displays to enable you to begin configuring your test.</p> <p>To create a new Load Template:</p> <ol> <li>Click New from the File tab of the ribbon. A blank template appears.</li> </ol> <p>For information on creating templates with the WebLOAD Wizard, see Creating Load Templates with the WebLOAD Wizard . For information on creating templates with the Goal-Oriented Test Wizard, see Creating Load Templates with Goal-Oriented Test .</p>"},{"location":"console/manage_load_templates_sessions/#saving-a-load-template","title":"Saving a Load Template","text":"<p>To save a Load Template:</p> <ol> <li>Click Save in the File tab of the ribbon and select Save or Save As.</li> <li>In the File Name box, type a name for the Load Template.</li> <li>Click Save.</li> </ol> <p>The file is saved with the extension *.tpl to the specified location and the Save dialog box closes.</p>"},{"location":"console/manage_load_templates_sessions/#opening-a-saved-load-template","title":"Opening a Saved Load Template","text":"<p>To open a saved Load Template:</p> <ol> <li> <p>Click Open in the File tab of the ribbon and browse your directory structure for the location of the saved Load Template (<code>*.tpl</code>) file,</p> <p>-Or-</p> <p>Select the Open an Existing Template option from the WebLOAD Console dialog box at system start-up and browse your directory structure for the location of the saved Load Template (*.tpl)file.</p> </li> <li> <p>Double-click the template you want to open.</p> <p>The file opens and the test configuration displays in the Session Tree.</p> </li> </ol>"},{"location":"console/manage_load_templates_sessions/#saving-additional-information-with-the-load-template","title":"Saving Additional Information with the Load Template","text":"<p>The Additional Information dialog box provides details about the Load Template that help identify it. For example:</p> <ul> <li>Descriptive title</li> <li>Author name</li> <li>Subject of the test</li> <li>System under test</li> <li>Other important information about the Load Template</li> </ul> <p>Use the Additional Information dialog box to display information about the Load Template.</p>"},{"location":"console/manage_load_templates_sessions/#setting-additional-information-properties","title":"Setting Additional Information Properties","text":"<p>You can set additional information properties for the active Load Template.</p> <p>To set additional information properties:</p> <ol> <li> <p>Select Additional information from the Console System button. The Template Additional Information dialog box opens.</p> <p></p> </li> <li> <p>Complete the fields to save additional information, useful for later reference, with the Load Template.</p> <p>The following fields are available:</p> Field Description Title Provides a space for you to type a title for this Load Template. The title can be different then the template file name. Subject Provides a space for you to type a description of the subject of the Load Template. Use this property to group similar Load Templates together. Created by Provides a space for you to type the name of the person who authored this Load Template. Test description Provides a space for you to type a description of the test objectives and what the Load Template is designed to test. Version and build of the System Under Test Provides a space for you to type the name, version, and build number of the system under test. Template comments Provides a space for you to type any comments regarding the Load Template. Custom Provides a space for you to type any comments you want saved with this Load Template. </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/manage_load_templates_sessions/#creating-a-mix","title":"Creating a Mix","text":"<p>A Mix is a set of scripts, each performing different activity, to simulate groups of users performing different activities on the SUT at the same time. You can create a new Mix to use with your Load Template.</p> <p>To create a new Mix:</p> <ul> <li>Click Mix Creation in the Home tab of the ribbon. The Mix Creation dialog box appears.</li> </ul> <p></p> <p>Continue to one of the following sections for further instructions on creating a Mix. To create a mix with the WebLOAD Wizard, see Creating a Mix . To create a mix with the Goal-Oriented Test Wizard, see Running a Mix of Scripts .</p>"},{"location":"console/manage_load_templates_sessions/#managing-load-sessions","title":"Managing Load Sessions","text":"<p>A Load Session consists of the Load Template and the data accumulated during the test run. Load Sessions cannot be edited.</p> <p>A saved Load Session includes:</p> <ul> <li>The test definition including configuration information on scripts, participating hosts, and their schedules \u2012 as illustrated in the Session Tree.</li> <li>The report configuration.</li> <li>All test session results.</li> </ul> <p>Load Sessions are saved in *.ls (Load Session) files. Load Session results are saved in a *.dat (Data) file. Saved Load Sessions are useful for viewing results of previously run test sessions.</p>"},{"location":"console/manage_load_templates_sessions/#saving-a-load-session","title":"Saving a Load Session","text":"<p>To save a Load Session:</p> <ol> <li>Click Save in the File tab of the ribbon.</li> <li>Browse to the location to save the file and in the File Name dialog box, type a name for the Load Session.</li> <li>Click Save.</li> </ol> <p>The file is saved with the extension *.ls.</p>"},{"location":"console/manage_load_templates_sessions/#saving-additional-information-for-the-load-session","title":"Saving Additional Information for the Load Session","text":"<p>The Additional Information dialog box provides details about the Load Session that help identify it. For example:</p> <ul> <li>Descriptive title</li> <li>Author name</li> <li>Subject of the test</li> <li>System under test</li> <li>Other important information about the Load Session</li> </ul> <p>Use the Additional Information dialog box to display information about the Load Session.</p>"},{"location":"console/manage_load_templates_sessions/#setting-additional-information-properties_1","title":"Setting Additional Information Properties","text":"<p>You can set additional information properties for the active Load Session.</p> <p>To set additional information properties:</p> <ol> <li> <p>Select Additional information from the Console System button. The Session Additional Information dialog box opens.</p> <p></p> </li> <li> <p>Complete the fields to save additional information, useful for later reference, with the Load Session. Some of the fields, such as title, subject, and system under test, may already be completed if the information was saved with the Load Template.</p> <p>The following fields are available:</p> Field Description Title Provides a space for you to type a title for this Load Session. The title can be different from the template file name. Subject Provides a space for you to type a description of the subject of the Load Session. Use this property to group similar Load Sessions together. Created by Provides a space for you to type the name of the person who authored this Load Session. Test description Provides a space for you to type a description of the test objectives and what the Load Session is designed to test. version and build of the System Under Test Provides a space for you to type the name, version and build number of the system under test. Results description Provides a space for you to type a description of the test results. Template comments Provides a space for you to type any comments regarding the Load Session. Session comments Provides a space for you to type any comments regarding the Load Session. Custom Provides a space for you to type any comments you want saved with this Load Session. </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/manage_load_templates_sessions/#opening-saved-load-sessions-files","title":"Opening Saved Load Sessions Files","text":"<p>To open a saved Load Session file:</p> <ol> <li> <p>Click Open in the File tab of the ribbon and browse your directory structure for the location of the saved (*.ls file),</p> <p>-Or-</p> <p>Select the Open an Existing Load Session option from the WebLOAD Console dialog box at system start-up and browse your directory structure for the location of the saved (*.ls file).</p> </li> <li> <p>Double-click the session you want to open.</p> <p>The file is opened, the test configuration is displayed in the Session Tree and the WebLOAD Default Report is displayed in the Results window.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/","title":"Performance Measurements Manager","text":"<p>WebLOAD Console provides the Performance Measurements Manager (PMM) for monitoring the performance of various server-side applications, databases, stream technology, system, and Web server measurements in real-time while your test is running.</p>"},{"location":"console/performance_measurements_manager/#using-the-performance-measurements-manager","title":"Using the Performance Measurements Manager","text":"<p>Using the PMM, you configure WebLOAD Console to collect data for the hosts and services available from the server, to provide a complete picture of application performance while you are testing your Web application. Thus, in addition to the data accumulated from load testing, you receive data on the performance of your server.</p> <p>Using the PMM, you can monitor:</p> <ul> <li>Application Server Resources</li> <li>Database Resources</li> <li>Stream Technology Resources</li> <li>System Resources</li> <li>Web Server Resources</li> </ul>"},{"location":"console/performance_measurements_manager/#about-the-performance-measurements-manager","title":"About the Performance Measurements Manager","text":"<p>Using the PMM you can monitor a wide range or performance objects such as application data, database, Web server, stream technology, and system performance statistics in real-time during your test sessions. Each performance object, or data source, provides measurements that represent detailed data on specific aspects of the system or service.</p> <p>Use the performance data collected to:</p> <ul> <li>Understand the effect of the load on your system\u2019s resources.</li> <li> <p>Observe changes in resource usage so you can plan for future upgrades.</p> </li> <li> <p>Test application changes by monitoring the results.</p> </li> <li>Diagnose problems and target components or processes for optimization.</li> </ul> <p>You set up the data sources to monitor in the PMM, including the hosts and measurements. You can maintain multiple configurations of servers, hosts and measurements to monitor.</p> <p>Each configuration includes:</p> <ul> <li>Data sources</li> <li>Hosts</li> <li>Selected measurements from each data source on each host</li> </ul> <p>To activate the monitors, you must configure the list of data sources, hosts and measurements to monitor before running your load test. While running your test, you can create Integrated Reports to display performance statistics for any monitors configured in the PMM. Use the PMM Wizard to add data sources to the PMM main window and create configuration files.</p> <p>The PMM can be run from within WebLOAD Console or as a standalone tool. Run the PMM from within WebLOAD Console to create and define the performance objects to monitor and assign the configuration to a WebLOAD template, or run the standalone tool to create a library of configuration files for use in future WebLOAD tests.</p>"},{"location":"console/performance_measurements_manager/#opening-the-performance-measurements-manager","title":"Opening the Performance Measurements Manager","text":"<p>The PMM can be opened as a standalone tool for configuring the data to monitor before you even define your test or from within WebLOAD Console to assign PMM configurations to your test template.</p> <ul> <li>To open the PMM from within WebLOAD Console, click Performance Measurements Manager in the Session tab of the ribbon.</li> <li>To open the PMM as a standalone tool select Start &gt; Programs &gt; RadView &gt;WebLOAD &gt; Utilities &gt; Performance Measurements Manager.</li> </ul> <p>The PMM opens with no configured data sources listed.</p> <p></p>"},{"location":"console/performance_measurements_manager/#the-performance-measurements-manager-main-window","title":"The Performance Measurements Manager Main Window","text":"<p>The PMM main window is where you set up the configuration file of data sources, hosts, and performance measurements to monitor. The main window displays the data sources configured to be monitored together with the hosts and the performance measurements being monitored on each host.</p> <p>The main window consists of the following:</p> <ul> <li>Menu bar</li> <li>Toolbar</li> <li>Configuration window</li> <li>Description pane</li> </ul>"},{"location":"console/performance_measurements_manager/#menu-bar","title":"Menu Bar","text":"<p>The PMM menu bar is located at the top of the window.</p> <p></p> <p>This section discusses each of the PMM menus, their options, and their related toolbar buttons.</p>"},{"location":"console/performance_measurements_manager/#file-menu","title":"File Menu","text":"<p>The File menu includes the following functions for PMM configuration file management.</p> <p>Note: Menu entries vary depending if PMM is run from within WebLOAD Console or as a standalone tool.</p> Menu Entry Icon Description New Configuration / New <p></p><p></p> Clears the configuration in the PMM main window. Open (available only in the PMM standalone tool) <p></p><p></p> Opens the Open dialog box, enabling you to select the PMM file to open. Import PMM <p></p><p></p> <p>Opens an existing PMM configuration.</p><p>If a configuration is already defined in the Configuration pane, PMM prompts you to Append the selected file to the existing configuration, or replace the existing configuration.</p> Export PMM <p></p><p></p> <p>Saves the current configuration to a *.pmm file. The following information is saved:</p><p>- Data sources</p><p>- Hosts</p><p>- Selected measurements from each data source on each host</p><p></p><p>Note: Exporting a configuration from the PMM within WebLOAD Console does not assign the configuration to the current template. To update the template with the configuration displayed, click Close and update Template.</p> Save / Save As (available only in the PMM standalone tool) <p></p><p></p> Saves the current configuration to a *.pmm file. Close and Update Template (available only in the PMM initiated through the WebLOAD<p>Console)</p> <p></p><p></p> <p>Closes PMM and updates the current WebLOAD template with the current PMM configuration.</p><p>Note: The PMM configuration is not saved outside of the template.</p> Exit none Closes PMM."},{"location":"console/performance_measurements_manager/#action-menu","title":"Action Menu","text":"<p>The Actions menu includes the following functions for creating a PMM configuration file and controlling the Configuration pane.</p> Menu Entry Icon Description Add Data Source <p></p><p></p> Opens the PMM Wizard for configuring new data sources, hosts and measurements to monitor. Delete <p></p><p></p> Deletes the currently selected item and all sub-items from the configuration. Clear All (available only in the PMM standalone tool) <p></p><p></p> Removes all elements from the current configuration. Expand Tree <p></p><p></p> Expands the configuration tree. Collapse Tree <p></p><p></p> Collapses the configuration tree."},{"location":"console/performance_measurements_manager/#help-menu","title":"Help Menu","text":"<p>Use the PMM Help menu to access online help, the WebLOAD Community, as well as copyright and version information about PMM.</p>"},{"location":"console/performance_measurements_manager/#configuration-pane","title":"Configuration Pane","text":"<p>The Configuration pane displays the performance objects that are configured for monitoring, including hosts, data sources and measurements.</p> <p></p>"},{"location":"console/performance_measurements_manager/#description-pane","title":"Description Pane","text":"<p>The Description pane displays information about the item selected in the Configuration window. As you click different items in the Configuration window, the information displayed in the description pane changes appropriately.</p>"},{"location":"console/performance_measurements_manager/#the-pmm-configuration-tree-structure","title":"The PMM Configuration Tree Structure","text":"<p>The PMM Configuration tree gives you a complete graphical overview of the performance objects configured for monitoring, including hosts, data sources and measurements. The icons adjacent to the tree items enable you to view your current configuration at a glance.</p> <p>The following figure shows the PMM configuration tree, configured to collect data from two hosts, each with one data source and multiple measurements.</p> <p></p>"},{"location":"console/performance_measurements_manager/#configuration-tree-structure","title":"Configuration Tree Structure","text":"<p>The first level branches display the hosts for which the data sources and measurements are defined. The second level branches display the data sources configured on each host and the third level branches display the measurements configured for each data source on each host.</p>"},{"location":"console/performance_measurements_manager/#configuration-tree-icons","title":"Configuration Tree Icons","text":"<p>PMM displays icons on each line of the Configuration Tree, making it easy to view the performance objects configured for collection during your test session.</p> <p>The Configuration Tree icons are described in the following table:</p> Icon Performance Object <p></p><p></p> Host <p></p><p></p> Data Source <p></p><p></p> Measurement <p>The following options can be accessed through the right mouse button:</p> Tree ItemRight-Mouse OptionDescription HostAdd data sourceOpens the PMM Wizard, enabling you to select additional data sources to monitor on the selected host. DeleteRemoves the selected host from the configuration. Data SourceAdd measurementsOpens the PMM Wizard to enabling you to select additional measurement to monitor on the selected data source. DeleteRemoves the selected data source from the configuration. MeasurementDeleteRemoves the selected measurement from the configuration."},{"location":"console/performance_measurements_manager/#navigating-the-pmm-configuration-tree","title":"Navigating the PMM Configuration Tree","text":"<p>You can move through a PMM configuration tree by expanding and collapsing nodes as needed with the plus and minus keys, or by clicking and double-clicking with the mouse.</p> <p>The following table lists the mouse actions you can use to move through a PMM configuration tree.</p> Action Result Click Selects an item and displays a description for the selected item. Double-click Displays or hides items contained by the selected item. Right-click Displays the Actions shortcut menu for the selected item. <p>The following table lists the keystrokes you can use to move in the PMM main window.</p> Key Result UP ARROW Moves the selection up one item in the configuration tree. DOWN ARROW Moves the selection down one item in the configuration tree. RIGHT ARROW Expands the selected item. If the selected item does not contain hidden items, behaves like down arrow. LEFT ARROW Collapses the selected item. If the selected item does not contain exposed items, behaves like up arrow. PAGE UP / HOME Moves the selection to the first item in the configuration tree. PAGE DOWN Moves the selection to the bottom item visible in the window. END Moves the selection to the last item in the configuration tree. Plus sign \u201c+\u201d on the numeric keypad Expands the selected node. Minus sign \u201c-\u201d on the numeric keypad Collapses the selected node. Asterisk \u201c*\u201d on the numeric keypad Expands the entire tree below the selected node."},{"location":"console/performance_measurements_manager/#using-pmm-configuration-files","title":"Using PMM Configuration Files","text":"<p>PMM configuration files can be created and attached to WebLOAD Console templates for monitoring performance in a test session, or configured and saved for use in future WebLOAD Console sessions.</p>"},{"location":"console/performance_measurements_manager/#creating-a-new-configuration-file","title":"Creating a New Configuration File","text":"<p>When PMM is first opened the main configuration window is empty, enabling you to create a new configuration file. For directions on how to define the components to monitor, see Specifying the Data Sources, Hosts, and Measurements to Monitor .</p> <p>If the PMM currently displays a configuration file, creating a new configuration file requires clearing the current configuration information from the display window.</p> <p>To clear an existing configuration from the configuration window in order to define a new configuration file:</p> <ol> <li> <p>Click the New  toolbar button.</p> <p>A dialog box appears asking for confirmation.</p> </li> <li> <p>Click Yes.</p> <p>The PMM configuration window is cleared.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#opening-importing-saved-pmm-configuration-files","title":"Opening / Importing Saved PMM Configuration Files","text":"<p>PMM configurations can either be opened alone, or they can also be added to any existing configuration in the PMM configuration window, letting you reuse existing configuration files within a new test configuration.</p> <p>To open an existing configuration file:</p> <ol> <li> <p>Browse to the location of the PMM configuration files, select a file, and click Open.</p> <p>If a configuration is already defined and displayed within the PMM configuration window, a message box displays:</p> <p></p> </li> </ol> <p>The message box has the following options:</p> <ul> <li>Append \u2012 Add the selected PMM configuration to the current configuration in the PMM configuration window.</li> <li>Replace \u2012 Remove the current configuration in the PMM configuration window, and replace it with the selected configuration.</li> <li>Cancel \u2012 Aborts the PMM configuration file opening/importing process. The selected configuration is added to the PMM configuration window.</li> </ul>"},{"location":"console/performance_measurements_manager/#file-import-pmm","title":"File &gt; Import PMM,","text":"<p>-Or-</p> <p>Click the Import  toolbar button.</p> <p>The Open dialog box opens for selecting an existing PMM configuration file.</p>"},{"location":"console/performance_measurements_manager/#assigning-a-pmm-configuration-to-a-webload-console-template","title":"Assigning a PMM Configuration to a WebLOAD Console Template","text":"<p>PMM configurations can only be attached to WebLOAD Console templates when working with the PMM from within WebLOAD Console.</p> <p>To assign a PMM configuration to a template:</p> <ol> <li>Ensure that the template to which you want to assign the PMM configuration is open in WebLOAD Console.</li> <li>Open / define the PMM configuration you want to attach to the template. For information on defining PMM configurations, see Specifying the Data Sources, Hosts, and Measurements to Monitor .</li> <li> <p>Select File &gt; Close and update Template,</p> <p>-Or-</p> <p>Click the  Close &amp; update toolbar button.</p> <p>PMM closes and the configuration file is assigned to the current template.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#saving-and-exporting-pmm-configurations","title":"Saving and Exporting PMM Configurations","text":"<p>After configuring the data sources, hosts and measurements to monitor you can save the configuration for use in WebLOAD Console tests. PMM lets you save multiple configurations to save you the time of reconfiguring the measurements to monitor each test. PMM configuration files are saved with the extension *.pmm.</p> <p>PMM configuration files include the following information to monitor:</p> <ul> <li>Data sources</li> <li>Hosts</li> <li>Measurements</li> </ul>"},{"location":"console/performance_measurements_manager/#exporting-pmm-configuration-files","title":"Exporting PMM Configuration Files","text":"<p>When working with PMM from within WebLOAD Console you create configurations for use with the current WebLOAD Console template. To save the configuration, you must export it to a PMM file.</p> <p>To export PMM files:</p> <ol> <li> <p>From the PMM activated in WebLOAD Console, select File &gt; Export PMM,</p> <p>-Or-</p> <p>Click the Export  toolbar button. The Save As dialog box opens.</p> </li> <li> <p>Browse to the location you want to save your PMM file, enter a name for the file in the File Name field, and click Save.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#saving-pmm-configuration-files","title":"Saving PMM Configuration Files","text":"<p>When working with PMM as a standalone tool, you can save configurations for use in WebLOAD Console tests. The configuration is not attached to any WebLOAD Console template.</p> <p>To save PMM files:</p> <ol> <li> <p>From the PMM standalone tool, select File &gt; Save,</p> <p>-Or-</p> <p>Click the Save  toolbar button. The Save As dialog box opens.</p> </li> <li> <p>Browse to the location you want to save your PMM file, enter a name for the file in the File Name field, and click Save.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#specifying-the-data-sources-hosts-and-measurements-to-monitor","title":"Specifying the Data Sources, Hosts, and Measurements to Monitor","text":"<p>PMM can be used for adding new data sources to the PMM configuration or updating an existing configuration. You select the type of data source to monitor and the measurements to monitor on each host. When you connect to a host server using Perfmon (Windows), you must have administrator privileges on that server in order to successfully monitor it. For more information about configuring administrator privileges on a host server using Perfmon (Windows), see Configuring Administrator Privileges for Perfmon (Windows) .</p> <p>Some data sources require initial configuration to enable monitoring by the PMM. For more information, refer to Enabling Data Sources Monitoring </p>"},{"location":"console/performance_measurements_manager/#adding-data-sources","title":"Adding Data Sources","text":"<p>Data sources are the performance objects you want to monitor.</p>"},{"location":"console/performance_measurements_manager/#starting-the-performance-measurements-manager-wizard","title":"Starting the Performance Measurements Manager Wizard","text":"<p>To add new data sources:</p> <ol> <li> <p>Click the  Add data source toolbar button.</p> <p>The Performance Measurements Manager Wizard opens.</p> <p></p> </li> <li> <p>Check or clear Do not display this page again.</p> </li> <li> <p>Click Next.</p> <p>The Data Source screen appears.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#selecting-the-data-source","title":"Selecting the Data Source","text":"<p>To select a data source:</p> <ol> <li> <p>Expand the tree to view all available data sources. PMM supports the following types of data sources:</p> <p>Application Servers:</p> <ul> <li> <p>Adobe LiveCycle ES using JMX</p> </li> <li> <p>GlassFish AS using JMX</p> </li> <li> <p>IBM WebSphere 5 using WAS</p> </li> <li> <p>JBoss 4.x-5.x GA using JMX</p> </li> <li> <p>JOnAS using JMX</p> </li> <li>Microsoft Active Server Pages</li> <li>Microsoft ASP .Net</li> <li>Oracle WebLogic 10.0 using JMX</li> <li>Oracle WebLogic using SNMP</li> <li>SAP NetWeaver using JMX</li> <li>Tomcat 6.x using JMX</li> <li>WebSphere 6.1 using JMX</li> <li>WebSphere 7.0 using JMX</li> </ul> <p>Databases:</p> <ul> <li>Microsoft SQL Server</li> <li>Microsoft SQL Server using SNMP (does not support SQL 2005 or 2008)</li> <li>MySQL database using SNMP</li> <li>Oracle</li> </ul> <p>System:</p> <ul> <li>UNIX/Linux platforms Network data using SNMP</li> <li>UNIX/Linux platforms using RSTATD</li> <li>UNIX/Linux UC-Davis</li> <li>Windows .Net Framework</li> <li>Windows platform</li> <li>Web Servers:</li> <li>Apache 2 web server using SNMP</li> <li>Apache web server using SNMP</li> <li>Microsoft Internet Information Server (IIS)</li> <li>Sun One (former iPlanet 6)</li> </ul> <p>General:</p> <ul> <li>General JMX \u2013 General JMX can be used to connect to any server that supports both JMX (JSR-3) and JMX Remoting (JSR-160).General Performance </li> <li>Monitor \u2013 General Performance Monitor can be used just like the System &gt; Windows Platform. The difference is that it gives access to all Performance Monitor counters.</li> <li>General SNMP \u2013 General SNMP can be used similarly to other SNMP-based PMs. The difference is that is gives access to all MIBs served by the SNMP agent on that machine.</li> <li>General UNIX \u2013 General UNIX can be used similarly to the System &gt; UNIX platform using RSTATD. The difference is that is gives access to all RSTATD counters.</li> </ul> <p>External</p> <ul> <li>Nagios \u2013 Collects performance data from an installed Nagios server</li> <li>New Relic\u2013 Collects performance data from an installed New Relic server</li> </ul> </li> <li> <p>Select a server or system as a data source, and click Next. The Host Selection screen appears.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#selecting-a-host","title":"Selecting a Host","text":"<p>To select a host:</p> <ol> <li> <p>Click Browse to select a host to monitor.</p> <p>The Host Selection dialog box opens.</p> <p></p> </li> <li> <p>Select the host to monitor from the list and click Select. The host is added to the Selecting a Host screen.</p> </li> <li> <p>Some application server data sources require that you enter the application server\u2019s port value. Contact your system administrator for the information.</p> </li> <li> <p>Following are port numbers commonly used by some application server data sources:</p> <ul> <li> <p>Tomcat \u2013 8080.</p> </li> <li> <p>JBoss \u2013 1099.</p> </li> <li> <p>WebSphere \u2013 9080.</p> </li> <li> <p>WebLogic \u2013 7001.</p> </li> </ul> </li> <li> <p>Click Next.</p> <p>PMM attempts to connect to the host. If you are accessing this host for the first time within this Load Template, PMM prompts you for your username and password on the host.</p> <p></p> <p>Enter your username and password.</p> <p>If a connection is successfully made, the Wizard progresses to the Measurements to Monitor screen.</p> <p>If a connection cannot be established, the Wizard returns to the Host Selection screen, enabling you to select an alternate host.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#selecting-the-measurements-to-monitor","title":"Selecting the Measurements to Monitor","text":"<p>To select the measurements to monitor:</p> <ol> <li> <p>Select one or more measurements to monitor by clicking the checkbox adjacent to the item. PMM only collects the data for measurements that are selected. All other data is not collected.</p> <p>Explanations of each measurement are available by clicking the measurement name. The explanation appears at the bottom of the window.</p> <p>The list of available measurements varies depending upon the type of data source. Each data source is supplied with a default set of measurements to monitor.</p> <p>Notes:</p> <p>An empty circle  next to a measurement indicates that the measurement contains sub- components and that no default sub-components are defined (the upper level component cannot be selected). To select sub-components, click the + to expand the tree.</p> <p>A circle with a checkmark  next to a measurement indicates that the measurement contains sub-components and that default sub-components are defined. To view and configure the configured subcomponents, click the + to expand the tree.</p> </li> <li> <p>Click Next.</p> <p>The Wizard displays a summary of the host, data source, and measurements configured for monitoring.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#finishing-the-configurations","title":"Finishing the Configurations","text":"<p>To finish the configurations:</p> <ol> <li> <p>To accept the configuration, click Finish.</p> <p>The PMM Wizard closes and the selected configuration is added to the PMM main window.</p> <p></p> </li> <li> <p>To add additional data sources, hosts, and measurements to monitor, click the Add data source toolbar button and repeat the process.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#adding-measurements-to-a-configured-data-source","title":"Adding Measurements to a Configured Data Source","text":"<p>Measurements can be added quickly and easily to a data source configured in the PMM window.</p> <p>To add measurements to a data source already configured in the PMM:</p> <ol> <li> <p>Right-click the data source to which you want to add measurements and click Add measurements from the pop-up menu.</p> <p>The Measurements to Monitor screen for the selected data source appears.</p> </li> <li> <p>Select all of the measurements you want to monitor for the data source by selecting the checkbox adjacent to the measurement names.</p> <p>Explanations for each measurement are available by clicking the measurement name. The explanation appears at the bottom of the window.</p> </li> <li> <p>Click Next.</p> <p>A summary of the current configuration appears.</p> </li> <li> <p>To accept the configuration, click Finish.</p> <p>The PMM Wizard closes and the configuration is updated in the PMM main window.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#adding-data-sources-to-a-configured-host","title":"Adding Data Sources to a Configured Host","text":"<p>Data sources can be added quickly and easily to a host configured in the PMM window.</p> <p>To add data sources to a host already configured in the PMM:</p> <ol> <li> <p>Right-click the host in the PMM main window to which you want to add a data source, and click Add data source from the pop-up menu.</p> <p>The Select a Data Source Wizard screen appears.</p> </li> <li> <p>Select the data-source to add to the configuration and click Next.</p> <p>The PMM Wizard progresses to the Measurements to Monitor screen.</p> </li> <li> <p>Select all of the measurements you want to monitor for the data source.</p> <p>Explanations of each measurement are available by clicking the measurement name. The explanation appears at the bottom of the window.</p> </li> <li> <p>Click Next.</p> <p>A summary of the current configuration appears.</p> </li> <li> <p>To accept the configuration, click Finish.</p> <p>The PMM Wizard closes and the configuration is updated in the PMM main window.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#deleting-a-data-source","title":"Deleting a Data Source","text":"<p>To delete a data source from PMM configuration:</p> <ol> <li>Right-click the data source you wish to delete in the PMM main window.</li> <li> <p>Select Delete from the pop-up menu.</p> <p>A message box appears asking for confirmation.</p> </li> <li> <p>Click Yes.</p> <p>The data source is removed from the configuration and is no longer monitored.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#deleting-a-monitored-host","title":"Deleting a Monitored Host","text":"<p>To delete a host from the PMM configuration:</p> <ol> <li>Right-click the host you wish to delete in the PMM main window.</li> <li> <p>Select Delete from the pop-up menu.</p> <p>A message box appears asking for confirmation.</p> </li> <li> <p>Click Yes.</p> <p>The host, and all data sources and measurements configured for the host are removed from the configuration and are no longer monitored.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#deleting-a-measurement","title":"Deleting a Measurement","text":"<p>To delete a measurement from the PMM configuration:</p> <ol> <li>Right-click the measurement you wish to delete in the PMM main window.</li> <li> <p>Select Delete from the pop-up menu.</p> <p>A message box appears asking for confirmation.</p> </li> <li> <p>Click Yes.</p> <p>The measurement is removed from the configuration and no longer monitored.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#configuring-administrator-privileges-for-perfmon-windows","title":"Configuring Administrator Privileges for Perfmon (Windows)","text":"<p>In order to successfully monitor a host server using Perfmon (Windows), you must have administrator privileges on that server. There are three methods for configuring Administrator privileges:</p> <ul> <li>Configuring Administrator Privileges on a Server </li> <li>Configuring Administrator Privileges on all Servers Simultaneously </li> <li>Configuring Administrator Privileges on non-Server PCs </li> </ul>"},{"location":"console/performance_measurements_manager/#configuring-administrator-privileges-on-a-server","title":"Configuring Administrator Privileges on a Server","text":"<p>To configure Administrator privileges on a server:</p> <ol> <li>Log into the server to be tested.</li> <li>Right-click My Computer and click Manage. The Computer Management screen appears.</li> <li> <p>In the Local Users and Groups area, add your WebLOAD Console username to the following groups:</p> <ul> <li>Performance Log Users</li> <li>Performance Monitor Users</li> </ul> </li> </ol>"},{"location":"console/performance_measurements_manager/#configuring-administrator-privileges-on-all-servers-simultaneously","title":"Configuring Administrator Privileges on all Servers Simultaneously","text":""},{"location":"console/performance_measurements_manager/#to-configure-administrator-privileges-on-all-servers-simultaneously","title":"To configure Administrator privileges on all servers simultaneously:","text":"<ol> <li>Log into the Active Directory computer in the domain to be tested.</li> <li>Navigate to Administrative Tools &gt; Active Directory Users and Computers.</li> <li>Select your WebLOAD Console username and click Properties.</li> <li> <p>Click the Member of tab and add the user to the following groups:</p> <ul> <li>Performance Log Users</li> <li>Performance Monitor Users</li> </ul> </li> </ol>"},{"location":"console/performance_measurements_manager/#configuring-administrator-privileges-on-non-server-pcs","title":"Configuring Administrator Privileges on non-Server PCs","text":"<p>The following method must be used for non-server PCs, but can also be used for server PCs.</p> <p>To configure Administrator privileges on a non-server PC:</p> <ol> <li> <p>Grant at least Read permission to the following files:</p> <ul> <li> <p><code>&lt;Windows directory&gt;\\system32\\perfcxxx.dat</code></p> </li> <li> <p><code>&lt;Windows directory&gt;\\system32\\perfhxxx.dat</code></p> </li> </ul> <p>where xxx represents the system language (e.g., 009 for English).</p> </li> <li> <p>Open regedit32 and find the following keys:</p> <ul> <li><code>HKEY\\_LOCAL\\_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ SecurePipeServers\\Winreg</code></li> <li><code>HKEY\\_LOCAL\\_MACHINE\\SOFTWARE\\Microsoft\\Windows\\NT\\ CurrentVersion\\Perflib</code></li> </ul> </li> <li> <p>Grant your user at least Read permission to these keys and their sub-keys and close regedit32.</p> <p>Your user has access to monitor the performance of the host server using Perfmon (Windows).</p> </li> </ol> <p>For more information about configuring administrator privileges on a host server using Perfmon (Windows), see Controlling remote Performance Monitor access to Windows NT servers, located at http://support.microsoft.com/default.aspx?scid=kb;en-us;164018.</p>"},{"location":"console/performance_measurements_manager/#enabling-data-sources-monitoring","title":"Enabling Data Sources Monitoring","text":"<p>PMM enables you to monitor various data sources during runtime to view performance data in real time. However, some data sources require preliminary configuration of the data source and/or of WebLOAD. The following sections describe the various data sources and, where applicable, the necessary preliminary configuration.</p>"},{"location":"console/performance_measurements_manager/#enabling-application-server-monitoring","title":"Enabling Application Server Monitoring","text":"<p>PMM enables you to monitor application servers during runtime to view performance data from the application server in real-time. Before running your test session, you may need to perform some configuration tasks, as described below.</p> <p>Note: No configuration is necessary if you are using the following servers: GlassFish AS using JMX, JOnAS using JMX, Microsoft Active Server Pages, Microsoft ASP.NET.</p>"},{"location":"console/performance_measurements_manager/#adobe-life-cycle-enterprise-server-using-jmx-configuration-tasks","title":"Adobe Life Cycle Enterprise Server using JMX \u2013 Configuration Tasks","text":"<p>Adobe Life Cycle Data Services Enterprise Server JMX configuration depends on the type of server being used: JRun or Tomcat.</p>"},{"location":"console/performance_measurements_manager/#configuring-a-jrun-server","title":"Configuring a JRun Server","text":"<p>The JRun configuration file is \\lcds\\jrun4\\bin\\jvm.config.</p> <p>In order to enable JMX, set the following in the configuration file:</p> <p><code>java.args=-Xms32m -Xmx384m</code></p> <p><code>-Dsun.io.useCanonCaches=false</code></p> <p><code>-Dcom.sun.management.jmxremote</code></p> <p><code>-Dcom.sun.management.jmxremote.port=&lt;port&gt;</code></p> <p><code>-Dcom.sun.management.jmxremote.ssl=false</code></p> <p><code>-Dcom.sun.management.jmxremote.authenticate=false</code></p>"},{"location":"console/performance_measurements_manager/#configuring-a-tomcat-server","title":"Configuring a Tomcat Server","text":"<p>The Tomcat configuration file is \\lcds\\tomcat\\bin\\catalina.bat. In order to enable JMX, set the following in the configuration file:</p> <p><code>set CATALINA\\_OPTS=%CATALINA\\_OPTS% -Dcom.sun.management.jmxremote</code></p> <p><code>-Dcom.sun.management.jmxremote.port=&lt;port&gt;</code></p> <p><code>-Dcom.sun.management.jmxremote.ssl=false</code></p> <p><code>-Dcom.sun.management.jmxremote.authenticate=false</code></p> <p><code>-Djava.rmi.server.hostname=&lt;hostname&gt;</code></p>"},{"location":"console/performance_measurements_manager/#ibm-websphere-5-using-was-configuration-tasks","title":"IBM WebSphere 5 Using WAS \u2013 Configuration Tasks","text":"<p>To monitor the IBM WebSphere 5 application server in the Performance Measurements Manager Wizard, you need to install the supported IBM WebSphere 5 software and configure the IBM WebSphere 5 server.</p>"},{"location":"console/performance_measurements_manager/#webload-configuration","title":"WebLOAD Configuration","text":"<p>To enable the PMM to monitor the IBM WebSphere 5 application server, you need to install the IBM WebSphere Application Server WAS, Version 5 Application Client software.</p> <p>For information about obtaining and installing the WebSphere 5 Application Client software, refer to the WebSphere info center at http://www.ibm.com/software/webservers/appserv/infocenter.html or contact IBM.</p> <p>When this software package is not installed or has not been installed properly, the ability to monitor WebSphere 5 using WAS is not available and WebLOAD might show one of the following error messages:</p> <ul> <li>The IBM J2EE Client version x (required for probing WebSphere) is not installed. Please install the IBM J2EE Client.</li> <li>The IBM J2EE Client version x (required for probing WebSphere) is not installed properly. Please reinstall the IBM J2EE Client.</li> <li>The Java program associated with the IBM J2EE Client (required for probing WebSphere) is not found. Please reinstall the IBM J2EE Client.</li> <li>The IBM J2EE Client version x (required for probing WebSphere) is not installed. Before continuing, please install the IBM J2EE Client.</li> <li>The file [name], essential for probing WebSphere, could not be found in the J2EE directory. Before continuing, please install the IBM J2EE Client version x.</li> </ul>"},{"location":"console/performance_measurements_manager/#server-side-configuration","title":"Server Side Configuration","text":"<ul> <li> <p>Enable data collection as described in: http://www.ibm.com/software/webservers/appserv/doc/v35/ae/ infocenter/was/atsepmcf.html.</p> </li> <li> <p>Turn off the security settings on the application server, as follows:</p> </li> <li> <p>Log in to the server by typing the following command line directly on the server:</p> <p><code>wsadmin.bat -user &lt;user name&gt; -password &lt;user password&gt;</code></p> </li> <li> <p>Type the following command to disable the security settings:</p> <p><code>$AdminTask setGlobalSecurity {-interactive}\u201d</code></p> </li> <li> <p>Type <code>$AdminConfig</code> save to save the new configuration.</p> </li> <li> <p>Restart the application server.</p> </li> </ul>"},{"location":"console/performance_measurements_manager/#jboss-4x-5x-using-jmx-configuration-tasks","title":"JBoss 4.x \u2013 5.x using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor the JBoss 4.x \u2013 5.x using JMX, you need to configure the JBoss 4.x \u2013 5.x application server to use JMX, and configure WebLOAD to use JBoss 4.x and 5.x.</p>"},{"location":"console/performance_measurements_manager/#server-side-configuration_1","title":"Server Side Configuration:","text":"<p>To configure JBoss to use JMX:</p> <ol> <li> <p>Edit the server execution file (for example, /usr/local/jboss/bin/run.sh) by adding the following flags:</p> <p><code>JAVA\\_OPTS=$JAVA\\_OPTS -Dcom.sun.management.jmxremote=true JAVA\\_OPTS=$JAVA\\_OPTS -</code></p> <p><code>Dcom.sun.management.jmxremote.port=6789</code></p> <p><code>JAVA\\_OPTS=$JAVA\\_OPTS -</code></p> <p><code>Dcom.sun.management.jmxremote.authenticate=false</code></p> <p><code>JAVA\\_OPTS=$JAVA\\_OPTS -</code></p> <p><code>Dcom.sun.management.jmxremote.ssl=false</code></p> <p>where jmxremote.port is some arbitrary free TCP port.</p> </li> <li> <p>Run JBoss with <code>-b0.0.0.0</code>. This instructs the server not to bind exclusively to localhost.</p> <p>Note: By default, the JBoss Naming Service (JNDI) is listening on TCP port 1099. This port is the default port, retrieved from the Service Binding Manager. You can change the default port by changing the following configuration file:</p> <p><code>/usr/local/jboss/server/all/conf/jboss-service.xml.</code></p> </li> </ol>"},{"location":"console/performance_measurements_manager/#webload-configuration_1","title":"WebLOAD Configuration","text":"<p>To configure WebLOAD to use JBoss 4.x.x:</p> <ol> <li>Put the jars <code>jboss-management.jar</code> and jbossall-client.jar into <code>&lt;WebLoad- ProgramData-Dir&gt;\\extensions\\Java</code>.</li> <li>Try to connect to port 1099 (JNDI) with the default installation.</li> </ol> <p>To configure WebLOAD to use JBoss 5.x.x:</p> <ol> <li> <p>Put the following jars into <code>&lt;WebLoad-ProgramData-Dir&gt;\\extensions\\Java</code>:</p> <ul> <li>lib/jboss-common-core.jar</li> <li>client/jmx-invoker-adaptor-client.jar</li> <li>client/jbossjmx-ant.jar</li> <li>client/jboss-logging-spi.jar</li> <li>client/jboss-client.jar</li> <li>common/lib/jboss-serialization.jar</li> <li>common/lib/jboss-remoting.jar</li> <li>common/lib/jboss-security-spi.jar</li> <li>common/lib/jboss-integration.jar</li> <li>common/lib/jboss-javaee.jar</li> <li>common/lib/jboss-management.jar</li> </ul> </li> <li> <p>Try to connect to port 1099 (JNDI) with the default installation.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#oracle-weblogic-100-using-jmx-configuration-tasks","title":"Oracle WebLogic 10.0 Using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor Oracle WebLogic 10.0 Using JMX, you need to configure the Oracle WebLogic server.</p>"},{"location":"console/performance_measurements_manager/#server-side-configuration_2","title":"Server Side Configuration","text":"<p>To configure the Oracle WebLogic server:</p> <p>In the server's start-up script (for example, startWebLogic.cmd), add the following rows:</p> <p><code>set JAVA\\_OPTIONS=%JAVA\\_OPTIONS% -</code> <code>Dcom.sun.management.jmxremote=true</code></p> <p><code>set JAVA\\_OPTIONS=%JAVA\\_OPTIONS% -</code> <code>Dcom.sun.management.jmxremote.port=6790</code></p> <p><code>set JAVA\\_OPTIONS=%JAVA\\_OPTIONS% -</code> <code>Dcom.sun.management.jmxremote.authenticate=false</code></p> <p><code>set JAVA\\_OPTIONS=%JAVA\\_OPTIONS% -</code> <code>Dcom.sun.management.jmxremote.ssl=false</code></p>"},{"location":"console/performance_measurements_manager/#oracle-weblogic-using-snmp-configuration-tasks","title":"Oracle WebLogic Using SNMP \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor Oracle WebLogic using SNMP, you need to configure the Oracle WebLogic to set up a server side SNMP agent and configure the PMM to use Oracle WebLogic.</p>"},{"location":"console/performance_measurements_manager/#server-side-configuration_3","title":"Server-side Configuration","text":"<p>To set up a server-side SNMP agent:</p> <ol> <li>Log into the WebLogic Administration Console.</li> <li> <p>In the Domain Structure tree, expand the Diagnostics node and click the SNMP       node.</p> </li> <li> <p>Perform the following in the Server SNMP Agents table:</p> <ol> <li>Click New to add and configure a new SNMP Server agent.</li> <li>Specify a name.</li> <li> <p>Click OK to continue.      The new SNMP Server Agent is added with the following settings: Enabled = false, UDP Port = 161.</p> </li> <li> <p>Click the name of the new SNMP Server Agent to configure its settings.</p> </li> <li> <p>Check the Enabled option.</p> </li> <li> <p>Change the SNMP UDP port number. You can set it to be any free UDP port, such as 3161.</p> </li> <li> <p>Change the Trap Version to V2.</p> </li> <li> <p>Click Save to continue.</p> </li> </ol> </li> <li> <p>Set the target server for monitoring, as follows:</p> <ol> <li> <p>Click the Targets tab.</p> </li> <li> <p>Select the relevant servers from the list. Select only one server per agent.</p> </li> <li> <p>Click Save to continue.</p> </li> </ol> </li> </ol> <p>The basic configuration of an SNMP Server agent is complete. No restart is needed.</p>"},{"location":"console/performance_measurements_manager/#webload-configuration_2","title":"WebLOAD Configuration:","text":"<p>In the PMM wizard, enter the following parameters:</p> <ol> <li>In the Selecting a Host window, it is preferred to specify the IP address of the active network interface.</li> <li>System Entry Point \u2013 for Oracle WebLogic the default system entry point is .1.3.6.1.4 (iso.org.dod.internet.private.enterprises) or .1.3.6.1.4. 140.625.105.1.1.16.</li> </ol>"},{"location":"console/performance_measurements_manager/#sap-netweaver-using-jmx-configuration-tasks","title":"SAP NetWeaver Using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor SAP NetWeaver Using JMX, you need to configure the PMM to use SAP NetWeaver.</p>"},{"location":"console/performance_measurements_manager/#webload-configuration_3","title":"WebLOAD Configuration:","text":"<ol> <li> <p>Copy the following jars for SAP NetWeaver installation to</p> <p><code>C:\\Program Files\\RadView\\WebLOAD\\extensions\\java:</code></p> <ul> <li><code>com_sap_pj_jmx.jar</code> \u2013 the SAP-JMX library.</li> <li><code>client.jar</code> \u2013 the SAP AS Java client API (includes the JMX Adapter).</li> <li><code>exception.jar</code> \u2013 the SAP exception framework.</li> <li><code>logging.jar</code> \u2013 the SAP Logging API.</li> </ul> </li> <li> <p>In the PMM wizard, perform the following:</p> <ol> <li>In the Selecting a Host window, specify the RMI-P4 port.</li> <li>When you are prompted for your username and password on the host, enter the credentials of a user with a default administrator role.</li> </ol> </li> </ol>"},{"location":"console/performance_measurements_manager/#tomcat-60-using-jmx-configuration-tasks","title":"Tomcat 6.0 Using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor Tomcat 6.0 Using JMX, you need to configure the Tomcat 6.0 application server.</p> <p>Server-side configuration</p> <p>In the server's execution script (for example, \\bin\\catalina.bat), add the following rows:</p> <p><code>set CATALINA\\_OPTS=%CATALINA\\_OPTS% -Dcom.sun.management.jmxremote</code></p> <p><code>-Dcom.sun.management.jmxremote.port=&lt;port&gt; - Dcom.sun.management.jmxremote.ssl=false</code></p> <p><code>-Dcom.sun.management.jmxremote.authenticate=false - Djava.rmi.server.hostname=&lt;hostname&gt;</code></p>"},{"location":"console/performance_measurements_manager/#websphere-61-using-jmx-configuration-tasks","title":"WebSphere 6.1 Using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor WebSphere 6.1 using JMX, you need to configure the WebSphere 6.1 application server and configure WebLOAD to support WebSphere 6.1.</p>"},{"location":"console/performance_measurements_manager/#server-side-configuration_4","title":"Server-side configuration","text":"<ol> <li> <p>Add -Djavax.management.builder.initial= - Dcom.sun.management.jmxremote to the Generic JVM Argument, as follows:</p> <ol> <li>Launch the WebSphere Application Server.</li> <li>Connect to the Administration Console.</li> <li>Select Servers &gt; Server Types &gt; WebSphere application servers, and specify which server to manage (default: server1).</li> <li>In the Configuration tab, select Server Infrastructure &gt; Java and Process Management &gt; Process Definition.</li> <li> </li> <li> <p>Set the Generic JVM arguments to -Djavax.management.builder.initial=</p> <p>-<code>Dcom.sun.management.jmxremote</code>.</p> </li> </ol> </li> <li> <p>Add the following lines to     <code>/opt/IBM/WebSphere/AppServer/java/jre/lib/management/management.properties:</code></p> <p><code>com.sun.management.jmxremote.port=9999</code> </p> <p><code>com.sun.management.jmxremote.authenticate=false</code> </p> <p><code>com.sun.management.jmxremote.ssl=false</code></p> </li> </ol>"},{"location":"console/performance_measurements_manager/#select-additional-properties-java-virtual-machine","title":"Select Additional Properties &gt; Java Virtual Machine.","text":""},{"location":"console/performance_measurements_manager/#webload-configuration_4","title":"WebLOAD Configuration:","text":"<p>Copy the following libraries from the application server\u2019s installation directory to the <code>&lt;WebLOAD_DIR&gt;\\ extensions\\java\\</code> directory:</p> <ul> <li><code>com.ibm.ws.admin.client\\_6.1.0.jar</code></li> <li><code>com.ibm.ws.runtime\\_6.1.0.jar</code></li> <li><code>ibmorb.jar</code></li> </ul>"},{"location":"console/performance_measurements_manager/#websphere-70-using-jmx-configuration-tasks","title":"WebSphere 7.0 Using JMX \u2013 Configuration Tasks","text":"<p>To enable the PMM to monitor WebSphere 6.1 Using JMX, you need to configure the WebSphere 6.1 application server and configure WebLOAD to support WebSphere 6.1.</p>"},{"location":"console/performance_measurements_manager/#server-side-configuration_5","title":"Server-side configuration","text":"<ol> <li> <p>Add <code>-Djavax.management.builder.initial= - Dcom.sun.management.jmxremote</code> to the Generic JVM Argument, as follows:</p> <ol> <li>Launch the WebSphere Application Server.</li> <li>Connect to the Administration Console.</li> <li>Select Servers &gt; Server Types &gt; WebSphere application servers, and specify which server to manage (default: server1).</li> <li>In the Configuration tab, select Server Infrastructure &gt; Java and Process Management &gt; Process Definition.</li> <li> </li> <li>Set the Generic JVM arguments to <code>-Djavax.management.builder.initial=</code> <code>-Dcom.sun.management.jmxremote</code>.</li> </ol> </li> <li> <p>Add the following lines to</p> <p><code>/opt/IBM/WebSphere/AppServer/java/jre/lib/management/management.properties:</code></p> <p><code>com.sun.management.jmxremote.port=9999</code> </p> <p><code>com.sun.management.jmxremote.authenticate=false</code> </p> <p><code>com.sun.management.jmxremote.ssl=false</code></p> </li> </ol>"},{"location":"console/performance_measurements_manager/#select-additional-properties-java-virtual-machine_1","title":"Select Additional Properties &gt; Java Virtual Machine.","text":""},{"location":"console/performance_measurements_manager/#webload-configuration_5","title":"WebLOAD Configuration:","text":"<p>Copy the following libraries from the application server\u2019s installation directory to the  <code>&lt;WebLOAD\\_DIR&gt;\\ extensions\\java\\</code> directory:</p> <ul> <li><code>[WebSphere]/AppServer/runtimes/com.ibm.ws.admin.client\\_7.0.0. jar</code></li> <li> <p><code>[WebSphere]/AppServer/plugins/com.ibm.ws.runtime.jar</code></p> </li> <li> <p><code>[WebSphere]/AppServer/runtimes/com.ibm.ws.webservices.thincli ent\\_7.0.0.jar</code></p> </li> <li><code>[WebSphere]/AppServer/java/jre/lib/ibmorb.jar</code></li> <li><code>[WebSphere]/AppServer/java/jre/lib/ibmjgssprovider.jar</code></li> <li><code>[WebSphere]/AppServer/deploytool/itp/plugins/com.ibm.webspher e.v7\\_7.0.0.v20080817/wasJars/ibmjsseprovider2.jar</code></li> </ul> <p>Where <code>[WebSphere]</code> is the application server\u2019s installation directory.</p>"},{"location":"console/performance_measurements_manager/#enabling-database-monitoring","title":"Enabling Database Monitoring","text":"<p>PMM enables you to monitor database servers during runtime. This allows you to view performance data from the database in real-time. Before running your test session, you may need to perform some configuration tasks, as described below.</p> <p>Note: No configuration is necessary if you are using the following database: Microsoft SQL server.</p>"},{"location":"console/performance_measurements_manager/#oracle-monitor-configuration-tasks-on-windows","title":"Oracle Monitor \u2013 Configuration Tasks on Windows","text":"<p>The PMM Oracle database monitor uses SNMP to retrieve statistics.</p> <p>To use this monitor on Windows you must:</p> <ol> <li>Install SNMP support for Windows.</li> <li>Install SNMP support for Oracle using the Oracle Database installation.</li> <li> <p>Specify the port where the Oracle master agent is listening.</p> <p>The required port is specified in the TRANSPORT section of the MASTER.CFG file located in the \\ADMIN directory.</p> <p>For example, add the following section to the MASTER.CFG file:</p> <p><code>TRANSPORT ordinary SNMP</code> <code>OVER UDP SOCKET</code> <code>AT PORT 161</code></p> <p>Use port 161 for the Oracle Peer SNMP master agent.</p> </li> <li> <p>Specify the authentication in the <code>COMMUNITY</code> section of the <code>MASTER.CFG</code> file. For example:</p> <p><code>COMMUNITY public</code> </p> <p><code>ALLOW ALL OPERATIONS</code> </p> <p><code>USE NO ENCRYPTION</code></p> </li> <li> <p>Specify an unused port where the encapsulated agent, such as Microsoft SNMP service, should listen. Microsoft SNMP service typically uses port 1161. The port is specified in the <code>SERVICES</code> file located in the <code>NT_HOME|\\SYSTEM32\\DRIVERS\\ETC</code> directory.</p> <p>For example, modify the <code>nt_home\\system32\\drivers\\etc\\services</code> file from:</p> <p>\u2026</p> <p><code>snmp 161/udp</code></p> <p>\u2026</p> <p>To:</p> <p><code>snmp 1161/udp</code></p> </li> <li> <p>Specify which non-PEER master agents are to be encapsulated by editing the encapsulator configuration file, ENCAPS.CFG, located in the \\ADMIN directory. You must add the AGENT entry, including MIB-subtrees manageable by NMS, for the encapsulated master agent.</p> <p>For example, modify the <code>encaps.cfg</code> file as follows: </p> <p><code>AGENT AT PORT 1161 WITH COMMUNITY public</code> <code>SUBTREES 1.3.6.1.2.1.1,</code></p> <p><code>1.3.6.1.2.1.2,</code></p> <p><code>1.3.6.1.2.1.3,</code></p> <p><code>1.3.6.1.2.1.4,</code></p> <p><code>1.3.6.1.2.1.5,</code></p> <p><code>1.3.6.1.2.1.6,</code></p> <p><code>1.3.6.1.2.1.7,</code></p> <p><code>1.3.6.1.2.1.8,</code></p> <p><code>1.3.6.1.4.1.77</code></p> <p><code>FORWARD ALL TRAPS;</code></p> <p>Note: The port (1161) must match the unused port specified in step 5.</p> </li> <li> <p>Make the \u201cOracleSNMPPeerEncapsulator\u201d service automatic and start it.</p> </li> <li>Reboot your computer.</li> </ol>"},{"location":"console/performance_measurements_manager/#oracle-monitor-configuration-tasks-on-unix","title":"Oracle Monitor \u2013 Configuration Tasks on UNIX","text":"<p>The PMM Oracle database monitor uses an SNMP Master Agent to communicate with the Oracle Intelligent Agent. The SNMP Master Agent and the Oracle Intelligent Agent must be configured correctly before the Oracle Intelligent Agent can communicate over SNMP to the Master Agent on a UNIX platform. For detailed information on configuring the Intelligent Agent, see the Oracle Enterprise Manager Configuration Guide.</p> <p>To use this monitor on UNIX you must:</p> <ol> <li>Configure the SNMP Master Agent.</li> <li>Start the SNMP Agents.</li> </ol>"},{"location":"console/performance_measurements_manager/#configuring-the-snmp-master-agent","title":"Configuring the SNMP Master Agent","text":"<p>The necessary SNMP files are installed automatically when you install the Oracle Intelligent Agent. After installing the Oracle Intelligent Agent, you will have to edit the following files as described below:</p> <ul> <li><code>$ORACLE_HOME/network/snmp/peer/CONFIG.master</code></li> <li><code>$ORACLE_HOME/network/snmp/peer/CONFIG.encap</code></li> <li><code>$ORACLE_HOME/network/snmp/peer/start_peer</code></li> <li><code>/etc/snmpd.config</code></li> </ul>"},{"location":"console/performance_measurements_manager/#configmaster-peer-master-agent-file","title":"CONFIG.Master (Peer Master Agent file)","text":"<p>To edit the CONFIG.master file:</p> <ul> <li>Find the line beginning with MANAGER and change the IP address coded in this line to match the IP address of the machine where the SNMP traps will be sent.</li> </ul>"},{"location":"console/performance_measurements_manager/#configencap-peer-encapsulator-file","title":"CONFIG.encap (Peer Encapsulator file","text":"<p>To edit the CONFIG.encap file:</p> <ul> <li>Find the line <code>AGENT AT PORT</code>. It normally reads <code>AGENT AT PORT 1161 WITH COMMUNITY public</code>.</li> </ul> <p>If you modify the port number from 1161, you must also modify the <code>start_peer</code></p> <p>script.</p>"},{"location":"console/performance_measurements_manager/#start_peer-script","title":"start_peer Script","text":"<p>To edit the start_peer script:</p> <ol> <li>Find the line <code>NEW_SNMPD_PORT=</code> and verify that it is using the same port number listed above in the CONFIG.encap file.</li> <li> <p>Find the line <code>NEW_TRAPD_PORT=</code> and verify the port number is different from</p> <p><code>NEW_SNMPD_PORT=</code>.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#snmpdconfig-file","title":"snmpd.config File","text":"<p>To edit the snmpd.config file:</p> <ol> <li> <p>Add the following line to the file:</p> <p><code>trap &lt;hostname or ipaddress&gt;</code></p> </li> <li> <p>Replace the information in angle brackets with the actual hostname or IP address of the local host where the file is located.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#starting-the-snmp-agents","title":"Starting the SNMP Agents","text":"<p>To start the SNMP agents:</p> <ol> <li> <p>Make sure no SNMP components are running. The three main components are the <code>master_peer</code>, <code>encap_peer</code>, and <code>snmpd</code>. If any of these processes are running, use the ps command to find them, and the kill command to terminate the processes.</p> <p>For example:</p> <p><code>ps -ef | grep snmp</code></p> <p>This command checks to see if the SNMP Master Agent is running.</p> </li> <li> <p>Start the PEER Master Agent, PEER encapsulator, and native Digital UNIX SNMP Agent:</p> <p><code>cd $ORACLE_HOME/network/snmp/peer</code></p> <p><code>su root</code></p> <p><code>./start_peer -a</code></p> <p>This command starts all three processes.</p> </li> <li> <p>Now use the ps command to verify that all three processes were started:</p> <p><code>ps -aux |grep peer</code></p> <p><code>ps -aux |grep snmpd</code></p> <p><code>ps -ef | grep snmp</code></p> </li> </ol>"},{"location":"console/performance_measurements_manager/#mysql-database-using-snmp-configuration-tasks","title":"MySQL database using SNMP \u2013 Configuration Tasks","text":"<p>The PMM for MySQL enable monitoring various components of MySQL using the SNMP Micro Agent for MySQL provided by AdventNet (commercial product).</p> <p>For more information on the AdventNet SNMP Micro Agent for MySQL, see http://www.adventnet.com/products/mysql_agent/index.html.</p>"},{"location":"console/performance_measurements_manager/#microsoft-sql-server-using-snmp-configuration-tasks","title":"Microsoft SQL Server Using SNMP \u2013 Configuration Tasks","text":"<p>For the Microsoft SQL Server 2000, enable SNMP monitoring by selecting the Enable SNMP check box in the SQL Server Network Utility dialog box.</p> <p>Microsoft SQL Server 2005 and SQL Server 2008 do not support SNMP. Use the Windows Performance Monitor instead.</p>"},{"location":"console/performance_measurements_manager/#enabling-systems-monitoring","title":"Enabling Systems Monitoring","text":"<p>PMM enables you to monitor operating systems during runtime. This allows you to view performance data from the systems in real-time. Before running your test session, you may need to perform some configuration tasks, as described below.</p> <p>Note: No configuration is necessary if you are using the following systems: Windows .Net Framework, Windows platform.</p>"},{"location":"console/performance_measurements_manager/#enabling-web-servers-monitoring","title":"Enabling Web Servers Monitoring","text":"<p>PMM enables you to monitor Web servers during runtime to view performance data from the server in real-time. Before running your test session, you may need to perform some configuration tasks, as described below.</p> <p>Note: No configuration is necessary if you are using the following Web server: Microsoft Internet Information Server (IIS).</p>"},{"location":"console/performance_measurements_manager/#apache-web-server-using-snmp-configuration-tasks","title":"Apache Web Server Using SNMP \u2013 Configuration Tasks","text":"<p>The PMM uses SNMP to monitor different status values of the Apache Web server.</p> <p>The Apache SNMP monitoring is based on Mod-Apache-Snmp. For download and installation instructions, refer to http://mod-apache- snmp.sourceforge.net/english/index.htm.</p>"},{"location":"console/performance_measurements_manager/#apache-2-web-server-using-snmp-configuration-tasks","title":"Apache 2 Web Server Using SNMP \u2013 Configuration Tasks","text":"<p>The PMM uses SNMP to monitor different status values of the Apache 2 Web server.</p> <p>The Apache 2 SNMP monitoring is based on Mod-Apache-Snmp. For download and installation instructions, refer to http://mod-apache- snmp.sourceforge.net/english/index.htm.</p>"},{"location":"console/performance_measurements_manager/#sun-one-iplanet-configuration-tasks","title":"Sun One (iPlanet) \u2013 Configuration Tasks","text":"<p>The PMM Sun One monitor uses SNMP to retrieve server statistics.</p> <p>To use this monitor you must:</p> <ol> <li>Install SNMP support for Windows.</li> <li> <p>Ensure that the iPlanet SNMP agent is installed and activated on the iPlanet server host.</p> <p>Configure the Sun One server to be a proxy for the SNMP agent.</p> </li> <li> <p>Configure the Sun One server host to use port 1161 as the SNMP message port.</p> </li> <li>Enable SNMP Statistics Collection on the SNMP Subagent Configuration page of the Server Manager.</li> </ol>"},{"location":"console/performance_measurements_manager/#setting-up-the-snmp-agent-and-configuring-the-sun-one-server-as-a-proxy-for-the-snmp-agent","title":"Setting up the SNMP Agent and Configuring the Sun One Server as a Proxy for the SNMP Agent","text":"<p>To enable PMM to monitor performance data from the Sun One application server you must first set up the Sun One SNMP agent. The Administration Interface will not start the OS master agent on ports other than 161. The workaround is to use the Sun One SNMP master agent, modify the native master agent to use a different port, and enable the Sun One SNMP subagent to gather information about the server.</p> <p>To set up the Sun One SNMP agent on Solaris:</p> <ol> <li>Check whether an SNMP daemon (snmpd) is running on port 161. If an SNMP daemon is running:<ol> <li>Make sure you know how to restart it and which MIB it supports.</li> <li>Kill its process.</li> </ol> </li> <li> <p>Edit the <code>CONFIG</code> file located in the <code>plugins/snmp/magt</code> server root directory from:</p> <p>\u2026</p> <p><code>snmp 161/udp</code></p> <p>\u2026</p> <p>To:</p> <p>\u2026</p> <p><code>snmp 1161/udp</code></p> <p>\u2026</p> </li> <li> <p>Manually activate the Sun One master agent and subagent.</p> <ol> <li>At the command prompt, enter the commands:</li> </ol> <p><code>cd &lt;iws\\_install&gt;/Servers/plugins/snmp cd maget</code></p> <p><code>./magt CONFIG INIT&amp; cd ../sagt</code></p> <p><code>./sagt -c CONFIG &amp;</code></p> </li> <li> <p>Restart the Sun One Server and the subagent from the Web server Administration.</p> </li> </ol>"},{"location":"console/performance_measurements_manager/#enabling-monitoring-of-application-servers-that-use-generic-monitoring-protocols","title":"Enabling Monitoring of Application Servers that use Generic Monitoring Protocols","text":"<p>PMM enables you to monitor application servers that use generic monitoring protocols. You can monitor the application servers during runtime to view performance data in real-time. Before running your test session, you may need to perform some configuration tasks, as described below.</p>"},{"location":"console/performance_measurements_manager/#general-jmx-configuration-tasks","title":"General JMX \u2013 Configuration Tasks","text":"<p>The Java Management Extensions (JMX) technology provides the tools for building distributed, Web-based, modular and dynamic solutions for managing and monitoring devices, applications, and service-driven networks.</p> <p>General JMX can connect to any device that supports JMX (JSR-003) and JMX Remote API (JSR-160). Refer to your application server\u2019s documentation to see how to configure JMX for your server.</p>"},{"location":"console/performance_measurements_manager/#general-performance-monitor-configuration-tasks","title":"General Performance Monitor \u2013 Configuration Tasks","text":"<p>General Performance Monitor can be used to connect and collect statistics using Windows Performance Monitor protocol (Perfmon).</p> <p>When you connect to a host server using Perfmon (Windows), you must have administrator privileges on that server in order to successfully monitor it. For more information about configuring administrator privileges on a host server using Perfmon (Windows), see Configuring Administrator Privileges for Perfmon (Windows) .</p>"},{"location":"console/performance_measurements_manager/#general-snmp-configuration-tasks","title":"General SNMP \u2013 Configuration Tasks","text":"<p>General SNMP can be used to connect to all servers supporting SNMP monitoring.</p> <p>Refer to your server documentation for instructions on how to enable SNMP on your server.</p>"},{"location":"console/performance_measurements_manager/#general-unix-configuration-tasks","title":"General UNIX \u2013 Configuration Tasks","text":"<p>RSTAT monitors enable you to monitor the rpc.rstatd daemon counters. This daemon is already installed and running on most Solaris and Linux machines. If not, you can obtain it at http://rstatd.sourceforge.net/.</p> <p>This protocol uses RPC calls on port 111. You may need to open this port in the firewall to allow PMM to access the rstatd daemon.</p>"},{"location":"console/performance_measurements_manager/#monitoring-generic-snmp-data-sources","title":"Monitoring Generic SNMP Data Sources","text":"<p>WebLOAD Console currently supports a variety of SNMP monitors by default, including basic SNMP for Windows, Solaris, and UNIX/Linux, along with WebLogic, and Oracle servers. WebLOAD Console\u2019s SNMP monitoring support can be easily extended by updating WebLOAD Console\u2019s UserMibFilter.ini file. For more information about extending SNMP monitoring support, see PMM Extension in the WebLOAD Extensibility SDK.</p>"},{"location":"console/performance_measurements_manager/#remote-performance-measurement-manager","title":"Remote Performance Measurement Manager","text":"<p>This feature enables you to collect statistics on remote machines using TestTalk. With other methods of testing a remote machine, security and firewall issues may block communication between the WebLOAD Console and the remote machine. Using TestTalk to measure performance on remote machines avoids this problem.</p> <p>To enable the Remote Performance Measurement Manager, you must add a special protocol extension to the Load Generator, called the Remote Machine Load Generator. This extension monitors the Windows Perfmon and sends the information back as Load Generator statistics.</p> <p>Once the Remote Machine Load Generator is installed, you can add a Remote Performance Measurement Manager script to your template. When you run the template, statistics from the remote machine are gathered through the Remote Machine Load Generator and the script you configure.</p>"},{"location":"console/performance_measurements_manager/#setting-the-remote-machine-load-generator","title":"Setting the Remote Machine Load Generator","text":"<p>In order to collect statistics from a remote machine using the Remote Performance Measurement Manager, you must first add the Remote Machine Load Generator extension to your Load Generator. The following sections explain how to install the Remote Machine Load Generator extension.</p>"},{"location":"console/performance_measurements_manager/#installing-the-remote-machine-load-generator-extension","title":"Installing the Remote Machine Load Generator Extension","text":"<p>Install WebLOAD on any Windows machine that can access the server you want to probe. For more information, see the WebLOAD Installation Guide.</p>"},{"location":"console/performance_measurements_manager/#setting-ini-properties","title":"Setting INI Properties","text":"<p>Set the following parameters in <code>webload.ini</code> of the Load Generator installation</p> <p><code>(&lt;Install Dir&gt;\\bin)</code>:</p> <p><code>PROTOCOLS=\u201cpmprobeprotocol.dll;JSCOMObject.dll\u201d</code></p> <p><code>PROTOCOLS_NAMES=\u201cPerformance Monitor Probe;COM Object\u201d</code></p>"},{"location":"console/performance_measurements_manager/#setting-the-probed-measurements","title":"Setting the Probed Measurements","text":"<p>You can run the Remote Performance Measurement Manager utility to select the servers you want to probe and the statistics you want to collect. For instructions on how to use the Performance Measurements Manager utility to select a server and statistics, see Specifying the Data Sources, Hosts, and Measurements to Monitor .</p> <p>Note: To use the Remote PMM , you must obtain a valid license file for the remote machine. To do so, open the Update License utility after performing a full WebLOAD installation, and send the HostID to license@radview.com with a request for a license for setting up a Remote PMM only.</p> <p>To select a server and statistics:</p> <ol> <li>From the Start menu, select Start &gt; Programs &gt;  &gt; Utilities &gt; Performance Measurements Manager, to select the servers you want to probe and the measurements that should be received. <li>Save the selected definitions in any file you choose, for example: <code>myload.pmm</code>.</li> <li> <p>Modify the <code>C:\\Program Files\\RadView\\WebLOAD\\bin\\webload.ini</code> file, as follows:</p> <ol> <li>Locate the LOAD_PMM_FILE_PATH=\u201c\u201c parameter.</li> <li>Insert the path and name of your selected definitions file. For example:</li> </ol> <p><code>LOAD_PMM_FILE_PATH=\u201cC:\\\\temp\\\\myload.pmm\u201d</code></p> </li> <p>Note: Currently, only the \u201cPerfmon\u201d measurements for probing Windows are supported when using the Remote PMM feature.</p>"},{"location":"console/performance_measurements_manager/#firewall-settings","title":"Firewall Settings","text":"<p>To configure the firewall settings:</p> <ul> <li>Open port 9000 in the firewall.</li> </ul> <p>Note: Port 9000 is the default port for TestTalk, WebLOAD Console\u2019s network agent. You can change the port number through TestTalk\u2019s configuration file.</p> <p>To change the default port:</p> <ol> <li>Open the C:\\Program Files\\RadView\\WebLOAD\\bin\\webload.ini file.</li> <li> <p>Modify the following parameter value from \u201c9000\u201d to a different port number, for example: \u201c9011:\u201d</p> <p><code>TESTTALK_NETWORK_PORT=\u201c9011\u201d.</code></p> </li> <li> <p>Save and close the file.</p> </li> <li>Exit TestTalk.</li> <li>Restart WebLOAD Console.</li> </ol>"},{"location":"console/performance_measurements_manager/#setting-the-console","title":"Setting the Console","text":"<p>Once you have installed and configured the Remote Machine Load Generator, you can add a Remote Performance Measurement Manager script to your template. This script is run by the Remote Machine Load Generator when you run your template.</p> <p>To add a Remote PMM script to the template:</p> <ol> <li> <p>Click Add Remote PMM in the Home tab of the Console ribbon. The Add PMM Probing Client dialog box is displayed.</p> <p></p> </li> <li> <p>Enter the remote host\u2019s name or IP address,</p> <p>-Or-</p> <p>Select a host from a list of available hosts by clicking . The Host Selection dialog box is displayed.</p> <p></p> <ol> <li>Select a host.</li> <li>Click Select. The selected host name is displayed in the Host Name/IP field of the Add PMM Probing Client dialog box.</li> </ol> </li> <li> <p>Click OK. A new script called RemotePMMScript is automatically added to the template.</p> </li> </ol> <p>Note: You can rename the new script by right-clicking on the new script and typing in a new name.</p>"},{"location":"console/performance_measurements_manager/#importing-external-statistics","title":"Importing External Statistics","text":"<p>WebLOAD Console enables you to import statistical data from an external comma- delimited values file (.csv) into your report, while running a Load Session or upon test completion. Imported counters are added to the integrated reports tree, under Import::, where  is the name of the file containing the external statistics. For more information about integrated reports, see WebLOAD Console Performance Reports . All imported data is integrated with the <p>Load Session\u2019s database and the WebLOAD Console statistics are also calculated for this information. For more information about WebLOAD Console statistics, see WebLOAD Statistics Reports .</p> <p>Note: Imported data is also available for use with WebLOAD Analytics.</p>"},{"location":"console/performance_measurements_manager/#to-import-external-statistics","title":"To import external statistics:","text":"<ol> <li> <p>Select Import External Statistics from the Session tab of the ribbon. The Import External Statistics dialog box appears.</p> <p></p> </li> <li> <p>In the Statistics File Type drop\u2013down list, select one of the following types of statistics files:</p> <ul> <li> <p>Anue System</p> </li> <li> <p>PerfMonitor</p> </li> </ul> </li> <li> <p>In the Statistics File Name field, browse for or enter the name of the external statistics file. The file has a *.csv extension.</p> </li> <li> <p>Click OK.</p> <p>The external statistics are imported into the report.</p> </li> </ol>"},{"location":"console/plan_test_session/","title":"Planning a Test Session","text":"<p>Planning your test is imperative for developing tests that accomplish your load testing objectives. Planning your test helps you:</p> <ul> <li>Plan the resources required for testing.</li> <li>Create templates that accurately emulate your user\u2019s typical working environment.</li> <li>Define test success criteria.</li> </ul> <p>This chapter describes the stages involved in planning and executing a test session. It shows you where to find details in this guide about each concept so you can quickly find information of particular interest to your needs.</p>"},{"location":"console/plan_test_session/#load-session-workflow","title":"Load Session Workflow","text":"<p>A Load Session is performed in stages. This chapter explains the planning stage in detail. The rest of the stages are detailed in subsequent chapters.</p> <ul> <li> <p>What you want to test \u2012 what application are you going to test?</p> </li> <li>What functionality do you want to test \u2012 what actions will the users perform?</li> <li>How many Virtual Clients you want to simulate?</li> <li>How long your test will run?</li> <li>What are acceptable results? Acceptable results are defined by your test objective. For example, you can verify:<ul> <li>Acceptable user response times</li> <li>Reliability by running stress tests</li> <li>Performance degradation after updates</li> </ul> </li> <li> <p>What resources are required for performing the test?</p> </li> <li> </li> <li> </li> </ul> <p>WebLOAD Console provides three ways for creating Load Templates:</p> <ul> <li>Using the WebLOAD Wizard to build a basic Load Template. You define the scripts to run, the Load Machines on which to generate the Virtual Clients and the test schedule. After creating a basic template with the wizard, you can change aspects of the configuration through the Console ribbon. For information on creating a template with the WebLOAD Wizard, see Creating Load Templates with the WebLOAD Wizard .</li> <li>Using the Goal-Oriented Test Wizard to create goal-seeking performance tests. Rather than running multiple tests to measure the performance at different loads, you can run the Goal-Oriented Test to measure the performance goal that you desire. You define the scripts to run and the goals to achieve, and WebLOAD Console automatically schedules a test and increases the load until your goals are achieved. For information on creating a template with the Goal- Oriented Test Wizard, see Creating Load Templates with Goal-Oriented Test .</li> <li> <p>Manually using the Console ribbon. See Configuring a Load Template Manually for information on defining a template manually.</p> </li> <li> </li> <li> </li> </ul>"},{"location":"console/plan_test_session/#planning-a-load-session","title":"Planning a Load Session","text":"<p>Planning a Load Session involves considering:</p>"},{"location":"console/plan_test_session/#creating-visual-test-scripts","title":"Creating Visual Test Scripts","text":"<p>Use WebLOAD Recorder to record the activity you want to test in a Web browser and save it as a script. If you plan to test users performing different activities, you need to record separate visual scripts for each activity. See the WebLOAD Recorder User\u2019s Guide.</p>"},{"location":"console/plan_test_session/#creating-load-templates","title":"Creating Load Templates","text":"Creating Load Templates involves defining the participants (Clients and Servers) in the Load Session. The definition includes selecting the scripts to run, the host computers and number of Virtual Clients participating in the Load Session, and scheduling the test. After you create a template it is saved in a *.tpl file. Use the commands in the File tab of the Console ribbon to create, open and save template files."},{"location":"console/plan_test_session/#running-a-load-template","title":"Running a Load Template","text":"<p>After you create the Load Template, you run it. As your test runs, you receive various reports and messages from the various participating hosts. The activity in your test session is displayed on the Console screen. This screen is updated continuously in real time as you work. See Running a Load Session .</p>"},{"location":"console/plan_test_session/#analyzing-the-test-results","title":"Analyzing the Test Results","text":"<p>WebLOAD Console displays the results of your Load Session in tabular format and in easy to read graphs.</p>"},{"location":"console/plan_test_session/#forming-a-test-plan","title":"Forming a Test Plan","text":"<p>Every test must begin with a test plan. When you plan a test session, the first step is to analyze your application to ensure that your test will accurately reflect the working environment of your users. You want to consider the goals of the test and your available resources. Consider the following:</p> <ol> <li> <p>What application are you testing?</p> <p>When planning a test, the first thing you should consider is the target of your test. You must define what Web application you plan to test. Your test target is your SUT (System Under Test).</p> <p>Before planning further, call up a browser and access the site to be tested, to make sure that the connection to the site on the Web is valid.</p> </li> <li> <p>What criteria are you testing?</p> <p>You must know what functionality of the Web application you want to test. Usually you want to test the amount of time required to perform a certain function on the website. You may want to test the time it takes to access a page, the time it takes to submit a form, or the number of clients that can simultaneously access your site.</p> <p>Using the Goal-Oriented Test, you can test the number of clients that can perform a function, such as accessing a page or submitting a form, at the performance level that you have specified.</p> <p>When defining the criteria for the test you should consider:</p> <ul> <li>How many users do you want to simulate? </li> <li>How many users are anticipated to connect to your application?</li> <li>How many different user activities do you want to simulate? If you plan to test users performing different activities, you need to create separate scripts for each activity.</li> <li>What type of users do you want to simulate? First time users respond differently to an application than returning users. Using the playback sleep time settings you can set WebLOAD Virtual Clients to run with the recorded sleep time delays, remove all delays to stress the application, or create random delays simulating different users.</li> <li>What type of response time is acceptable? Using the Goal-Oriented Test, you can create test sessions that increase the load and notify you at what load the response time exceeds acceptable levels.</li> <li>What is an acceptable failure rate? Should your test be stopped if a set number or percentage of errors is surpassed?</li> <li>What type of connections speeds do you want to simulate? Using the connection speed settings available with WebLOAD Console you can simulate users connecting through different connections.</li> </ul> </li> <li> <p>What types of systems are testing these aspects?      Your test can include Load Machines and Probing Clients. A Load Machine bombards the SUT with a load of Virtual Clients. Load Machine testing gives you an indication of the way your program behaves under the stress of a heavy load.</p> <p>Probing Client testing is usually performed simultaneously with Load Machine testing. Using a Probing Client, you can test the system performance with other functionality, while the system is undergoing stress testing. For example, you can measure the time required to submit a form, while the SUT is being bombarded by the Load Machine simulating multiple clients calling up a page.</p> <p>WebLOAD Console generates exact values for Probing Client performance as opposed to averages for Load Machine performance.</p> </li> </ol>"},{"location":"console/plan_test_session/#planning-a-test-program","title":"Planning a Test Program","text":"<p>The test you devise must be coded in a script file. Scripts define the actions WebLOAD Virtual Clients perform. At this stage, you must plan the test program that you will develop. Your scripts should define the typical tasks you expect users to perform with your Web application.</p> <p>For example, for a book store application you could create scripts that perform typical shopping activities such as searching for a book, adding books to the shopping cart and checking out. You should also consider your test objectives and define transactions to measure the response times for typical user activities such as searching for a book to ensure your Web application meets your requirements. You can also plan Synchronization Points to emulate peek server loads and ensure your requirements are met even under heavy load. Remember that if your plan indicates that your Load Machine and Probing Client perform different tasks, you need a script for each host.</p> <p>WebLOAD scripts are created in WebLOAD Recorder. See the WebLOAD Recorder User\u2019s Guide, the WebLOAD Scripting Guide, and the WebLOAD JavaScript Reference Guide for further information on creating Scripts.</p>"},{"location":"console/plan_test_session/#creating-the-test-scripts","title":"Creating the Test Scripts","text":"<p>The simplest way is to create a script is using WebLOAD Recorder that enables you to create a visual script by recording your activity in the browser.</p> <p>For example, if you want to test the speed at which a certain Web application displays a page, and the speed required to submit a form, you can open WebLOAD Recorder and go to that application through a browser. With WebLOAD Recorder recording your activity, you can display the page desired and submit the form desired.</p> <p>WebLOAD Recorder saves your browser activity as a visual script. After recording the basic activity, you can add transaction statements to measure the time it takes to display the page.</p> <p></p> <p>You can tailor the recorded script, by adding commands and timers available in WebLOAD Recorder. For more information on creating a script with WebLOAD Recorder, see the WebLOAD Recorder User\u2019s Guide.</p> <p>Note: The script options you define in the Console for your current Session override the options defined in WebLOAD Recorder. For more information on script options, see Setting Script Options .</p>"},{"location":"console/plan_test_session/#examining-your-test-resources","title":"Examining Your Test Resources","text":"<p>After you know what you are going to test, you must examine the resources that are available to you for running your test. This helps you allocate the resources for your test load. If the computers available to you cannot support the desired load, consider distributing the load over several computers.</p>"},{"location":"console/plan_test_session/#starting-webload-console","title":"Starting WebLOAD Console","text":"<p>When your test plan is complete and your scripts are ready, you can open WebLOAD Console and begin the test configuration process.</p> <p>To open WebLOAD Console:</p> <ol> <li> <p>Verify that all the participating Host computers are properly connected.</p> </li> <li> <p>Select Start &gt; All Programs &gt; RadView &gt; WebLOAD &gt; WebLOAD Console. The Console calls up TestTalk automatically, on its system. The Console opens with the Console Startup dialog box displaying a variety of shortcuts to the various WebLOAD Console components.</p> <p></p> <p>To create a new WebLOAD Console template, select one of the three methods available on the Startup dialog box.</p> <ul> <li>Manual \u2012 Create the Load Template by yourself, defining the scripts to run, the number of Virtual Clients to run, the Load Machines on which to generate the load and build a schedule for running the test.</li> <li>WebLOAD Wizard \u2012 The Wizard helps you through the process of configuring the Load Template.</li> <li>Goal-Oriented Test wizard \u2013 Define the scripts to run, the Load Machines on which to run the Virtual Clients, and the test goals to achieve, and WebLOAD Console automatically builds a schedule based on your goals.</li> </ul> <p>The easiest way to configure a basic test is through the WebLOAD Wizard. Save your work in the Wizard as a Load Template. After you have closed the WebLOAD Wizard, you can use the Console ribbon to add functionality to your Load Template (*.tpl file).</p> <p>Creating Load Templates with the WebLOAD Wizard  discusses the WebLOAD Wizard. Setting Global Options  provides instructions for using the Console features to add functionality to the Load Template created in the WebLOAD Wizard. Creating Load Templates with Goal-Oriented Test  provides instructions for configuring a test session running the Goal-Oriented Test feature. Connecting to WebRM  provides instructions for connecting the Console to WebRM using the WebRM Wizard. The Console can then request resources from WebRM so it can use the floating license, which is controlled by WebRM.</p> </li> <li> <p>Click the TestTalk icon  on each host computer participating in the test. (TestTalk is automatically enabled only on the host running the Console.)</p> <p>If you are using a Solaris or Linux system as a Load Machine, verify that the TestTalk software is running on the Solaris or Linux system. If you have closed TestTalk after the installation, run TestTalk again.</p> <p>All of the systems participating in the test session, including the system running the Console, the Load Machines, and the Probing Clients must be running the network agent, TestTalk. This establishes communication between participating clients and servers. The SUT does not require TestTalk or any other WebLOAD- specific software.</p> <p>Note: Do not close TestTalk in the middle of a test session. This can cause unexpected results. When shutting down the system, be sure to shut down the Console first. Then shut down TestTalk.</p> </li> </ol>"},{"location":"console/quickstart/","title":"WebLOAD Quick Start","text":"<p>This section shows you how you can get started quickly using WebLOAD by designing and executing a performance test of the RadView Software test site at http://www.webloadmpstore.com. Then you can refer to the complete WebLOAD documentation set to learn more techniques for using WebLOAD.</p>"},{"location":"console/quickstart/#quick-start-steps","title":"Quick Start Steps","text":"<p>In this Quick Start, you perform the following steps:</p> <ol> <li>Create a script (see Creating a Script).</li> <li>Configure a Load Template using the WebLOAD Wizard (see Configuring a Load Template using WebLOAD Wizard ).</li> <li>Configure Session options (see Setting Session Options ).</li> <li>Run a test (see Running the Test ).</li> <li>Analyze test results (see Analyzing Test Results ).</li> </ol> <p>Note: We recommend that you follow the steps in the order they appear. All examples are interrelated and dependent on earlier steps.</p>"},{"location":"console/quickstart/#creating-a-script","title":"Creating a Script","text":"<p>The first step in creating a script is to record your actions as you interact with your Web application.</p> <p>To create a script:</p> <ol> <li> <p>Start WebLOAD Recorder by selecting Start &gt; All Programs &gt; RadView &gt;  WebLOAD &gt; WebLOAD Recorder. WebLOAD Recorder opens.</p> <p></p> </li> <li> <p>Select Create a new project, and click OK.</p> <p>The WebLOAD Recorder main window opens in Editing Mode for you to begin creating your script.</p> <p></p> </li> <li> <p>In the main window, in Editing Mode, click the Start Recording  button in the Home tab of the WebLOAD Recorder ribbon to begin recording. The Recording dialog box appears.</p> <p></p> </li> <li> <p>Set the desired recording parameters, as described in the WebLOAD Recorder User\u2019s Guide.</p> </li> <li> <p>Click OK.</p> <p>WebLOAD Recorder begins recording all of the actions you perform in the browser, as indicated by the recording notification in the WebLOAD Recorder status bar. </p> <p></p> <p>A browser window opens.</p> </li> <li> <p>In the address bar, enter the Web address http://www.webloadmpstore.com to go to the WebLOAD test site.</p> <p></p> </li> <li> <p>Navigate through the site, performing the actions you want to test. For example:</p> <ol> <li>Click a product to view the product details.</li> <li>Click Add to Cart to add the product to your shopping chart.</li> </ol> <p>Your actions are recorded and appear in the Script Tree as you navigate the site. (If you see additional nodes in the Script Tree with different URLs, this may be traffic generated by browser plug-ins or extensions, for example, third-party toolbars.)</p> <p></p> </li> <li> <p>Click the Stop Recording  button in the Home tab of the WebLOAD Recorder ribbon to stop the recording.</p> </li> <li> <p>Click the Save  button in the Quick Access toolbar or in the File tab of the WebLOAD Recorder ribbon to save your script.</p> </li> <li> <p>Type <code>QuickStart</code> as the name of the script in the Save As dialog box and clickSave.</p> <p>The script is saved with the extension *<code>.wlp</code>.</p> <p>You now have a basic script that can be used in a WebLOAD test configuration. For complete information on creating, editing and modifying scripts, and adding functionality to your script, see the WebLOAD Recorder User\u2019s Guide.</p> </li> </ol>"},{"location":"console/quickstart/#configuring-a-load-template-using-webload-wizard","title":"Configuring a Load Template using WebLOAD Wizard","text":"<p>Using the Quick Start, you will learn how to perform the following steps in order to configure a Load Template with the WebLOAD Wizard in the WebLOAD Console:</p> <ol> <li>Opening the WebLOAD Wizard.</li> <li>Selecting a script and a Performance Statistic to monitor.</li> <li>Selecting a host on which to run the Load Machine.</li> <li>Scheduling the test and selecting the number of Virtual Clients to run.</li> <li>Setting Session options.</li> </ol> <p>For more details about each of these steps, see Creating Load Templates with the WebLOAD Wizard .</p>"},{"location":"console/quickstart/#opening-webload-wizard","title":"Opening WebLOAD Wizard","text":"<p>The first step in defining a Load Template with the WebLOAD Wizard is defining the type of script to run. The script is the test script that defines the actions that the Virtual Clients perform during the test. WebLOAD supports both single scripts (lone test scripts) and Mix scripts (a group of scripts simulating groups of users performing different activities on the application simultaneously). In this Quick Start, we will create a template running a single script. For information on creating templates with multiple scripts or Mix scripts, see *Creating Load Templates with the WebLOAD Wizard.</p> <p>To open WebLOAD Wizard:</p> <ol> <li> <p>Start the WebLOAD Console.</p> <p>Select Start &gt; All Programs &gt; RadView &gt; WebLOAD &gt; WebLOAD Console.</p> <p>The WebLOAD Console opens, and the WebLOAD Console Startup dialog box appears.</p> </li> <li> <p>Select Create a new Template using WebLOAD Wizard, and click OK. The WebLOAD Wizard opens.</p> </li> <li> <p>On the Welcome screen, click Next. The script/Mix Type screen appears.</p> </li> </ol>"},{"location":"console/quickstart/#selecting-a-script","title":"Selecting a Script","text":"<p>To select a script and a performance statistic to monitor:</p> <ol> <li>On the Test Type screen, select Single Script, and click Next.</li> <li>On the script/Mix Selection screen, click the  button and browse to the location of the <code>QuickStart.wlp</code> script created earlier using WebLOAD Recorder. Select the script and click Open.</li> <li>On the script / Mix Selection screen, click Next. The Host Selection screen appears.</li> </ol>"},{"location":"console/quickstart/#selecting-a-host","title":"Selecting a Host","text":"<p>For the steps in this Quick Start, you use your own machine as the host Load Machine to generate Virtual Clients. The number of Virtual Clients that can be generated depends on the power of the host machine.</p> <p>To select a host:</p> <ol> <li> <p>On the Host Selection screen, note that your computer is automatically listed as the default Load Machine.</p> </li> <li> <p>Click Next to accept the default selection.</p> </li> </ol>"},{"location":"console/quickstart/#scheduling-the-test","title":"Scheduling the Test","text":"<p>When you schedule the test, you define the load to be generated throughout the test and the total testing time. The Load Profiler provides a quick and easy way to select different testing patterns.</p> <p>To schedule the test:</p> <ol> <li> <p>On the Schedule screen, select Manual, and click Next. The wizard progresses to the Schedule Manually screen.</p> </li> <li> <p>Click your computer.</p> <p>The Load Profiler buttons becomes enabled.</p> </li> <li> <p>Click Load Profiler.</p> <p>The Load Profiler opens.</p> </li> <li> <p>Select Linear from the Select scheduling model drop-down list.</p> </li> <li> <p>Enter 10 in the Concluding number of Virtual Clients field and accept the defaults for the Total time in minutes and Starting number of Virtual Clients fields.</p> <p>The test will run for 10 minutes, starting with a load of 5 Virtual Clients and increasing to a maximum of 10.</p> </li> <li> <p>Click Replace.</p> <p>The Linear Schedule model now appears in the row below your host computer name in the Schedule Manually screen.</p> </li> <li> <p>Click Next. The Performance Measurements Manage screen appears.</p> </li> </ol>"},{"location":"console/quickstart/#selecting-the-performance-measurements","title":"Selecting the Performance Measurements","text":"<p>The Performance Measurements Manage screen enables defining which statistics to monitor during the test.</p> <p>Note: In this simple example, we will monitor the CPU usage on your system during runtime. During a real test, you would probably monitor the CPU performance of your application server.</p> <ol> <li> <p>In the Performance Measurements Manage page, click Add Monitors. The Performance Measurements Manager window appears.</p> <p></p> </li> <li> <p>Click the  Add data source toolbar button.</p> <p>The Performance Measurements Manager Wizard opens.</p> </li> <li> <p>On the Welcome screen, click Next.</p> <p>The Selecting a Data Source window appears.</p> </li> <li> <p>Click the plus sign (\u201c+\u201d) adjacent to System to expand the tree, select Windows platform, and click Next.</p> </li> <li> <p>Click Browse to browse available hosts. In the Host selection dialog box, highlight the name of your computer in the list, and click Select.</p> </li> <li> <p>Click Next.</p> <p>WebLOAD attempts to connect to the selected host and collect data. A tree of all available measurements to monitor appears.</p> </li> <li> <p>Expand the tree to select the measurement you want. Click Processor \u0086 _Total, select the checkbox adjacent to % Processor Time, and click Next.</p> </li> <li> <p>Click Finish.</p> <p></p> </li> <li> <p>Click the  Close &amp; update toolbar button to save the configuration with the template and return to the WebLOAD Wizard.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>Clear the To run this Load Template immediately, select this checkbox and then click Finish checkbox, and click Finish.</p> <p>You have now created a Load Template using WebLOAD Wizard.</p> </li> </ol>"},{"location":"console/quickstart/#setting-session-options","title":"Setting Session Options","text":"<p>Before you run the template you created, you can select options for verifications to execute during runtime. You can set WebLOAD to perform the following tasks:</p> <ul> <li>Collect data at the page level.</li> <li>Verify the time required to receive a page (default 20 seconds).</li> <li>Verify that the links in your Web application act as expected.</li> </ul> <p>When you select page verification, WebLOAD collects transaction data under the Title name, in this case http://www.webloadmpstore.com. You can observe statistics, such as the response times for this page, as the load increases. You can also gather performance data about the objects on a page by setting WebLOAD to collect object level data. For example, you can determine whether pictures or other embedded objects are taking a long time to download.</p> <p>To set options for these verification tests:</p> <ol> <li>In the WebLOAD Console, select Current Session Options in the Tools tab of the ribbon.</li> <li>Select the Functional Testing tab.</li> <li>Under Automatic Data Collection, select the All Pages checkbox.</li> <li> <p>Under Page Time, check the Verification checkbox, enter 20 in the Max Time field, and select Minor Error from the Severity Level drop-down list.</p> <p>If the time required to receive a page exceeds 20 seconds, a Minor Error message appears in the Log Window and the event is available in the WebLOAD Data Drilling report.</p> </li> <li> <p>Under Verification, select the Verification checkbox, and enter 5 in the % field.</p> <p>Five percent of the Virtual Clients will perform the selected verification tasks. This percentage lets you balance data gathering with the need to maintain performance during the test.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/quickstart/#running-the-test","title":"Running the Test","text":"<p>You are now ready to start the test. As you run the test, you can view the data gathered by WebLOAD in real time.</p> <p>To run the test:</p> <ol> <li> <p>Select Start Session in the Session tab of the ribbon or in the Quick Access toolbar.</p> </li> <li> <p>At the prompt, click Yes to save the template. Type the filename QuickStart.tpl, and click Save. You can now reuse this template, with its script, schedule and options at a later time.</p> <p>The test begins.</p> </li> </ol>"},{"location":"console/quickstart/#analyzing-test-results","title":"Analyzing Test Results","text":"<p>You can view test results in real time while the test is running or after the test session has completed. Once the test begins, the WebLOAD Wizard default report appears in the Results window.</p> <p></p>"},{"location":"console/quickstart/#viewing-the-results-in-real-time","title":"Viewing the Results in Real Time","text":"<p>Data on load size, hits per second, round time (one run through the script) and throughput (bytes per second) appear in the Chart View window, with a color legend underneath the chart. Each data point represents a 20 second slice. Data is gathered every 20 seconds and is then either averaged (for hits, round time and throughout) or summed (for load size). The graphs are all normalized to scale so they can be viewed in a single Chart View window. You can access several kinds of test details:</p> <ul> <li>Hover over any data point to see actual values.</li> <li>Select Dashboard Window in the Session tab of the ribbon to view a quick overview of the status of the test including the following:<ul> <li>Elapsed time</li> <li>Current load size (number of running Virtual Clients)</li> <li>Rounds executed</li> <li>Failed rounds</li> <li>Failed hits</li> <li>Hits per second</li> <li>Pages per second</li> <li>Throughput</li> </ul> </li> <li>Select Open Statistics in the Session tab of the ribbon. A Statistics tab appears in the results window. Scroll through the data and double-click a cell to drill-down to further detail.</li> </ul> <p>Each of these views opens in a new tab window. Close all windows except the Default Report tab.</p>"},{"location":"console/quickstart/#creating-integrated-reports","title":"Creating Integrated Reports","text":"<p>Create an Integrated report to view the results for additional metrics gathered by WebLOAD. This can be done while the current session is still running.</p> <p>To create an Integrated Report:</p> <ol> <li> <p>In the WebLOAD Console, select Integrated Report Manager in the Session tab of the ribbon.</p> <p>The Integrated Reports dialog box appears.</p> </li> <li> <p>In the Integrated Reports dialog box, click New.</p> </li> <li> <p>In the tree, expand the QuickStart::Total branch.</p> </li> <li> <p>Click the plus sign (\u201c+\u201d) adjacent to Hit Time to expand the branch. Then expand the Current Slice branch in the same way. Check the checkbox adjacent to Average (Current Value).</p> <p>Checkmarks appear next to Hit Time, Current Slice, and Average (Current Value).</p> </li> <li> <p>Expand Successful Hits and then expand Current Slice. Check the checkbox adjacent to Sum (Current Value).</p> </li> <li> <p>Expand Successful Connections and then expand Current Slice. Select the checkbox adjacent to Sum (Current Value).</p> </li> <li> <p>Scroll to the PM@your-system-name branch at the bottom of the tree (PM stands for performance monitor). Click the adjacent plus sign (\u201c+\u201d) to expand the branch. Expand Processor:%Processor Time:_Time and then expand Current Slice. Check the checkbox adjacent to Average (Current Value).</p> <p>This choice displays the statistics on CPU processor usage that were collected during the load test.</p> </li> <li> <p>Click OK.</p> <p>The Save dialog box appears.</p> </li> <li> <p>Type MyReport as the name of the report, click Predefined Report, and click OK. The new report is added to the list of Predefined Reports.</p> </li> <li> <p>To open the newly created report, select MyReport in the list of Predefined Reports, and click Open.</p> <p>In the WebLOAD Console Results window, the MyReport tab appears displaying the report data. The name of the tab is the name of the report you selected.</p> </li> <li> <p>If the test is still running, select Stop All in the Session tab of the ribbon.</p> </li> <li> <p>Select Save in the File tab of the ribbon to save the data from the test along with the template information (script, options and schedule). Specify a filename (QuickStart) and location and click Save.</p> </li> </ol>"},{"location":"console/quickstart/#viewing-results-with-webload-analytics","title":"Viewing Results with WebLOAD Analytics","text":"<p>WebLOAD Analytics creates analysis reports based on your session data. Even after you complete a session, you can use this data to create both predefined reports and custom reports of your own. You can create portfolios, which are collections of custom reports to run on other sessions. You can also export reports to PDF, Excel, RTF, HTML, or TXT formats to share with others, store with test plans, or mail to team members.</p> <p>To view results with WebLOAD Analytics:</p> <ol> <li> <p>Select WebLOAD Analytics in the Tools tab of the ribbon.</p> <p>Data for the last session saved is automatically selected and imported into the WebLOAD Analytics sessions database.</p> <p>WebLOAD Analytics automatically creates a new report based on the Summary Portfolio and generates the report. You can optionally perform any of the following:</p> <ul> <li>Modify the report \u2013 Select the Report Settings tab and edit the parameters you wish to change.</li> <li>Print the report \u2013 Select the Report View tab from the Reports area. Click  to open the Print dialog and print the report.</li> <li>Publish the report \u2013 Click  to publish your report as the default format specified in the Preferences window. Select a location and name for your report and click Save. The report is published in the format chosen and saved to the location specified in the Preferences window.</li> </ul> </li> <li> <p>Close WebLOAD Analytics.</p> </li> <li> <p>Close the WebLOAD Console.</p> <p>This concludes our Quick Start guide for WebLOAD. For additional information, refer to RadView\u2019s website at http://www.radview.com/support.</p> </li> </ol>"},{"location":"console/run_test_analyze_results/","title":"Running Tests and Analyzing Test Results","text":"<p>This chapter introduces you to WebLOAD Console\u2019s performance reports.</p>"},{"location":"console/run_test_analyze_results/#explanation-of-creation-and-analysis-of-performance-reports","title":"Explanation of Creation and Analysis of Performance Reports","text":"<p>Performance Reports are the product of your WebLOAD testing. WebLOAD Console collects all of the data for a wide variety of measurements. You can view and configure these reports through the Console while tests are running, or after the Load Session is completed.</p> <p>This material is divided into the following chapters:</p> <ul> <li>Running a Load Session  provides instructions for running a WebLOAD test session.</li> <li>Viewing the Log Window  describes the WebLOAD Log window.</li> <li>WebLOAD Console Performance Reports  provides instructions for creating and viewing WebLOAD Integrated Reports.</li> <li>WebLOAD Statistics Reports  describes the statistics reports provided by WebLOAD.</li> <li>Data Drilling  describes how to view all transactions failures and the reasons for them.</li> <li>Exporting Performance Reports  describes how to export all of the data displayed in the Integrated Reports and Statistics to HTML, Microsoft Excel and to Tab files.</li> <li>Performance Measurements Manager  describes how to configure the Performance Measurements Manager to collect data from different sources during the test.</li> </ul> <p>After completing this material, you will have the skills necessary to create and analyze all of the performance reports provided by WebLOAD.</p>"},{"location":"console/running_a_load_session/","title":"Running a Load Session","text":"<p>After configuring a Load Session, you can run your Load Session. This chapter describes the procedure for running your Load Session, and the way WebLOAD Console behaves while a Load Session is in progress.</p> <p>WebLOAD Console collects a complete set of test data while a Load Session is running. You can configure reports that include only the data needed. Reports can be configured during or after a test.</p> <p>WebLOAD Console run commands can start, pause, and stop your Load Session while it is in progress. These commands are detailed in this chapter.</p>"},{"location":"console/running_a_load_session/#starting-a-load-session","title":"Starting a Load Session","text":"<p>You can start a Load Session in one of the following ways:</p> <ul> <li>Click the Start Session icon in the Quick Access toolbar.</li> <li>Click Start Session in the Session tab of the ribbon.</li> <li>From the WebLOAD Wizard - Finish dialog box, select the checkbox to run the Load Session immediately and click Finish.</li> <li>From the Goal-Oriented Test - Finish dialog box, select the checkbox to run the Load Session immediately and click Finish.</li> </ul>"},{"location":"console/running_a_load_session/#running-a-load-session-from-the-system-memory","title":"Running a Load Session from the System Memory","text":"<p>You can run a test from the configuration parameters in your system memory, without saving the Load Session. If you start running a Load Session without saving the Load Session configuration, you are prompted to save the Load Template.</p> <p>The following message box appears.</p> <p></p>"},{"location":"console/running_a_load_session/#saving-the-current-load-template","title":"Saving the Current Load Template","text":"<p>To save the current Load Template:</p> <ul> <li>Click Yes.</li> </ul> <p>The test session definition is saved to a Load Template (*.tpl) file.</p>"},{"location":"console/running_a_load_session/#launching-webload-console-through-the-command-line-interface","title":"Launching WebLOAD Console through the Command Line Interface","text":"<p>You can perform load testing through a command line interface. You can enter the WebLOAD Console launch command into a batch file or into an external script and WebLOAD Console will run directly, without user intervention, using the parameters specified.</p> <p>Note: You can also perform unattended WebLOAD Console testing at prescribed times by running WebLOAD in Jenkins . Jenkins CI is a Continuous Integration server that is used by Agile development teams to run their builds, tests and deployments as well as their performance tests if possible. Jenkins is extendable by means of plugins. As of WebLOAD 10.1, a WebLOAD plugin is available for Jenkins. For more information, refer to the WebLOAD Automation User Guide</p> <p>To run WebLOAD Console through the command line interface:</p> <p>Enter the WebLOAD.exe command together with a series of optional parameters (described below) into your external script to automatically launch a WebLOAD test. When your script runs, the executable file will invoke WebLOAD Console and run the specified test according to the specified parameters.</p> <p>Note: Verify that the script used with the template specified, and any included files, are accessible to the Load Template or Load Session file that will be run.</p>"},{"location":"console/running_a_load_session/#syntax","title":"Syntax","text":"<p>Use the following syntax to define the parameters for running a WebLOAD test through a command line interface:</p> <p><code>WebLOAD.exe [&lt;file name to open&gt;] [&lt;file name to save&gt;] [&lt;flags&gt;] [&lt;time&gt;] [/ag &lt;script name&gt;]</code></p>"},{"location":"console/running_a_load_session/#parameters","title":"Parameters","text":"<p>When running a test invoked by the executable, you can specify the following parameters:</p> Parameter Description Comments File name to open The name of the <code>*.tpl</code> or <code>*.ls</code> file (Load Template or Load Session file) to run. Optional parameter File name to save The name of the <code>*.ls</code> file containing the test data. This file will be saved in the current directory unless otherwise specified. Optional parameter Flags <p>- /ar \u2013 Automatically run the WebLOAD test without waiting for user input. If this flag is not specified, the Console is called up with the specified Load Template/Load Session but the test is not automatically run. The system waits for user input.</p><p>- /ar <code>&lt;time&gt;</code> \u2013 Automatically run the test for the length of time specified in <code>&lt;time&gt;</code></p><p>- /vc \u2013 The number of Virtual Client licenses to allocate when using WebRM License Server.</p><p>- /pc \u2013 The number of Probing Client licenses to allocate when using WebRM License Server.</p><p>- /rc <code>&lt;results_file_name&gt;</code> \u2013 Place the results in the specified file (an XML file).</p> Optional parameter /ag"},{"location":"console/set_global_opt/","title":"Setting Global Options","text":"<p>Global Options enable you to modify WebLOAD Console defaults to your specifications. All WebLOAD Console tests use these defaults.</p>"},{"location":"console/set_global_opt/#how-to-set-global-options","title":"How to Set Global Options","text":"<p>This section guides you through the process of setting WebLOAD Console global</p> <p>options and introduces you to some of WebLOAD Console\u2019s more advanced features. Global options can be modified at any time from the WebLOAD Console.</p> <p>To set global options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> <p></p> <p>The Global Options dialog box opens.</p> <p>The Global Options dialog box contains the following tabs:</p> <ul> <li> <p>General</p> </li> <li> <p>Export</p> </li> <li> <p>File Locations</p> </li> <li> <p>Data Drilling</p> </li> <li> <p>Advanced</p> </li> <li> <p>Database</p> </li> <li> <p>Notification Mail</p> </li> <li> <p>Dynatrace</p> </li> <li> <p>Defect Tracking</p> </li> </ul> </li> <li> <p>Select the desired tab, and modify as many of the options as you need.</p> </li> <li>Select another tab and modify its options, if necessary.</li> <li>Click OK to accept the modifications, or Cancel to reject them, and exit the Global Options dialog box.</li> </ol>"},{"location":"console/set_global_opt/#the-general-tab","title":"The General Tab","text":"<p>The General tab lists a number of options that you can modify to facilitate your work in test sessions.</p> <p>To access the General tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,      -Or-      Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> <p></p> </li> </ol>"},{"location":"console/set_global_opt/#setting-the-autosave-file-name-default-location","title":"Setting the Autosave File Name Default Location","text":"<p>WebLOAD Console performs fast saves while running a test. This option enables you to specify the filename and location of the autosave (backup) file. It is recommended to save files to a central location where they are available to all users.</p> <p>To set the Autosave file name default location:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> </li> <li>Type or select the desired file name and location in the Auto Save File Name field.</li> <li>Click OK.</li> </ol>"},{"location":"console/set_global_opt/#setting-the-reports-options","title":"Setting the Reports Options","text":"<p>The Reports options enable you to define the:</p> <ul> <li>Interval between each reported sample (referred to as the Statistics reporting resolution).</li> <li>Default time range to be displayed as the x-axis of the Integrated Report chart (out of the total time span of the Load Session).</li> <li>The maximum number of points in a chart. This is intended for improving charts performance during execution. By default, the maximum number is limited, but you can change it to unlimited. Note that even when the number is limited, all statistics are saved in the WebLOAD statistics data base; following execution, you can change the maximum number of points to unlimited, and re-open the chart to display all points.</li> </ul> <p>To set the Reports options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> </li> <li> <p>In the Statistics reporting resolution field, type or select the desired statistics reporting resolution (in increments of 10 seconds). The minimum allowed value is one second.</p> <p>Note: The default reporting interval is 20 seconds. When running long test sessions, it is a good idea to increase this interval. Reducing this interval to lower than 10 seconds might result in high consumption of your machine\u2019s resources.</p> </li> <li> <p>In the chart time window width field, type or select the desired time width of the chart window. The default time width is 1000 seconds.</p> </li> <li>In the chart max number of points field, type or select the maximum number of points displayed in a chart during execution. To specify an unlimited number, enter the value 0. The default number of points is 2160.</li> <li>In the Transaction Dashboard max number of series field, type or select the maximum number of series in the Transactions Dashboard report. The default number of series is 20.</li> </ol>"},{"location":"console/set_global_opt/#setting-goal-oriented-test-options","title":"Setting Goal-Oriented Test Options","text":"<p>The Goal-Oriented Test increases the load generation until your Web application performance falls below the profile you have defined.</p> <p>The performance parameters that you can define are:</p> <ul> <li>Goals reached delay \u2012 the number of samples required to declare the Goal- Oriented Test goals as achieved. The Goal-Oriented Test declares the defined goals reached only after receiving the desired goal results in several samples.</li> <li>Acceleration samples \u2012 the number of sample measurements to read before automatically accelerating the load if the Goal-Oriented Test goal has not been reached by then.</li> </ul> <p>To set Goal-Oriented Test options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> <p>In the Goals reached delay field, type or select the number of samples to read before proclaiming goals reached.</p> </li> <li> <p>In the Acceleration point measurements field, type or select the number of samples to read before accelerating the load.</p> </li> </ol>"},{"location":"console/set_global_opt/#setting-webload-console-timeout-values","title":"Setting WebLOAD Console Timeout Values","text":"<p>To set WebLOAD Console Timeout values:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> </li> <li>In the Start Session Timeout field, type or select the amount of time the Console should attempt to contact a host at the start of a test session (default: 30 seconds).</li> <li>In the Terminate Session Timeout field, type or select the amount of time the Console should attempt to contact a host at the close of a test session (default: 20 seconds).</li> </ol>"},{"location":"console/set_global_opt/#setting-the-throttle-control-max-value","title":"Setting the Throttle Control Max Value","text":"<p>The throttle control utility enables you to dynamically modify the number of Virtual Clients participating in a test during runtime.</p> <p>To set the Throttle Control max value:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> </li> <li>In the Throttle max value field, type or select the maximum number of Virtual Clients that can participate in the test.</li> </ol>"},{"location":"console/set_global_opt/#setting-the-log-message-options","title":"Setting the Log Message Options","text":"<p>Log messages generated by the Console, the JavaScript compiler, and any user messages programmed in the script and detected by WebLOAD Console during runtime are displayed in the Log Window. For further information on Log Messages, see Viewing the Log Window .</p> <p>To set the log message options:</p> <ul> <li>In the Stop Session after     log messages field, type or select the maximum number of log messages to read before stopping WebLOAD Console,</li> </ul> <p>-Or-</p> <p>In the Stop sending log messages after    log messages field, type or select the maximum number of log messages to record. WebLOAD Console will continue the Load Session but stop recording log messages. The maximum number of log messages is 32767.</p> <p>Note that log messages can be of type Info, Error, or Warning. Even if you restrict the number of total log messages, you may still wish to see Error messages.</p> <p>Therefore you can separately set the maximum number of error messages to record by typing or selecting a number in the Stop sending error messages after another</p> <p>messages field. When that number is reached, WebLOAD Console will continue the Load Session but stop recording error messages.</p> <p>-Or-</p> <p>Set WebLOAD Console to send an unlimited number of log messages.</p>"},{"location":"console/set_global_opt/#setting-the-statistic-view-settings","title":"Setting the Statistic View Settings","text":"<p>To set the Statistic View settings:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General (default) tab.</p> </li> <li> <p>Select Basic Statistics view to:</p> <ul> <li>Access only the Current Value for each Current Slice measurement in the Integrated Report.</li> <li>Display the Min, Max, Average, and Count values for in the Test Summary. </li> </ul> <p>The Basic Statistics view is the default setting.</p> <p>-Or-</p> <p>Select Advanced Statistics view to display all values available for the current slice and test summary in the WebLOAD Integrated Reports. These values are: Min, Max, Average, Count, Sum, and STDev.</p> </li> <li> <p>Check the Load generator statistics checkbox (checked by default) to display the statistics for each Load Generator separately in Integrated Reports.</p> </li> </ol>"},{"location":"console/set_global_opt/#the-export-tab","title":"The Export Tab","text":"<p>WebLOAD reports can be exported to other programs as Tab files (tab-delimited text files). Export options, such as the default Tab file viewer, can be set through the Export dialog box.</p> <p>To access the Export tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Export tab.</p> </li> </ol> <p></p>"},{"location":"console/set_global_opt/#setting-the-statistics-resolution-to-export","title":"Setting the Statistics Resolution to Export","text":"<p>The statistics exporting resolution is the frequency of the number of samples to export when exporting WebLOAD reports. For example, if 1 is entered for this value, WebLOAD Console exports every sample. If 2 is entered for this value, WebLOAD Console exports every second sample.</p> <p>To set the Statistics resolution to export:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Export tab.</p> </li> <li>Type or select the desired exporting resolution in the Export every statistics reporting field.</li> </ol> <p>When deciding the value for this option you must consider the setting selected for the sampling. If, for example, the Statistics reporting resolution (set through Global Options \u0086 General) is set to 20 seconds and Export every statistics reporting is set to 2, the measurements exported reflect a sampling every 40 seconds. They are the</p> <p>measurements gathered at the intervals 20, 60, 100, 140\u2026</p> <p>This option is useful in cases where a large amount of data results from a long test session.</p>"},{"location":"console/set_global_opt/#setting-the-export-to-tab-file-settings","title":"Setting the Export to Tab File Settings","text":"<p>WebLOAD reports can be exported as Tab files (tab-delimited text files).</p> <ul> <li>Open Viewer When Exporting Tab Files: When the Open viewer when exporting option is enabled (default), WebLOAD Console launches the program which serves as the default viewer (e.g., Notepad, Excel) for an exported Tab file. The default viewer is defined in the Tab File default viewer field (see below).</li> <li>Tab File Export Settings: These options define the Tab file that can be exported to other programs.</li> </ul> <p>To define the Tab File for export:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Export tab.</p> </li> <li> <p>In the Tab File delimiter field, enter the delimiter to be used in the Tab files that contain the WebLOAD Console statistical data for export.</p> <p>Any string can be used as a delimiter.</p> <ul> <li>To use a tab character as a delimiter, enter \\t.</li> <li>To use a new line as a delimiter, enter \\r or \\n.</li> <li>To use a space as a delimiter, enter \\s.</li> </ul> </li> <li> <p>In the Tab File default directory field, set the default directory where the Tab files should be saved.</p> </li> <li> <p>In the Tab file default viewer field, specify which program should serve as the default viewer (e.g., Notepad, Excel) for an exported Tab file.</p> </li> </ol>"},{"location":"console/set_global_opt/#export-to-html-settings","title":"Export to HTML Settings","text":"<p>WebLOAD reports can be exported as HTML files.</p> <ul> <li>Open Viewer When Exporting HTML Files: When the Open viewer when exporting option is enabled (default), WebLOAD Console launches the program, which serves as the default viewer.</li> <li>HTML Export Settings: These options define the HTML files that can be exported to other programs.</li> </ul> <p>To define the HTML files for export:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Export tab.</p> </li> <li>In the HTML File default directory field, set the default directory where the HTML files should be saved.</li> </ol>"},{"location":"console/set_global_opt/#the-file-locations-tab","title":"The File Locations Tab","text":"<p>This dialog box lists the default locations of various WebLOAD Console files, such as script files. You can modify these locations if you wish.</p> <p>To access and configure the File Location tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the File Locations tab.</p> <p></p> <p>WebLOAD Console\u2019s various file types are described in the following table:</p> File Type Description Session, Scripts and Templates Session, Script, and Template files created by WebLOAD Console. These files have the following extensions: .wls, .wlp, and .tlp. User Include Files <p>External text files included in the script by using the</p><p>IncludeFile function.</p> User Copy files <p>Copied files loaded into the script by using the CopyFile function. These files can be all file types. The most commonly used files are .txt files used with the GetLine function and .dat files used with the wlHttp.Post and Get commands. The CopyFile function searches in various system directories in addition to the location specified in the tab.</p><p>The load engine first looks for the file to be copied in the default User Copy Files directory. If the file is not there, the file request is handed over to WebLOAD Console, which searches for the file using the following search path order:</p><p>1. If a full path name has been hardcoded into the CopyFile command, the system searches the specified location. If the file is not found in an explicitly coded directory, the system returns an error code of File Not Found and will not search in any other locations.</p><p>Note: It is not recommended to hardcode a full path name, since the Sscript will then not be portable between different systems. This is especially important for networks that use both UNIX and Windows systems.</p><p>2. Assuming no hardcoded full path name in the script code, the system looks for the file in the current working directory, the directory from which WebLOAD Console was originally executed.</p><p>3. Finally, if the file is still not found, the system searches for the file sequentially through all the directories listed in the File Locations tab.</p> User PostData Files Data files created when the PostData recording options specify to record the data in a data file. The system first searches for the data files in the directory in which the script is located, then, if not found, in the current working directory, and lastly, in the folder defined in the default User PostData Files directory specified in this dialog box. User Certificate Files Certificate files include files used to emulate a server certificate for the user client application and list the trusted certificate authorities. By default this is the certificate supplied with the WebLOAD Console installation. The file extension is .pem. </li> <li> <p>Select the item whose default location you want to change, and click Modify. The Modify Location dialog box opens.</p> </li> <li> <p>Select a new default location and click OK.</p> <p>The dialog box closes and the new location is listed.</p> </li> </ol>"},{"location":"console/set_global_opt/#the-data-drilling-tab","title":"The Data Drilling Tab","text":"<p>Data Drilling enables you to display a detailed description of all user-defined and named transactions to the instance level. An instance is a single occurrence of a user- defined transaction in a given round. Data Drilling is only enabled if the Collect instances checkbox is selected.</p> <p>To access and configure the Data Drilling tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Data Drilling tab.</p> <p></p> </li> <li> <p>Set the Data Drilling options:</p> <ol> <li> <p>Click the Collect instances checkbox (default) to enable Data Drilling.</p> </li> <li> <p>Specify the limit of collected instances in the Instance limit field. The default limit is 1000.</p> </li> </ol> <p>Note: If you disable the Collect instances checkbox, the Data Drilling options of the Functional Testing tab are also disabled.</p> </li> <li> <p>Click the Show error details checkbox to enable viewing full details of HTTP errors. For more information, see Full View of HTTP Errors .</p> </li> </ol>"},{"location":"console/set_global_opt/#full-view-of-http-errors","title":"Full View of HTTP Errors","text":"<p>This feature enables viewing the full details of HTTP errors that occurred. The feature is enabled by selecting the Show error details checkbox in the Data Drilling tab of the Global Options window.</p> <p>When the feature is enabled, you can view full details of HTTP errors as follows.</p> <ol> <li> <p>In the Log Window, double click an error message. The error is displayed in page view.</p> <p></p> </li> <li> <p>To view the HTTP Headers (Request and Response) relating to the error, click HTTP Headers.</p> <p></p> </li> <li> <p>To view the HTML source of the error message, click HTTP View.</p> <p></p> </li> </ol>"},{"location":"console/set_global_opt/#the-advanced-tab","title":"The Advanced Tab","text":"<p>Load Generator spawning sets the number of threads at which WebLOAD Console should automatically spawn Load Generators. Spawning Load Generators improves performance.</p> <p>To access and configure the Advanced tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Advanced tab.</p> <p></p> </li> <li> <p>Under Automatic Load Generator Spawning, click Enable Load Generator Spawning (default).</p> </li> <li>Type or select the number of threads at which WebLOAD Console should automatically spawn Load Generators for the appropriate operating systems.</li> <li>Click OK.</li> </ol> <p>Notes:</p> <p>Only client threads running within a single spawned process, on the same Load Generator, are able to share global variables. So if, for example, you have spawning set to 100 and you are running a total of 300 threads, you are actually running three spawned processes on three separate Load Generators.</p> <p>Only client threads running within a single spawned process, on the same Load Generator, can be synchronized.</p>"},{"location":"console/set_global_opt/#the-database-tab","title":"The Database Tab","text":"<p>The Database option enables you to instruct the Console to write all session data to a database during session execution. This is useful if you want to be able to view and analyze the session in the Web Dashboard (refer to the WebLOAD\u2122 Web Dashboard User Guide).</p> <p>To access and configure the Database tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Database tab.</p> <p></p> </li> <li> <p>To instruct the Console to write to the database all session data during session execution:</p> <ol> <li>Check the Insert statistics into Postgres database during the session checkbox.</li> <li>In the Database host name field, enter the name of the server hosting the PostgreSQL database.</li> <li>In the Database port field, enter the port number through which to connect to the server.</li> <li>In the Database name field, enter the name of the database.</li> <li>In the User name and User password fields, enter the credentials for accessing the database</li> </ol> </li> <li> <p>Click Test configuration to test whether the Console can connect to the database based on the information you entered. A message is returned, indicating whether the connection attempt succeeded.</p> </li> <li>Click OK.</li> </ol>"},{"location":"console/set_global_opt/#the-notification-mail-tab","title":"The Notification Mail Tab","text":"<p>The Notification Mail options enable you to configure the settings by which SLA notification emails are sent. An SLA notification email is optionally sent when a certain condition is met that requires special attention. For more information on defining SLA notification email conditions, see The SLA Manager .</p> <p>To access and configure the Notification Mail tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Notification Mail tab.</p> <p></p> </li> <li> <p>Under Mail Server Properties, enter a value in the Mail Server Name field.</p> <p>You can click Test configuration to test whether the Console can connect to the mail server based on the information you entered.</p> </li> <li> <p>Under ESMTP Authentication, select No Authentication, Use Authentication Login or Use NTLM authentication. If you select Use Authentication Login or Use NTLM authentication, enter an Account and Password.</p> </li> <li>Under Notification Mail Properties, enter a value for the From Mail and To Mail fields.</li> <li>Click OK.</li> </ol>"},{"location":"console/set_global_opt/#the-dynatrace-tab","title":"The Dynatrace Tab","text":"<p>The Dynatrace options enable you to integrate WebLOAD with Dynatrace. For information on using Dynatrace in conjunction with WebLOAD, refer to the</p> <p>Integrating with Dynatrace appendix.</p> <p>To access and configure the Dynatrace tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Dynatrace tab.</p> <p></p> </li> <li> <p>Select the Enable Dynatrace checkbox if you wish to integrate WebLOAD with Dynatrace.</p> </li> <li>If you wish to change the default system profile in which to view points of interest in Dynatrace, refer to Specifying the Dynatrace System Profile .</li> </ol>"},{"location":"console/set_global_opt/#the-defect-tracking-tab","title":"The Defect Tracking Tab","text":"<p>The Defect Tracking options enable you to set the tracking system to use for tracking defaults.</p> <p>To access and configure the Defect Tracking tab options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the Defect Tracking tab.</p> <p></p> </li> <li> <p>Select the tracking system to use. If you select a generic tracking system, enter the location to save the defects.</p> </li> </ol>"},{"location":"console/set_global_opt/#tracking-defects","title":"Tracking Defects","text":"<p>After selecting the system to use when tracking defects, you can add an Issue that records problems that need to be tracked in the database. When you submit an Issue, you can add notes or files to it.</p>"},{"location":"console/set_global_opt/#accessing-the-report-defect-dialog-box","title":"Accessing the Report Defect Dialog Box","text":"<p>To access the Report Defect dialog box:</p> <ol> <li> <p>Right click inside the Log Window, and select Report Defect.</p> </li> <li> <p>If Merant\u2019s PVCS defect tracking system was selected in the Defect Tracking tab, the PVCS Tracker Project Login dialog box is displayed.</p> <p></p> <ol> <li>Enter your username and password.</li> <li>Click OK.</li> </ol> <p>The Report Defect dialog box opens with three tabs:</p> <ul> <li>General tab</li> <li>Notes tab</li> <li>Attached Files tab</li> </ul> </li> </ol>"},{"location":"console/set_global_opt/#entering-a-new-record","title":"Entering a New Record","text":"<p>Use the General tab to enter a new record into the defect tracking project database.</p> <p>To enter a new record into the defect tracking project:</p> <ol> <li> <p>Select the General tab. The General tab is displayed.</p> <p></p> </li> <li> <p>Enter a title for the record in the Title field and a description of the record in the Description field.</p> <p>Note: The Title field is required; all other fields are optional.</p> </li> <li> <p>Enter the information in the remaining fields.</p> </li> <li>If you want to clear the form and reset the form fields to their default values, click Clear.</li> </ol>"},{"location":"console/set_global_opt/#adding-modifying-and-deleting-a-note","title":"Adding, Modifying, and Deleting a Note","text":"<p>You can add, modify, or delete a note that indicates the status of a record.</p> <p>To add, modify, or delete a note:</p> <ul> <li>Select the Notes tab. The Notes tab is displayed.</li> </ul> <p></p> <p>To add a note:</p> <ol> <li>Click Add. The Add Note dialog box is displayed.</li> <li>Enter a Note Title and Note Text.</li> <li>Click OK. The note title is added to the list in the Title field of the Notes tab.</li> </ol> <p>To modify a note:</p> <ol> <li>Select the note in the Notes section of the Notes tab.</li> <li>Click Modify. The Modify dialog box is displayed.</li> <li>Make the desire changes and click OK. </li> </ol> <p>To delete a note:</p> <ol> <li>Select the note in the Notes section of the Notes tab.</li> <li>Click Delete. A confirmation dialog box is displayed.</li> <li> <p>Click OK. The note title is removed from the list in the Title field of the Notes tab.</p> <p>Use the Add, Modify, and Delete buttons to add, edit, or delete Note entries, as illustrated in the preceding figure.</p> </li> </ol>"},{"location":"console/set_global_opt/#attaching-files","title":"Attaching Files","text":"<p>You can attach files relevant to the record.</p> <p>To attach or delete files:</p> <ol> <li> <p>Select the Attached Files tab. The Attached Files tab is displayed.</p> <p></p> <p>Attach a file:</p> <ol> <li>Click Add. The Add Attached Files dialog box is displayed.</li> <li>Select the desired file.</li> <li>Click Open. The selected file is displayed on the Attached Files tab.</li> </ol> <p>Delete a file:</p> <ol> <li>On the Attached Files tab, select the file you want to delete.</li> <li>Click Delete. A confirmation dialog box is displayed.</li> <li>Click OK. The selected file is removed from the Attached Files tab.</li> </ol> </li> <li> <p>Click Submit to submit the record.</p> </li> </ol>"},{"location":"console/set_global_opt/#the-sla-manager","title":"The SLA Manager","text":"<p>The Service Level Agreement (SLA) Manager allows you to define conditions (SLA breaches) under which error messages should appear in the WebLOAD Console, and optionally an email notification sent as well. Conditions include cases where a specified Measurement value exceeds, equals, or drops down to less than a specified threshold value. For more information about configuring the email settings by which notification mail is sent, see The Notification Mail Tab .</p>"},{"location":"console/set_global_opt/#accessing-the-sla-manager","title":"Accessing the SLA Manager","text":"<p>To access the SLA Manager:</p> <ul> <li> <p>Select SLA Manager from the Home tab of the ribbon.</p> <p>The SLA Manager dialog box appears. The currently defined SLA rules are listed in the dialog box. If no SLA rules are defined, the list is empty.</p> <p></p> </li> </ul>"},{"location":"console/set_global_opt/#configuring-the-sla-manager-rules-and-actions","title":"Configuring the SLA Manager Rules and Actions","text":"<p>To configure the SLA Manager options:</p> <ol> <li> <p>In the SLA Manager dialog box, click New to define a new SLA rule, or select an existing SLA rule and click Edit to modify the existing rule.</p> <p>The Rules and Actions dialog box appears for defining the SLA rule.</p> <p>An SLA rule consists of one or more conditions, logically ANDed or ORed, as well as the actions to be taken (= error message and notifications to be sent) when the rule conditions are met.</p> <p>Each line in the Rule Definition table defines one rule condition.</p> <p></p> </li> <li> <p>If you are creating a new SLA rule, enter the rule name in the Name field.</p> </li> <li> <p>To add a rule condition, click Add in the Add Notification Rules and Actions dialog box. The Goal Definition dialog box appears, listing all the WebLOAD Console built-in measurements in a tree structure. The measurements are the building blocks of SLA rule conditions.</p> <ol> <li> <p>Optionally add a previously-defined custom measurement of type Timer to the tree, as follows:</p> <ul> <li> <p>Click Add Timer. A new node appears in the Goal Definition dialog box, with an empty name field.</p> </li> <li> <p>Enter the timer\u2019s name in the name field.</p> </li> </ul> </li> <li> <p>Optionally add to the tree, measurements based on a previously-defined transaction (which you created when editing the script in the WebLOAD Recorder), as follows:</p> <ul> <li> <p>Click Add Transaction.</p> </li> <li> <p>In the Add Transaction dialog box that appears, enter the transaction name.</p> </li> </ul> <p>Seven measurements, based on the specified transaction, are automatically added to the tree. For example, if you add the previously-defined \u201cLogin\u201d transaction, the following seven measurements are added.</p> <p></p> </li> <li> <p>To create rule conditions, select the checkboxes adjacent to each of the measurements you wish to include in the SLA rule. </p> <p>For example, to define an SLA rule condition that response time not exceed 5 seconds, select the checkbox adjacent to Response Time. </p> <p>Note: A gray circle next to a measurement indicates that no default subcomponents are defined (the upper level component cannot be selected). To select subcomponents, click the + to expand the tree.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>WebLOAD Console closes the Goal Definition dialog box, and in the Rule and Actions dialog box opens a \u201ccondition\u201d row for each of the selected measurements.</p> <p></p> </li> <li> <p>For each condition, click in the Op field and select an operator from the drop-down list.</p> </li> <li>For each condition, click in the Value field and type a threshold value for the condition.</li> <li>When more than one condition is defined, you can the logical connection between the conditions:<ul> <li>Select OR to require only one condition to be true for the rule to be met.</li> <li>Select AND to require all conditions to be true for the rule to be met.</li> </ul> </li> <li> <p>In the Message section under the Action Definition section of the Rules and Actions dialog box, define the log message to be displayed in the log if the SLA rule conditions are met:</p> <ul> <li> <p>Specify the type of log message to display: info, warning, error or fatal error. Note that a fatal error also causes test execution to stop.</p> </li> <li> <p>Optionally specify the message text.</p> </li> </ul> <p>If you specify the message text, the log will display the specified text.</p> <p>If you do not specify the message text, the log message will display the default SLA message format which begins with \u201cSLA <code>&lt;SLA rule name&gt;</code> failed\u201d.</p> <p>Note that a log message will appear in the log every time the SLA rule conditions are met, even if they are met multiple times in the course of load test execution.</p> </li> <li> <p>In the Mail section under the Action Definition section of the Rules and Actions dialog box, optionally define the email notification to be sent out if the SLA rule conditions are met:</p> <ul> <li> <p>Check the Send email checkbox if you want an email notification to be sent.</p> </li> <li> <p>Specify the email sender in the From Mail field.</p> </li> <li> <p>Specify the email recipient in the To Mail field.</p> </li> <li> <p>Specify the email subject line in the Subject field.</p> </li> <li> <p>Specify the message text body in the Message Body field.</p> </li> </ul> <p>Note that an email notification is sent only once if the SLA rule conditions are met, even if they are met multiple times in the course of load test execution.</p> </li> <li> <p>Click OK to save your settings and return to the main SLA Manager dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/","title":"Setting Script Options","text":"<p>This chapter guides you through the process of setting WebLOAD Console default script options, individual script options, and Session script options, using some of WebLOAD Console\u2019s more advanced features. Script Options enable you to modify scripts to your specifications, and define the way WebLOAD Console behaves during runtime. Setting script options allows you to emulate different types of user activity. For example, you can set WebLOAD Console to emulate users connecting to your application at different modem speeds.</p> <p>Notes:</p> <p>Script options, set through the Console, are not uploaded when editing the script in WebLOAD Recorder. Debugger options are available (in WebLOAD Recorder) for debugging the script in WebLOAD Recorder.</p> <p>Changes you make to the script through the Console override the settings for the script created through WebLOAD Recorder. </p>"},{"location":"console/set_script_options/#about-script-options","title":"About Script Options","text":"<p>Script options allow you to configure WebLOAD Console behavior to emulate different types of user activity and ensure that the Virtual Clients running the test accurately emulate real users accessing your Web application.</p> <p>There are three modes for modifying script settings. Most of the Options tabs described in this section can be edited in any of these three modes. Option tabs that are only available through a specific mode are noted in the tab description.</p> <p>Note: To modify script options, you must be in Edit mode (click Edit Template in the Session tab of the ribbon or select Edit Template from the Console System button).</p> <p>The three option modification modes are:</p> <ul> <li>Default Options \u2012 When building a new template or session, or editing an existing one, each new single script or script participating in a Mix is automatically assigned these defaults.</li> </ul> <p>To activate the Default Options from the WebLOAD Console:</p> <ul> <li> <p>Click Default Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Right-click the root node (Load Session node) and select Default Options,</p> <p>-Or-</p> <p>Select Default Options from the Console System button.</p> </li> <li> <p>Current Session Options \u2013 You can modify script options for all scripts participating in a specific Load Session or part of a specific Load Template without changing the default settings for all Sessions.</p> </li> </ul> <p>To activate this mode:</p> <ul> <li> <p>Click Current Session Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Right-click the root node (Load Session node ) and select Current Session Options,</p> <p>-Or-</p> <p>Select Current Session Options from the Console System button.</p> <p>Modify the defaults as desired. All participating scripts currently listed in the Session Tree are automatically assigned the modified default values.</p> </li> <li> <p>Script Options \u2012 You can modify script options for an individual script within a new or existing Load Session or Load Template.</p> </li> </ul> <p>To activate this mode:</p> <ul> <li> <p>Click Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Right-click the desired script in the Session Tree and select Script Options,</p> <p>-Or-</p> <p>Select Script Options from the Console System button.</p> <p>The modifications you make here only affect that specific script.</p> </li> </ul>"},{"location":"console/set_script_options/#modifying-script-options","title":"Modifying Script Options","text":"<p>The Options dialog boxes are identical for all three modes, although they are activated differently, as described in About Script Options .</p> <p>The Options dialog boxes include the following tabs:</p> <ul> <li>SSL tab (see Setting the SSL Options </li> <li>Sleep Time Control tab (see Setting Sleep Time Playback Settings </li> <li>Terminate Round (see Configuring Round Termination Settings </li> <li>Browser Cache tab (see Setting the Browser Cache </li> <li>Browser Parameters tab (see Configuring Browser Parameter Settings </li> <li>HTTP Parameters tab (see Setting the HTTP Parameters </li> <li>Authentication tab (see Setting Authentication </li> <li>Connection tab (see Connection Speed Settings </li> <li>Diagnostic tab (see Diagnostic Settings </li> <li>Functional Testing tab (see Functional Testing Options </li> <li>Pass / Fail Definition tab (see Pass / Fail Definition Settings  (only edited through the Default and Current Session Options dialog boxes)</li> <li>Reset Mechanism tab (see Configuring Reset Mechanism Settings  (only edited through the Default and Current Session Options dialog boxes)</li> <li>Java Options tab (see Configuring the Java Options  (only edited through the Default and Current Session Options dialog boxes)</li> </ul> <p>To modify script or session configuration options:</p> <ol> <li>Select the desired tab.</li> <li>Modify the options as needed.</li> <li>Select another tab to modify additional options.</li> <li>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/ Current Session Options dialog box.</li> </ol>"},{"location":"console/set_script_options/#setting-the-ssl-options","title":"Setting the SSL Options","text":"<p>To access and configure the SSL tab options:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the SSL tab.</p> <p></p> </li> <li> <p>Check SSL Bit Limit and select the highest SSL Bit Limit available between the Virtual Clients and the server.</p> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/#setting-sleep-time-playback-settings","title":"Setting Sleep Time Playback Settings","text":"<p>Sleep time is a pause to simulate the intermittent activity of real users. WebLOAD Console enables you to set a script to execute with the sleep times recorded in the script, random sleep times or no sleep times at all.</p> <p>To set sleep time playback settings:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Sleep Time Control tab.</p> <p></p> </li> <li> <p>In Playback Sleep Time, specify the type of sleep to use when playing back the script:</p> <ul> <li> <p>Select Sleep time as recorded (default) to run the script with the delays corresponding to the natural pauses that occurred when recording the script. Max time provides an option of restricting playback of length sleep times, to no more than a specified number of seconds.</p> </li> <li> <p>Select Ignore recorded sleep time to eliminate any pauses when running the script and run a worst-case stress test.</p> </li> <li> <p>Select Set random sleep time and set the range (minimum and maximum) of delays to represent a range of users.</p> </li> <li> <p>Select Set sleep time deviation and set which percentage of the recorded sleep time to use when running the script.</p> </li> </ul> </li> <li> <p>In Sleep Time in Transactions, specify how to calculate and display transaction timers:</p> <ul> <li> <p>Transaction timers include sleep time (\u2018Transaction Time\u2019) \u2013 If you select this option, then if a transaction includes sleep commands, by default the sleep times will be included in the transaction time. The transaction time measurement will be called \u201cTransaction <code>&lt;transaction name&gt;</code> Time\u201d.</p> </li> <li> <p>Transaction timers exclude sleep time (\u2018Transaction Net Time\u2019) \u2013 If you select this option, then if a transaction includes a sleep command, by default the sleep time will be excluded from the transaction time. The transaction time measurement will be called \u201cTransaction <code>&lt;transaction name&gt;</code> Net Time\u201d.</p> </li> <li> <p>Transaction timers exclude sleep time, but named \u2018Transaction Time\u2019 \u2013 If you select this option, then if a transaction includes a sleep command, by default the sleep time will be excluded from the transaction time. However, the transaction time measurement will be called \u201cTransaction <code>&lt;transaction name&gt;</code> Time\u201d (without the word \u201cNet\u201d in the parameter name).</p> </li> <li> <p>Both timers \u2013 including and excluding sleep time \u2013 If you select this option, then if a transaction includes a sleep command, by default, two timers will be displayed. One timer, called \u201cTransaction <code>&lt;transaction name&gt;</code> Time\u201d, will show the transaction time if sleep time is included in the transaction time. The second timer, called \u201cTransaction <code>&lt;transaction name&gt;</code> Net Time\u201d, will show the transaction time if sleep time is excluded from the transaction time.</p> </li> </ul> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/ Current Session Options dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/#configuring-round-termination-settings","title":"Configuring Round Termination Settings","text":"<p>The WebLOAD Recorder enables you to define round termination settings.</p> <p>To define the round termination behavior:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Terminate Round tab.</p> <p>The Terminate Round tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>In the Terminate round options section, you can specify whether to complete a round even if a Stop command is received, as described in the following table.</p> </li> <li> <p>In the Round timeout section, you can set the timeout period of a single round and the behavior of the system in cases where the timeout is reached, as described in the following table.</p> Field Description Terminate round options Always complete execution round If a Stop command is received, complete the current round before stopping. Always complete InitClient If a Stop command is received, complete the InitClient phase of the current round before stopping. Round timeout Execution round timeout The timeout period for a single round. Default value: 1800 seconds. Display warning and continue running Specifies that if the timeout has been reached and the round has not yet ended, the system will display a warning but will not stop the round. This is the default setting. Display error and stop the round Specifies that if the timeout has been reached and the round has not yet ended, the system will display an error, stop the round, and start a new round. </li> </ol>"},{"location":"console/set_script_options/#setting-the-browser-cache","title":"Setting the Browser Cache","text":"<p>The WebLOAD Recorder enables you to define the behavior of the cache that WebLOAD Console uses in order to simulate the behavior of a browser\u2019s cache. WebLOAD can cache JavaScript files, style sheets, images, applets, and XML files.</p> <p>To define the browser cache behavior:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Cache tab.</p> <p>The Browser Cache tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>From the Browser Cache Types drop-down list, select Load Generator or Probing Client. .</p> </li> <li>Select the type of cache and the content to filter according to the following table and click OK.</li> </ol> Field Description Browser cache types None All Virtual Clients simulate a browser with no available cache. Clear cache after each Request Defines that the cache will be cleared after each request. Check for newer version after each Request <p>Defines that WebLOAD will check for a newer version of the cached item with every request.</p><p>Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</p> Clear cache after each Round Defines that the cache will be cleared after each script execution round. This is the default setting. Check for newer version after each Round <p>Defines that WebLOAD will check for a newer version of the cached item after each round.</p><p>Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</p> Never clear cache Defines that the cache will never be cleared. Each client maintains its own cache. Cache content <p>You can select a filter, enabling you to indicate specific content types to be cached in the script. The available filters are:</p><p>- JavaScript files</p><p>- Style sheets</p><p>- Images</p><p>- Applets</p><p>- XML files</p><p>- Dynamic</p>"},{"location":"console/set_script_options/#configuring-browser-parameter-settings","title":"Configuring Browser Parameter Settings","text":"<p>The Browser Parameters option enables you to define Virtual Client behavior, such as:</p> <ul> <li>Browser type</li> <li>SSL encryption strength</li> <li>HTTP version</li> <li>Keep-Alive status</li> <li>Character encoding</li> </ul> <p>Each of these configuration options is described in this section.</p> <p>To configure the Browser Parameters options:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> <p></p> </li> <li> <p>Check the browser features you wish to use. Each option is described in this section.</p> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/ Current Session Options dialog box.</p> <p>Note: The script (coded to account for a particular option) always overrides the Browser Parameters options. WebLOAD recommends always setting these options through the Console user interface.</p> </li> </ol>"},{"location":"console/set_script_options/#setting-the-browser-type-and-version","title":"Setting the Browser Type and Version","text":"<p>The browser type and version settings specify the type of browser the WebLOAD Virtual Clients should emulate. You can set WebLOAD Console to emulate any of the standard browsers, or you can specify any specific application by supplying a custom user-agent that is included in all HTTP headers. By default, all Virtual Clients use the WebLOAD Default browser agent.</p> <p>To set the browser type and user-agent:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> </li> <li> <p>Select a browser type from the Select the browser type drop-down list.</p> <p>Note that by default, the browser type and version are As recorded, which means: as recorded in the WebLOAD Recorder.</p> <p></p> </li> <li> <p>You can select an alternative version from the drop-down list, or click the Browse button to add a new user agent definition. See Adding a Browser Version Definitions .</p> </li> </ol>"},{"location":"console/set_script_options/#adding-a-browser-version-definitions","title":"Adding a Browser Version Definitions","text":"<p>The available browser version list is appropriate for the browser type you select. You can add to the browser version list.</p> <p>To add a browser version:</p> <ol> <li>Select Custom in the Select the browser type drop-down list within the Browser Type area of the Browser Parameters tab.</li> <li> <p>Click the browse button adjacent to Select the version. The User Agent dialog box appears.</p> <p></p> </li> <li> <p>Enter the new browser version definition.</p> </li> <li>Click OK.</li> </ol>"},{"location":"console/set_script_options/#setting-load-generator-and-probing-client-max-connections","title":"Setting Load Generator and Probing Client Max Connections","text":"<p>To set the Load Generator and Probing Client multiple connection settings:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> </li> <li> <p>Set the max connection properties as follows in the Max Connections section:</p> <ul> <li>To enable multiple connections for Probing Clients, check the Probing Client checkbox. If you enable multiple connections, select the number of connections from the drop down list.</li> <li>To enable multiple connections for Load Generators, check the Load Generator checkbox. If you enable multiple connections, select the number of connections from the drop down list.</li> </ul> <p></p> </li> </ol>"},{"location":"console/set_script_options/#setting-redirection-limits","title":"Setting Redirection Limits","text":"<p>To set a redirection limit:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> </li> <li> <p>Select Enable redirection.</p> <p></p> </li> <li> <p>In the Redirection limit field, type or select the desired redirection limit. The default limit is 10.</p> </li> </ol>"},{"location":"console/set_script_options/#simulating-dns-cache","title":"Simulating DNS Cache","text":"<p>When DNS Caching is enabled (default), WebLOAD Console caches the IP addresses received from the domain name server, reducing the domain name resolution time. Disable DNS caching if you want to include the time for domain name resolution in the WebLOAD Console performance statistics.</p> <p>To simulate DNS cache:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> <p>Under DNS Cache, select Probing Client and Load Generator.</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#simulating-ssl-cache","title":"Simulating SSL Cache","text":"<p>When SSL Caching is enabled (default), WebLOAD Console caches the SSL decoding keys received from an SSL server, and WebLOAD Console only receives the key on the first SSL connection in each round. In subsequent connections, WebLOAD Console retrieves the key from cache. Enabling SSL Cache also reduces transmission time during SSL communication. Disable SSL caching if you want to measure the transmission time of the decoding key in the WebLOAD Console performance statistics for each SSL connection.</p> <p>To simulate SSL cache:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> <p>Under SSL Cache, select Probing Client and Load Generator.</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#enabling-persistent-connection-keep-alive","title":"Enabling Persistent Connection (Keep-Alive)","text":"<p>When enabled, WebLOAD Console keeps an HTTP connection alive between successive accesses in the same round of the main script. Keeping a connection alive saves time between accesses. WebLOAD Console attempts to keep the connection alive unless you switch to a different server. However, some HTTP servers may refuse to keep a connection alive. You should not keep a connection alive if establishing the connection is part of the performance test.</p> <p>To enable persistent connection:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> <p>Under Persistent Connection, select Probing Client and Load Generator.</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#enabling-gzip-support","title":"Enabling GZip Support","text":"<p>Enabling GZip support sets the <code>wlGlobals.AcceptEncodingGzip</code> flag. For each request, WebLOAD Console sends the header \u201cAccept-Encoding: gzip, deflate\u201d. This tells the server that the client can accept zipped content. When this header is turned on, the server MAY send a response with the header \u201ccontent-encoding: gzip\u201d or \u201ccontent- encoding: deflate\u201d. If either of these headers is sent, it means that the response is zipped/deflated and WebLOAD Console will unzip/inflate the content.</p> <p>Note: Most servers will work correctly even if the client does not send the \u201cAccept-</p> <p>Encoding: gzip, deflate\u201d header. Therefore, unless needed, it is recommended not to set the <code>wlGlobals.AcceptEncodingGzip</code> flag because it is performance heavy.</p> <p>However, some servers will fail if it is not sent. Microsoft Internet Explorer/Mozilla sends it by default.</p> <p>You can manually code the script to send the \u201cAccept-Encoding: gzip, deflate\u201d header even if the <code>wlGlobals.AcceptEncodingGzip</code> flag is not set. In this case, if the server returns zipped content, WebLOAD Console will not unzip it, so the content will not be available for WebLOAD Console to function properly.</p> <p>Note: Enabling GZip support sets the Browser Emulation Settings to the maximum browser emulation accuracy. Disabling GZip support sets the Browser Emulation Settings to the maximum Load Generator capacity.</p> <p>To enable GZip support:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> </li> <li> <p>nder HTTP Properties, select GZip support.</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#setting-character-encoding","title":"Setting Character Encoding","text":"<p>The character encoding settings enable you to select a specific character set. You can indicate whether the parser should use the character set it parses in the HTML pages or override it using the specified character set.</p> <p>To specify character encoding:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Browser Parameters (default) tab.</p> </li> <li>Under Character encoding, in the Select Character Encoding drop-down, select the value corresponding to the character set that you want to use. The default value is Default (0), the regional settings of the computer.</li> <li> <p>Check the Enforce character encoding checkbox to override the character set parsed from the HTML pages with the value specified in the Select Character Encoding drop-down list. Uncheck the Enforce character encoding checkbox to indicate that the parser should use the character set it parses in the HTML pages. The default value is false (use the encoding from the HTML pages).</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#setting-the-http-parameters","title":"Setting the HTTP Parameters","text":"<p>The HTTP Parameters option enables you to define HTTP client behavior on the HTTP protocol level.</p> <p>To set the HTTP Parameters options:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the HTTP Parameters tab.</p> <p></p> </li> <li> <p>Set the HTTP version by clicking HTTP version 1.0 or HTTP version 1.1.</p> <p>Note: For the WebLOAD Console 7.x protocol engine, the default HTTP version is 1.1. For the WebLOAD Console 5.x protocol engine, the default HTTP version is 1.0.</p> </li> <li> <p>Select one or more HTTP Properties checkboxes.</p> </li> <li> <p>Click OK.</p> <p>The following table describes the fields and buttons in the HTTP Parameters dialog box.</p> Field Description HTTP Version The appropriate HTTP protocol version (for example \u201cHTTP/1.1\u201d). HTTP version 1.0 Sets the HTTP protocol version to 1.0. HTTP version 1.1 Sets the HTTP protocol version to 1.1. HTTP Properties Multi IP Support Sets the wlGlobals.MultiIPSupport flag to indicate that the HTTP protocol version supports more than one IP address. Encode Form Data <p>Sets the wlGlobals.EncodeFormdata flag.</p><p>In general, when an HTTP client (Microsoft Internet Explorer/Firefox or WebLOAD Console) sends a post request to the server, the data must be HTTP encoded. Special characters like blanks, \u201c&gt;\u201c signs, and so on, are replaced by \u201c%xx\u201d. For example, space is encoded as \u201c%20\u201d.</p><p>This encoding can be performance heavy for large data, so WebLOAD Console allows you to turn it off.</p><p>This should ONLY be done if you are sure that the data does not contain special characters. If it does, and the customer wants to improve performance via this flag, then you should replace the special characters within the script or use wlHttp.EncodeFormdata to set the flag for specific requests.</p> Accept Language Sets the wlGlobals.AcceptLanguage flag. This flag defines a global value for the \u201cAccept-Language\u201d header which will be sent with each request. Some applications/servers will behave differently depending on the setting. It is a simple string and WebLOAD Console does not enforce any checks on the values. It is similar to the wlGlobals.UserAgent property in the sense that it is a wlGlobals/wlHttp setting that affects the value of request headers. </li> </ol>"},{"location":"console/set_script_options/#setting-authentication","title":"Setting Authentication","text":"<p>The Authentication option enables you to define the Global and Proxy authentication settings.</p> <p>To set authentication:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Authentication tab.</p> <p></p> </li> <li> <p>Type the appropriate user names and passwords into the corresponding Global Authentication Settings input text boxes:</p> Field Description User name and Password <p>The user name and password the script should use to log onto restricted HTTP sites.</p><p>Note: User names must be entered using one of the following formats:</p><p>- Domain\\User</p><p>- Domain\\User</p><p>- Domain/User</p> NT user name and NT password The user name the script should use for Windows NT Challenge response authentication. Proxy user name and Proxy password The user name and password the script should use for proxy servers that require user authorization. <p>SSL client certificate file and</p><p>SSL client certificate password</p> The filename (optionally including a directory path) and password of the certificate WebLOAD Console makes available to SSL servers. Authentication method <p>The authentication method supported by the server:</p><p>- NTLM (default).</p><p>- Kerberos.</p> Kerberos server The Kerberos server Fully Qualified Domain Name (FQDN). For example, specify \u201cqa4\u201d rather than \u201cqa4.radview.co.il\u201d. This field is only enabled when the authentication method is set to Kerberos. </li> <li> <p>Type the appropriate proxy host name, port number, user name, and password into the corresponding Proxy Authentication input text boxes when working with proxy authentication.</p> </li> <li>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</li> </ol>"},{"location":"console/set_script_options/#bandwidth-settings","title":"Bandwidth Settings","text":"<p>WebLOAD Console enables you to simulate various systems and connection configurations, including setting a \u2018virtual limit\u2019 on the bandwidth available during a test. Setting a limit on bandwidth allows testers to test applications for users that may be limited in their workplace connections speeds.</p> <p>To configure the connection speed:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Connection tab.</p> <p></p> <p>The Variable Bandwidth feature enables you to set the bandwidth for the load and emulate users connecting through different modem connections (14400, 28800\u2026).</p> </li> <li> <p>Select the desired bandwidth from the Load Generator Bandwidth drop-down list.</p> </li> <li> <p>Select the desired bandwidth from the Probing Client Bandwidth drop-down list.</p> </li> <li> <p>Check the Use network emulation option if you wish to view and control the emulation settings (download/upload bandwidth, delay, and packet loss) that are used to emulate each of the selections you make in the Load Generator Bandwidth and Probing Client Bandwidth fields.</p> <p>You can click any of the emulation settings to manually set it to a custom value:</p> <p></p> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/#enabling-network-emulation","title":"Enabling Network Emulation","text":"<p>Network Emulation services are supported by WebLOAD through the open source ipfirewall (ipfw) engine. To use network emulation, you need to install ipfw, as described below.</p> <p>Network emulation is performed by the Load Generators. Ipfw needs to be installed on each Load Generator in which you want to run network emulation. Installation depends on the Load Generators type:</p> <p>Cloud Load Generators \u2013 The default WebLOAD native Amazon cloud image includes the network emulation engine, therefore no action is required in order to use the network emulation in this option.</p> <p>Physical Load Generators \u2013 the procedure depends on whether the Load Generator is installed on a Windows or Linux machine.</p>"},{"location":"console/set_script_options/#installing-ipfw-on-a-windows-load-generator","title":"Installing ipfw on a Windows Load Generator","text":"<p>On each Load Generator.</p> <p>To install ipfw on a Windows machine:</p> <ol> <li>Download https://s3.amazonaws.com/radview/dummynet.zip. The zip file includes two folders: 32bit and 64bit. You need the folder that corresponds to the Windows version installed on the Load Generator \u2013 either 32-bit or 64-bit.</li> <li> <p>Change the name of the relevant folder to ipfw, and place it under the directory</p> <p><code>C:\\Program Files (x86)\\RadView\\WebLOAD\\bin.</code></p> <p>Alternatively, copy the ipfw folder to any other location, and in the <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\bin\\networkemulation.ini file, set IPFW\\_PATH=\"</code><code>/ipfw.exe\".</code> <li> <p>Install the NDIS driver as follows:</p> <ol> <li>Open the configuration panel for the network card in use by right-clicking the icon on the systray, or by selecting Control Panel -&gt; Network and then selecting the card.</li> <li>Select Properties &gt; Install &gt; Service &gt; Add.</li> <li>Click Driver Disk and select <code>netipfw.inf</code> in this folder.</li> <li>Select ipfw+dummynet which is the only service you should see.</li> <li>Click Accept when warnings appear regarding the installation of an unsigned driver (typically two warnings per installed network card).</li> </ol> </li> <li> <p>Verify installation is successful, as follows:</p> <ol> <li>Open a command prompt window by running cmd.exe as an Administrator.</li> <li>Run the cd command to navigate to the ipfw installation directory.</li> <li>Run <code>ipfw.exe list</code></li> <li>Verify you get the following output: <code>65535 allow ip from any to any</code></li> </ol> </li> <li> <p>Make sure to run TestTalk as administrator on the Load Generator machine.</p> </li> <p>To remove ipfw from a Windows machine:</p> <ol> <li>Open the configuration panel for the network card in use by right-clicking the icon on the systray, or by selecting Control Panel -&gt; Network and then selecting the card.</li> <li>Select Properties.</li> <li>Select ipfw+dummynet.</li> <li>Click Remove.</li> </ol>"},{"location":"console/set_script_options/#installing-ipfw-on-a-linux-centos-7-load-generator","title":"Installing ipfw on a Linux CentOS 7 Load Generator","text":"<p>On each Load Generator.</p> <p>To install ipfw on a Linux CentOS 7 machine:</p> <ol> <li> <p>Install the following necessary prerequisites for building a dummynet kernel module:</p> <p><code>$ sudo yum -y groupinstall \"Development Tools\"</code></p> <p><code>$ sudo yum -y install glibc-devel.i686 glibc-devel</code></p> </li> <li> <p>Install a kernel source matching the specific kernel on the machine, as follows:</p> <ol> <li> <p>If you are not sure which kernel version you have, run the following command:</p> <p><code>$ sudo uname -r</code></p> </li> <li> <p>Download the kernel sources as follows (replace the version in the example with your version):</p> <p><code>$ cd /tmp</code></p> <p><code>$ wget [http://vault.centos.org/7.1.1503/centosplus/Source](http://vault.centos.org/7.1.1503/centosplus/Source/SPackages/kernel-plus-3.10.0-229.el7.centos.plus.src.rpm)</code></p> <p><code>[/SPackages/kernel-plus-3.10.0-229.el7.centos.plus.src.rpm](http://vault.centos.org/7.1.1503/centosplus/Source/SPackages/ kernel-plus-3.10.0-229.el7.centos.plus.src.rpm)</code></p> <p><code>$ mkdir -p /tmp/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}</code></p> <p><code>$ echo \"%\\_topdir /tmp/rpmbuild\" &gt; ~/.rpmmacros</code></p> </li> <li> <p>Run the following commands, using the kernel version of the kernel you downloaded in the previous step:</p> </li> </ol> <p><code>$ rpm -i &lt;downloaded file name&gt; 2&gt;&amp;1 | grep -v mockb</code></p> <p><code>$ sudo tar xvfvJ /tmp/rpmbuild/SOURCES/linux-&lt;kernel id/name&gt;.tar.xz -C /usr/src/kernels/</code></p> <p><code>$ cd /usr/src/kernels/linux-&lt;kernel id/name&gt;</code></p> <p><code>$ sudo make oldconfig</code></p> <p><code>$ sudo make prepare</code></p> <p><code>$ sudo make scripts</code></p> <p><code>$ sudo make</code></p> </li> <li> <p>Build the ipfw, as follows:</p> <ol> <li> <p>Compile the ipfw_source_package.zip, which is part of WebLOAD installation package, by running the following commands:</p> <p><code>$ cd /tmp/</code></p> <p><code>$ cp</code></p> <p>/opt/share/radview/webload/linux/ipfw_source_pac kage.zip <p><code>$ unzip ipfw\\_source\\_package.zip</code></p> <p><code>$ cd dummynet-master</code></p> <p><code>$ make KERNELPATH=/usr/src/kernels/linux-&lt;kernel id/name&gt;/</code></p> <li> <p>If the build is successful, a dummynet kernel module called ipfw_mod.ko will be created in the dummynet-master/kipfw-mod directory. Try loading the module into the kernel by running the following commands:</p> <p><code>$ cd kipfw-mod</code></p> <p><code>$ sudo insmod ipfw\\_mod.ko</code></p> </li> <li> <p>If successful, install the dummynet module in the global modules repository by running the following commands:</p> <p><code>$ sudo cp ipfw\\_mod.ko /lib/modules/&lt;kernel id/name&gt;/kernel/net/netfilter</code></p> <p><code>$ sudo depmod</code></p> </li> <li> <p>Optionally, have it automatically loaded upon boot by running the following commands:</p> <p><code>$ sudo sh -c 'echo modprobe ipfw\\_mod &gt;&gt; /etc/rc.modules'</code></p> <p><code>$ sudo chmod +x /etc/rc.modules</code></p> </li>"},{"location":"console/set_script_options/#diagnostic-settings","title":"Diagnostic Settings","text":"<p>Diagnostic options can be enabled while developing a script or for tracking problems in existing scripts.</p> <p>To configure the diagnostic options:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Diagnostic tab.</p> <p></p> <p>Note: Running a Load Session with the diagnostic options enabled may affect system performance. Therefore, we recommend that these options remain disabled while running a Load Session with multiple threads.</p> </li> <li> <p>Check the diagnostic features you wish to use. Each diagnostic option is described in this section.</p> </li> <li>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</li> </ol>"},{"location":"console/set_script_options/#enabling-syntax-checking","title":"Enabling Syntax Checking","text":"<p>Enable Syntax Checking to perform the following tests on a script while it is running.</p> <p>To enable syntax checking:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Diagnostic tab.</p> </li> <li>Select Enable syntax checking.</li> </ol> <p>The following diagnostics are performed:</p> <ul> <li>Type inspections \u2012 WebLOAD Console checks that each property receives the correct type.</li> </ul> <p>For example, wlLocals.ParseForms = 14 prompts the following log message:</p> <p>\u201cWrong type for the property ParseForms. The correct type is Boolean. Legal values are: \u201cYes\u201d/\u201dNo\u201d or true/false.\u201d</p> <ul> <li>Value inspections \u2012 WebLOAD Console checks to ensure that each property is assigned a legal value.</li> </ul> <p>For example, wlHttp.Version = \u201c2.1\u201d prompts the following log message:</p> <p>\u201c2.1 is an illegal value for the property Version. Legal values are: 1.0, 1.1.\u201d</p> <ul> <li>Scope inspections \u2012 WebLOAD Console checks that each property is assigned a permitted scope.</li> </ul> <p>For example, wlLocals.ConnectionSpeed = 28800 prompts the following log message:</p> <p>\u201cThe property ConnectionSpeed is not valid for the object wlLocals.\u201d</p> <ul> <li>Case inspections \u2012 WebLOAD Console objects and properties are case sensitive. When Syntax Check is enabled, WebLOAD Console checks to ensure that all objects and properties are written correctly.</li> </ul> <p>For example, wlLocals.parse = \u201cNo\u201d prompts the following log message:</p> <p>\u201cThe property parse should be written as Parse.\u201d</p> <p>It is recommended that a syntax check be run at least once while developing your script.</p>"},{"location":"console/set_script_options/#log-report-diagnostics","title":"Log Report Diagnostics","text":"<p>Log reports are used to see the script flow, and the response headers received while a script is running. When log report is enabled, an outfile is automatically created for each get and post transaction and for each frame received.</p> <p>To enable log report diagnostics:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Diagnostic tab.</p> </li> <li> <p>Select Enable log report to configure WebLOAD Console to create a Log Report.</p> <p></p> </li> <li> <p>Click in the Output directory field and select the directory for saving Log Report files.</p> <p>The default directory is: C:\\Program Files\\RadView\\WebLOAD\\User\\Log.</p> </li> <li> <p>Select which rounds should generate the Log Report in the Start round and End round fields.</p> <p>The log report displays the time a request was made, the round number, the request number, the URL received and the response headers. If GetContents = \u201cYes\u201d the same information is displayed for each frame.</p> <p>A message is sent to the Log Window for each request. The message appears in the following format:</p> <p><code>\\### Thread:000, Round Num:001, Request Num:001 ### URL</code></p> <p>Each request is numbered sequentially for each thread and round number.</p> </li> </ol>"},{"location":"console/set_script_options/#enabling-enhanced-radview-support-diagnostic","title":"Enabling enhanced RadView Support Diagnostic","text":"<p>Enabling the enhanced RadView Support Diagnostic option creates large files in the WebLOAD\\User\\Log directory and may affect Load Generator performance.</p> <p>To enable enhanced RadView support diagnostic:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Diagnostic tab.</p> </li> <li> </li> </ol>"},{"location":"console/set_script_options/#select-enable-the-enhanced-radview-support-diagnostic","title":"Select Enable the enhanced RadView Support Diagnostic.","text":""},{"location":"console/set_script_options/#enabling-show-performance-warnings","title":"Enabling Show Performance Warnings","text":"<p>Enable the Show Performance Warnings option if you want WebLOAD to automatically send warning messages when Load Generators are getting overloaded. This can enable you to better utilize the Load Generators in your current and future tests.</p> <p>To enable showing performance warnings:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Diagnostic tab.</p> </li> <li>Select Show Performance Warnings.</li> </ol>"},{"location":"console/set_script_options/#functional-testing-options","title":"Functional Testing Options","text":"<p>Functional testing enables you to insert verification tests into the script to verify that the links, images, forms, tables and frames in your Web application continue to act as expected.</p> <p>To access and configure the functional testing options:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Functional Testing tab.</p> <p></p> </li> <li> <p>Select the functional testing tools you wish to use. Each testing option is described in this section.</p> </li> <li>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/ Current Session Options dialog box.</li> </ol>"},{"location":"console/set_script_options/#setting-automatic-data-collection","title":"Setting Automatic Data Collection","text":"<p>Setting automatic data collection instructs WebLOAD Console to handle every page, object and HTTP object in the Script as a transaction. The name of the transaction is the name of the page or object and data is gathered for each transaction.</p> <p>To set automatic data collection:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Functional Testing tab.</p> </li> <li> <p>Select one of the following:</p> <ul> <li>All Pages or Failed Pages to turn all page transactions in the script into Named Transactions. The transaction name will be the page name (the URL being accessed without the query string) with the HTTP method used to retrieve it (GET or POST). The following statistics will be gathered for all page transactions: total number of transactions (counter), number of failed and successful transactions (counter), and the page time for each transaction (timer). Transaction Data Drilling will be available for all transactions if you select All Pages or for failed transactions only if you select Failed Pages. Select one or more of the following to specify whether to collect data at object or HTTP level or both.</li> <li>Object level \u2013 Creates sub transactions for all content (for example, gif, ico, and js).</li> <li>HTTP level \u2013 Breaks down every transaction, including sub transactions, into HTTP elements (for example, open connection, send, time to first byte, and receive).</li> <li>None to disable turning page transactions in the script into Named Transactions. Statistics are not gathered for page transactions.</li> </ul> <p>Note: For the WebLOAD Console 7.x protocol engine, the default automatic data collection setting was None. For the WebLOAD Console 5.x protocol engine, the default automatic data collection setting was Failed Pages.</p> <p></p> </li> </ol>"},{"location":"console/set_script_options/#setting-page-time-verifications","title":"Setting Page Time Verifications","text":"<p>Setting page time verifications enables you to define a limit to the maximum amount of time a page should take to load. If the maximum time is exceeded, a message or error entry appears in the log window, depending on the severity level set for page time verifications.</p> <p>Note: You cannot set page time verifications unless automatic data collection is active. See Setting Automatic Data Collection </p> <p>To set page time verification:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Functional Testing tab.</p> </li> <li> <p>Check Verification.</p> <p></p> </li> <li> <p>Specify the maximum amount of time that a page should take to load in the Max Time field.</p> </li> <li> <p>Specify the severity level if the page exceeds the specified time in the Severity Level field.</p> <p>Note: It is important to specify a meaningful time period. For example, if you specify 3 seconds for a page which is likely to take longer, numerous essentially meaningless failures will result. Conversely, if you specify 10 seconds for a page which should take less than 1 second, the test becomes meaningless.</p> </li> </ol>"},{"location":"console/set_script_options/#inserting-a-text-verification-test","title":"Inserting a Text Verification Test","text":"<p>Use Text verifications to verify the absence or presence of selected text expressions within your Web page.</p> <p>To insert a text verification test into your script:</p> <ol> <li> <p>Click Default/Current Session Options or Script Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options or Script Options from the Console System button.</p> </li> <li> <p>Select the Functional Testing tab.</p> </li> <li> <p>Under Verification, check the Verification checkbox.</p> </li> <li> <p>Select the percentage of time the tests should be performed. This is the percentage of Virtual Clients that will perform the verification tests.</p> <p>Note: For backward compatibility of scripts that were recorded with the AAT and support table comparisons, you can select only the Verification checkbox, without selecting any additional options.</p> </li> <li> <p>Check the Text Search checkbox.</p> </li> <li> <p>Enter a literal string with the text for which you are searching in the Text field</p> <p>Note: The text string is case sensitive.</p> </li> <li> <p>Select the type of test to run from the drop-down list in the Option field:</p> <ul> <li> <p>Find \u2012 The verification test will pass if the selected text is found in the current Web page.</p> </li> <li> <p>Not to Find \u2012 The verification test will fail if the selected text is found in the current Web page.</p> </li> </ul> <p>For example, to ensure that the word \u201cerror\u201d does not appear on the page during runtime, enter the word \u201cerror\u201d in the Text field, and select Not to Find. If the text error is found on the page, WebLOAD Console will report the error.</p> </li> <li> <p>Select the severity level from the Severity level drop-down list. For further information, see *Verification Function Return Values.</p> </li> <li> <p>Click Add to add another string to the list of Text Search strings,</p> <p>-Or-</p> <p>Click Delete to delete a selected string from the list of Text Search strings.</p> </li> </ol>"},{"location":"console/set_script_options/#pass-fail-definition-settings","title":"Pass / Fail Definition Settings","text":"<p>The Pass / Fail Definition options enable you to set test failure conditions.</p> <p>Note: This option is not available for individual scripts. It can only be set for the entire session though the Default Options or the Current Session Options dialog boxes.</p> <p>To configure pass/fail definition options:</p> <ol> <li> <p>Click Default/Current Session Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options from the Console System button.</p> </li> <li> <p>Select the Pass/Fail Definition tab.</p> <p></p> <p>You can set WebLOAD Console to declare a test as failed based on a number of criteria. First, you must decide if you want the test to be professed a failure after an absolute number of failures or a relative number of failures. Then you set the conditions upon which a test is declared a failure.</p> </li> <li> <p>Select Absolute (default) to set the total number of failures required for a test to be declared failed,</p> <p>-Or-</p> <p>Select Relative to set the percent of failed transactions need for a test to be declared failed.</p> </li> <li> <p>Set the conditions upon which to declare a test failed and the action to take if a test fails.</p> <ul> <li> <p>Fail the test if a severe error occurs during the test run \u2012 Sends a failure message and declares the test failed in the event of a severe error.</p> </li> <li> <p>Fail the test if the number of errors is higher than \u2012 Declares the test failed if the number of errors received is higher than the number stated. If the pass / fail definition is set to relative then the percentage of errors is considered rather than the absolute value.</p> </li> <li> <p>Fail the test if the number of warnings is higher than \u2012 Declares the test failed if the number of warnings received is higher than the number stated. If the pass / fail definition is set to relative then the percentage of warnings is considered rather than the absolute value.</p> </li> <li> <p>Fail the test if the number of SLA failures is equal to or greater than \u2013 Declares the test failed if the number of SLA breaches received is equal to or higher than the number stated. If the pass / fail definition is set to relative then the percentage of warnings is considered rather than the absolute value.</p> </li> <li> <p>Stop the test when a failure occurs \u2012 Stops the test if the test is declared failed.</p> </li> <li> <p>Check rule only after   minutes of execution \u2012 This option is only enabled when the pass / fail definition is set to relative. Use this option to set a stabilizing period for the test when it starts. Errors or warning received during this time frame will not fail the test, and the rules set for failing the test will only be checked after this timeframe has expired.</p> </li> </ul> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/#configuring-reset-mechanism-settings","title":"Configuring Reset Mechanism Settings","text":"<p>The Reset Mechanism options enable you to set the reset values.</p> <p>Note: This option is not available for individual scripts. It can only be set for the entire session though the Default Options or the Current Session Options dialog boxes.</p> <p>To configure reset mechanism options:</p> <ol> <li> <p>Click Default/Current Session Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options from the Console System button.</p> </li> <li> <p>Select the Reset Mechanism tab.</p> <p></p> </li> <li> <p>Check the Enable the Load Generator reset mechanism checkbox to allow WebLOAD Console to restart the Load Generators.</p> </li> <li> <p>Set the number of minutes for Reset Frequency (Every) and Stop Wait (Timeout).</p> </li> <li> <p>Set the number of times for Max attempts to reconnect.</p> </li> <li> <p>Set the number of seconds for Unresponsive LG for more than (Timeout).</p> <p>Note: The Load Generator Timeout is valid only if the Reset Mechanism is enabled.</p> </li> <li> <p>Click OK to accept the modifications, or Cancel to reject them, and exit the Default/Current Session Options dialog box.</p> </li> </ol>"},{"location":"console/set_script_options/#configuring-the-java-options","title":"Configuring the Java Options","text":"<p>The Java options enable you to define the Java Virtual Machine to be used by WebLOAD Recorder, for executing Java classes.</p>"},{"location":"console/set_script_options/#to-configure-java-option-settings","title":"To configure Java Option settings:","text":"<ol> <li> <p>Click Default/Current Session Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Default/Current Session Options from the Console System button. The Default/Current Session Options dialog box appears.</p> </li> <li> <p>Select the Java Options tab.</p> <p>The Java Options tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>In the Select run-time JVM to be drop down, select one of the available Java Virtual Machines.</p> <p>The default setting is the WebLOAD standard Java Virtual Machine. The selected value is passed to wlGlobals.JVMtype and is the key for WLJVMs.xml. This XML file (located on every WebLOAD Machine in the <code>&lt;WebLOAD Installation Directory&gt;</code>\\extensions\\JVMs directory) contains the following parameters for each JVM:</p> <ul> <li> <p>Type (the value from the flag)</p> </li> <li> <p>Path (should be machine-agnostic)</p> </li> <li> <p>Options</p> </li> </ul> <p>When Type is \u201cDefault\u201d, the RadView default (installed) JVM will be used. The default JVM\u2019s path is defined in webload.ini, as it depends on the WebLOAD Console installation path.</p> </li> <li> <p>Click OK.</p> <p>The Java Options are saved.</p> </li> </ol>"},{"location":"console/statistics_reports/","title":"WebLOAD Statistics Reports","text":"<p>The Statistics Report is both a real-time monitor that displays the results of your test while you run it and a report that you can save and export.</p> <p>WebLOAD Console collects approximately 30 different statistics during a test. The Statistics Report displays the values for all of them. You can also create Integrated Reports that display only the statistics that you choose. For information about Integrated Reports, see WebLOAD Console Performance Reports .</p>"},{"location":"console/statistics_reports/#statistical-measurements-and-their-values","title":"Statistical Measurements and Their Values","text":"<p>The Statistics Report is presented as a table.</p> <p>Row headings (the labels in the first column on the left) are the names of the statistical measurements.</p> <p>Column headings categorize the statistics as follows:</p> <ul> <li>Total \u2012 Sums the values for each statistic across all the scripts running during the test.</li> <li>ScriptName::Total \u2012 Sums the values for each statistic across all instances of the specified script running during the test.</li> <li>ScriptName@LoadGenerator \u2012 Sums the values for each statistic across all instances of the specified script running under the specified Load Generator during the test.</li> </ul> <p></p> <p>The statistics displayed in each row are grouped into the following categories:</p> <ul> <li>Per time unit statistics are ratios that calculate an average value for an action or process. For example: Hits Per Second and Rounds Per Second.</li> <li>Timers track the amount of time it took the Virtual Clients to complete an action or process and are only measured for successful transactions. For example: Connect Time and Round Time.</li> <li>Counters track the number of times the Virtual Clients completed an action or process. For example: Hits and Rounds.</li> </ul> <p>By default, WebLOAD Console displays values for its statistics at 20-second intervals. The reported value at each reporting interval is called the current value.</p>"},{"location":"console/statistics_reports/#changing-the-length-of-the-reporting-interval","title":"Changing the Length of the Reporting Interval","text":"<p>To change the length of the reporting interval:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General tab.</p> </li> <li>Change the value in the Statistics reporting resolution field to any number of seconds between 1 and 3,600.</li> </ol>"},{"location":"console/statistics_reports/#current-value-computation","title":"Current Value Computation","text":"<p>WebLOAD Console calculates the current value as follows:</p> <ul> <li>For per time unit and timer statistics, WebLOAD Console averages the values collected during the last reporting interval (current slice). If the reporting interval is 20 seconds (the default), the value for Hits Per Second is the average number of hits per second over the last 20 seconds. The value for Hit Time is the average time it took for a successful hit to be completed during the last 20 seconds.</li> <li>For counters, WebLOAD Console reports the number of times the item being counted occurred over the last reporting interval. If the reporting interval is 20 seconds, the value for Hits is the actual number of hits that occurred during the last 20 seconds.</li> </ul>"},{"location":"console/statistics_reports/#statistics-definitions","title":"Statistics Definitions","text":"<p>The following list displays the various statistics, by context. The displays the definitions of the per time unit, timer, and counter statistics, alphabetically.</p> <ul> <li>Load Size</li> <li>Throughput (bytes per second)</li> <li>Page statistics \u2013 A page is an upper level request for information made by a Virtual Client to the system under test (SUT). For example, a Get statement for a URL retrieves a page. Page statistics include:</li> <li>Pages</li> <li>Pages Per Second</li> <li>Page Time</li> <li>Hit statistics \u2013 A hit is a request for information made by a Virtual Client to the system under test (SUT). In other words, an HTTP request. For example, a Get statement for a URL retrieves a page. The page can include any number of graphics and content files. Each request for a gif, jpeg, html file, etc., is a single hit. Hit statistics include:</li> <li>Hits</li> <li>Successful Hits</li> <li>Failed Hits</li> <li>Hits Per Second</li> <li>Successful Hits Per Second</li> <li>Failed Hits Per Second</li> <li> <p>Hit Time</p> </li> <li> <p>Rounds statistics \u2013 A Round is an entire run of a script. Rounds statistics include:</p> </li> <li>Rounds</li> <li>Successful Rounds</li> <li>Failed Rounds</li> <li>Aborted Rounds</li> <li>Rounds Per Second</li> <li>Successful Rounds Per Second</li> <li>Failed Rounds Per Second</li> <li>Round Time</li> <li>Connection statistics \u2013 A Connection is a new TCP/IP connection of a Virtual Client to the SUT. The Connection counter increments every time a TCP/IP connection is opened. This number is always less than or equal to hits/requests, because several hits may use the same HTTP connection if the Persistent Connection option is enabled (Default Options \u0086 Browser Parameters). Connection statistics include:</li> <li>Attempted Connections</li> <li>Successful Connections</li> <li>Failed Connections</li> <li>Connect Time</li> <li>Connection Speed (Bits Per Second)</li> <li>DNS Lookup Time</li> <li>Response statistics \u2013 A Response is an HTTP message sent from the Web server as a response to an HTTP Request. Response statistics include:</li> <li>Responses</li> <li>Response Data Size</li> <li>Response Time</li> <li>Send Time</li> <li>Process Time</li> <li>Receive Time</li> <li>Time to First Byte</li> <li>HTTP Response Status</li> <li>Content Size</li> <li>Report statistics \u2013 The statistics collected by the reportStatistics command in a Selenium script. Refer to the Navigation Timing Statistics table in the Selenium Integration appendix of the WebLOAD\u2122 Recorder User\u2019s Guide.</li> <li> statistics: <li>Automatic Data Collection</li> <li>Timer</li> <li>Counters</li> <li>Transaction Timers</li> <li>Total <code>&lt;transaction name&gt;</code> TPS</li> <li>Transaction Counters</li> <li>Java andActiveX Timers</li> <li>Java and ActiveX Counters</li> <li>Server Performance Measurements</li> Statistic Type Definition Aborted Rounds Counter <p>The number of times the Virtual Clients started to run a script but did not complete the script, during the last reporting interval.</p><p>This might be due to session being stopped either automatically or manually by the user.</p> Attempted Connections Counter The total number of times the Virtual Clients attempted to connect to the SUT during the last reporting interval.  Automatic Data Collection Timer and counter <p>If you have Automatic Data Collection enabled (Default Options</p><p>&gt; Functional Testing), WebLOAD Console creates three counters for each GET and POST statement in the script.</p><p>The counters are the total number of times the Get and Post statements occurred, the number of times the statements succeeded, and the number of times the statements failed during the last reporting interval.</p> Connect Time Timer <p>The time it takes for a Virtual Client to connect to the SUT, in seconds. In other words, the time it takes from the beginning of the HTTP request to the TCP/IP connection.</p><p>The value posted in the Current Value column is the average time it took a Virtual Client to connect to the SUT during the last reporting interval.</p><p>If the Persistent Connection option is enabled (Default Options</p><p>&gt; Browser Parameters), there may not be a value for Connect Time because the HTTP connection remains open between successive HTTP requests.</p> Connection Speed (Bits Per Second) Per-time unit <p>The number of bits transmitted back and forth between the Virtual Clients and the SUT divided by the time it took to transmit those bits, in seconds.</p><p>You can set the Virtual Clients to emulate a particular connection speed during the test either by using the Variable Connection Speed settings (Default Options \u0086 Connection) or by coding the connection speed in the script.</p><p>If a connection speed is specified for the test, WebLOAD Console reports it in the Statistics Report.</p><p>The value posted in the Current Value column is the number (sum) of bits passed per second during the last reporting interval. It should match, very closely, the connection speed you specified for the test.</p><p>For example, if:</p><p>- Reporting interval = 20 sec.</p><p>- Number of bits transmitted during last interval = 96,000 Connection Speed = 96,000 / 20 = 4,800 bits per second.</p> Content Size Counter The size of the graphics and content files included in a page.  Counters Counter <p>You can add your own counters to scripts with the SendCounter() and the SendMeasurement() functions (see the WebLOAD Scripting Guide). If there is a user-defined counter in the script that you are running, WebLOAD Console reports the counter\u2019s values in the Statistics Report.</p><p>The row heading is the name (argument) of the counter, that is, the string in parenthesis in the SendCounter() or SendMeasurement() function call.</p><p>The value reported is the number of times the counter was incremented during the last reporting interval.</p> DNS Lookup Time Timer The time it takes to resolve the host name and convert it to an IP by calling the DNS server. Failed Connections Counter <p>The total number of times the Virtual Clients tried to connect to the SUT but were unsuccessful, during the last reporting interval.</p><p>This number is always less than or equal to the number of failed hits because hits can fail for reasons other than a failed connection.</p> Failed Hits Counter The total number of times the Virtual Clients made HTTP requests but did not receive the correct HTTP response from the SUT during the last reporting interval. Each request for a gif, jpeg, html file, etc. is a single hit. Failed Hits Per Second Per-time unit <p>The number of times the Virtual Clients did not obtain the correct HTTP response divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of unsuccessful HTTP requests per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of hits that fail to return a response = 1,200 Successful Hits Per Second = 1,200 / 600 = 2.</p> Failed Rounds Counter The total number of times the Virtual Clients started but did not complete the script during the last reporting interval. Failed Rounds Per Second Per-time unit <p>The number of times the Virtual Clients started but did not complete an iteration of this script divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of failed iterations of the script per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of failed rounds = 20</p><p>Failed Rounds Per Second = 20 / 600 = 0.033.</p> Hit Time Timer <p>The time it takes to complete a successful HTTP request, in seconds. The Hit Time is the sum of the Connect Time, Send Time, Response Time, and Process Time for an individual page hit.</p><p>The value posted in the Current Value column is the average time it took to make an HTTP request and process its response during the last reporting interval.</p> Hits Counter The total number of times the Virtual Clients made HTTP requests to the system under test (SUT) during the last reporting interval. Each request for a gif, jpeg, html file, etc. is a single hit. Hits Per Second Per-time unit <p>Hits Per Second is the number of times the Virtual Clients made an HTTP request divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of HTTP requests per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min.</p><p>- Number of hits = 12,600</p><p>Hits Per Second = 12,600 / 600 = 21.</p> HTTP Response Status Counter <p>WebLOAD Console creates a row in the Statistics Report for each kind of HTTP status code it receives as an HTTP response from the SUT (redirection codes, success codes, server error codes or client error codes).</p><p>The value posted is the number of times the Virtual Clients received that status code during the last reporting interval.</p><p>For example:</p><p>The first digit of the Status-Code defines the class of response. The last two digits do not have any categorization role. There are five categories:</p><p>- 1xx: Informational \u2013 Not used, but reserved for future use.</p><p>- 2xx: Success \u2013 The action was successfully received, understood, and accepted.</p><p>- 3xx: Redirection \u2013 Further action must be taken in order to complete the request.</p><p>- 4xx: Client Error \u2013 The request contains incorrect syntax or cannot be fulfilled.</p><p>- 5xx: Server Error \u2013 The server failed to fulfill an apparently valid request.</p> Java and ActiveX Counters Counter <p>You can add function calls to your scripts that enable you to instantiate and call methods and properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function calls in the Script that you are running, WebLOAD Console reports three counters for them in the Statistics Report.</p><p>The row heading is the name of the function call. The counters are the total number of times it occurred, the number of times it succeeded, and the number of times it failed during the last reporting interval.</p> Java and ActiveX Timers Timer <p>You can add function calls to your scripts that enable you to instantiate and call methods and properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function calls in the script you are running, WebLOAD Console reports timers for them in the Statistics Report.</p><p>The row heading is the name of the function call. The value posted is the average amount of time it took to complete the function call, in seconds, during the last reporting interval.</p> Load Size Counter The number of Virtual Clients running during the last reporting interval. Page Time Timer <p>The time it takes to complete a successful upper level request, in seconds. The Page Time is the sum of the Connection Time, Send Time, Response Time, and Process Time for all the hits on a page.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to make an upper level request and process its response during the last reporting interval.</p> Pages Counter The total number of times the Virtual Client made upper level requests (both successful and unsuccessful) during the last reporting interval. Pages Per Second Per-time unit <p>Pages Per Second is the number of times the Virtual Clients made upper level requests divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of requests per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of pages = 750</p><p>Pages Per Second = 750 / 600 = 1.25.</p> Process Time Timer <p>The time it takes WebLOAD Console to parse an HTTP response from the SUT and then populate the DOM, in seconds.</p><p>The value posted in the Current Value column is the average time it took WebLOAD Console to parse an HTTP response during the last reporting interval.</p> Receive Time Timer The elapsed time between receiving the first byte and the last byte. Response Data Size Counter <p>The size, in bytes, of all the HTTP responses sent by the SUT during the last reporting interval.</p><p>WebLOAD Console uses this value to calculate Throughput (bytes per second).</p> Response Time Timer <p>The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested (Time to first byte + Receive Time - Process Time).</p><p>The value posted in the Current Value column is the average time it took the SUT to respond to an HTTP request during the last reporting interval.</p> Responses Counter <p>The number of times the SUT responded to an HTTP request during the last reporting interval.</p><p>This number should match the number of successful hits.</p> Round Time Timer <p>The time it takes one Virtual Client to complete an entire iteration of a script, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to complete an entire iteration of the script during the last reporting interval.</p><p>For example, if:</p><p>- Virtual Clients = 2.</p><p>- First Virtual Client completes a round in 60 sec.</p><p>- Second Virtual Client completes a round in 85 sec.</p><p>- Both Virtual Clients complete the rounds within the current reported interval.</p><p>Round Time = 72.5 sec.</p> Rounds Counter <p>The total number of times the Virtual Clients attempted to run the script during the last reporting interval.</p><p>For example:</p><p>Rounds = Failed Rounds + Successful Rounds + Aborted Rounds.</p> Rounds Per Second Per-time unit <p>The number of times the Virtual Clients attempted to run the script divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of attempts (both successful and unsuccessful) per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of rounds = 200</p><p>Rounds Per Second = 200 / 600 = 0.33.</p> Send Time Timer <p>The time it takes the Virtual Clients to write an HTTP request to the SUT, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to write a request to the SUT during the last reporting interval.</p> Server Performance Measurements Timers <p>If you selected Performance Monitor statistics for the report, WebLOAD Console creates a row for them and reports their values in the Statistics Report.</p><p>For example:</p><p>Sessions Errored Out, % Processor Time, Current Disk Queue Length, and so on.</p><p>For definitions of the statistics, see the Performance Measurements Manager (click Edit Template in the Session tab of the ribbon so that you are in edit mode, then click Performance Measurements Manager).</p><p>Be selective when selecting server performance measurements or the system resources required to manage the data might affect the Console.</p> Successful Connections Counter <p>The total number of times the Virtual Clients were able to successfully connect to the SUT during the last reporting interval.</p><p>This number is always less than or equal to the number of successful hits because several hits might use the same HTTP connection if the Persistent Connection option is enabled (Default Options \u0086 Browser Parameters).</p> Successful Hits Counter The total number of times the Virtual Clients made HTTP requests and received the correct HTTP response from the SUT during the last reporting interval. Each request for a gif, jpeg, html file, etc. is a single hit. Successful Hits Per Second Per-time unit <p>The number of times the Virtual Clients obtained the correct HTTP response to their HTTP requests divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful HTTP requests per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of hits that return a successful response = 11,400 Successful Hits Per Second = 11,400 / 600 = 19.</p> Successful Rounds Counter The total number of times the Virtual Clients completed one iteration of the script during the last reporting interval. Successful Rounds Per Second Per-time unit <p>The number of times the Virtual Clients completed an entire iteration of the script divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful iterations of the script per second during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of successful rounds = 180 Successful Rounds Per Second = 180 / 600 = 0.3.</p> Throughput (bytes per second) Per-time unit <p>The average number of bytes per second transmitted from the SUT to the Virtual Clients running this script during the last reporting interval.</p><p>In other words, this is the amount of the Response Data Size (sum) divided by the number of seconds in the reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min.</p><p>- Reporting interval = 20 sec.</p><p>- Data size in bytes sent during last interval = 6,000 Throughput = 6,000 / 20 = 300.</p> Time to First Byte Timer The time it takes from when a request is sent until the Virtual Client receives the first byte of data. Total  TPS Per-time unit <p>The number of times the Virtual Client encountered the transaction divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number of times the Virtual Client encountered the transaction during the last reporting interval.</p><p>For example, if:</p><p>- Elapsed time of test = 10 min. (600 sec.)</p><p>- Number of times the VC encountered the transaction = 11,400 Total Transactions Per Second = 11,400 / 600 = 19.</p> Timer Timer <p>You can add timers to scripts to keep track of the amount of time it takes to complete specific actions (see the WebLOAD Scripting Guide). If there are any timers in the scripts that you are running, WebLOAD Console reports their values in the Statistics Report.</p><p>The row heading is the name (argument) of the timer, that is, the string in parenthesis in the SetTimer() function call. The timer represents the time it takes to complete all the actions between the SetTimer() call and its corresponding SendTimer() call, in seconds.</p><p>The value posted is the average time it took a Virtual Client to complete the actions between the pair of timer calls, in seconds, during the last reporting interval.</p>  Transaction Counters Counter <p>You can add user-defined transaction functions to scripts for functional tests (see the WebLOAD Scripting Guide). If there is a user-defined transaction function in the script that you are running, WebLOAD Console reports three counters for it in the Statistics Report.</p><p>The row heading is the name (argument) of the user-defined transaction, that is, the string in parenthesis in the BeginTransaction() function call.</p><p>The counters are the total number of times the transaction occurred, the number of times the transaction succeeded, and the number of times the transaction failed during the last reporting interval.</p>  Transaction Timers Timer <p>You can add user-defined transaction functions to scripts for functional tests (see the WebLOAD Scripting Guide). If there is a user-defined transaction function in the script that you are running, WebLOAD Console reports a timer for it in the Statistics Report. Transaction timers are only measured for successful transactions.</p><p>The row heading is the name (argument) of the user-defined transaction, that is, the string in parentheses in the BeginTransaction() function call.</p><p>The timer represents the average time it took to complete all the actions between the BeginTransaction() call and its corresponding EndTransaction() call, in seconds, during the last reporting interva"},{"location":"console/statistics_reports/#statistics-for-virtual-clients-and-probing-clients","title":"Statistics for Virtual Clients and Probing Clients","text":"<p>There are differences in the statistics reported for Virtual Clients and Probing Clients:</p> <ul> <li>The values reported for Virtual Clients are average values based on the data reported by the total number of Virtual Clients running that script.</li> <li>The values reported for a Probing Client are the specific values for that single, representative user.</li> </ul> <p>By default, Virtual Clients are single-threaded so the Load Machines can support more Virtual Clients overall. Probing Clients run with four threads in order to emulate a single user as closely as possible.</p> <p>Therefore, you should use the statistics that you obtain from the different types of emulated users in different ways. For example, if you are interested in the exact experience of a typical user of your site, examine the timers like Round Time, Hit Time, Connect Time, and so on from a Probing Client. For performance or load issues, however, examine statistics (such as Successful and Failed hits, Successful and Failed Rounds, Rounds Per Second, Hits Per Second, etc.) from Virtual Clients.</p>"},{"location":"console/statistics_reports/#summary-reports","title":"Summary Reports","text":"<p>Each cell in the Statistics Report is an access point for another report:</p> <ul> <li>Double-click a row heading to display a Summary by Measurement Report.</li> <li>Double-click a column heading to display a Summary by script or Summary by Total Report.</li> <li>Double-click a cell to display a summary report for that statistical measurement.</li> </ul> <p></p> <p>Summary reports provide the following values:</p> Value Definition Current Slice/Current Value WebLOAD Console displays values for its statistics at 20- second intervals (you can modify this in Global Options \u0086 General, by changing the value in the Statistics reporting resolution field. The reported value at each reporting interval is called the current value. Sum The aggregate or total value for this statistic (throughout all scripts and Virtual Clients). Min The lowest value reported for this statistic since the beginning of the test. Max The highest value reported for this statistic since the beginning of the test. Average <p>For per time unit statistics and counters, average is the total of all of the current values divided by the number of reporting intervals.</p><p>For timers, average is the total amount of time counted by the timer (not the elapsed time) divided by the Count (the total number of readings). For example, the average for Hit Time is the amount of time it took to complete all the successful hits divided by the number of successful hits (the Count).</p> <p>The Statistics Report displays all of the statistics that WebLOAD Console collects unless there were no readings for a statistic during a test. For example, if there were no unsuccessful rounds during a test, the table would not display a row for Failed Rounds.</p> <p>Additionally, if a measurement has no meaning for a specific statistic, WebLOAD Console displays a dash (-) in the cell. For example, if there were two scripts running but only one of them returned an HTTP Response Status code, the table would include a row for that Response Status and would display a dash in the cell for the script that did not return the code.</p>"},{"location":"console/statistics_reports/#using-the-statistics-report","title":"Using the Statistics Report","text":"<p>Open specific statistical values by double-clicking a cell. You can click any Script Name or Total in the column headers, any Measurement Name in the left-hand column, or any cell at the intersection of any measurement row and script or Total column.</p> Double click To Script Name Displays a Summary Report table containing all measurement attribute values for the selected script. Total Displays a Summary Report table containing the sum of all measurement attribute values for all current scripts. Measurement Name Displays a Summary Report table containing the attribute values for this measurement for all current scripts. Intersection, Measurement &amp; Script Displays a History Report containing all of the Attribute values recorded from the start of the current test session. These values are specific to the selected measurement and script. The complete History Report can also be accessed via the Summary Reports. Intersection, Measurement &amp; Total Displays a History Report containing all of the Attribute values recorded for the selected Measurement totaled for all current scripts. The complete History Report can also be accessed via the Summary Reports."},{"location":"console/statistics_reports/#statistics-report-summary-by-script","title":"Statistics Report-Summary by Script","text":"<p>Double-click a specific script name in the Statistics Report main window to call up a summary table. When you select a script, the report contains the values for all the attributes collected for that script.</p> <p>The following example contains all of the values collected for the script, Quickstart:</p> <p></p> <p>The names of all the measurements tracked during the current Load Session are listed in the column at the far left. The names of all the Attributes totaled for the relevant measurements are displayed in the header at the top of the table.</p> <p>Example:</p> <p>Note: The minimum time needed for the SUT to respond to requests from the script during the current test session is 1.246 seconds. The maximum time needed for the SUT to respond to the script run by Generator1 during the current slice is 0.461 seconds. The average Response Time to the script in the current slice is 1.398 seconds.</p> <p></p> <p>Example:</p> <p>Double-click Response Time in the left-hand column to call up a History Report. This History Report lists all of the Response Time Attribute values recorded for the script run by Load Generator1 from the start of the current test session. This History Report can also be accessed from the Statistics Report main window by double-clicking the button located at the intersection of the Response Time row and mix1 column.</p> <p></p>"},{"location":"console/statistics_reports/#statistics-report-summary-by-total","title":"Statistics Report-Summary by Total","text":"<p>Double-click the heading Total at the top of the Total column in the Statistics Report main window to call up the Summary by Total Report.</p> <p>This table displays the sum of all measurement values for all current scripts.</p> <p></p> <p>The names of all the measurements tracked during the current Load Session are listed in the column at the far left. The names of all the attributes totaled for the relevant measurements for all current scripts are displayed in the header at the top of the table.</p> <p>Double-click Response Time in the left-hand column to call up a History Report. This History Report lists all of the Response Time Attribute values recorded for all scripts from the start of the current test session. This is the same Summary Report accessed from the Statistics Report main window by double-clicking the button located at the intersection of the Response Time row and Total column.</p> <p></p>"},{"location":"console/statistics_reports/#statistics-report-summary-by-measurement","title":"Statistics Report-Summary by Measurement","text":"<p>Double-click a specific measurement name in the Statistics Report main window to call up the following summary table.</p> <p>This table displays all attribute values for the selected measurement for the current scripts.</p> <p>This image shows the Response Time values for script, Test. The attributes displayed are for Min, Max, Count, Average and Current Slice. The third line displays the total values for these attributes for all running scripts.</p> <p>Example:</p> <p>Double-click Test in the left-hand column to call up a History Report. This History Report lists all of the Response Time Attribute values recorded for all scripts from the start of the current test session. This is the same History Report accessed from the Statistics Report main window by double-clicking the button located at the intersection of the Response Time row and script column.</p> <p></p>"},{"location":"console/statistics_reports/#statistics-report-history-by-measurement-and-script","title":"Statistics Report-History by Measurement and Script","text":"<p>To open the History by Measurement and Script Report:</p> <ul> <li>Double-click a button located at the intersection of a specific measurement row and script column in the Statistics Report main window.</li> <li>Double-click a selected script name in the left hand column of a Summary by Measurement Report.</li> <li>Double-click a selected measurement name in the far left column of a Summary by Script Report.</li> </ul> <p>The History by Measurement and Script Report displays all the Attribute values recorded from the start of the current Load Session for the selected measurement and script.</p> <p>The following table displays all of the Response Time Attribute values for the script, Test.</p> <p></p> <p>The times that the attribute values were recorded since the start of the current Load Session are listed in the column at the far left. The names of all the attributes totaled for the selected measurement and script are displayed in the header at the top of the table.</p> <p>Example:</p> <p>This table displays all Total Load Size, Current Value, Min, Max, Count, and Average values recorded for Response Time for Test. Values were recorded starting at 20 seconds after the Load Session began.</p>"},{"location":"console/statistics_reports/#statistics-report-history-by-measurement-and-total","title":"Statistics Report-History by Measurement and Total","text":"<p>To open the History by Measurement and Total Report:</p> <ul> <li>Double-click a button located at the intersection of a specific measurement row and the Total column in the Statistics Report main window,</li> </ul> <p>-Or-</p> <p>Double-click the specific measurement name in the far left column of a Summary by Total Report.</p> <p>The History by Measurement and Total Report displays all the Attribute values recorded from the start of the current Load Session for the selected measurement. </p> <p>Listed in the far left-hand column are the times that attribute values were recorded since the beginning of the current Load Session. The names of all the attributes totaled for the selected measurement are displayed in the header at the top of the table.</p>"},{"location":"console/viewing_log_window/","title":"Viewing the Log Window","text":"<p>The Log Window displays log messages detected by WebLOAD Console in run time, in addition to messages generated by the JavaScript compiler and any user messages programmed in the script.</p>"},{"location":"console/viewing_log_window/#setting-the-log-window-options","title":"Setting the Log Window Options","text":"<p>Before the Load Session begins, you can set the options that affect the way the data is displayed in the Log Window.</p> <p>To set the log window options:</p> <ol> <li> <p>Click Global Options in the Tools tab of the ribbon,</p> <p>-Or-</p> <p>Select Global Options from the Console System button.</p> </li> <li> <p>Select the General tab.</p> </li> <li>Click the following radio buttons:<ul> <li>Stop Session after n log message</li> <li>Stop sending log messages after n log messages</li> </ul> </li> <li>Click OK.</li> </ol> <p>The following table describes the log window options:</p> <p>Table: Log Window Options</p> Field Name Description Stop Session after n log messages <p>Stop the Load Session after a defined number of log messages have been received.</p><p>Once the maximum defined number of log messages is received, a message box displays stating that the Load Session is stopped.</p> Stop sending log messages after n log messages <p>Stop displaying log messages in the log window after a defined number of log messages have been received.</p><p>Once the maximum defined number of log messages is received, a message box displays stating that no more log messages are displayed.</p>"},{"location":"console/viewing_log_window/#opening-the-log-window","title":"Opening the Log Window","text":"<p>To open the log window:</p> <ul> <li>Check the Log Window checkbox in the Session tab of the ribbon.</li> </ul> <p>The Log Window appears. The Log window is both floating and dockable, and can be placed in any part of the screen.</p> <p></p> <p>The Log Window displays:</p> <ul> <li>A list of the log messages received during the test session.</li> <li>The status of each log message.</li> <li>A paper-clip symbol which when you double-click it opens the Event Viewer.</li> <li>The time each log message was generated (in seconds) from the start of the current Load Session.</li> <li>The Load Generator and script for which each log message is generated.</li> </ul>"},{"location":"console/viewing_log_window/#viewing-the-entire-log-message","title":"Viewing the Entire Log Message","text":"<p>To view the entire log message:</p> <ul> <li>Double-click any of the messages displayed in the Log Window.</li> </ul> <p>A Log Message message box appears displaying the complete message. The text displayed in the Log Message message box can be selected and copied to a text editor.</p>"},{"location":"console/viewing_log_window/#sorting-error-messages","title":"Sorting Error Messages","text":"<p>To sort error messages:</p> <ul> <li>Click the column heading.</li> </ul> <p>The first time you click a column heading, the error messages list in ascending order. A second click the column heading reverses the order. For example, to sort the error messages by Script Name, click the Script Name column heading.</p>"},{"location":"console/viewing_log_window/#opening-the-log-window-menu","title":"Opening the Log Window Menu","text":"<p>To open the log window menu:</p> <ul> <li>Right-click inside the Log Window.</li> </ul> <p>The Log Window pop-up menu appears.</p> <p>The following table describes the Log Window menu commands:</p> Command Description Allow Docking Enables/disables moving the Log Window. Hide Does not display the Log Window. Clear Erases data in the Log Window. Show last message Displays the final messages in the logged in the Log Window. Print Prints the data in the Log Window. Save / Save As Saves the data in the Log Window. Report Defect Opens the Submit Defect dialog box with the selected log message displayed in the Description field. Float in Main Window Floats the Log Window in the main WebLOAD Console window."},{"location":"console/viewing_log_window/#printing-error-messages-recorded-in-the-log-window","title":"Printing Error Messages Recorded in the Log Window","text":"<p>To print error messages recorded in the log window:</p> <ol> <li> <p>Right-click inside the Log Window.</p> <p>The Log Window pop-up menu appears.</p> </li> <li> <p>Click Print.</p> </li> </ol>"},{"location":"console/viewing_log_window/#saving-error-messages-recorded-in-the-log-window","title":"Saving Error Messages Recorded in the Log Window","text":"<p>To save error messages recorded in the log window:</p> <ol> <li> <p>Right-click inside the Log Window.</p> <p>The Log Window pop-up menu appears.</p> </li> <li> <p>Select Save or Save As.</p> <p>The Windows Save As dialog box appears.</p> </li> <li> <p>Type the name of the file in the File Name field.</p> </li> <li> <p>Click Save.</p> <p>The file is saved as a *.mdb file. The file can be opened using Microsoft Access or Excel.</p> </li> </ol>"},{"location":"console/viewing_log_window/#viewing-the-message-status","title":"Viewing the Message Status","text":"<p>Messages fall into four categories:</p> <ul> <li>Success / Info Message</li> <li>Minor Error</li> <li>Error</li> <li>Severe Error</li> </ul> <p>The log messages include messages generated by the Console, the JavaScript compiler and any human errors or user messages detected by WebLOAD Console at run-time. You can also add log messages to the script.</p> <ul> <li>Success / Info Message: Success / Info Messages are added to the script by the user. Success / Info Messages can be used in order to facilitate debugging. Success / Info Messages do not stop an active Load Session.</li> <li>Minor Error: A Minor Error indicates a suspicious condition. The source of the problem may be generated by the system under test, the connection to the server, networking, etc.Minor Errors do not stop an active Load Session.</li> <li>Error: When an Error is detected WebLOAD Console will stop the round and restart the script for the Virtual Client that encountered the error. Errors do not stop an active Load Session.</li> <li>Severe Error: Severe Errors cause the Load Generator, on which the error was generated, to stop immediately. An error message indicating that the process was stopped is displayed.</li> </ul>"},{"location":"console/viewing_log_window/#clearing-the-log-window","title":"Clearing the Log Window","text":"<p>You can clear the log window by right-clicking in the Log Window, and selecting Clear from the right-click menu.</p>"},{"location":"console/working_with_git/","title":"Working with Git","text":"<p>Git is a free and open source distributed version control system for tracking changes in computer files and coordinating work on those files among multiple people.</p> <p>WebLOAD supports basic Git operations, with easy access to Git operations from within WebLOAD Recorder and WebLOAD Console. WebLOAD assumes that you have downloaded and installed Git, and are familiar with the way it works.</p>"},{"location":"console/working_with_git/#prerequisites-to-working-with-git","title":"Prerequisites to working with Git","text":"<p>As prerequisites to working with Git, you need to:</p> <ol> <li> <p>Specify once in WebLOAD how to access the Git Local and Remote Repositories. Refer to Setting up Access to Git Local and Remote Repositories .</p> </li> <li> <p>Make sure your WebLOAD files are saved in the directory defined as the Git local repository. This can be done in one of two ways:</p> <ul> <li>Define the Git local repository directory to be the WebLOAD default directory.</li> <li>Change the WebLOAD default directory to be the directory of the Git local repository.</li> </ul> <p>To do either of the above, you need to access the window where you can view or change the location of the WebLOAD default directory:</p> <ul> <li>In the WebLOAD Console, navigate to Global Options &gt; File Locations.</li> <li>In the WebLOAD Recorder, navigate to Settings &gt; File Locations.</li> </ul> <p>Note that changing the WebLOAD default directory in either the Console UI or the WebLOAD Recorder UI, changes it for both.</p> </li> </ol>"},{"location":"console/working_with_git/#setting-up-access-to-git-local-and-remote-repositories","title":"Setting up Access to Git Local and Remote Repositories","text":"<p>As a prerequisite to using Git operation from within WebLOAD, you need to once specify in WebLOAD how to access the Git Local Repository and Remote Repository.</p> <p>Note: You can perform this prerequisite task either from the WebLOAD WebLOAD Recorder, or from the WebLOAD Console. Once you perform it in one of them, Git operations will be accessible from both.</p> <p>To specify the Git local and remote repositories:</p> <ol> <li> <p>Click Repository Settings in the Tools tab of the ribbon. The WebLOAD Repository Settings window appears.</p> <p></p> </li> <li> <p>In the Local Repsitory section:</p> <ol> <li>Specify the location of the local repository.</li> <li>Specify the current branch.</li> </ol> </li> <li> <p>In the Remote Repository section:</p> <ol> <li>Specify the location of the remote repository (either a URL or a directory).</li> <li>Specify the remote branch.</li> <li>Specify the User Name and Password for accessing the remote repository.</li> </ol> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/working_with_git/#performing-a-commit-action","title":"Performing a Commit action","text":"<p>If you setup WebLOAD to support Git, you can perform a Commit, that is, save to the Git local repository, any WebLOAD objects you are currently working on. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <ul> <li>When you select Commit in the WebLOAD Recorder, the script you are currently working on as well as all its additional information, are saved to the Git local directory.</li> <li>When you select Commit in the WebLOAD Console, the test definition of the test you are currently working on, as well as the session created by test execution, are saved to the Git local directory</li> </ul> <p>To Commit a WebLOAD object:</p> <ol> <li> <p>Click Commit in the Tools tab of the ribbon.</p> <p>A window appears in which you can enter a Commit comment.</p> <p></p> </li> <li> <p>Optionally enter a comment, and click OK.</p> </li> </ol>"},{"location":"console/working_with_git/#performing-a-commit-dir-action","title":"Performing a Commit Dir action","text":"<p>If you setup WebLOAD to support Git, you perform a Commit dir, that is, save to the Git local repository an entire folder (with all its descendants). This folder must be located under the local repository folder. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To perform a Commit dir:</p> <ol> <li>Click Commit dir in the Tools tab of the ribbon.</li> <li> <p>In the File Explorer window that appears, specify the directory you wish to commit.</p> <p>A window appears in which you can enter a Commit dir comment.</p> <p></p> </li> <li> <p>Optionally enter a comment, and click OK.</p> </li> </ol>"},{"location":"console/working_with_git/#performing-a-push-action","title":"Performing a Push action","text":"<p>If you setup WebLOAD to support Git, you can perform a Push, which causes all Commits you had made to the Git local repository, to be pushed to the Git remote repository. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To perform a Push:</p> <ol> <li> <p>Click Push in the Tools tab of the ribbon.</p> <p>A window appears, informing you of the Git Push operation and its success status.</p> <p></p> </li> <li> <p>Click OK.</p> </li> <li>If the Push operation is rejected, for example because a conflict has arisen due to changes made by two different users, a window appears, displaying the Git rejection message. Follow the instructions in the message, and resolve the rejection using your chosen Git UI.</li> </ol>"},{"location":"console/working_with_git/#performing-a-pull-action","title":"Performing a Pull action","text":"<p>If you setup WebLOAD to support Git, you can perform a Pull, which pulls data from the remote repository to the local repository. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>A Pull operation pulls the entire branch from the remote repository and updates the local repository and directories.</p> <p>To perform a Pull:</p> <ol> <li> <p>Click Pull in the Tools tab of the ribbon.</p> <p>A window appears, informing you of the Git Pull operation and its success status.</p> <p></p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"console/working_with_git/#opening-the-git-ui","title":"Opening the Git UI","text":"<p>If you setup WebLOAD to support Git, you can launch your Git UI from within WebLOAD. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To launch the Git UI:</p> <ol> <li>Click Open Git Gui in the Tools tab of the ribbon.      The Git UI is launched.</li> </ol>"},{"location":"dashboard/appendix_a/","title":"Appendix A: Editing WebLOAD Dashboard Configuration","text":""},{"location":"dashboard/appendix_a/#webload-dashboard-components","title":"WebLOAD Dashboard Components","text":"<p>The WebLOAD Dashboard includes the following main components: </p> <ul> <li>Back-end server, which listens on port 3000 by default.  </li> <li>Datasource server, which listens on port 8080 by default </li> <li>Database server </li> </ul>"},{"location":"dashboard/appendix_a/#editing-back-end-configuration","title":"Editing Back-end Configuration","text":""},{"location":"dashboard/appendix_a/#changing-back-end-configuration","title":"Changing Back-end configuration","text":"<p>You can change the back-end configuration by creating a file called <code>custom.ini</code> in  <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\dashboard\\grafana\\conf</code>. </p> <p>Use the <code>default.ini</code>, located in the same location, to see the available configuration options. The following lists some common options. For a full description of all options, refer to the Grafana documentation</p> <pre><code>[server] \n\n#Protocol (http or https) \n\nprotocol = http \n\n#The ip address to bind to, empty will bind to all interfaces \n\nhttp_addr = \n\n#The http port to use \n\nhttp_port = 3000 \n\n#The public facing domain name used to access from a browser \n\ndomain = localhost \n\n[security] \n\n#default admin user, created on startup\n\nadmin_user = admin \n\n#default admin password, can be changed before first start of grafana, or in profile settings \n\nadmin_password = admin \n\n[users] \n\n#disable user signup / registration \n\nallow_sign_up = true \n</code></pre>"},{"location":"dashboard/appendix_a/#changing-the-back-end-servers-listening-port","title":"Changing the Back-End Server\u2019s Listening Port","text":"<p>You can change the port that the back-end server listens on, which is 8080 by default. To change the back-end server\u2019s listening port: </p> <ol> <li> <p>Change the listening port value in the datasource configuration file, located in: <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\dashboard\\webdashboard\\dashboard.settings.bat.</code> </p> </li> <li> <p>If you change the listening port in the datasource configuration file, you must reflect that change in the datasource configuration, as follows: </p> <ol> <li> <p>Select Admin &gt; Data Sources in the WebLOAD Dashboard menu bar. </p> </li> <li> <p>Click the WebLOAD data source, </p> </li> <li> <p>In the Edit Data Source window that appears, change the URL to reflect the new address. </p> </li> </ol> </li> </ol> <p></p>"},{"location":"dashboard/appendix_a/#changing-the-webload-dashboard-database","title":"Changing the WebLOAD Dashboard Database","text":"<p>You can set which database the WebLOAD Dashboard is using, by specifying the database in the datasource configuration file, located in </p> <p><code>C:\\Program Files (x86)\\RadView\\WebLOAD\\dashboard\\webdashboard\\dashboar d.settings.bat</code></p> <p>Note that also the remote database itself must be configured for remote connections. Refer to Configuring PostgreSQL to Allow Remote Database Connections in the WebLOAD Installation Guide. </p> <p>In addition, if you wish to import remote database sessions from the WebLOAD Console to the WebLOAD Dashboard while the sessions are running, do the following in the WebLOAD Console:  </p> <ol> <li> <p>Select Tools &gt; Global Options &gt; Database.</p> <p></p> </li> <li> <p>In the Database configuration section, enter the details of the remote database.</p> </li> </ol>"},{"location":"dashboard/appendix_a/#changing-settings-from-xml-file","title":"Changing settings from XML file","text":"<p>You can change database configuration from <code>WLAnalyticsPrefs.xml</code> (found in <code>C:\\ProgramData\\RadView\\WebLOAD\\WLAnalyticsPrefs.xml</code>). Changes here affect WebLOAD Analytics, Console and the Dashboard and is the prefered way to change the configuration.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n&lt;properties&gt;\n  &lt;entry key=\"DATABASE_NAME\"&gt;radview&lt;/entry&gt;\n  &lt;entry key=\"DATABASE_HOST\"&gt;localhost&lt;/entry&gt;\n  &lt;entry key=\"DATABASE_PORT\"&gt;5432&lt;/entry&gt;\n  &lt;entry key=\"DATABASE_USERNAME\"&gt;reporter&lt;/entry&gt;\n  &lt;entry key=\"DATABASE_PASSWORD\"&gt;&lt;/entry&gt;\n\n  &lt;entry key=\"BIND_PORT\"&gt;8080&lt;/entry&gt;\n  &lt;entry key=\"BASE_URI\"&gt;&lt;/entry&gt;\n  &lt;entry key=\"BIND_ADDRESS\"&gt;0.0.0.0&lt;/entry&gt;\n  &lt;entry key=\"DOC_ROOT\"&gt;static&lt;/entry&gt;\n  &lt;entry key=\"BIN_DIR\"&gt;../../bin&lt;/entry&gt;\n  &lt;entry key=\"AUTH_USER\"&gt;&lt;/entry&gt;\n  &lt;entry key=\"AUTH_PASSWORD\"&gt;&lt;/entry&gt;\n  &lt;entry key=\"AUTH_ROLE\"&gt;ADMIN&lt;/entry&gt;\n  &lt;entry key=\"ALLOWED_ORIGIN\"&gt;*&lt;/entry&gt;\n  &lt;entry key=\"DASHBOARD_DIR\"&gt;dashboard&lt;/entry&gt;\n  &lt;entry key=\"UPLOAD_DIR\"&gt;sessions&lt;/entry&gt;\n  &lt;entry key=\"DATA_DIR\"&gt;C:/ProgramData/RadView/WebLOAD&lt;/entry&gt;\n  &lt;entry key=\"RESOURCES_DIR\"&gt;resources&lt;/entry&gt;\n  &lt;entry key=\"SHARED_RESOURCES\"&gt;false&lt;/entry&gt;\n&lt;/properties&gt;\n</code></pre>"},{"location":"dashboard/creating_playlist/","title":"Creating and Playing a Playlist","text":"<p>You can play a playlist of specific dashboards.  </p>"},{"location":"dashboard/creating_playlist/#creating-a-dashboards-playlist","title":"Creating a Dashboards Playlist","text":"<p>To create a dashboard playlist: </p> <ol> <li> <p>In the menu bar, select Dashboards &gt; Playlists. The Saved Playlists window appears.  </p> <p></p> </li> <li> <p>Click + New Playlist. </p> <p>A New Playlist window appears.  </p> <p></p> </li> <li> <p>Give the new playlist a Name and configure the time Interval to wait while displaying each dashboard before advancing to the next one on the Playlist. </p> </li> <li> <p>Add dashboards to the playlist as follows: </p> <ol> <li>Optionally search for dashboards by name (or use a regular expression) or you could add tags which will include all the dashboards that belongs to a tag when the playlist start playing. By default, your starred dashboards will appear as candidates for the Playlist. </li> <li>In the Available column, add a dashboard to the Playlist by clicking Add to playlist adjacent to the dashboard name.  </li> </ol> <p>The dashboard you added appears in the  Selected column. </p> <p></p> </li> <li> <p>Optionally rearrange the order in which the dashboards will be played, using the arrows in the Selected columns  </p> <p>To remove a dashboard from the playlist, click the x button. </p> </li> <li> <p>Click Create new playlist. </p> </li> </ol>"},{"location":"dashboard/creating_playlist/#playing-a-dashboards-playlist","title":"Playing a Dashboards Playlist","text":"<p>To play a dashboard playlist: </p> <ol> <li> <p>In the menu bar, select Dashboards &gt; Playlists. The Saved Playlists window appears.  </p> <p></p> </li> <li> <p>In the row displaying the desired playlist, click Play. </p> <p>The playlist start running. Note that most menu buttons and dashboard controls are hidden while the playlist is running. </p> </li> <li> <p>Optionally control the playlist manually using the playlist  controls appearing at the top of screen when in Playlist mode:   </p> <ul> <li> <p>Click the stop button to stop the playlist, and exit to the current dashboard. A playlist continues running indefinitely until stopped. </p> </li> <li> <p>Click the next button to advance to the next dashboard in the playlist.   </p> </li> <li> <p>Click the back button to rewind to the previous dashboard in the playlist. </p> </li> </ul> </li> </ol>"},{"location":"dashboard/creating_playlist/#editing-or-deleting-a-dashboards-playlist","title":"Editing or Deleting a Dashboards Playlist","text":"<p>To edit or delete a dashboard playlist: </p> <ol> <li> <p>In the menu bar, select Dashboards &gt; Playlists. The Saved Playlists window appears. </p> <p></p> </li> <li> <p>To edit the playlist, click Edit in the row displaying the playlist. An Edit Playlist window appears, similar to the New Playlist window. You can edit the playlist name, interval, list of dashboards or the order in which they will be played.  </p> </li> <li> <p>To delete a playlist, click the x in the row displaying the playlist. Confirm the deletion operation.</p> </li> </ol>"},{"location":"dashboard/customizing_dashboard/","title":"Customizing a Dashboard","text":"<p>You can customize a dashboard as desired, and then save the customized dashboard if you wish. Note however that two types of changes are not considered customizations and are not saved: the selected sessions and the selected time filter. </p> <p>To save your customizations, refer to Saving your Customized Dashboard . </p>"},{"location":"dashboard/customizing_dashboard/#customizing-rows","title":"Customizing Rows","text":""},{"location":"dashboard/customizing_dashboard/#adding-a-row","title":"Adding a row","text":"<p>To add a new row, click + ADD ROW at the bottom of a dashboard page </p>"},{"location":"dashboard/customizing_dashboard/#editing-a-row","title":"Editing a Row","text":"<p>To edit a row, click the three grey dots to the left of the row and select the desired option. </p> <p></p> <p>The available options include: </p> Item Description Collapse Hides the row. To show the row again, press  the  button. Add  Panel Adds a panel to the row,  of the type you specify: Graph, Singlestat, Table, Text, Alert List,  Dashboard List, or Plugin List. Row  Options Enables  editing a row\u2019s settings. For information, refer to Editing a Row\u2019s options . Move  Up Moves  the row up. Move  Down Moves  the row down. Remove Deletes  the row, following your confirmation."},{"location":"dashboard/customizing_dashboard/#editing-a-rows-options","title":"Editing a Row\u2019s options","text":"<p>To edit a row\u2019s options, click the three grey dots to the left of the row and select Row Options. </p> <p>A pane appears, for setting the row\u2019s options. Edit the row as desired. </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#deleting-a-row","title":"Deleting a Row","text":"<p>To delete a row, click the three grey dots to the left of the row and select Remove. Confirm the operation.  </p>"},{"location":"dashboard/customizing_dashboard/#customizing-panels","title":"Customizing Panels","text":"<p>To edit a panel, click the panel title and click edit in the box that appears.  </p> <p></p> <p>An editing pane appears, with various editing options that depend on the panel type (text, graph, table or singlestat), as described below. </p>"},{"location":"dashboard/customizing_dashboard/#editing-a-panels-general-options","title":"Editing a Panel\u2019s General Options","text":"<p>Select the General tab to edit the panel\u2019s general options.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#editing-a-graph-panel","title":"Editing a Graph Panel","text":"<p>A graph panel can be customized in various ways, as described below. </p>"},{"location":"dashboard/customizing_dashboard/#specifying-the-metrics","title":"Specifying the Metrics","text":"<p>You can specify which metrics to display for which sessions. </p> <p>To specify the metrics: </p> <ol> <li> <p>Click the panel\u2019s title and select edit. </p> </li> <li> <p>Select the Metrics tab. The metrics currently displayed in the graph are displayed in the table. </p> <p></p> </li> <li> <p>To add a measurement, click Add Measurement. A new line appears in the table. </p> <p></p> </li> <li> <p>Edit the new line:  </p> <ul> <li>Select metrics for the new line you added. </li> </ul> </li> <li> <p>Optionally edit the selection of a metric in an existing line.  </p> </li> </ol> <p>The following table describes some of the operations available in the Metrics tab. </p> Item Description 1 Enables selecting a  category of statistics:  &gt;  Total \u2012 Sums the values for each statistic across  all the Scripts running during the test.  &gt; ScriptName::Total \u2012 Sums the values for each  statistic across all  instances  of the specified script running during the test. &gt; ScriptName@LoadGenerator \u2012 Sums the values for each  statistic across all instances of the specified script running under the specified Load Generator during the test. 2 Depending on your choice  in \u2460,  enables  selecting a sub-category of statistics. 3 Depending on your choice  in \u2461,  enables  selecting a sub-category of statistics. 4 Depending on your choice  in \u2462,  enables  selecting a sub-category of statistics. 5 Depending on your choice in \u2463, enables selecting a statistic. 6 Enables:<p></p>   - Toggling between Edit mode and Display mode<p></p>   - Duplicating a line<p></p>   - Moving a line up<p></p>   - Moving a line down 7 Toggles between showing  and hiding the metrics in the graph 8 Deletes the line. 9 Adds a new line in the  table for defining a new metric in the graph."},{"location":"dashboard/customizing_dashboard/#defining-the-axes-display","title":"Defining the Axes Display","text":"<p>To edit a panel\u2019s axes display: </p> <ol> <li>Click the panel\u2019s title and select edit. </li> <li>Select the Axes tab. </li> </ol> <p>A pane appears, displaying the current axes definitions. You can change any of the definitions, and the graph display changes accordingly.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#defining-the-legend","title":"Defining the Legend","text":"<p>To edit a panel\u2019s legend: </p> <ol> <li>Click the panel\u2019s title and select edit. </li> <li>Select the Legend tab. </li> </ol> <p>A pane appears, displaying the legend definitions. You can change any of the definitions, and the graph display changes accordingly.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#defining-the-display","title":"Defining the Display","text":"<p>To edit a panel\u2019s display: </p> <ol> <li>Click the panel\u2019s title and select edit. </li> <li>Select the Display tab. </li> </ol> <p>A pane appears, displaying the display definitions. You can change any of the definitions, and the graph display changes accordingly.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#defining-the-time-range","title":"Defining the Time Range","text":"<p>To edit a panel\u2019s time range: </p> <ol> <li>Click the panel\u2019s title and select edit. </li> <li>Select the Time range tab. </li> </ol> <p>A pane appears, displaying the time range definitions. You can change any of the definitions, and the graph display changes accordingly.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#editing-a-singlestat-panel","title":"Editing a Singlestat Panel","text":"<p>Working with a singlestat panel is similar to working with a graph panel. A measurement is selected in same way (refer to Specifying the Metrics), but you can only select a single measurement for a singlestat panel. Note that this makes singlestat panels unsuitable when working with multiple sessions. </p> <p>Defining the Singlestat Display Options </p> <p>To edit a singlestat panel\u2019s display: </p> <ol> <li>Click the panel\u2019s title and select edit. </li> <li>Select the Options tab. </li> </ol> <p>A pane appears, displaying the display definitions. You can change any of the definitions, and the graph display changes accordingly.  </p> <p></p>"},{"location":"dashboard/customizing_dashboard/#editing-a-table-panel","title":"Editing a Table Panel","text":"<p>You can customize a table panel\u2019s display directly in the dashboard.  </p> <p></p> <p>The header of the table panel provides the following options: </p> <ul> <li> <p>Sorting the table display \u2013 Clicking any column head sorts the table by that column in ascending or descending order. </p> </li> <li> <p>Filtering by severity \u2013 By clicking the down arrow in the Severity column head, you can select whether to view messages of all severity types, or of a certain type.</p> </li> </ul>"},{"location":"dashboard/customizing_dashboard/#editing-a-text","title":"Editing a Text","text":"<p>To edit the text in a Text panel, click the panel\u2019s title and select edit, and then select the Panel tab. </p> <p></p> <p>You can: </p> <ul> <li>Select the mode: <ul> <li>Text \u2013 Plain text </li> <li>Html \u2013 HTML </li> <li>Markdown - Markdown markup syntax  </li> </ul> </li> <li>Edit the text as desired.  </li> </ul>"},{"location":"dashboard/customizing_dashboard/#adding-panels","title":"Adding Panels","text":"<p>To add a panel in a row, click the three grey dots to the left of the row and select Add Panel. Select the panel type: Graph, Singlestat, Table, Text, Alert List, Dashboard List, or Plugin List.. </p> <p>A new empty panel of the selected type appears in the row.  </p> <p>Define the display in the panel by editing the panel, as described above.</p>"},{"location":"dashboard/customizing_dashboard/#duplicating-a-panel","title":"Duplicating a Panel","text":"<p>The duplication feature is useful if you wish to create a panel that is very similar to an existing one, or that is based on an existing panel. </p> <p>To duplicate a panel: </p> <ol> <li>Click the panel\u2019s title and select Duplicate. </li> </ol> <p>A new panel \u2013 a duplicate of the original \u2013 is created in the dashboard. You can now edit it as desired. </p>"},{"location":"dashboard/customizing_dashboard/#deleting-a-panel","title":"Deleting a Panel","text":"<p>To delete a panel: </p> <ol> <li> <p>Click the panel\u2019s title and select the Delete icon the top right corner.</p> <p></p> </li> <li> <p>Confirm the deletion. </p> </li> </ol>"},{"location":"dashboard/customizing_dashboard/#customizing-general-dashboard-settings","title":"Customizing General Dashboard Settings","text":"<p>You can customize various general dashboard settings. </p> <p>To configure general dashboard settings: </p> <ol> <li> <p>Click the Manage Dashboard Settings icon in the middle of the dashboard header, and select Settings. </p> <p></p> <p>A Dashboard Settings pane appears, with multiple tabs. </p> </li> <li> <p>Set the General settings as desired.  </p> <p></p> <p>For example, if you select Shared Crosshair, then hovering over one the graphs causes a corresponding crosshairs to appear in all the graphs. </p> <p></p> </li> <li> <p>Set the Rows settings as desired. For example, use the up and down arrows to switch between the locations of rows in the dashboard.  </p> <p></p> </li> <li> <p>Set the Links settings as desired. This enables adding links that appear under the Dashboard header. You can add a link to any site, or to a dashboard.  </p> <p></p> </li> <li> <p>Set the Time picker settings as desired. For example, you can set the Auto- refresh options that appear in the Refreshing every dropdown. </p> <p></p> </li> <li> <p>Click Metadata to view the dashboard\u2019s metadata. This includes information about dashboard creation and updating. </p> <p></p> </li> </ol>"},{"location":"dashboard/customizing_dashboard/#templating-a-dashboard","title":"Templating a Dashboard","text":"<p>Templating enables the creation of highly interactive and dynamic dashboards. Instead of hard-coding things like server, application and sensor name in you metric queries you can use variables in their place. Variables are shown as dropdown select boxes at the top of the dashboard. These dropdowns make it easy to change the data being displayed in your dashboard. </p> <p>For more information, refer to Grafana Templating</p>"},{"location":"dashboard/customizing_dashboard/#annotating-a-dashboard","title":"Annotating a Dashboard","text":"<p>Annotations provide a way to mark points on the graph with rich events. When you hover over an annotation you can get title, tags, and text information for the event. </p> <p>For more information, refer toGrafana Annotations</p>"},{"location":"dashboard/getting_started/","title":"Getting Started","text":""},{"location":"dashboard/getting_started/#launching-webload-dashboard","title":"Launching WebLOAD Dashboard","text":"<p>To launch WebLOAD Dashboard: </p> <ol> <li> <p>Select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities-&gt; Start WebLOAD Dashboard. </p> <p>This launches the WebLOAD Dashboard server. </p> </li> <li> <p>Navigate to http://localhost:3000/ </p> <p>The WebLOAD Dashboard login window appears. The default user is \u2018admin\u2019 with password \u2018admin\u2019. </p> <p>Note that the default user is a Super Admin, as explained inSuper Administrators . </p> <p></p> </li> </ol> <p>After login, the homepage appears, showing the latest sessions and tests with links to those sessions and tests, as well as links to creating new load tests in WebLOAD Dashboard.  </p> <p></p>"},{"location":"dashboard/getting_started/#using-the-menu-bar","title":"Using the menu bar","text":"<p>The menu bar provides access to the various WebLOAD Dashboard functions. Note that the Admin menu is available only forSuper Administrators. </p> <p></p>"},{"location":"dashboard/getting_started/#menu-bar","title":"Menu bar","text":"<p>The main components of the WebLOAD Dashboard menu bar include: </p> Item Description For more information, see Tests Search View the list of Load  Tests and their definitions, and perform operations on a selected Load Test:  \u009f Run test  \u009f Pause test  \u009f Edit test  \u009f View this test\u2019s sessions  \u009f Show this test\u2019s  last session  Delete test Viewing Tests New Create a new Load Test Creating a new load test Sessions Search Select a session for  viewing and analysis Viewing Load Sessions Upload Import a session into the  database Uploading a session Dashboards Home The  Home dashboard, as configured in  the  user\u2019s Profile Setting the Default Dashboard Playlists Create and play a  dashboard that rotates through a list of dashboards Creating and Playing a Playlist + New Create a new dashboard Creating a New Dashboard + Import Import a dashboard that  was saved in JSON file format Importing a Dashboard Resources Search View the list of resources Viewing Resources Upload Upload resources into the database Uploading Resources <p>Admin \u2013 this tab is available only for Super Admin users </p> Global Users Manage users User Management by a Super User Global Orgs Manage organizations Adding an Organization Load Generators Define the available load generators Managing Load Generators Data Sources A data source is a statistics data source. There are two types:  \u009f WebLOAD Data  source \u2013 get information from a WebLOAD session. By default, this is the  local installation, but it can be changed  to point to a different one. Note \u2013 only one WebLOAD data source can  be used at a time per organization (the default one) \u2013 to use more than one,  create another organization and switch to  it.  Other \u2013WebLOAD Dashboard can access other  time based data sources and show  them alongside the WebLOAD data. Changing   the Back-End Server\u2019s Plugins List the installed plugins Server Settings Show the current configuration Server Stats Show the usage stats Logged in user You Profile Change your user name, password, and UI preferences See EULA View the End User License Agreement Sign out Sign out Logged in user\u2019s Org Preferences Change preferences at the Organizational level Managing Organizations Users Manage the organization\u2019s users,  including their roles (permissions) Managing Users API Keys Manage  API access Switch to Switch  between organizations in which you are a member. Note that when you switch to  an organization, your permissions are the ones dictated by your role in that  particular organization. User Editing by a Super Admin + New Organization Add  an organization Adding an Organization"},{"location":"dashboard/global_lab_load_generators/","title":"Global Lab Load Generators","text":"<p>Globa Lab Load Generators are a way to dynamically allocate local load-generators. Here an Administrator can create a list of all available local load-generators - when a load-generator is used in a test, it will be marked as 'Busy' so it will not be allocated to more tests until the test is over and then it will become 'Available' again.</p> <p>Global Lab Load Generators are not the same as the Organization level Load Generators, which are a list of load-generators that can be used by an organization - be local, lab mamanged or cloud.</p>"},{"location":"dashboard/global_lab_load_generators/#adding-lab-load-generators","title":"Adding Lab Load Generators","text":"<p>To add a new lab load generator: </p> <ol> <li> <p>In the menu bar, select Admin &gt; Global Lab Load Generators. The Global Lab Load Generators window appears.  </p> <p></p> </li> <li> <p>Click +Add a new lab load generator. </p> <p>An Add New Lab Load Generator window appears.</p> <p></p> </li> <li> <p>In the Name field, specify the load generator\u2019s IP address or host name.  </p> </li> <li> <p>In Group, optionally, specify a group that can be used to filter for certain load-generators.</p> </li> </ol>"},{"location":"dashboard/global_lab_load_generators/#using-lab-load-generators-in-the-console","title":"Using Lab Load Generators in the Console","text":"<ol> <li> <p>Create an API Key. See API Key</p> </li> <li> <p>In the Console Tools &gt; Cloud Options click 'Add' and select 'Lab Load Generator'</p> <p>Lab Load Generators, even though local, are dynamic machines, like a private Cloud, so are defined in the Cloud Settings.</p> <p></p> </li> <li> <p>Specifcy the end-point URL that points to the Dashboard server that manages the load-generators, e.g. : <code>http://mydashboard:3000</code></p> </li> <li> <p>Specify the credentials - this is the API Key value from the step above</p> </li> <li> <p>Optionally - specify Group to filter just Load-Generators from that Group</p> </li> </ol>"},{"location":"dashboard/installation/","title":"Installing WebLOAD Dashboard","text":"<p>This section describes the standard WebLOAD Dashboard installation process.  </p>"},{"location":"dashboard/installation/#installation-instructions","title":"Installation Instructions","text":"<p>The WebLOAD Dashboard is part of the regular WebLOAD installation.  To install the WebLOAD Dashboard: </p> <ol> <li> <p>In the Select Components window of the WebLOAD installation wizard, select either of the following options: </p> <ul> <li> <p>Select Full Installation and check the WebLOAD Dashboard checkbox to have the WebLOAD Dashboard installed locally as part of a full installation. You can also optionally check the WebLOAD Dashboard as Service checkbox to register the installed WebLOAD Dashboard as a Windows service.  </p> </li> <li> <p>Select Cloud Server to only install the  WebLOAD Dashboard.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"dashboard/installation/#enabling-webload-dashboard","title":"Enabling WebLOAD Dashboard","text":"<p>As a prerequisite to using WebLOAD Dashboard, you must first, in the WebLOAD Console (version 10.2 and up), enable the importing of sessions to the desired database as follows. </p> <ol> <li> <p>Select Tools &gt; Global Options &gt; Database. </p> <p></p> </li> <li> <p>Make sure the Insert statistics into Postgres database during the session checkbox is selected. </p> </li> <li> <p>Select the Insert PMM data into database checkbox.</p> </li> </ol>"},{"location":"dashboard/introduction/","title":"Introduction","text":"<p>RadView\u2019s WebLOAD Dashboard provides a single unified command and control interface for creating, executing, scheduling, and analyzing tests \u2013 all directly from your web browser, either on-premises or in the Cloud. </p> <p>Some of the tasks you can accomplish using WebLOAD Dashboard include: </p> <ul> <li>Create and edit load tests \u2013 based on a WebLOAD script, a WebLOAD template, or using a single URL/API </li> <li>Upload, add and manage tests, resources, and sessions </li> <li>Execute and schedule test runs </li> <li>Analyze results using ready-made and self-configured dashboards </li> <li>Share tests and results with peers </li> <li>Manage access permissions for users and groups  </li> <li>Download test results to your local machine for further analysis with WebLOAD Analytics </li> </ul> <p>Note: In previous WebLOAD versions, a WebLOAD script was called an \u201cAgenda\u201d. </p>"},{"location":"dashboard/manage_sessions/","title":"Managing Sessions","text":"<p>In WebLOAD Dashboard you can manage the following types of sessions: </p> <ul> <li>The sessions of load tests created and run in the WebLOAD Dashboard </li> <li>Sessions that were created in the WebLOAD Console, and uploaded to the WebLOAD Dashboard. For instructions how to upload sessions to the WebLOAD Dashboard, seeUploading a session . </li> </ul>"},{"location":"dashboard/manage_sessions/#viewing-load-sessions","title":"Viewing Load Sessions","text":"<p>To view the load sessions: </p> <ul> <li>In the menu bar, select Sessions &gt; Search. The Load Sessions table appears.  </li> </ul> <p></p> <p>The Load Sessions table provides the following information and available actions, for each Load Session: </p> Item Description Name The name of the load  session.  Clicking the name opens the Dashboard page  for this session. enabling you to view the results of this session. Test The name of the corresponding load test. From The date and time when the  load session started running. To The date and time when the  load session finished running. Status Whether the test passed or failed test  execution. Failed  Reason If the test failed, displays the reason for  failure. Instructs WebLOAD to  delete this load session. Instructs WebLOAD  to download the session results to the local  computer. The results are downloaded as a zip file that contains the  following files: .ls, .mdb, .sdb, .isd, .dat.  You can then open  the session in WebLOAD Console or  WebLOAD Analytics. Enables manually running a  test created in WebLOAD Dashboard,  now or at a specified time. Refer to Scheduling a one-time test run. Instructs WebLOAD to stop  running the test. Show  in Dashboard Enables specifying which  sessions to display in the dashboard. This is very useful for comparing the  statistics from multiple sessions."},{"location":"dashboard/manage_sessions/#filtering-the-load-sessions-display","title":"Filtering the Load Sessions display","text":"<p>The Filter bar, above the Load Sessions table, provides various options for filtering the display. </p> <p></p> <p>You can filter the Load Sessions table display by: </p> <ul> <li>Session name, using the Find by Session Name box. </li> <li>Test name, using the Find by Test Name box. </li> <li>Test status, using the All Statuses drop-down box </li> <li>Test date, using the All Dates drop down box </li> </ul>"},{"location":"dashboard/manage_sessions/#uploading-a-session","title":"Uploading a session","text":"<p>You can upload to WebLOAD Dashboard, sessions that were created in the WebLOAD Console. Each session created in the WebLOAD Console consists of the following four types of files; to upload the session, you need to upload all four files: </p> <ul> <li><code>.ls</code> - Load Session files </li> <li><code>.dat</code> - Load Session data files </li> <li><code>.sdb</code> - Statistics database files </li> <li><code>.isd</code> - Index statistics database files </li> </ul> <p>To upload a session: </p> <ol> <li> <p>Do one of the following: </p> <ul> <li>In the menu bar, select Session &gt; Upload </li> </ul> <p>Or </p> <ul> <li>In the Load Sessions table, click Upload Session </li> </ul> <p>The Session Upload page is displayed. </p> <p></p> </li> <li> <p>Click Select session files. </p> </li> <li> <p>In the file explorer dialog that appears, navigate to the load session\u2019s files, select them, and click Open.</p> </li> </ol>"},{"location":"dashboard/manage_tests/","title":"Managing Tests","text":""},{"location":"dashboard/manage_tests/#viewing-tests","title":"Viewing Tests","text":"<p>You can view all the load tests you created in WebLOAD Dashboard. To view the load tests: </p> <ul> <li>In the menu bar, select Tests &gt; Search. </li> </ul> <p>The Load Tests page appears, listing the load tests in a table format. </p> <p></p> <p>The Load Tests table provides the following information and actions, for each Load Test: </p> <p> </p> Item Description Name The name of the Load test.  Clicking the name opens the test\u2019s  definitions page, enabling you  to edit them. Refer to Editing a load test . Test  Type The type of test: Either URL/API, Script,  or Template. Last  Update The date and time when the  test definitions were last updated, or the test was run manually. This field  shows no indication of whether the test is being executed in recurrence mode. Next  Execution The date and time when the  test is next scheduled to run. Refer to Setting recurring test runs  and Scheduling a one-time test run. Last  Execution The date and time when the test last  started running. Last Session State Whether the test passed or failed the last  test execution. Enables viewing the last  session of this test. Selecting this option opens a Dashboard page displaying  the last session of the test. Refer to Using Dashboards Enables manually running  this test now or at a specified time. Refer to Scheduling a one-time test run . Instructs WebLOAD to stop  the running test. Enables viewing all this  test\u2019s sessions. Selecting this option opens a Load Sessions page Figure 23 that displays  all of this test\u2019s sessions. Instructs WebLOAD to  delete the load test. Refer to Deleting a load."},{"location":"dashboard/manage_tests/#creating-a-new-load-test","title":"Creating a new load test","text":"<p>You can create a new load test anytime. To create a new load test: </p> <ol> <li> <p>Perform one of the following: </p> <ul> <li>Select Tests &gt; New and click Add Load Test. The Create a new Load Test page appears. </li> <li>Select Tests &gt; Search, and click + Add a  new load test. The Create a new Load Test page appears. </li> <li>In the homepage, see the Create a new Load Test  pane. </li> </ul> <p></p> </li> <li> <p>Select the type of test to create. Refer to the following for detailed explanations: </p> <ul> <li> <p>Creating a URL/API Load Test </p> </li> <li> <p>Creating a Script Load Test </p> </li> <li> <p>Creating a Template Load Test </p> </li> </ul> </li> </ol>"},{"location":"dashboard/manage_tests/#creating-a-urlapi-load-test","title":"Creating a URL/API Load Test","text":"<p>Use this option to instantly create a load test for testing a load on a URL and/or API. </p> <p>After entering the load test specifications, WebLOAD automatically creates a test according to the specifications. </p> <p>To create a URL/API load test: </p> <ol> <li> <p>Perform one of the following: </p> <ul> <li>Select Tests &gt; New and click Add Load Test. The Create a new Load Test page appears. </li> <li>Select Tests &gt; Search, and click + Add a new load test. The Create a new Load Test page appears. </li> <li>In the homepage, see the Create a new Load Test pane. </li> </ul> <p></p> <p></p> </li> <li> <p>Select URL/API Test.</p> <p>A Create Load Test page appears. </p> <p></p> </li> <li> <p>Specify the test settings. </p> <pre><code>    The following table describes the information you need to provide for defining the URL/API Load Test:\n\n    | **Item**                                     | **Description**                                              |\n    | -------------------------------------------- | ------------------------------------------------------------ |\n    | **General**                                  |                                                              |\n    | **Test  Name**                               | The name of the Load test.                                   |\n    | **Request  parameters**                      | In this section, specify  the URL of the site to be tested. You can in addition create an HTTP web  service call. |\n    | **Request  URL**                             | Specify the URL of the  site to be tested.                   |\n    | ***Method\\***                                | Optionally, specify a  method for an HTTP web service call, from the drop-down list: **Get**, **Post**, **Put**, or **Delete**. |\n    | **Request  Body**                            | Optionally, specify the  web service body for the HTTP web service call. |\n    | **HTTP  Headers**                            | Optionally, specify the web service header(s):  Click **Add** for  every header you wish to specify, and select the  header from the dropdown list, or enter a  custom header; then enter a value for the header. |\n    | **Sleep**                                    | Specify the sleep time between each URL/API call.            |\n    | **Load  Configuration**                      | For each of the following, enter a number, or use the slider tool to  specify the number. |\n    | **Max  Virtual Users**                       | The maximum number of  Virtual Users to generate.            |\n    | **Ramp up time in minutes**                  | The time interval over  which to increase the load from 0 Virtual Users to the number of virtual  users specified in Max Virtual Users. |\n    | **Time to run Max Virtual Users in minutes** | The time interval during  which to run the load at the max number of Virtual Users |\n    | **Ramp down time in minutes**                | The time interval over  which to decrease the load in order to return to 0 Virtual User |\n    | **Load  Generators**                         |  Select the load generator  machines that will participate in the load test, as described in [*Specifying Load Generators for a load test* ](#specifying-load-generators-for-a-load-test). |\n    | **Recurrence**                               | Select this option if you  wish to schedule automatic periodic execution of the load test. Refer to [*Setting recurring test runs* ](#setting-recurring-test-runs). |\n\n   The URL/API load test generates an increasing load over a set time frame until reaching a defined maximum load size. The maximum load size is then run for a set period after which the load is reduced back to the base load again over a time frame defined by the user. The load increments are calculated automatically by WebLOAD based on the parameters defined.\n\n   Thus, the load will start with 0 Virtual Users and  increase over the time frame defined in the **Ramp up time** field to reach the number of Virtual Users defined in the **Max Virtual Users** field. The test will then continue running with the maximum number of Virtual Clients for the period of time defined in the **Time to run Max Virtual Users** field, after which load will return to 0 Virtual Users value over the time frame set in the **Ramp down time** field.\n</code></pre> </li> <li> <p>Select one of the following: </p> <ul> <li> <p>Create Test \u2013 The test definitions are saved. </p> </li> <li> <p>Create and Run Test \u2013 The test definitions are  saved, and the test starts running immediately. </p> </li> <li> <p>Run in Sandbox Mode \u2013 The system saves all the test definitions,  but runs a limited test on the settings specified in the Request Parameters section while ignoring all the settings in the Load Configuration, Load Generators, and Recurrence sections. </p> </li> </ul> <p>This option is intended for SaaS users wishing to run a limited test prior to running the full test specified in the test definitions.  </p> </li> </ol>"},{"location":"dashboard/manage_tests/#creating-a-script-load-test","title":"Creating a Script Load Test","text":"<p>Use this option to create a load test based on a WebLOAD script that was created in WebLOAD Recorder. </p> <p>To create a script load test: </p> <ol> <li> <p>Perform one of the following: </p> <ul> <li>Select Tests &gt; New and click Add Load Test. The Create a   new Load Test page appears. </li> <li>Select Tests &gt; Search, and click + Add a new load test.    The Create a new Load Test page appears. </li> <li>In the homepage, see the Create a new Load Test pane. </li> </ul> <p> </p> </li> <li> <p>Select Script Test. </p> <p>A Create Load Test page appears. </p> <p></p> </li> <li> <p>Specify the test settings. The following table describes the information you need to provide for defining the Script Load Test.</p> Item Description General The name of the Load test. Scripts Specify the scripts that will participate in the test, as well as  their relative weights, as described in Specifying Scripts for a load test . Load  Configuration For each of the following,  enter a number, or use the slider tool to specify the number. Max Virtual Users The maximum number of Virtual Users to generate. Ramp up time in minutes The time interval over  which to increase the load from 0 Virtual Users to the number of virtual  users specified in Max Virtual Users. Time to run Max Virtual Users in minutes The time interval during  which to run the load at the max number of Virtual Users Ramp down time in minutes The time interval over  which to decrease the load in order to return to 0 Virtual Users Load  Generators Select the load generator  machines as described in Specifying Load Generators for a load test . Recurrence Select this option if you  wish to schedule automatic periodic execution of the load test. Refer to Setting recurring test runs . <p>The Script load test generates an increasing load over a set time frame until reaching a defined maximum load size. The maximum load size is then run for a set period after which the load is reduced back to the base load again over a time frame defined by the user. The load increments are calculated automatically by WebLOAD based on the parameters defined. </p> <p>Thus, the load will start with 0 Virtual Users and increase over the time frame defined in the Ramp up time field to reach the number of Virtual Users defined in the Max Virtual Users field. The test will then continue running with the maximum number of Virtual Clients for the period of time defined in the Time to run Max Virtual Users field, after which load will return to 0 Virtual Users value over the time frame set in the Ramp down time field. </p> </li> <li> <p>Select one of the following: </p> <ul> <li> <p>Create Test \u2013 The test definitions are saved. </p> </li> <li> <p>Create and Run Test \u2013 The test definitions are saved, and the test starts running immediately.</p> </li> <li> <p>Run in Sandbox Mode \u2013 The system saves all the test definitions, but runs a limited test on the settings specified in the Scripts section while ignoring all the settings in the Load Configuration, Load Generators, and Recurrence sections. </p> </li> </ul> <p>This option is intended for SaaS users wishing to run a limited test prior to running the full test specified in the test definitions.  </p> </li> </ol>"},{"location":"dashboard/manage_tests/#specifying-scripts-for-a-load-test","title":"Specifying Scripts for a load test","text":"<p>To specify the script participating in aScript Load Test: </p> <ol> <li> <p>For every script you want to include in the Script Load test, click Add Script. </p> <p></p> <p>The Scripts page appears. </p> <p></p> <p>The Scripts page lists the scripts uploaded to the WebLOAD Dashboard. For details how to upload a script, refer to Uploading Resources . If a script was uploaded with the folder in which it is located, the folder name appears; in that case, click the folder name to navigate to the script itself. </p> </li> <li> <p>Select a script by clicking Select Script in the corresponding line.  </p> <p>You are returned to the Script Load Test page, with the selected script appearing in its Scripts list. </p> <p></p> </li> <li> <p>In the % column, specify the relative weight of each script. Make sure that the percentages all add up to 100%. If you wish to give the scripts identical weights, click Make Equal. </p> </li> </ol>"},{"location":"dashboard/manage_tests/#creating-a-template-load-test","title":"Creating a Template Load Test","text":"<p>Use this option to create a load test based on a WebLOAD template file that was created in WebLOAD Console. </p> <p>To create a template load test: </p> <ol> <li> <p>Perform one of the following: </p> <ul> <li>Select Tests &gt; New and click Add Load Test. The Create a new Load Test page appears. </li> <li>Select Tests &gt; Search, and click + Add a new load test. The Create a new Load Test page appears. </li> <li>In the homepage, see the Create a new Load Test pane. </li> </ul> <p> </p> </li> <li> <p>Select Template Test. </p> <p>A Create Load Test page appears. </p> <p></p> </li> <li> <p>Specify the test settings. The following table describes the information you need to provide for defining the Template Load Test: </p> Item Description General Name The name of the Load test. Path Click  Select Template to  select a template from the list appearing in the Resources &gt; Templates page  that appears. WebRM Virtual Clients allocation This is relevant  for a WebRM configuration. Specify the number of virtual users to allocate  for this test from the floating WebRM license. Recurrence Select this option  if you wish to schedule automatic periodic execution of the load test. Refer  to Setting recurring test runs. </li> <li> <p>Select one of the following: </p> <ul> <li>Create Test \u2013 The test definitions are saved. </li> <li>Create and Run Test \u2013 The test definitions are saved, and the test starts running immediately. </li> </ul> </li> </ol>"},{"location":"dashboard/manage_tests/#specifying-load-generators-for-a-load-test","title":"Specifying Load Generators for a load test","text":"<p>Load generators are machines that bombard tested site with transactions to test site scalability and integrity.  Both a URL/API Load Test and aScript Load Test require you to specify the load generators that will participate in the test.  Note that the list of available load generators is defined by a Super Admin, as described in Adding Load Generators </p> <p>To specify the load generators participating in a load test: </p> <ol> <li> <p>Keep in mind that each Location in the list defines a group of one or more load generators having the same \u201cLocation\u201d tag. For a detailed explanation, refer to Setting Load Generators\u2019 Location Tag </p> </li> <li> <p>Select a group of load generators with an identical Location, by entering a non- zero percentage in the corresponding % column. The percentage specifies the relative weight of this group of load generators. </p> <p></p> </li> <li> <p>Make sure the sum of all the percentages is 100%. </p> <p></p> </li> </ol>"},{"location":"dashboard/manage_tests/#setting-recurring-test-runs","title":"Setting recurring test runs","text":"<p>For each load test you create \u2013 see Creating a new load test  \u2013 you can schedule automatic periodic execution of the test. </p> <p>Note that you can also, at any time, manually run or schedule a one-time test run. Refer to Scheduling a one-time test run . </p> <p>To set automatic periodic execution of a load test: </p> <ol> <li> <p>In the Create Load Test page, accessed as described inCreating a new load test , select the Recurrence checkbox. </p> <p></p> </li> <li> <p>Set the frequency: Every Day or Every Week. </p> </li> <li> <p>For a weekly recurrence, specify the day of the week on which to run the test. </p> </li> <li> <p>Define the exact time of day when to run the test. </p> </li> <li> <p>Specify the Time Zone according to which the time is determined.</p> </li> </ol>"},{"location":"dashboard/manage_tests/#scheduling-a-one-time-test-run","title":"Scheduling a one-time test run","text":"<p>You can, at any time, manually run or schedule a one-time test run, as explained in this section. </p> <p>Note that you can also schedule automatic periodic execution of a test, as part of test definition. Refer to Creating a new load test </p> <p>To manually run a load test: </p> <ol> <li> <p>In the menu bar, select Tests &gt; Search. The Load Tests table appears (Load Test Table). </p> <p></p> </li> <li> <p>In the line corresponding to the test you wish to run, click. A Run Test query is displayed.       </p> </li> <li> <p>Do one of the following: </p> <ul> <li>To run the test now, click Run Now. </li> <li>To run the test at a specific later time, click  Run Later, and specify the date and time for running the test. </li> </ul> <p></p> </li> <li> <p>Click Run. </p> </li> </ol>"},{"location":"dashboard/manage_tests/#editing-a-load-test","title":"Editing a load test","text":"<p>To edit a load test: </p> <ol> <li> <p>In the menu bar, select Tests &gt; Search. </p> <p>The Load Tests table appears. </p> </li> <li> <p>In the Name column, click the name of the test you wish to edit. </p> <p>The test definition page appears. The following figure shows an example of the page that appears when selecting to edit a template load test. </p> <p></p> </li> <li> <p>Edit the test definitions as desired. For an explanation of the various fields, refer to the relevant explanation in Creating a new load test </p> </li> <li> <p>Click Update.  </p> </li> </ol>"},{"location":"dashboard/manage_tests/#deleting-a-load-test","title":"Deleting a load test","text":"<p>To delete a load test: </p> <ol> <li> <p>In the menu bar, select Tests &gt; Search. The Load Tests table appears (Load Test Table)</p> </li> <li> <p>In the line corresponding to the test you wish to edit, click.      A Delete Test page appears. </p> <p></p> </li> <li> <p>In the Delete Test page that appears, you can select between: </p> <ul> <li>Deleting the load test and all its session. </li> <li>Deleting only the load test, but keeping the test sessions. </li> </ul> </li> </ol>"},{"location":"dashboard/managing_dashboards/","title":"Managing Dashboards","text":"<p>In WebLOAD Dashboard you can manage any dashboard saved in the database, as well as create new dashboards, delete dashboards, import and export dashboards in JSON format, and save your customized dashboards.</p>"},{"location":"dashboard/managing_dashboards/#loading-a-dashboard","title":"Loading a Dashboard","text":"<p>When you access WebLOAD Dashboard, the default Home dashboard is displayed. You can however select to display any other dashboard from the database, as described in this section.  </p> <p>Note that you can also import a dashboard that was saved as a JSON file, as described inImporting a Dashboard .</p> <p>To load a dashboard: </p> <ol> <li> <p>In the menu bar, select Dashboards &gt; Main Dashboard. </p> </li> <li> <p>Click the dashboard drop-down in the dashboard header. A list of all the dashboards in the database is displayed.</p> <p></p> </li> <li> <p>Optionally enter a text string in the Search box to filter the display by dashboards whose name contains that text string. </p> </li> <li> <p>Optionally, click starred in the right side of the Search box to filter the display by your favorite dashboards (= dashboards you had starred). </p> </li> <li> <p>Select a dashboard from the list. WebLOAD Dashboard displays the selected dashboard. </p> </li> </ol>"},{"location":"dashboard/managing_dashboards/#exporting-importing-a-dashboard-in-json-format","title":"Exporting &amp; Importing a Dashboard in JSON Format","text":"<p>You can export a dashboard as a JSON file, and import dashboards that were saved in JSON file format. </p> <p>For instructions how to import a dashboard that was saved as a JSON file, refer to Exporting a Dashboard as a JSON File. </p>"},{"location":"dashboard/managing_dashboards/#importing-a-dashboard","title":"Importing a Dashboard","text":"<p>To import a dashboard that was saaved in JSON file format: </p> <ol> <li> <p>Do either of the following: </p> <ul> <li>In the menu bar, select Dashboards &gt; Import.**  </li> </ul> <p></p> <ul> <li>In the Dashboard header, click the dashboard drop-down and select Import. </li> </ul> <p></p> </li> <li> <p>In the Import Dashboard window that appears, select Upload .json File, and specify the desired JSON file. </p> <p>Alternatively, paste JSON content into the Import Dashboard window and click Load. </p> <p></p> <p>WebLOAD Dashboard displays the selected dashboard.</p> </li> </ol>"},{"location":"dashboard/managing_dashboards/#creating-a-new-dashboard","title":"Creating a New Dashboard","text":"<p>You can create a new empty dashboard and define it as desired. To create a new dashboard: </p> <ol> <li> <p>Do either of the following: </p> <ul> <li>In the menu bar, select Dashboards &gt; + New. </li> </ul> <p></p> <ul> <li>In the Dashboard header, click the dashboard drop-down and click + Create New. </li> </ul> <p></p> <p>A new empty dashboard appears.  </p> </li> <li> <p>Configure the dashboard as desired.</p> </li> </ol>"},{"location":"dashboard/managing_dashboards/#saving-your-customized-dashboard","title":"Saving your Customized Dashboard","text":"<p>After changing a dashboard as desired, you can save the customized dashboard to keep all the changes. Note that two changes are not saved: the selected sessions and the selected time filter. </p> <p>To save a customized dashboard: </p> <ol> <li> <p>Click the Manage Dashboard Settings icon in the middle of the dashboard header, and select Save As. </p> <p></p> </li> <li> <p>Give your dashboard a unique name by editing the current name, which appears in the New name field.  </p> </li> </ol>"},{"location":"dashboard/managing_dashboards/#setting-the-default-home-dashboard","title":"Setting the Default (Home) Dashboard","text":"<p>You can set any desired dashboard as your Home (default) dashboard, and you can also revert to the global WebLOAD Dashboard default any time. </p> <p>To set the Home dashboard: </p> <ol> <li> <p>In the right side of the menu bar, click the down arrow adjacent to your user name.</p> <p></p> </li> <li> <p>In the dropdown list that appears:</p> <ul> <li> <p>To set the default dashboard at the user level, select Profile and then in the Profile window, set the Home Dashboard in Preferences. </p> </li> <li> <p>To set the default dashboard at the organization level, select Preferences and then in the Org Preferences window, set the Home Dashboard in Preferences. </p> </li> </ul> <p>Note that your personal default takes precedence over the Org default, which takes precedence over the global default. </p> </li> <li> <p>To revert to the global default, select Preferences and then in the Org Preferences window, set the Home Dashboard to Default. </p> </li> </ol>"},{"location":"dashboard/managing_dashboards/#deleting-a-dashboard-from-the-database","title":"Deleting a Dashboard from the Database","text":"<p>To delete a dashboard from the database: </p> <ol> <li> <p>Click the Manage Dashboard Settings icon in the middle of the dashboard header, and select Delete dashboard. </p> <p></p> </li> <li> <p>Confirm the operation.</p> </li> </ol>"},{"location":"dashboard/managing_load_generators/","title":"Managing Load Generators","text":"<p>Both aURL/API Load Test andScript Load Test require you to specify, from among the available load generators, which load generators to include in the test.</p> <p>This section is about Organization level Load-Generators which controls which load-generators are available per organization and offers another level of abstraction (Locations), not to be confused with Globa Lab Load Generators that is a global service to manage all local load-generators accross all Consoles.</p>"},{"location":"dashboard/managing_load_generators/#adding-load-generators","title":"Adding Load Generators","text":"<p>To add a new load generator: </p> <ol> <li> <p>In the menu bar, select Profile &gt; Load Generators. The Load Generators window appears.  </p> <p></p> <p></p> </li> <li> <p>Click +Add a new load generator. </p> <p>An Add New Load Generator window appears.</p> <p></p> </li> <li> <p>In the Name field, specify the load generator\u2019s IP address or host name.  </p> </li> <li> <p>In Generator Type, select whether the generator is a Local Machine or a Cloud Machine.  </p> <p>If you want to specify a Cloud Machine, first make sure it was specified as a Cloud Host in the WebLOAD Console. Refer toSpecifying a Cloud Host as a Load Generator </p> </li> <li> <p>In Location, enter a human-readable field. This value does not have to be unique per load generator machine, and has an important role, as described inSetting Load Generators\u2019 Location Tag </p> <p>Note that if you leave the Location field empty, the system will automatically give this field the value entered in the Name field. </p> </li> </ol>"},{"location":"dashboard/managing_load_generators/#setting-load-generators-location-tag","title":"Setting Load Generators\u2019 Location Tag","text":"<p>Load Generators are defined by Name and Location. However, in the test-creation pages, the load generators are listed by Location only (and not by Name).  </p> <p></p> <p>This is helpful when defining a load test, because of the relationship between Name and Location, as follows: </p> <ul> <li>Multiple separate machines can have the same Location (by defining multiple load generators whose Locations are identical but whose Names are not). For example: </li> </ul> <p>If:</p> <ul> <li>You want all load generators in Test Lab 1 to participate in certain tests. </li> </ul> <p>Then:</p> <ul> <li>Give the same \u201cTest Lab 1\u201d Location to all the load generator machines located in Test Lab 1.  </li> </ul> <p>Finally:</p> <ul> <li>You need only to select \u201cTest Lab 1\u201d in the Load Generators section of the Create Load Test page, and all the load generators whose Location is \u201cTest Lab 1\u201d will be included. </li> </ul> <ul> <li>Likewise, any one machine can be given multiple different Locations (by defining multiple load generators whose Names are identical but whose Locations are not). For example: </li> </ul> <p>If:</p> <ul> <li>You sometimes want to choose load generators based on their operating system, and other times based on their geographical location. </li> </ul> <p>Then: </p> <ul> <li>Define each load generator twice, once with Location describing its OS (Windows or Linux), and once with Location describing its geographical location (New York or London).  </li> </ul> <p>Finally: </p> <ul> <li>You need only to select \u201cWindows\u201d, \u201cLinux\u201d, \u201cNew York\u201d or \u201cLondon\u201d in the Load Generator section of the Create Load Test page, and only the load generators fitting that description will be included.</li> </ul>"},{"location":"dashboard/managing_load_generators/#specifying-a-cloud-host-as-a-load-generator","title":"Specifying a Cloud Host as a Load Generator","text":"<p>If you want to specify a cloud machine as a load generator, you need to first define the cloud host machine in the WebLOAD Console. </p> <p>To define a cloud host in WebLOAD Console: </p> <ol> <li>In WebLOAD Console, set up a WebLOAD Dashboard Account as follows: <ol> <li>Create an Amazon EC2 account. </li> <li>Click Cloud Options in the Tools tab of the ribbon to create a WebLOAD Dashboard account in which you specify your Amazon security credentials, the specific Amazon region where the machines should be located, and the WebLOAD image to install on the Amazon machines.  </li> </ol> </li> </ol> <p>For a full description , refer to Setting Up Cloud Computers in the WebLOAD Console User Guide. </p> <ol> <li>In WebLOAD Console, define cloud host computers as follows: <ol> <li>Click Add in the Host Selection window of the WebLOAD wizard.  </li> <li>In the Add Host Computer window that appears, select Add Cloud host . </li> </ol> </li> </ol> <p>For a full description , refer to Adding Host Computers in the WebLOAD Console User Guide. </p> <p></p> <p>`                             </p>"},{"location":"dashboard/managing_organizations/","title":"Managing Organizations, Users and Admins","text":""},{"location":"dashboard/managing_organizations/#understanding-organizations-and-admins","title":"Understanding Organizations and Admins","text":""},{"location":"dashboard/managing_organizations/#organizations-and-admins","title":"Organizations and Admins","text":"<p>Organizations are a method of compartmentalizing dashboards, data source and users. You do not need to create multiple organizations if you want all your users to have access to the same set of dashboards and data. If however you do not want all users to access the same dashboards and data sources, define organizations as described in Adding an Organization. </p> <p>If you will be defining organizations, you can have two levels of administrators: </p> <ul> <li> <p>Organizational administrators: These admins can manage users within specific organizations in a particular WebLOAD Dashboard installation. </p> </li> <li> <p>Super administrators: These super admins can manage users across all organizations in a WebLOAD Dashboard installation. They can also change and access system-wide settings. </p> </li> </ul>"},{"location":"dashboard/managing_organizations/#organizational-administrators","title":"Organizational Administrators","text":"<p>As an Organizational administrator, you can add Data Sources, add Users to your Organization and modify Organization details and options. </p> <p>Super Administrators</p> <p>As a Super Administrator, you have complete access to any Organization or User in a specific WebLOAD Dashboard installation. When logged in as super admin, the menu bar contains an additional Admin option to enable you to perform global administration actions. </p> <p></p>"},{"location":"dashboard/managing_organizations/#managing-users","title":"Managing Users","text":"<p>Organizational admins can manage users within the specific organization, while super admins can manage all users, across all organizations. </p>"},{"location":"dashboard/managing_organizations/#user-types","title":"User Types","text":"<p>There are two main types of users: </p> <ul> <li>Super admin user \u2013 has full permissions to all of the WebLOAD Dashboard\u2019s options and settings. </li> <li>Organizational user. Within the organization, a user can have any of the following roles: <ul> <li>Viewer \u2013 Can only view the Dashboard </li> <li>Read-Only Editor \u2013 Can edit dashboards, but cannot save the changes </li> <li>Editor \u2013 Can manage, create and execute tests and sessions, create and update dashboards, upload resources, and save the changes. This is the typical WebLOAD Dashboard user. </li> <li>Organizational Admin \u2013 has full permissions to all of the organization\u2019s options and settings: can edit, save, and make changes at the organizational level, including creating organizational users and editing organizational users. </li> </ul> </li> </ul>"},{"location":"dashboard/managing_organizations/#user-management-by-a-super-admin","title":"User Management by a Super Admin","text":"<p>Super admins can add users of any type, to any organization. User Creation by a Super Admin </p> <p>To add a user of any type: </p> <ol> <li> <p>In the Menu bar, select your user name and then select Admin &gt; Global Users.  </p> </li> <li> <p>In the User window that appears, click + Add new user. </p> <p></p> </li> <li> <p>In the Add New User window that appears, enter the new user  name, email, username and password. Then click Create. </p> <p></p> </li> <li> <p>The new user is created, and appears in the table in the Users window (Figure). </p> </li> <li> <p>The new user\u2019s settings can now be defined/edited. </p> <ul> <li>A super admin can set the new user\u2019s permissions and other settings, by clicking Edit in the respective row in the Users window (Figure). For instructions, refer toUser Editing by a Super Admin \u2013 Editing User\u2019s Permissions, Organizations, Roles and Details. </li> <li>An organizational admin can set the new user\u2019s role in the organization, described below.</li> </ul> </li> </ol>"},{"location":"dashboard/managing_organizations/#user-editing-by-a-super-admin-editing-users-permissions-organizations-roles-and-details","title":"User Editing by a Super Admin - Editing User's Permissions, Organizations, Roles and Details","text":"<p>A super admin can set a user\u2019s permissions, organizational roles, and other settings. To edit a user: </p> <ol> <li> <p>In the Menu bar, select your user name and then select Global Users.  </p> </li> <li> <p>In the Users window that appears, click Edit in the row of the user you wish to edit. </p> <p> </p> <p>The Edit User window appears, enabling you to edit various user settings. </p> <p></p> </li> <li> <p>You can make the user a super administrator by selecting the Admin checkbox in the Permissions section. </p> </li> <li> <p>In the Organizations section you can specify in which Organizations the user is a member, and specify the user\u2019s Role in each. The available organizational roles and their permissions are described in Organizational user . </p> </li> <li> <p>You can edit the user\u2019s name, email, username, and change his password.  </p> </li> </ol>"},{"location":"dashboard/managing_organizations/#user-management-by-an-organizational-admin","title":"User Management by an Organizational Admin","text":"<p>An organizational admin can add existing users to the organization, and edit the roles of the organizational users. </p>"},{"location":"dashboard/managing_organizations/#user-addition-by-an-organizational-admin","title":"User Addition by an Organizational Admin","text":"<p>To add a user to the organization: </p> <ol> <li> <p>In the Menu bar, select your user name and then select Users.  </p> <p></p> </li> <li> <p>In the Organization Users window that appears, click + Add or Invite. </p> <p></p> </li> <li> <p>Enter the Email or Username, and optionally the Name, of the user you wish to invite. For each additional user you wish to add, click Invite another and enter that user\u2019s details. Then click Invite Users. </p> </li> </ol> <p></p>"},{"location":"dashboard/managing_organizations/#user-editing-by-an-organizational-admin-editing-users-role","title":"User Editing by an Organizational Admin \u2013 Editing User\u2019s Role","text":"<p>An organizational admin can set a user\u2019s role in the organization. </p> <p>To edit a user\u2019s role: </p> <ol> <li> <p>In the Menu bar, select your user name and then select Users.  </p> <p></p> </li> <li> <p>In the Organization Users window that appears, you can set the Role of each organizational user. </p> <p></p> </li> </ol>"},{"location":"dashboard/managing_organizations/#managing-organizations","title":"Managing Organizations","text":"<p>Super admin users can add organizations (for an explanation of Organizations, refer to Organizations and Admins)).  </p>"},{"location":"dashboard/managing_organizations/#adding-an-organization","title":"Adding an Organization","text":"<p>To add an organization: </p> <ol> <li> <p>In the Menu bar, select your user name, and then select New Organization.  </p> <p></p> </li> <li> <p>In the New Organization window that appears, enter an Org. name, and click Create.</p> <p></p> <p>The Org Preferences window appears, populated with the new organization\u2019s name, enabling you to edit various organization\u2019s settings.</p> <p></p> </li> </ol> <p>To set the new organization\u2019s settings, refer to the instructions inEditing an Organization\u2019s Settings. </p>"},{"location":"dashboard/managing_organizations/#editing-an-organizations-settings","title":"Editing an Organization\u2019s Settings","text":"<p>To edit an organization\u2019s settings: </p> <ol> <li> <p>In the Menu bar, select your user name and make sure the organization name appearing below the user name, is the name of the organizations whose settings you wish to edit. If it is not, select Switch to in order to switch to that organization. </p> <p></p> </li> <li> <p>In the Menu bar, select your user name and then select Preferences.  </p> <p>The Org Preferences window appears, enabling you to edit various organization\u2019s settings </p> <p></p> </li> <li> <p>You can edit the organization\u2019s name and address. </p> </li> <li> <p>You can edit the organization\u2019s preferences: UI theme, Home dashboard, and Timezone.  </p> </li> <li> <p>You can change mange the organization\u2019s users by clicking Users &amp; Roles under Admin Pages. In the Organization Users window that appears, you can: </p> <ul> <li> <p>Add users </p> </li> <li> <p>Delete users </p> </li> <li> <p>Set the Role of each organizational user.         </p> </li> </ul> <p></p> </li> </ol>"},{"location":"dashboard/managing_organizations/#managing-api-keys","title":"Managing API Keys","text":"<p>To access the REST API programatically, you need to create an API key, by clicking API Keys under Admin Pages. </p> <p>The Key has a name for reference and a value. The value is only visible when creating the key and cannot be retrieved later. The key act under a role to control it's permissions, it is recommended to use least privileged role required.</p> <p></p> <p>Use the Key in an Authorization Header as Bearer, for example:</p> <pre><code>curl -H \"Authorization: Bearer eyJrIjoiSVl...\" http://localhost:3000/api/dashboards/home\n</code></pre>"},{"location":"dashboard/managing_resources/","title":"Managing Resources","text":"<p>The Resources tab enables loading any file type, to the WebLOAD Dashboard\u2019s Resources folder. You can use this functionality to upload the files of tests you created in WebLOAD Console, such as templates, scripts, sessions, etc. and any file used to test your system.</p> <p>The Resources tab also offers the option of creating sub-folders. If you want the uploaded templates or script to continue working once they are uploaded to WebLOAD Dashboard, you will need to create the same hierarchy as the original hierarchy of the files you are uploading.  </p>"},{"location":"dashboard/managing_resources/#viewing-resources","title":"Viewing Resources","text":"<p>To view the resources uploaded to WebLOAD Dashboard: </p> <ol> <li>In the menu bar, select Resources &gt; Search. </li> </ol> <p> </p> <p>The resources can be organized hierarchically in subfolders, or some or all of them can be located in the root of the Resources folder. To view the contents of a subfolder, click the subfolder name.  </p> <p>The Resources table provides the following information and available actions, for each resource or resource subfolder: </p> Item Description Name The name of the resource or folder  containing resources. Instructs  WebLOAD to delete the resource or folder. Refer to  Deleting a Resource or Resources folder . Instructs WebLOAD to  download the resource to the local computer. Enables creating a load test based on the  resource. Refer to  Creating a Load Test Based on a Resource ."},{"location":"dashboard/managing_resources/#uploading-resources","title":"Uploading Resources","text":"<p>To upload a resource into WebLOAD Dashboard: </p> <ol> <li> <p>In the menu bar, select Resources &gt; Search. The Resources page appears (Figure 26). </p> </li> <li> <p>If you wish to add a resource into the root folder of the WebLOAD Console Resources folder, click Upload Resources in the Resources page. </p> </li> <li> <p>If you wish to add a resource into a subfolder of the WebLOAD Console Resources folder: </p> <ol> <li> <p>Navigate to the subfolder in the folders tree displayed in the Resources page. If the sub folder does not yet exist, create it as described in Creating a Resources subfolder </p> </li> <li> <p>Click Upload Resource.  </p> </li> </ol> <p>The Upload Resources page appears. </p> <p></p> </li> <li> <p>In the Upload Resources page, click Select resource files. </p> </li> <li> <p>In the file explorer window that appears, navigate to the files and select them, and then click Open.  </p> </li> <li> <p>The files are uploaded to the folder you were in when you clicked Upload Resource. </p> </li> </ol>"},{"location":"dashboard/managing_resources/#creating-a-resources-subfolder","title":"Creating a Resources subfolder","text":"<p>To create a subfolder in the Resources folder: </p> <ol> <li> <p>In the menu bar, select Resources &gt; Search. The Resources page appears (Figure). </p> </li> <li> <p>If you wish to add a subfolder under the root folder of the WebLOAD Console Resources folder, click Create Folder in the Resources page. </p> </li> <li> <p>If you wish to add a subfolder under a specific subfolder of the WebLOAD Console Resources folder, navigate to the specific subfolder in the folders tree displayed in the Resources page. Then click Create Folder. </p> <p>The New Resource Folder page appears. </p> <p></p> </li> <li> <p>Specify the subfolder\u2019s name, and click Create.  </p> </li> </ol>"},{"location":"dashboard/managing_resources/#creating-a-load-test-based-on-a-resource","title":"Creating a Load Test Based on a Resource","text":"<p>You can create a load test based on either of the following types of resources: </p> <ul> <li>.wlp \u2013 a script as well as resources related to the script </li> <li>.tpl \u2013 a template file </li> </ul> <p>To create a load test based on a resource: </p> <ol> <li> <p>In the menu bar, select Resources &gt; Search. </p> </li> <li> <p>In the Resources table, click  adjacent to a resource of type .wlp or .tpl. </p> </li> <li> <p>If the resource was a .wlp file, the Create Load Test for a Script-type test appears, with the .wlp already appearing in the Script field. See Creating a Script Load Test . Set or edit any of the fields, and click Create Test. </p> </li> <li> <p>If the resource was a .tpl file, the Create Load Test for a template-type test appears, with the .tpl already appearing in the Template field. See Creating a Template Load Test . Set or edit any of the fields, and click Create Test. </p> </li> </ol>"},{"location":"dashboard/managing_resources/#deleting-a-resource-or-resources-folder","title":"Deleting a Resource or Resources folder","text":"<ol> <li> <p>In the menu bar, click Resources &gt; Search. </p> </li> <li> <p>Optionally navigate to a specific subfolder in the folders tree displayed in the Resources page. </p> </li> <li> <p>Click  adjacent to a resource or subfolder. </p> </li> <li> <p>You are requested to confirm the delete operation. </p> <p></p> </li> <li> <p>If the resource is a template, you can select between: </p> <ul> <li> <p>Deleting the template as well as its associated test and sessions </p> </li> <li> <p>Deleting only the template, but keeping the associated test and sessions. </p> </li> </ul> <p></p> </li> <li> <p>If you specified to delete a resources folder, keep in mind that although the templates located in this folder will be deleted, the tests and sessions from those folders will be kept for review and will be displayed in the Load Tests page and Load Sessions page (but without the ability to run them). </p> <p></p> </li> </ol>"},{"location":"dashboard/rest_api/","title":"REST API Reference","text":"<p>The Dashboard can be controlled using API. The backend server controls session-data, resources and Analytics. can be called on <code>http://localhost:8080/api</code>, see below the API documentation.</p> <p>The Front-end API controls load-tests, users, organizations, and is accessible on <code>http://localhost:3000</code> or <code>https://saas.radview.com</code> for SaaS users.  See Front-end API documentation. To access it, you will need API Key</p> <p>See scripts that uses these APIs to start tests and generate reports:</p> <ul> <li>Python script</li> <li>Groovy script</li> </ul> <p></p>"},{"location":"dashboard/sharing_dashboards/","title":"Sharing a Dashboard or Panel","text":"<p>The WebLOAD Dashboard provides several options for sharing a dashboard or a panel. </p>"},{"location":"dashboard/sharing_dashboards/#sharing-a-dashboard","title":"Sharing a Dashboard","text":"<p>There are several options for sharing a dashboard: </p> <ul> <li>Link to Dashboard \u2013 Produce a link for sharing a dashboard with other WebLOAD Dashboard users. </li> <li>Export \u2013 Export the dashboard as a JSON file. </li> </ul>"},{"location":"dashboard/sharing_dashboards/#accessing-the-share-dashboard-options","title":"Accessing the Share Dashboard Options","text":"<p>To access the dashboard sharing options:</p> <ol> <li> <p>Select the Share Dashboard icon  in the dashboard header. A Share window appears, displaying a link to the dashboard. </p> <p> </p> </li> <li> <p>Click any of the options: Link to Dashboard, or Export     A Share Dashboard window appears. </p> <p></p> </li> </ol>"},{"location":"dashboard/sharing_dashboards/#sharing-a-link-to-a-dashboard","title":"Sharing a Link to a Dashboard","text":"<p>You can easily share an entire dashboard, by providing the appropriate URL. To share a link to a dashboard: </p> <ol> <li> <p>Access the Share Dashboard window (Figure), as described inAccessing the Share Dashboard Options. </p> </li> <li> <p>Select the Link tab (Figure). </p> </li> <li> <p>Using the options in the Share Link window, you can produce a link to various variants of the dashboard, as described in the following table.</p> Item Description Current time range Determines whether the linked page will display data for the selected  time range or for the entire session time range. Selected Sessions Determines whether the  linked page will displays the data for the currently selected session(s), or  for the sessions appearing when the dashboard was last saved. Template variables Determines whether the  linked page will include template variables. Theme Determines whether the linked page will display the current theme,  the default light theme, or the default dark theme. </li> <li> <p>Click Copy to copy the URL displayed in the window, and send it to those with whom you want to share the dashboard.  </p> </li> </ol>"},{"location":"dashboard/sharing_dashboards/#exporting-a-dashboard-as-a-json-file","title":"Exporting a Dashboard as a JSON File","text":"<p>You can export a dashboard as a JSON file, and import dashboards that were saved in JSON file format. For instructions how to import a dashboard that was saved as a JSON file, refer to Importing a Dashboard. </p> <p>To export a dashboard as a JSON file: </p> <ol> <li> <p>Access the Share Dashboard window (Figure 77), as described inAccessing the Share Dashboard Options. </p> </li> <li> <p>Select the Export tab.</p> <p>An Export dashboard window appears. </p> <p></p> </li> <li> <p>Optionally click View JSON to view the file. </p> </li> <li> <p>Click Save to file to save in a desired location. </p> <p>A JSON file of the dashboard is created in your Downloads directory. Its name is the dashboard name followed by the current timestamp. </p> </li> </ol> <p>Note that you can view the contents of the JSON file in the dashboard. To do so, click the Manage Dashboard Settings icon in the middle of the dashboard header, and select View JSON. </p>"},{"location":"dashboard/sharing_dashboards/#sharing-a-panel","title":"Sharing a Panel","text":"<p>Sharing a panel is similar to sharing a dashboard. Panel sharing is often useful when you want to share a specific segment (time range) of a panel. The following panel sharing options are available: </p> <ul> <li>Link - Produces a link for sharing, with other WebLOAD Dashboard users, this panel with the current time range and selected template variables. </li> <li>Embed - Produces the HTML code that you need to use if you wish to embed a panel using an iframe on another web site.</li> </ul>"},{"location":"dashboard/sharing_dashboards/#accessing-the-share-panel-options","title":"Accessing the Share Panel Options","text":"<p>When you share a specific panel, you are actually sharing the dashboard, with the specific panel enlarged. </p> <p>To access the panel sharing options: </p> <ol> <li> <p>Optionally select a specific time range in the panel. Refer toSpecifying the Zoom </p> </li> <li> <p>Click the panel\u2019s title and select share. </p> </li> </ol> <p>A Share Panel window appears, with the Link tab selected. </p> <p></p>"},{"location":"dashboard/sharing_dashboards/#sharing-a-link-to-a-panel","title":"Sharing a Link to a Panel","text":"<p>The Link option produces a link that will take you to exactly this panel with the current time range and selected template variables. </p> <p>To share a link to a panel: </p> <ol> <li> <p>Access the Share Panel window as described inAccessing the Share Panel Options. </p> </li> <li> <p>Select the Link tab. </p> <p>Using the options in the Share Link window, you can produce a link to various variants of the panel, as described in the following table. </p> Item Description Current time range Determines whether the  linked page will display data for the selected time range or for the entire  session time range. Selected  Sessions Determines whether the  linked page will displays the data for the currently selected session(s), or  for the sessions appearing when the dashboard was last saved. Template variables Determines whether the  linked page will include template variables. Theme Determines whether the  linked page will display the current theme, the default light theme, or the  default dark them. </li> <li> <p>Click Copy to copy the URL displayed in the window, and send it to those with whom you want to share the dashboard. </p> </li> </ol>"},{"location":"dashboard/sharing_dashboards/#sharing-a-panel-by-embedding-its-html-code","title":"Sharing a Panel by Embedding its HTML Code","text":"<p>You can embed a panel using an iframe on another web site. The Embed option produces the HTML code that you need to use. Note that unless anonymous access is enabled, the user viewing that page needs to be signed into WebLOAD Dashboard for the graph to load. </p> <p>To share a panel by embedding its HTML code: </p> <ol> <li> <p>Optionally select a specific time range in the panel.</p> </li> <li> <p>Access the Share Panel window (Figure 79), as described inAccessing the Share Panel Options. </p> </li> <li> <p>Select the Embed tab. </p> </li> </ol> <p> </p> <p>Using the options in the Embed window, you can produce the source HTML code of various variants of the panel, as described in the following table. </p> Item Description Current time range Determines whether the  HTML code will be rendered as a page that displays data for the selected time  range or for the entire session time range. Selected Sessions Determines whether the  HTML code will be rendered as a page that displays the data for the currently  selected session(s), or for the sessions appearing when the dashboard was  last saved. Template variables Determines whether the  HTML code will be rendered as a page that will include template variables. Theme Determines whether the  HTML code will be rendered as a page that will display the current theme, the  default light theme, or the default dark them."},{"location":"dashboard/using_dashboards/","title":"Using Dashboards","text":"<p>The Dashboards tab enables viewing, analyzing and comparing load sessions, with full control and customization of the display. </p> <ul> <li>For explanations of the various measurements in the graphs, refer to the WebLOAD Console User\u2019s Guide. </li> <li>For explanations of the log messages in the tables, refer to the WebLOAD Console User\u2019s Guide. </li> </ul>"},{"location":"dashboard/using_dashboards/#dashboards-tab-components","title":"Dashboards tab components","text":"<p>The high level UI components of the Dashboards tab include: </p> <ul> <li>Header \u2013 Provides global settings, filters and controls </li> <li>Rows \u2013 Each row contains panels for data display </li> <li>Panels \u2013 Display data in graph, text, table, singlestat, Alert list, Dashboard list, or Plugin list format </li> </ul> <p></p>"},{"location":"dashboard/using_dashboards/#dashboard-header","title":"Dashboard Header","text":"<p>The main components of the dashboard tab header include: </p> Item Description For more information, see 1 Dashboard name and selection Loading a Dashboard 2 Select session \u2013 Enables  selecting the session(s) to be viewed and analyzed. Specifying the Sessions to view in   the Dashboard 3 Star or unstar a dashboard  \u2013 Enables marking/unmarking a dashboard as a favorite for filtering purposes. Loading a Dashboard 4 Share dashboard \u2013 Enables  sharing the current state of the dashboard Sharing a Dashboard 5 Save Saving your Customized Dashboard 6 Settings \u2013 Enables  configuring the  dashboard\u2019s general  settings Customizing General Dashboard Settings 7 Time format: Relative Time \u2013 Show the time since session start. Useful for session  comparison  Absolute Time \u2013  Show the real time of the session  when it ran. Useful for currently running sessions Selecting the Time Format 8 Zoom to Data \u2013 Sets the time filter to the extent of the data. This  is done automatically when selecting data or a new session. 9 Zoom out 10 Time picker Setting the Time Picker 11 Refresh data"},{"location":"dashboard/using_dashboards/#rows","title":"Rows","text":"<p>A row is a horizontal container for panels. A row can be hidden (collapsed) and its height controls its panels\u2019 height. </p> <ul> <li>To add a new row, click + ADD ROW at the bottom of a dashboard page. </li> <li>To edit a row, click the three grey dots and select the desired option. For more information, refer to Customizing Rows . </li> </ul> <p></p>"},{"location":"dashboard/using_dashboards/#panels","title":"Panels","text":"<p>A panel is a data display unit. There are various types of panels \u2013 such as graph, text, table, singlestat, Alert list, Dashboard list, and Plugin list. </p> <ul> <li>To add a new panel, click the three grey dots of the desired row and select Add Panel (Figure). </li> <li>To edit a panel, click the panel title and click edit in the box that appears. For more information, refer to Customizing Panels </li> </ul>"},{"location":"dashboard/using_dashboards/#graph-panel","title":"Graph Panel","text":"<p>A graph panel presents session measurement data in graphic format. In each graph panel you can display multiple measurements from multiple sessions. You can also set various display options, such as colors, graph style (lines, bars, points), Y-axis formats (bytes, milliseconds, etc.) and more. </p> <p> </p>"},{"location":"dashboard/using_dashboards/#table-panel","title":"Table Panel","text":"<p>A table panel presents data in table format; by default the log messages from specified sessions. You can sort the display by various parameters, and filter the display by severity. </p> <p></p>"},{"location":"dashboard/using_dashboards/#text-panel","title":"Text Panel","text":"<p>A text panel presents text. You can edit the text. </p> <p></p>"},{"location":"dashboard/using_dashboards/#singlestat-panel","title":"Singlestat Panel","text":"<p>A singlestat panel is similar to a graph panel, but shows only a single statistic, usually in numeric form. It may contain a \u2018sparkline\u2019, and may appear as a gauge. </p> <p>Note that because a singlestat panel displays only one measurement, it is not suitable when comparing two or more sessions. </p> <p></p>"},{"location":"dashboard/using_dashboards/#specifying-the-sessions-to-view-in-the-dashboard","title":"Specifying the Sessions to view in the Dashboard","text":"<p>WebLOAD Dashboard dashboards are useful both for analyzing the results of a specific session, and for comparing the results of different sessions.  </p> <p>To select a session for viewing in the dashboard tab: Do any of the following: </p> <ul> <li>In the Load Sessions table (Figure), click the session name.  </li> </ul> <p>The session appears in the currently selected dashboard. </p> <ul> <li>In Load Tests table (Load Test Table), click the Show Last Session button . That last session appears in the currently selected dashboard. </li> </ul> <p>To select multiple sessions for viewing in the dashboard tab: </p> <p>Do any of the following: </p> <ul> <li> <p>In the Load Sessions table (Figure), click Show in Dashboard for each session you wish to view in the Dashboard. As soon as you select a dashboard, the dashboard refreshes to show the selected sessions\u2019 data in the panels. </p> </li> <li> <p>In the dashboard page, select the session from the Sessions drop-down list (Figure). You can select as many sessions as you wish. You can use the search box to aid you in finding the sessions you wish to view.  </p> </li> </ul> <p>As soon as you select a session or sessions, the dashboard refreshes to show the sessions\u2019 data in the panels. </p> <p> </p>"},{"location":"dashboard/using_dashboards/#specifying-the-zoom","title":"Specifying the Zoom","text":"<p>Using a graph panel\u2019s zoom option, you can set the time period for which all panels display information. For example, if you select to zoom into the time period from 00:30 to 01:00, all panels will refresh to show information for that time period only, and the metric panels, for example, will display metrics for that time period only. </p> <p>To zoom in: </p> <ul> <li>Use the mouse to select a specific time range in the panel. </li> </ul> <p></p> <p>The dashboard refreshes to show the graph for the selected time range only. </p> <p></p> <p>To zoom out: </p> <p>Use the Zoom to Data or Zoom Out options in the Dashboard Header. </p>"},{"location":"dashboard/using_dashboards/#selecting-the-time-format","title":"Selecting the Time Format","text":"<p>You can view dashboard data in either Relative time or Absolute time (see item 7 in Figure)). This affects the graphs\u2019 display as follows: </p> <p>If you are viewing data for a single session: </p> <ul> <li>Relative time \u2013 The start time is shifted over to zero. </li> </ul> <p> </p> <ul> <li>Absolute time \u2013 Shows the real time. This format is useful for viewing currently running sessions. </li> </ul> <p>If you are comparing sessions: </p> <ul> <li>Relative time \u2013 The graph shows the two sessions as if they occurred concurrently (within the same timeframe). </li> </ul> <p></p> <ul> <li>Absolute time \u2013 The graphs shows the real time. </li> </ul> <p></p> <p></p>"},{"location":"dashboard/using_dashboards/#setting-the-time-picker","title":"Setting the Time Picker","text":"<p>If you selected the Time Picker, you can set various time settings. </p> <p></p> <p>You can for example set the auto-refresh frequency. </p> <p></p>"},{"location":"dashboard/grafana/","title":"Welcome to the Grafana Documentation","text":"<p>Grafana is an open source metric analytics &amp; visualization suite. It is most commonly used for visualizing time series data for infrastructure and application analytics but many use it in other domains including industrial sensors, home automation, weather, and process control.</p>"},{"location":"dashboard/grafana/#configuring-grafana","title":"Configuring Grafana","text":"<ul> <li>The back-end web server has a number of configuration options. Go the Configuration page for details on all those options.</li> <li>Command line - to change admin password</li> <li>HTTP API</li> </ul>"},{"location":"dashboard/grafana/#getting-started","title":"Getting started","text":"<ul> <li>Getting Started</li> <li>Basic Concepts</li> </ul>"},{"location":"dashboard/grafana/#data-sources-guides","title":"Data sources guides","text":"<ul> <li>Graphite</li> <li>Elasticsearch</li> <li>InfluxDB</li> <li>OpenTSDB</li> </ul>"},{"location":"dashboard/grafana/#reference","title":"Reference","text":"<ul> <li>Admin</li> <li>Annotations</li> <li>Dashboard</li> <li>Export/Import</li> <li>Keyboard Shortcusts</li> <li>Playlist</li> <li>Scripting</li> <li>Search</li> <li>Sharing</li> <li>Templating</li> <li>Time range</li> </ul>"},{"location":"dashboard/grafana/administration/cli/","title":"Grafana CLI","text":"<p>Grafana cli is a small executable that is bundled with grafana server and is suppose to be executed on the same machine as grafana runs.</p>"},{"location":"dashboard/grafana/administration/cli/#plugins","title":"Plugins","text":"<p>The CLI helps you install, upgrade and manage your plugins on the same machine it CLI is running. You can find more information about how to install and manage your plugins at the plugin page.</p>"},{"location":"dashboard/grafana/administration/cli/#admin","title":"Admin","text":"<p>This feature is only available in grafana 4.1 and above.</p> <p>To show all admin commands: <code>grafana-cli admin</code></p>"},{"location":"dashboard/grafana/administration/cli/#reset-admin-password","title":"Reset admin password","text":"<p>You can reset the password for the admin user using the CLI.</p> <p><code>grafana-cli admin reset-admin-password ...</code></p>"},{"location":"dashboard/grafana/features/shortcuts/","title":"Shortcuts","text":"<p>+++ title = \"Keyboard Shortcuts\" type = \"docs\" [menu.docs] parent = \"features\" weight = 7 +++</p>"},{"location":"dashboard/grafana/features/shortcuts/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>{{&lt; docs-imagebox img=\"/img/docs/v4/shortcuts.png\" max-width=\"20rem\" &gt;}}</p> <p>Grafana v4 introduces a number of really powerful keyboard shortcuts. You can now focus a panel by hovering over it with your mouse. With a panel focused you can simple hit <code>e</code> to toggle panel edit mode, or <code>v</code> to toggle fullscreen mode. <code>p</code> <code>r</code> removes the panel. <code>p</code> <code>s</code> opens share modal.</p> <p>Hit <code>?</code> on your keyboard to open the shortcuts help modal.</p>"},{"location":"dashboard/grafana/features/shortcuts/#global","title":"Global","text":"<ul> <li><code>g</code> <code>h</code>   Go to Home Dashboard</li> <li><code>g</code> <code>p</code>   Go to Profile</li> <li><code>s</code> <code>o</code>   Open search</li> <li><code>s</code> <code>s</code>   Open search with starred filter</li> <li><code>s</code> <code>t</code>   Open search in tags view</li> <li><code>esc</code> Exit edit/setting views</li> </ul>"},{"location":"dashboard/grafana/features/shortcuts/#dashboard","title":"Dashboard","text":"<ul> <li><code>mod+s</code>   Save dashboard</li> <li><code>mod+h</code>   Hide row controls</li> <li><code>d</code> <code>r</code>   Refresh all panels</li> <li><code>d</code> <code>s</code>   Dashboard settings</li> <li><code>d</code> <code>v</code>   Toggle in-active / view mode</li> <li><code>d</code> <code>k</code>   Toggle kiosk mode (hides top nav)</li> <li><code>mod+o</code>   Toggle shared graph crosshair</li> </ul>"},{"location":"dashboard/grafana/features/shortcuts/#focused-panel","title":"Focused Panel","text":"<ul> <li><code>e</code>   Toggle panel edit view</li> <li><code>v</code>   Toggle panel fullscreen view</li> <li><code>p</code> <code>s</code> Open Panel Share Modal</li> <li><code>p</code> <code>r</code> Remove Panel</li> </ul>"},{"location":"dashboard/grafana/features/shortcuts/#focused-row","title":"Focused Row","text":"<ul> <li><code>r</code> <code>c</code>   Collapse Row</li> <li><code>r</code> <code>r</code>   Remove Row</li> </ul>"},{"location":"dashboard/grafana/features/shortcuts/#time-range","title":"Time Range","text":"<ul> <li><code>t</code> <code>z</code>   Zoom out time range</li> <li><code>t</code>   Move time range back</li> <li><code>t</code>   Move time range forward</li> </ul>"},{"location":"dashboard/grafana/features/datasources/","title":"Data Source Overview","text":"<p>Grafana supports many different storage backends for your time series data (Data Source). Each Data Source has a specific Query Editor that is customized for the features and capabilities that the particular Data Source exposes.</p>"},{"location":"dashboard/grafana/features/datasources/#querying","title":"Querying","text":"<p>The query language and capabilities of each Data Source are obviously very different. You can combine data from multiple Data Sources onto a single Dashboard, but each Panel is tied to a specific Data Source that belongs to a particular Organization.</p>"},{"location":"dashboard/grafana/features/datasources/#supported-data-sources","title":"Supported Data Sources","text":"<p>The following datasources are officially supported:</p> <ul> <li>Graphite</li> <li>Elasticsearch</li> <li>CloudWatch</li> <li>InfluxDB</li> <li>OpenTSDB</li> <li>Prometheus</li> </ul>"},{"location":"dashboard/grafana/features/datasources/#data-source-plugins","title":"Data source plugins","text":"<p>Since grafana 3.0 you can install data sources as plugins. Checkout Grafana.net for more data sources.</p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/","title":"Using AWS CloudWatch in Grafana","text":"<p>Grafana ships with built in support for CloudWatch. You just have to add it as a data source and you will be ready to build dashboards for you CloudWatch metrics.</p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#adding-the-data-source","title":"Adding the data source","text":"<ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> <li>Select <code>CloudWatch</code> from the dropdown.     &gt; NOTE: If at any moment you have issues with getting this datasource to work and grafana is giving you undescriptive errors then dont forget to check your log file (try looking in /var/log/grafana/).</li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Credentials profile name Specify the name of the profile to use (if you use <code>~/aws/credentials</code> file), leave blank for default. This option was introduced in Grafana 2.5.1 Default Region Used in query editor to set region (can be changed on per query basis) Custom Metrics namespace Specify the CloudWatch namespace of Custom metrics Assume Role Arn Specify the ARN of the role to assume"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#authentication","title":"Authentication","text":""},{"location":"dashboard/grafana/features/datasources/cloudwatch/#iam-roles","title":"IAM Roles","text":"<p>Currently all access to CloudWatch is done server side by the Grafana backend using the official AWS SDK. If you grafana server is running on AWS you can use IAM Roles and authentication will be handled automatically.</p> <p>Checkout AWS docs on IAM Roles</p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#aws-credentials-file","title":"AWS credentials file","text":"<p>Create a file at <code>~/.aws/credentials</code>. That is the <code>HOME</code> path for user running grafana-server.     &gt; NOTE: If you think you have the credentials file in the right place but it is still not working then you might try moving your .aws file to '/usr/share/grafana/' and make sure your credentials file has at most 0644 permissions.</p> <p>Example content:</p> <pre><code>[default]\naws_access_key_id = asdsadasdasdasd\naws_secret_access_key = dasdasdsadasdasdasdsa\nregion = us-west-2\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#metric-query-editor","title":"Metric Query Editor","text":"<p>You need to specify a namespace, metric, at least one stat, and at least one dimension.</p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#templated-queries","title":"Templated queries","text":"<p>CloudWatch Datasource Plugin provides the following functions in <code>Variables values query</code> field in Templating Editor to query <code>region</code>, <code>namespaces</code>, <code>metric names</code> and <code>dimension keys/values</code> on the CloudWatch.</p> Name Description <code>regions()</code> Returns a list of regions AWS provides their service. <code>namespaces()</code> Returns a list of namespaces CloudWatch support. <code>metrics(namespace, [region])</code> Returns a list of metrics in the namespace. (specify region for custom metrics) <code>dimension_keys(namespace)</code> Returns a list of dimension keys in the namespace. <code>dimension_values(region, namespace, metric, dimension_key)</code> Returns a list of dimension values matching the specified <code>region</code>, <code>namespace</code>, <code>metric</code> and <code>dimension_key</code>. <code>ebs_volume_ids(region, instance_id)</code> Returns a list of volume id matching the specified <code>region</code>, <code>instance_id</code>. <code>ec2_instance_attribute(region, attribute_name, filters)</code> Returns a list of attribute matching the specified <code>region</code>, <code>attribute_name</code>, <code>filters</code>. <p>For details about the metrics CloudWatch provides, please refer to the CloudWatch documentation.</p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#example-templated-queries","title":"Example templated Queries","text":"<p>Example dimension queries which will return list of resources for individual AWS Services:</p> Service Query ELB <code>dimension_values(us-east-1,AWS/ELB,RequestCount,LoadBalancerName)</code> ElastiCache <code>dimension_values(us-east-1,AWS/ElastiCache,CPUUtilization,CacheClusterId)</code> RedShift <code>dimension_values(us-east-1,AWS/Redshift,CPUUtilization,ClusterIdentifier)</code> RDS <code>dimension_values(us-east-1,AWS/RDS,CPUUtilization,DBInstanceIdentifier)</code> S3 <code>dimension_values(us-east-1,AWS/S3,BucketSizeBytes,BucketName)</code>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#ec2_instance_attribute-json-filters","title":"ec2_instance_attribute JSON filters","text":"<p>The <code>ec2_instance_attribute</code> query take <code>filters</code> in JSON format. You can specify pre-defined filters of ec2:DescribeInstances. Specify like <code>{ filter_name1: [ filter_value1 ], filter_name2: [ filter_value2 ] }</code></p> <p>Example <code>ec2_instance_attribute()</code> query</p> <pre><code>ec2_instance_attribute(us-east-1, InstanceId, { \"tag:Environment\": [ \"production\" ] })\n</code></pre> <p></p>"},{"location":"dashboard/grafana/features/datasources/cloudwatch/#cost","title":"Cost","text":"<p>Amazon provides 1 million CloudWatch API requests each month at no additional charge. Past this, it costs $0.01 per 1,000 GetMetricStatistics or ListMetrics requests. For each query Grafana will issue a GetMetricStatistics request and every time you pick a dimension in the query editor Grafana will issue a ListMetrics request.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/","title":"Using Elasticsearch in Grafana","text":"<p>Grafana ships with advanced support for Elasticsearch. You can do many types of simple or complex elasticsearch queries to visualize logs or metrics stored in elasticsearch. You can also annotate your graphs with log events stored in elasticsearch.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#adding-the-data-source","title":"Adding the data source","text":"<ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> <li>Select <code>Elasticsearch</code> from the dropdown.</li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Url The http protocol, ip and port of you elasticsearch server. Access Proxy = access via Grafana backend, Direct = access directly from browser. <p>Proxy access means that the Grafana backend will proxy all requests from the browser, and send them on to the Data Source. This is useful because it can eliminate CORS (Cross Origin Site Resource) issues, as well as eliminate the need to disseminate authentication details to the Data Source to the browser.</p> <p>Direct access is still supported because in some cases it may be useful to access a Data Source directly depending on the use case and topology of Grafana, the user, and the Data Source.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#direct-access","title":"Direct access","text":"<p>If you select direct access you must update your Elasticsearch configuration to allow other domains to access Elasticsearch from the browser. You do this by specifying these to options in your elasticsearch.yml config file.</p> <pre><code>http.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#index-settings","title":"Index settings","text":"<p>Here you can specify a default for the <code>time field</code> and specify the name of your elasticsearch index. You can use a time pattern for the index name or a wildcard.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#metric-query-editor","title":"Metric Query editor","text":"<p>The Elasticsearch query editor allows you to select multiple metrics and group by multiple terms or filters. Use the plus and minus icons to the right to add / remove metrics or group bys. Some metrics and group by have options, click the option text to expand the the row to view and edit metric or group by options.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#pipeline-metrics","title":"Pipeline metrics","text":"<p>If you have Elasticsearch 2.x and Grafana 2.6 or above then you can use pipeline metric aggregations like Moving Average and Derivative. Elasticsearch pipeline metrics require another metric to be based on. Use the eye icon next to the metric to hide metrics from appearing in the graph. This is useful for metrics you only have in the query to be used in a pipeline metric.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#templating","title":"Templating","text":"<p>The Elasticsearch datasource supports two types of queries you can use to fill template variables with values.</p>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#possible-values-for-a-field","title":"Possible values for a field","text":"<pre><code>{\"find\": \"terms\", \"field\": \"@hostname\"}\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#fields-filtered-by-type","title":"Fields filtered by type","text":"<pre><code>{\"find\": \"fields\", \"type\": \"string\"}\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#fields-filtered-by-type-with-filter","title":"Fields filtered by type, with filter","text":"<pre><code>{\"find\": \"fields\", \"type\": \"string\", \"query\": &lt;lucene query&gt;}\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/elasticsearch/#multi-format-all-format","title":"Multi format / All format","text":"<p>Use lucene format.</p>"},{"location":"dashboard/grafana/features/datasources/graphite/","title":"Graphite","text":"<p>+++ title = \"Using Graphite in Grafana\" description = \"Guide for using graphite in Grafana\" keywords = [\"grafana\", \"graphite\", \"guide\"] type = \"docs\" aliases = [\"/datasources/graphite\"] [menu.docs] name = \"Graphite\" identifier = \"graphite\" parent = \"datasources\" weight = 1 +++</p>"},{"location":"dashboard/grafana/features/datasources/graphite/#using-graphite-in-grafana","title":"Using Graphite in Grafana","text":"<p>Grafana has an advanced Graphite query editor that lets you quickly navigate the metric space, add functions, change function parameters and much more. The editor can handle all types of graphite queries. It can even handle complex nested queries through the use of query references.</p>"},{"location":"dashboard/grafana/features/datasources/graphite/#adding-the-data-source","title":"Adding the data source","text":"<ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> <li>Select <code>Graphite</code> from the dropdown.</li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Url The http protocol, ip and port of your graphite-web or graphite-api install. Access Proxy = access via Grafana backend, Direct = access directly from browser. <p>Proxy access means that the Grafana backend will proxy all requests from the browser, and send them on to the Data Source. This is useful because it can eliminate CORS (Cross Origin Site Resource) issues, as well as eliminate the need to disseminate authentication details to the Data Source to the browser.</p> <p>Direct access is still supported because in some cases it may be useful to access a Data Source directly depending on the use case and topology of Grafana, the user, and the Data Source.</p>"},{"location":"dashboard/grafana/features/datasources/graphite/#metric-editor","title":"Metric editor","text":""},{"location":"dashboard/grafana/features/datasources/graphite/#navigate-metric-segments","title":"Navigate metric segments","text":"<p>Click the <code>Select metric</code> link to start navigating the metric space. One you start you can continue using the mouse or keyboard arrow keys. You can select a wildcard and still continue.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/graphite/#functions","title":"Functions","text":"<p>Click the plus icon to the right to add a function. You can search for the function or select it from the menu. Once a function is selected it will be added and your focus will be in the text box of the first parameter. To later change a parameter just click on it and it will turn into a text box. To delete a function click the function name followed by the x icon.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/graphite/#optional-parameters","title":"Optional parameters","text":"<p>Some functions like aliasByNode support an optional second argument. To add this parameter specify for example 3,-2 as the first parameter and the function editor will adapt and move the -2 to a second parameter. To remove the second optional parameter just click on it and leave it blank and the editor will remove it.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/graphite/#point-consolidation","title":"Point consolidation","text":"<p>All Graphite metrics are consolidated so that Graphite doesn't return more data points than there are pixels in the graph. By default this consolidation is done using <code>avg</code> function. You can how Graphite consolidates metrics by adding the Graphite consolidateBy function.</p> <p>Notice This means that legend summary values (max, min, total) cannot be all correct at the same time. They are calculated client side by Grafana. And depending on your consolidation function only one or two can be correct at the same time.</p>"},{"location":"dashboard/grafana/features/datasources/graphite/#templating","title":"Templating","text":"<p>You can create a template variable in Grafana and have that variable filled with values from any Graphite metric exploration query. You can then use this variable in your Graphite queries, either as part of a metric path or as arguments to functions.</p> <p>For example a query like <code>prod.servers.*</code> will fill the variable with all possible values that exists in the wildcard position.</p> <p>You can also create nested variables that use other variables in their definition. For example <code>apps.$app.servers.*</code> uses the variable <code>$app</code> in its query definition.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/graphite/#query-reference","title":"Query Reference","text":"<p>You can reference queries by the row \u201cletter\u201d that they\u2019re on (similar to  Microsoft Excel). If you add a second query to graph, you can reference the first query simply by typing in #A. This provides an easy and convenient way to build compounded queries.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/","title":"Using InfluxDB in Grafana","text":"<p>Grafana ships with very feature rich data source plugin for InfluxDB. Supporting a feature rich query editor, annotation and templating queries.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#adding-the-data-source","title":"Adding the data source","text":"<ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Url The http protocol, ip and port of you influxdb api (influxdb api port is by default 8086) Access Proxy = access via Grafana backend, Direct = access directly from browser. Database Name of your influxdb database User Name of your database user Password Database user's password <p>Proxy access means that the Grafana backend will proxy all requests from the browser, and send them on to the Data Source. This is useful because it can eliminate CORS (Cross Origin Site Resource) issues, as well as eliminate the need to disseminate authentication details to the Data Source to the browser.</p> <p>Direct access is still supported because in some cases it may be useful to access a Data Source directly depending on the use case and topology of Grafana, the user, and the Data Source.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#query-editor","title":"Query Editor","text":"<p>You find the InfluxDB editor in the metrics tab in Graph or Singlestat panel's edit mode. You enter edit mode by clicking the panel title, then edit. The editor allows you to select metrics and tags.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#filter-data-where","title":"Filter data (WHERE)","text":"<p>To add a tag filter click the plus icon to the right of the <code>WHERE</code> condition. You can remove tag filters by clicking on the tag key and select <code>--remove tag filter--</code>.</p> <p>Regex matching</p> <p>You can type in regex patterns for metric names or tag filter values, be sure to wrap the regex pattern in forward slashes (<code>/</code>). Grafana will automatically adjust the filter tag condition to use the InfluxDB regex match condition operator (<code>=~</code>).</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#field-aggregation-functions","title":"Field &amp; Aggregation functions","text":"<p>In the <code>SELECT</code> row you can specify what fields and functions you want to use. If you have a group by time you need an aggregation function. Some functions like derivative require an aggregation function.</p> <p>The editor tries simplify and unify this part of the query.</p> <p>The above will generate the following InfluxDB <code>SELECT</code> clause:</p> <pre><code>SELECT derivative(mean(\"value\"), 10s) /10 AS \"REQ/s\" FROM ....\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/influxdb/#select-multiple-fields","title":"Select multiple fields","text":"<p>Use the plus button and select Field &gt; field to add another SELECT clause. You can also specify an asterix <code>*</code> to select all fields.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#group-by","title":"Group By","text":"<p>To group by a tag click the plus icon at the end of the GROUP BY row. Pick a tag from the dropdown that appears. You can remove the group by by clicking on the <code>tag</code> and then click on the x icon.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#text-editor-mode-raw","title":"Text Editor Mode (RAW)","text":"<p>You can switch to raw query mode by clicking hamburger icon and then <code>Switch editor mode</code>.</p> <p>If you use Raw Query be sure your query at minimum have <code>WHERE $timeFilter</code> Also please always have a group by time and an aggregation function, otherwise InfluxDB can easily return hundreds of thousands of data points that will hang the browser.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#alias-patterns","title":"Alias patterns","text":"<ul> <li>$m = replaced with measurement name</li> <li>$measurement = replaced with measurement name</li> <li>$col = replaced with column name</li> <li>$tag_hostname = replaced with the value of the hostname tag</li> <li>You can also use [[tag_hostname]] pattern replacement syntax</li> </ul>"},{"location":"dashboard/grafana/features/datasources/influxdb/#table-query-raw-data","title":"Table query / raw data","text":"<p>You can remove the group by time by clicking on the <code>time</code> part and then the <code>x</code> icon. You can change the option <code>Format As</code> to <code>Table</code> if you want to show raw data in the <code>Table</code> panel.</p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#templating","title":"Templating","text":"<p>You can create a template variable in Grafana and have that variable filled with values from any InfluxDB metric exploration query. You can then use this variable in your InfluxDB metric queries.</p> <p>For example you can have a variable that contains all values for tag <code>hostname</code> if you specify a query like this in the templating edit view. <pre><code>SHOW TAG VALUES WITH KEY = \"hostname\"\n</code></pre></p> <p>You can also create nested variables. For example if you had another variable, for example <code>region</code>. Then you could have the hosts variable only show hosts from the current selected region with a query like this:</p> <pre><code>SHOW TAG VALUES WITH KEY = \"hostname\"  WHERE region =~ /$region/\n</code></pre> <p>Always use <code>regex values</code> or <code>regex wildcard</code> for All format or multi select format.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/influxdb/#annotations","title":"Annotations","text":"<p>Annotations allows you to overlay rich event information on top of graphs.</p> <p>An example query:</p> <pre><code>SELECT title, description from events WHERE $timeFilter order asc\n</code></pre>"},{"location":"dashboard/grafana/features/datasources/opentsdb/","title":"Opentsdb","text":"<p>+++ title = \"Using OpenTSDB in Grafana\" description = \"Guide for using OpenTSDB in Grafana\" keywords = [\"grafana\", \"opentsdb\", \"guide\"] type = \"docs\" aliases = [\"/datasources/opentsdb\"] [menu.docs] name = \"OpenTSDB\" parent = \"datasources\" weight = 5 +++</p>"},{"location":"dashboard/grafana/features/datasources/opentsdb/#using-opentsdb-in-grafana","title":"Using OpenTSDB in Grafana","text":"<p>{{&lt; docs-imagebox img=\"/img/docs/v2/add_OpenTSDB.png\" max-width=\"14rem\" &gt;}}</p> <p>The newest release of Grafana adds additional functionality when using an OpenTSDB Data source.</p> <ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> <li>Select <code>OpenTSDB</code> from the dropdown.</li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Url The http protocol, ip and port of you opentsdb server (default port is usually 4242) Access Proxy = access via Grafana backend, Direct = access directly from browser. Version Version = opentsdb version, either &lt;=2.1 or 2.2 Resolution Metrics from opentsdb may have datapoints with either second or millisecond resolution."},{"location":"dashboard/grafana/features/datasources/opentsdb/#query-editor","title":"Query editor","text":"<p>Open a graph in edit mode by click the title. Query editor will differ if the datasource has version &lt;=2.1 or = 2.2. In the former version, only tags can be used to query opentsdb. But in the latter version, filters as well as tags can be used to query opentsdb. Fill Policy is also introduced in opentsdb 2.2.</p> <p>Note: While using Opentsdb 2.2 datasource, make sure you use either Filters or Tags as they are mutually exclusive. If used together, might give you weird results.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/opentsdb/#auto-complete-suggestions","title":"Auto complete suggestions","text":"<p>As soon as you start typing metric names, tag names and tag values , you should see highlighted auto complete suggestions for them.</p> <p>Note: This is required for the OpenTSDB <code>suggest</code> api to work.</p>"},{"location":"dashboard/grafana/features/datasources/opentsdb/#templating-queries","title":"Templating queries","text":"<p>Grafana's OpenTSDB data source now supports template variable values queries. This means you can create template variables that fetch the values from OpenTSDB (for example metric names, tag names, or tag values). The query editor is also enhanced to limiting tags by metric.</p> <p>When using OpenTSDB with a template variable of <code>query</code> type you can use following syntax for lookup.</p> <pre><code>metrics(prefix)               // returns metric names with specific prefix (can be empty)\ntag_names(cpu)                // return tag names (i.e. keys) for a specific cpu metric\ntag_values(cpu, hostname)     // return tag values for metric cpu and tag key hostname\nsuggest_tagk(prefix)          // return tag names (i.e. keys) for all metrics with specific prefix (can be empty)\nsuggest_tagv(prefix)          // return tag values for all metrics with specific prefix (can be empty)\n</code></pre> <p>If you do not see template variables being populated in <code>Preview of values</code> section, you need to enable <code>tsd.core.meta.enable_realtime_ts</code> in the OpenTSDB server settings. Also, to populate metadata of the existing time series data in OpenTSDB, you need to run <code>tsdb uid metasync</code> on the OpenTSDB server.</p>"},{"location":"dashboard/grafana/features/datasources/opentsdb/#nested-templating","title":"Nested Templating","text":"<p>One template variable can be used to filter tag values for another template varible. Very importantly, the order of the parameters matter in tag_values function. First parameter is the metric name, second parameter is the tag key for which you need to find tag values, and after that all other dependent template variables. Some examples are mentioned below to make nested template queries work successfully.</p> <pre><code>tag_values(cpu, hostname, env=$env)                   // return tag values for cpu metric, selected env tag value and tag key hostname\ntag_values(cpu, hostanme, env=$env, region=$region)   // return tag values for cpu metric, selected env tag value, selected region tag value and tag key hostname\n</code></pre> <p>Note: This is required for the OpenTSDB <code>lookup</code> api to work.</p> <p>For details on opentsdb metric queries checkout the official OpenTSDB documentation</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/","title":"Prometheus","text":"<p>+++ title = \"Using Prometheus in Grafana\" description = \"Guide for using Prometheus in Grafana\" keywords = [\"grafana\", \"prometheus\", \"guide\"] type = \"docs\" aliases = [\"/datasources/prometheus\"] [menu.docs] name = \"Prometheus\" parent = \"datasources\" weight = 2 +++</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/#using-prometheus-in-grafana","title":"Using Prometheus in Grafana","text":"<p>Grafana includes support for Prometheus Datasources. While the process of adding the datasource is similar to adding a Graphite or OpenTSDB datasource type, Prometheus does have a few different options for building queries.</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/#adding-the-data-source-to-grafana","title":"Adding the data source to Grafana","text":"<ol> <li>Open the side menu by clicking the the Grafana icon in the top header.</li> <li> <p>In the side menu under the <code>Dashboards</code> link you should find a link named <code>Data Sources</code>.</p> <p>NOTE: If this link is missing in the side menu it means that your current user does not have the <code>Admin</code> role for the current organization.</p> </li> <li> <p>Click the <code>Add new</code> link in the top header.</p> </li> <li>Select <code>Prometheus</code> from the dropdown.</li> </ol> Name Description Name The data source name, important that this is the same as in Grafana v1.x if you plan to import old dashboards. Default Default data source means that it will be pre-selected for new panels. Url The http protocol, ip and port of you Prometheus server (default port is usually 9090) Access Proxy = access via Grafana backend, Direct = access directly from browser. Basic Auth Enable basic authentication to the Prometheus datasource. User Name of your Prometheus user Password Database user's password <p>Proxy access means that the Grafana backend will proxy all requests from the browser, and send them on to the Data Source. This is useful because it can eliminate CORS (Cross Origin Site Resource) issues, as well as eliminate the need to disseminate authentication details to the Data Source to the browser.</p> <p>Direct access is still supported because in some cases it may be useful to access a Data Source directly depending on the use case and topology of Grafana, the user, and the Data Source.</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/#query-editor","title":"Query editor","text":"<p>Open a graph in edit mode by click the title.</p> <p></p> <p>For details on Prometheus metric queries check out the Prometheus documentation - Query Metrics - Prometheus documentation.</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/#templated-queries","title":"Templated queries","text":"<p>Prometheus Datasource Plugin provides the following functions in <code>Variables values query</code> field in Templating Editor to query <code>metric names</code> and <code>labels names</code> on the Prometheus server.</p> Name Description <code>label_values(label)</code> Returns a list of label values for the <code>label</code> in every metric. <code>label_values(metric, label)</code> Returns a list of label values for the <code>label</code> in the specified metric. <code>metrics(metric)</code> Returns a list of metrics matching the specified <code>metric</code> regex. <code>query_result(query)</code> Returns a list of Prometheus query result for the <code>query</code>. <p>For details of <code>metric names</code> &amp; <code>label names</code>, and <code>label values</code>, please refer to the Prometheus documentation.</p> <p>Note: The part of queries is incompatible with the version before 2.6, if you specify like <code>foo.*</code>, please change like <code>metrics(foo.*)</code>.</p> <p>You can create a template variable in Grafana and have that variable filled with values from any Prometheus metric exploration query. You can then use this variable in your Prometheus metric queries.</p> <p>For example you can have a variable that contains all values for label <code>hostname</code> if you specify a query like this in the templating edit view.</p> <pre><code>label_values(hostname)\n</code></pre> <p>You can also use raw queries &amp; regular expressions to extract anything you might need.</p>"},{"location":"dashboard/grafana/features/datasources/prometheus/#using-templated-variables-in-queries","title":"Using templated variables in queries","text":"<p>When the <code>Include All</code> option or <code>Multi-Value</code> option is enabled, Grafana converts the labels from plain text to a regex compatible string. Which means you have to use <code>=~</code> instead of <code>=</code> in your Prometheus queries. For example <code>ALERTS{instance=~$instance}</code> instead of <code>ALERTS{instance=$instance}</code>.</p> <p></p>"},{"location":"dashboard/grafana/features/datasources/testdata/","title":"Grafana TestData","text":"<pre><code>&gt; NOTE: This plugin is disable by default.\n</code></pre> <p>The purpose of this data sources is to make it easier to create fake data for any panel. Using <code>Grafana TestData</code> you can build your own time series and have any panel render it. This make is much easier to verify functionally since the data can be shared very</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#enable","title":"Enable","text":"<p><code>Grafana TestData</code> is not enabled by default. To enable it you have to go to <code>/plugins/testdata/edit</code> and click the enable button to enable it for each server.</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#create-mock-data","title":"Create mock data.","text":"<p>Once <code>Grafana TestData</code> is enabled you use it as a datasource in the metric panel.</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#scenarios","title":"Scenarios","text":"<p>You can now choose different scenario that you want rendered in the drop down menu. If you have scenarios that you think should be added, please add them to `` and submit a pull request.</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#csv","title":"CSV","text":"<p>The comma separated values scenario is the most powerful one since it lets you create any kind of graph you like. Once you provided the numbers <code>Grafana TestData</code> will distribute them evenly based on the time range of your query.</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#dashboards","title":"Dashboards","text":"<p><code>Grafana TestData</code> also contains some dashboards with example. <code>/plugins/testdata/edit</code></p>"},{"location":"dashboard/grafana/features/datasources/testdata/#commit-updates-to-the-dashboards","title":"Commit updates to the dashboards","text":"<p>If you want to submit a change to one of the current dashboards bundled with <code>Grafana TestData</code> you have to update the revision property. Otherwise the dashboard will not be updated automatically for other Grafana users.</p>"},{"location":"dashboard/grafana/features/datasources/testdata/#using-test-data-in-issues","title":"Using test data in issues","text":"<p>If you post an issue on github regarding time series data or rendering of time series data we strongly advice you to use this data source to replicate the data. That makes it much easier for the developers to replicate and solve the issue you have.</p>"},{"location":"dashboard/grafana/features/panels/","title":"Index","text":"<p>+++ title = \"Panels\" type = \"docs\" [menu.docs] parent = \"features\" identifier = \"panels\" weight = 3 +++</p>"},{"location":"dashboard/grafana/features/panels/dashlist/","title":"Dashlist","text":"<p>+++ title = \"Dashboard List\" keywords = [\"grafana\", \"dashboard list\", \"documentation\", \"panel\", \"dashlist\"] type = \"docs\" [menu.docs] name = \"Dashboard list\" parent = \"panels\" weight = 4 +++</p>"},{"location":"dashboard/grafana/features/panels/dashlist/#dashboard-list-panel","title":"Dashboard List Panel","text":"<p>The dashboard list panel allows you to display dynamic links to other dashboards. The list can be configured to use starred dashboards, a search query and/or dashboard tags.</p> <p></p> <p>On each dashboard load, the dashlist panel will re-query the dashboard list, always providing the most up to date results.</p>"},{"location":"dashboard/grafana/features/panels/dashlist/#mode-starred-dashboards","title":"Mode: Starred Dashboards","text":"<p>The <code>starred</code> dashboard selection displays starred dashboards, up to the number specified in the <code>Limit Number to</code> field, in alphabetical order. On dashboard load, the dashlist panel will re-query the favorites to appear in dashboard list panel, always providing the most up to date results.</p> <p></p>"},{"location":"dashboard/grafana/features/panels/dashlist/#mode-search-dashboards","title":"Mode: Search Dashboards","text":"<p>The panel may be configured to search by either string query or tag(s). On dashboard load, the dashlist panel will re-query the dashboard list, always providing the most up to date results.</p> <p>To configure dashboard list in this manner, select <code>search</code> from the Mode select box. When selected, the Search Options section will appear.</p> Name Description Mode Set search or starred mode Query If in search mode specify the search query Tags if in search mode specify dashboard tags to search for Limit number to Specify the maximum number of dashboards"},{"location":"dashboard/grafana/features/panels/dashlist/#search-by-string","title":"Search by string","text":"<p>To search by a string, enter a search query in the <code>Search Options: Query</code> field. Queries are case-insensitive, and partial values are accepted. </p>"},{"location":"dashboard/grafana/features/panels/dashlist/#search-by-tag","title":"Search by tag","text":"<p>To search by one or more tags, enter your selection in the <code>Search Options: Tags:</code> field. Note that existing tags will not appear as you type, and are case sensitive. To see a list of existing tags, you can always return to the dashboard, open the Dashboard Picker at the top and click <code>tags</code> link in the search bar. </p> <p>When multiple tags and strings appear, the dashboard list will display those matching ALL conditions.</p>"},{"location":"dashboard/grafana/features/panels/graph/","title":"Graph","text":"<p>+++ title = \"Graph Panel\" keywords = [\"grafana\", \"graph panel\", \"documentation\", \"guide\", \"graph\"] type = \"docs\" [menu.docs] name = \"Graph\" parent = \"panels\" weight = 1 +++</p>"},{"location":"dashboard/grafana/features/panels/graph/#graph-panel","title":"Graph Panel","text":"<p>The main panel in Grafana is simply named Graph. It provides a very rich set of graphing options.</p> <p></p> <p>Clicking the title for a panel exposes a menu.  The <code>edit</code> option opens additional configuration options for the panel.</p>"},{"location":"dashboard/grafana/features/panels/graph/#general","title":"General","text":"<p>The general tab allows customization of a panel's appearance and menu options.</p>"},{"location":"dashboard/grafana/features/panels/graph/#general-options","title":"General Options","text":"<ul> <li><code>Title</code> - The panel title on the dashboard</li> <li><code>Span</code> - The panel width in columns</li> <li><code>Height</code> - The panel contents height in pixels</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#drilldown-detail-link","title":"Drilldown / detail link","text":"<p>The drilldown section allows adding dynamic links to the panel that can link to other dashboards or URLs</p> <p>Each link has a title, a type and params.  A link can be either a <code>dashboard</code> or <code>absolute</code> links. If it is a dashboard links, the <code>dashboard</code> value must be the name of a dashboard.  If it's an <code>absolute</code> link, the URL is the URL to link.</p> <p><code>params</code> allows adding additional URL params to the links.  The format is the <code>name=value</code> with multiple params separate by <code>&amp;</code>.  Template variables can be added as values using <code>$myvar</code>.</p> <p>When linking to another dashboard that uses template variables, you can use <code>var-myvar=value</code> to populate the template variable to a desired value from the link.</p>"},{"location":"dashboard/grafana/features/panels/graph/#metrics","title":"Metrics","text":"<p>The metrics tab defines what series data and sources to render.  Each datasource provides different options.</p>"},{"location":"dashboard/grafana/features/panels/graph/#axes-grid","title":"Axes &amp; Grid","text":"<p>The Axes &amp; Grid tab controls the display of axes, grids and legend.</p>"},{"location":"dashboard/grafana/features/panels/graph/#axes","title":"Axes","text":"<p>The <code>Left Y</code> and <code>Right Y</code> can be customized using:</p> <ul> <li><code>Unit</code> - The display unit for the Y value</li> <li><code>Grid Max</code> - The maximum Y value. (default auto)</li> <li><code>Grid Min</code> - The minimum Y value. (default auto)</li> <li><code>Label</code> - The Y axis label (default \"\")</li> </ul> <p>Axes can also be hidden by unchecking the appropriate box from <code>Show Axis</code>.</p>"},{"location":"dashboard/grafana/features/panels/graph/#legend","title":"Legend","text":"<p>The legend hand be hidden by checking the <code>Show</code> checkbox.  If it's shown, it can be displayed as a table of values by checking the <code>Table</code> checkbox.  Series with no values can be hidden from the legend using the <code>Hide empty</code> checkbox.</p>"},{"location":"dashboard/grafana/features/panels/graph/#legend-values","title":"Legend Values","text":"<p>Additional values can be shown along-side the legend names:</p> <ul> <li><code>Total</code> - Sum of all values returned from metric query</li> <li><code>Current</code> - Last value returned from the metric query</li> <li><code>Min</code> - Minimum of all values returned from metric query</li> <li><code>Max</code> - Maximum of all values returned from the metric query</li> <li><code>Avg</code> - Average of all values returned from metric query</li> <li><code>Decimals</code> - Controls how many decimals are displayed for legend values (and graph hover tooltips)</li> </ul> <p>The legend values are calculated client side by Grafana and depend on what type of aggregation or point consolidation you metric query is using. All the above legend values cannot be correct at the same time. For example if you plot a rate like requests/second, this is probably using average as aggregator, then the Total in the legend will not represent the total number of requests. It is just the sum of all data points received by Grafana.</p>"},{"location":"dashboard/grafana/features/panels/graph/#display-styles","title":"Display styles","text":"<p>Display styles controls properties of the graph.</p>"},{"location":"dashboard/grafana/features/panels/graph/#thresholds","title":"Thresholds","text":"<p>Thresholds allow you to add arbitrary lines or sections to the graph to make it easier to see when the graph crosses a particular threshold.</p>"},{"location":"dashboard/grafana/features/panels/graph/#chart-options","title":"Chart Options","text":"<ul> <li><code>Bar</code> - Display values as a bar chart</li> <li><code>Lines</code> - Display values as a line graph</li> <li><code>Points</code> - Display points for values</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#line-options","title":"Line Options","text":"<ul> <li><code>Line Fill</code> - Amount of color fill for a series.  0 is none.</li> <li><code>Line Width</code> - The width of the line for a series.</li> <li><code>Null point mode</code> - How null values are displayed</li> <li><code>Staircase line</code> - Draws adjacent points as staircase</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#multiple-series","title":"Multiple Series","text":"<p>If there are multiple series, they can be display as a group.</p> <ul> <li><code>Stack</code> - Each series is stacked on top of another</li> <li><code>Percent</code> - Each series is draw as a percent of the total of all series</li> </ul> <p>If you have stack enabled you can select what the mouse hover feature should show.</p> <ul> <li>Cumulative - Sum of series below plus the series you hover over</li> <li>Individual - Just the value for the series you hover over</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#rendering","title":"Rendering","text":"<ul> <li><code>Flot</code> - Render the graphs in the browser using Flot (default)</li> <li><code>Graphite PNG</code> - Render the graph on the server using graphite's render API.</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#tooltip","title":"Tooltip","text":"<ul> <li><code>All series</code> - Show all series on the same tooltip and a x crosshairs to help follow all series</li> </ul>"},{"location":"dashboard/grafana/features/panels/graph/#series-specific-overrides","title":"Series specific overrides","text":"<p>The section allows a series to be render different from the rest.  For example, one series can be given a thicker line width to make it standout.</p>"},{"location":"dashboard/grafana/features/panels/graph/#time-range","title":"Time range","text":""},{"location":"dashboard/grafana/features/panels/singlestat/","title":"Singlestat","text":"<p>+++ title = \"Singlestat Panel\" keywords = [\"grafana\", \"dashboard\", \"documentation\", \"panels\", \"singlestat\"] type = \"docs\" [menu.docs] name = \"Singlestat\" parent = \"panels\" weight = 2 +++</p>"},{"location":"dashboard/grafana/features/panels/singlestat/#singlestat-panel","title":"Singlestat Panel","text":"<p>The Singlestat Panel allows you to show the one main summary stat of a SINGLE series. It reduces the series into a single number (by looking at the max, min, average, or sum of values in the series). Singlestat also provides thresholds to color the stat or the Panel background. It can also translate the single number into a text value, and show a sparkline summary of the series.</p>"},{"location":"dashboard/grafana/features/panels/singlestat/#singlestat-panel-configuration","title":"Singlestat Panel Configuration","text":"<p>The singlestat panel has a normal query editor to allow you define your exact metric queries like many other Panels. Through the Options tab, you can access the Singlestat-specific functionality.</p> <p></p> <ol> <li><code>Big Value</code>: Big Value refers to how we display the main stat for the Singlestat Panel. This is always a single value that is displayed in the Panel in between two strings, <code>Prefix</code> and  <code>Suffix</code>. The single number is calculated by choosing a function (min,max,average,current,total) of your metric query. This functions reduces your query into a single numeric value.</li> <li><code>Font Size</code>: You can use this section to select the font size of the different texts in the Singlestat Panel, i.e. prefix, value and postfix.</li> <li><code>Values</code>: The Value fields let you set the function (min, max, average, current, total, first, delta, range) that your entire query is reduced into a single value with. You can also set the font size of the Value field and font-size (as a %) of the metric query that the Panel is configured with. This reduces the entire query into a single summary value that is displayed.</li> <li><code>min</code> - The smallest value in the series</li> <li><code>max</code> - The largest value in the series</li> <li><code>avg</code> - The average of all the non-null values in the series</li> <li><code>current</code> - The last value in the series. If the series ends on null the previous value will be used.</li> <li><code>total</code> - The sum of all the non-null values in the series</li> <li><code>first</code> - The first value in the series</li> <li><code>delta</code> - The total incremental increase (of a counter) in the series. An attempt is made to account for counter resets, but this will only be accurate for single instance metrics. Used to show total counter increase in time series.</li> <li><code>diff</code> - The difference betwen 'current' (last value) and 'first'.</li> <li><code>range</code> - The difference between 'min' and 'max'. Useful the show the range of change for a gauge.</li> <li><code>Postfixes</code>: The Postfix fields let you define a custom label and font-size (as a %) to appear after the value</li> <li><code>Units</code>: Units are appended to the the Singlestat  within the panel, and will respect the color and threshold settings for the value.</li> <li><code>Decimals</code>: The Decimal field allows you to override the automatic decimal precision, and set it explicitly.</li> </ol>"},{"location":"dashboard/grafana/features/panels/singlestat/#coloring","title":"Coloring","text":"<p>The coloring options of the Singlestat Panel config allow you to dynamically change the colors based on the Singlestat value.</p> <p></p> <ol> <li><code>Background</code>: This checkbox applies the configured thresholds and colors to the entirety of the Singlestat Panel background.</li> <li><code>Value</code>: This checkbox applies the configured thresholds and colors to the summary stat.</li> <li><code>Thresholds</code>: Change the background and value colors dynamically within the panel, depending on the Singlestat value. The threshold field accepts 2 comma-separated values which represent 3 ranges that correspond to the three colors directly to the right. For example: if the thresholds are 70, 90 then the first color represents &lt; 70, the second color represents between 70 and 90 and the third color represents &gt; 90.</li> <li><code>Colors</code>: Select a color and opacity</li> <li><code>Invert order</code>: This link toggles the threshold color order.For example: Green, Orange, Red () will become Red, Orange, Green ().</li> </ol>"},{"location":"dashboard/grafana/features/panels/singlestat/#spark-lines","title":"Spark Lines","text":"<p>Sparklines are a great way of seeing the historical data related to the summary stat, providing valuable context at a glance. Sparklines act differently than traditional Graph Panels and do not include x or y axis, coordinates, a legend, or ability to interact with the graph.</p> <p></p> <ol> <li><code>Show</code>: The show checkbox will toggle whether the spark line is shown in the Panel. When unselected, only the Singlestat value will appear.</li> <li><code>Background</code>: Check if you want the sparklines to take up the full panel width, or uncheck if they should be below the main Singlestat value.</li> <li><code>Line Color</code>: This color selection applies to the color of the sparkline itself.</li> <li><code>Fill Color</code>: This color selection applies to the area below the sparkline.</li> </ol> <p>Pro-tip: Reduce the opacity on  fill colors for nice looking panels.</p>"},{"location":"dashboard/grafana/features/panels/singlestat/#value-to-text-mapping","title":"Value to text mapping","text":"<p>Value to text mapping allows you to translate the value of the summary stat into explicit text. The text will respect all styling, thresholds and customization defined for the value. This can be useful to translate the number of the main Singlestat value into a context-specific human-readable word or message.</p> <p></p>"},{"location":"dashboard/grafana/features/panels/singlestat/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dashboard/grafana/features/panels/singlestat/#multiple-series-error","title":"Multiple Series Error","text":"<p>Grafana 2.5 introduced stricter checking for multiple-series on singlestat panels. In previous versions, the panel logic did not verify that only a single series was used, and instead, displayed the first series encountered. Depending on your data source, this could have lead to inconsistent data being shown and/or a general confusion about which metric was being displayed.</p> <p>To fix your singlestat panel:</p> <ul> <li> <p>Edit your panel by clicking the Panel Title and selecting Edit.</p> </li> <li> <p>Do you have multiple queries in the metrics tab?</p> <ul> <li>Solution: Select a single query to visualize. You can toggle whether a query is visualized by clicking the eye icon on each line. If the error persists, continue to the next solution.</li> </ul> </li> <li> <p>Do you have one query?</p> <ul> <li>Solution: This likely means your query is returning multiple series. You will want to reduce this down to a single series. This can be accomplished in many ways, depending on your data source. Some common practices include summing the series, averaging or any number of other functions. Consult the documentation for your data source for additional information.</li> </ul> </li> </ul>"},{"location":"dashboard/grafana/features/panels/table_panel/","title":"Table panel","text":"<p>+++ title = \"Table Panel\" keywords = [\"grafana\", \"dashboard\", \"documentation\", \"panels\", \"table panel\"] type = \"docs\" [menu.docs] name = \"Table\" parent = \"panels\" weight = 2 +++</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#table-panel","title":"Table Panel","text":"<p>The new table panel is very flexible, supporting both multiple modes for time series as well as for table, annotation and raw JSON data. It also provides date formatting and value formatting and coloring options.</p> <p>To view table panels in action and test different configurations with sample data, check out the Table Panel Showcase in the Grafana Playground.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#options-overview","title":"Options overview","text":"<p>The table panel has many ways to manipulate your data for optimal presentation.</p> <p></p> <ol> <li><code>Data</code>: Control how your query is transformed into a table.</li> <li><code>Table Display</code>: Table display options.</li> <li><code>Column Styles</code>: Column value formatting and display options.</li> </ol>"},{"location":"dashboard/grafana/features/panels/table_panel/#data-to-table","title":"Data to Table","text":"<p>The data section contains the To Table Transform (1). This is the primary option for how your data/metric query should be transformed into a table format.  The Columns (2) option allows you to select what columns you want in the table. Only applicable for some transforms.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#time-series-to-rows","title":"Time series to rows","text":"<p>In the most simple mode you can turn time series to rows. This means you get a <code>Time</code>, <code>Metric</code> and a <code>Value</code> column. Where <code>Metric</code> is the name of the time series.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#time-series-to-columns","title":"Time series to columns","text":"<p>This transform allows you to take multiple time series and group them by time. Which will result in the primary column being <code>Time</code> and a column for each time series.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#time-series-aggregations","title":"Time series aggregations","text":"<p> This table transformation will lay out your table into rows by metric, allowing columns of <code>Avg</code>, <code>Min</code>, <code>Max</code>, <code>Total</code>, <code>Current</code> and <code>Count</code>. More than one column can be added.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#annotations","title":"Annotations","text":"<p>If you have annotations enabled in the dashboard you can have the table show them. If you configure this mode then any queries you have in the metrics tab will be ignored.</p>"},{"location":"dashboard/grafana/features/panels/table_panel/#json-data","title":"JSON Data","text":"<p>If you have an Elasticsearch Raw Document query or an Elasticsearch query without a <code>date histogram</code> use this transform mode and pick the columns using the Columns section.</p> <p></p>"},{"location":"dashboard/grafana/features/panels/table_panel/#table-display","title":"Table Display","text":"<ol> <li><code>Pagination (Page Size)</code>: The table display fields allow you to control The <code>Pagination</code> (page size) is the threshold at which the table rows will be broken into pages. For example, if your table had 95 records with a pagination value of 10, your table would be split across 9 pages.</li> <li><code>Scroll</code>: The <code>scroll bar</code> checkbox toggles the ability to scroll within the panel, when unchecked, the panel height will grow to display all rows.</li> <li><code>Font Size</code>: The <code>font size</code> field allows you to increase or decrease the size for the panel, relative to the default font size.</li> </ol>"},{"location":"dashboard/grafana/features/panels/table_panel/#column-styles","title":"Column Styles","text":"<p>The column styles allow you control how dates and numbers are formatted.</p> <p></p> <ol> <li><code>Name or regex</code>: The Name or Regex field controls what columns the rule should be applied to. The regex or name filter will be matched against the column name not against column values.</li> <li><code>Type</code>: The three supported types of types are <code>Number</code>, <code>String</code> and <code>Date</code>.</li> <li><code>Format</code>: Specify date format. Only available when <code>Type</code> is set to <code>Date</code>.</li> <li><code>Coloring</code> and <code>Thresholds</code>: Specify color mode and thresholds limits.</li> <li><code>Unit</code> and <code>Decimals</code>: Specify unit and decimal precision for numbers.</li> <li><code>Add column style rule</code>: Add new column rule.</li> </ol>"},{"location":"dashboard/grafana/guides/basic_concepts/","title":"Basic Concepts","text":"<p>This document is a \u201cbottom up\u201d introduction to basic concepts in Grafana, and can be used as a starting point to get familiar with core features.</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#data-source","title":"Data Source","text":"<p>Grafana supports many different storage backends for your time series data (Data Source). Each Data Source has a specific Query Editor that is customized for the features and capabilities that the particular Data Source exposes.</p> <p>The following datasources are officially supported: Graphite, InfluxDB, OpenTSDB, Prometheus, Elasticsearch, CloudWatch.</p> <p>The query language and capabilities of each Data Source are obviously very different. You can combine data from multiple Data Sources onto a single Dashboard, but each Panel is tied to a specific Data Source that belongs to a particular Organization.</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#organization","title":"Organization","text":"<p>Grafana supports multiple organizations in order to support a wide variety of deployment models, including using a single Grafana instance to provide service to multiple potentially untrusted Organizations.</p> <p>In many cases, Grafana will be deployed with a single Organization.</p> <p>Each Organization can have one or more Data Sources.</p> <p>All Dashboards are owned by a particular Organization.</p> <p>Note: It is important to remember that most metric databases do not provide any sort of per-user series authentication. Therefore, in Grafana, Data Sources and Dashboards are available to all Users in a particular Organization.</p> <p>For more details on the user model for Grafana, please refer to Admin</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#user","title":"User","text":"<p>A User is a named account in Grafana. A user can belong to one or more Organizations, and can be assigned different levels of privileges through roles.</p> <p>Grafana supports a wide variety of internal and external ways for Users to authenticate themselves. These include from its own integrated database, from an external SQL server, or from an external LDAP server.</p> <p>For more details please refer to User Auth</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#row","title":"Row","text":"<p>A Row is a logical divider within a Dashboard, and is used to group Panels together.</p> <p>Rows are always 12 \u201cunits\u201d wide. These units are automatically scaled dependent on the horizontal resolution of your browser. You can control the relative width of Panels within a row by setting their own width.</p> <p>We utilize a unit abstraction so that Grafana looks great on all screens both small and huge.</p> <p>Note: With MaxDataPoint functionality, Grafana can show you the perfect amount of datapoints no matter your resolution or time-range.</p> <p>Utilize the Repeating Row functionality to dynamically create or remove entire Rows (that can be filled with Panels), based on the Template variables selected.</p> <p>Rows can be collapsed by clicking on the Row Title. If you save a Dashboard with a Row collapsed, it will save in that state and will not preload those graphs until the row is expanded.</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#panel","title":"Panel","text":"<p>The Panel is the basic visualization building block in Grafana. Each Panel provides a Query Editor (dependent on the Data Source selected in the panel) that allows you to extract the perfect visualization to display on the Panel by utilizing the Query Editor</p> <p>There are a wide variety of styling and formatting options that each Panel exposes to allow you to create the perfect picture.</p> <p>Panels can be dragged and dropped and rearranged on the Dashboard. They can also be resized.</p> <p>There are currently four Panel types: Graph, Singlestat, Dashlist, Table,and Text.</p> <p>Panels like the Graph panel allow you to graph as many metrics and series as you want. Other panels like Singlestat require a reduction of a single query into a single number. Dashlist and Text are special panels that do not connect to any Data Source.</p> <p>Panels can be made more dynamic by utilizing Dashboard Templating variable strings within the panel configuration (including queries to your Data Source configured via the Query Editor).</p> <p>Utilize the Repeating Panel functionality to dynamically create or remove Panels based on the Templating Variables selected.</p> <p>The time range on Panels is normally what is set in the Dashboard time picker but this can be overridden by utilizes Panel specific time overrides.</p> <p>Panels (or an entire Dashboard) can be Shared easily in a variety of ways. You can send a link to someone who has a login to your Grafana. You can use the Snapshot feature to encode all the data currently being viewed into a static and interactive JSON document; it's so much better than emailing a screenshot!</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#query-editor","title":"Query Editor","text":"<p>The Query Editor exposes capabilities of your Data Source and allows you to query the metrics that it contains.</p> <p>Use the Query Editor to build one or more queries (for one or more series) in your time series database. The panel will instantly update allowing you to effectively explore your data in real time and build a perfect query for that particular Panel.</p> <p>You can utilize Template variables in the Query Editor within the queries themselves. This provides a powerful way to explore data dynamically based on the Templating variables selected on the Dashboard.</p> <p>Grafana allows you to reference queries in the Query Editor by the row that they\u2019re on. If you add a second query to graph, you can reference the first query simply by typing in #A. This provides an easy and convenient way to build compounded queries.</p>"},{"location":"dashboard/grafana/guides/basic_concepts/#dashboard","title":"Dashboard","text":"<p>The Dashboard is where it all comes together. Dashboards can be thought of as of a set of one or more Panels organized and arranged into one or more Rows.</p> <p>The time period for the Dashboard can be controlled by the Dashboard time picker in the upper right of the Dashboard.</p> <p>Dashboards can utilize Templating to make them more dynamic and interactive.</p> <p>Dashboards can utilize Annotations to display event data across Panels. This can help correlate the time series data in the Panel with other events.</p> <p>Dashboards (or a specific Panel) can be Shared easily in a variety of ways. You can send a link to someone who has a login to your Grafana. You can use the Snapshot feature to encode all the data currently being viewed into a static and interactive JSON document; it's so much better than emailing a screenshot!</p> <p>Dashboards can be tagged, and the Dashboard picker provides quick, searchable access to all Dashboards in a particular Organization.</p>"},{"location":"dashboard/grafana/guides/getting_started/","title":"Getting started","text":"<p>This guide will help you get started and acquainted with Grafana. It assumes you have a working Grafana server up and running and have added at least one Data Source.</p>"},{"location":"dashboard/grafana/guides/getting_started/#beginner-guides","title":"Beginner guides","text":"<p>Watch the 10min beginners guide to building dashboards to get a quick intro to setting up Dashboards and Panels.</p>"},{"location":"dashboard/grafana/guides/getting_started/#basic-concepts","title":"Basic Concepts","text":"<p>Read the Basic Concepts document to get a crash course in key Grafana concepts.</p>"},{"location":"dashboard/grafana/guides/getting_started/#top-header","title":"Top header","text":"<p>Let's start with creating a new Dashboard. You can find the new Dashboard link at the bottom of the Dashboard picker. You now have a blank Dashboard.</p> <p></p> <p>The image above shows you the top header for a Dashboard.</p> <ol> <li>Side menubar toggle: This toggles the side menu, allowing you to focus on the data presented in the dashboard. The side menu provides access to features unrelated to a Dashboard such as Users, Organizations, and Data Sources.</li> <li>Dashboard dropdown: This dropdown shows you which Dashboard you are currently viewing, and allows you to easily switch to a new Dashboard. From here you can also create a new Dashboard, Import existing Dashboards, and manage Dashboard playlists.</li> <li>Star Dashboard: Star (or unstar) the current Dashboard. Starred Dashboards will show up on your own Home Dashboard by default, and are a convenient way to mark Dashboards that you're interested in.</li> <li>Share Dashboard: Share the current dashboard by creating a link or create a static Snapshot of it. Make sure the Dashboard is saved before sharing.</li> <li>Save dashboard: The current Dashboard will be saved with the current Dashboard name.</li> <li>Settings: Manage Dashboard settings and features such as Templating and Annotations.</li> </ol>"},{"location":"dashboard/grafana/guides/getting_started/#dashboards-panels-rows-the-building-blocks-of-grafana","title":"Dashboards, Panels, Rows, the building blocks of Grafana...","text":"<p>Dashboards are at the core of what Grafana is all about. Dashboards are composed of individual Panels arranged on a number of Rows. Grafana ships with a variety of Panels. Grafana makes it easy to construct the right queries, and customize the display properties so that you can create the perfect Dashboard for your need. Each Panel can interact with data from any configured Grafana Data Source (currently InfluxDB, Graphite, OpenTSDB, Prometheus and Cloudwatch). The Basic Concepts guide explores these key ideas in detail.</p>"},{"location":"dashboard/grafana/guides/getting_started/#adding-editing-graphs-and-panels","title":"Adding &amp; Editing Graphs and Panels","text":"<ol> <li>You add panels via row menu. The row menu is the green icon to the left of each row.</li> <li>To edit the graph you click on the graph title to open the panel menu, then <code>Edit</code>.</li> <li>This should take you to the <code>Metrics</code> tab. In this tab you should see the editor for your default data source.</li> </ol> <p>When you click the <code>Metrics</code> tab, you are presented with a Query Editor that is specific to the Panel Data Source. Use the Query Editor to build your queries and Grafana will visualize them in real time.</p> <p></p> <ol> <li>Zoom out time range</li> <li>Time picker dropdown. Here you can access relative time range options, auto refresh options and set custom absolute time ranges.</li> <li>Manual refresh button. Will cause all panels to refresh (fetch new data).</li> <li>Row controls menu. Via this menu you can add panels to the row, set row height and more.</li> <li>Dashboard panel. You edit panels by clicking the panel title.</li> <li>Graph legend. You can change series colors, y-axis and series visibility directly from the legend.</li> </ol>"},{"location":"dashboard/grafana/guides/getting_started/#drag-and-drop-panels","title":"Drag-and-Drop panels","text":"<p>You can Drag-and-Drop Panels within and between Rows. Click and hold the Panel title, and drag it to its new location. You can also easily resize panels by clicking the (-) and (+) icons.</p> <p></p>"},{"location":"dashboard/grafana/guides/getting_started/#tips-and-shortcuts","title":"Tips and shortcuts","text":"<ul> <li>Click the graph title and in the dropdown menu quickly change span or duplicate the panel.</li> <li>Click the Save icon in the menu to save the dashboard with a new name</li> <li>Click the Save icon in the menu and then advanced to export the dashboard to json file, or set it as your default dashboard.</li> <li>Click the colored icon in the legend to select series color</li> <li>Click series name in the legend to hide series</li> <li>Ctrl/Shift/Meta + Click legend name to hide other series</li> </ul>"},{"location":"dashboard/grafana/guides/getting_started/#grafana-loves-the-keyboard","title":"Grafana loves the keyboard","text":"<ul> <li>Ctrl+S Saves the current dashboard</li> <li>Ctrl+F Opens the dashboard finder / search</li> <li>Ctrl+H Hides all controls (good for tv displays)</li> <li>Hit Escape to exit graph when in fullscreen or edit mode</li> </ul>"},{"location":"dashboard/grafana/http_api/","title":"HTTP API Reference","text":"<p>The API can be used to control the Dashboard. For example on to use it to start a load test and generate Analytics report, see:</p> <ul> <li>Python script</li> <li>Groovy script</li> </ul>"},{"location":"dashboard/grafana/http_api/#supported-http-apis","title":"Supported HTTP APIs:","text":"<ul> <li>Loadtest API</li> <li>Authentication API</li> <li>Dashboard API</li> <li>Data Source API</li> <li>Organisation API</li> <li>User API</li> <li>Admin API</li> <li>Snapshot API</li> <li>Preferences API</li> <li>Other API</li> </ul>"},{"location":"dashboard/grafana/http_api/admin/","title":"Admin API","text":"<p>The admin http API does not currently work with an api token. Api Token's are currently only linked to an organization and organization role. They cannot given the permission of server admin, only user's can be given that permission. So in order to use these API calls you will have to use basic auth and Grafana user with Grafana admin permission.</p>"},{"location":"dashboard/grafana/http_api/admin/#settings","title":"Settings","text":"<p><code>GET /api/admin/settings</code></p> <p>Example Request:</p> <pre><code>GET /api/admin/settings\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n\"DEFAULT\":\n{\n  \"app_mode\":\"production\"},\n  \"analytics\":\n  {\n    \"google_analytics_ua_id\":\"\",\n    \"reporting_enabled\":\"false\"\n  },\n  \"auth.anonymous\":{\n    \"enabled\":\"true\",\n    \"org_name\":\"Main Org.\",\n    \"org_role\":\"Viewer\"\n  },\n  \"auth.basic\":{\n    \"enabled\":\"false\"\n  },\n  \"auth.github\":{\n    \"allow_sign_up\":\"false\",\n    \"allowed_domains\":\"\",\n    \"allowed_organizations\":\"\",\n    \"api_url\":\"https://api.github.com/user\",\n    \"auth_url\":\"https://github.com/login/oauth/authorize\",\n    \"client_id\":\"some_id\",\n    \"client_secret\":\"************\",\n    \"enabled\":\"false\",\n    \"scopes\":\"user:email\",\n    \"team_ids\":\"\",\n    \"token_url\":\"https://github.com/login/oauth/access_token\"\n  },\n  \"auth.google\":{\n    \"allow_sign_up\":\"false\",\"allowed_domains\":\"\",\n    \"api_url\":\"https://www.googleapis.com/oauth2/v1/userinfo\",\n    \"auth_url\":\"https://accounts.google.com/o/oauth2/auth\",\n    \"client_id\":\"some_client_id\",\n    \"client_secret\":\"************\",\n    \"enabled\":\"false\",\n    \"scopes\":\"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\",\n    \"token_url\":\"https://accounts.google.com/o/oauth2/token\"\n  },\n  \"auth.ldap\":{\n    \"config_file\":\"/etc/grafana/ldap.toml\",\n    \"enabled\":\"false\"\n  },\n  \"auth.proxy\":{\n    \"auto_sign_up\":\"true\",\n    \"enabled\":\"false\",\n    \"header_name\":\"X-WEBAUTH-USER\",\n    \"header_property\":\"username\"\n  },\n  \"dashboards.json\":{\n    \"enabled\":\"false\",\n    \"path\":\"/var/lib/grafana/dashboards\"\n  },\n  \"database\":{\n    \"host\":\"127.0.0.1:0000\",\n    \"name\":\"grafana\",\n    \"password\":\"************\",\n    \"path\":\"grafana.db\",\n    \"ssl_mode\":\"disable\",\n    \"type\":\"sqlite3\",\n    \"user\":\"root\"\n  },\n  \"emails\":{\n    \"templates_pattern\":\"emails/*.html\",\n    \"welcome_email_on_sign_up\":\"false\"\n  },\n  \"event_publisher\":{\n    \"enabled\":\"false\",\n    \"exchange\":\"grafana_events\",\n    \"rabbitmq_url\":\"amqp://localhost/\"\n  },\n  \"log\":{\n    \"buffer_len\":\"10000\",\n    \"level\":\"Info\",\n    \"mode\":\"file\"\n  },\n  \"log.console\":{\n    \"level\":\"\"\n  },\n  \"log.file\":{\n    \"daily_rotate\":\"true\",\n    \"file_name\":\"\",\n    \"level\":\"\",\n    \"log_rotate\":\"true\",\n    \"max_days\":\"7\",\n    \"max_lines\":\"1000000\",\n    \"max_lines_shift\":\"28\",\n    \"max_size_shift\":\"\"\n  },\n  \"paths\":{\n    \"data\":\"/tsdb/grafana\",\n    \"logs\":\"/logs/apps/grafana\"},\n    \"security\":{\n    \"admin_password\":\"************\",\n    \"admin_user\":\"admin\",\n    \"cookie_remember_name\":\"grafana_remember\",\n    \"cookie_username\":\"grafana_user\",\n    \"disable_gravatar\":\"false\",\n    \"login_remember_days\":\"7\",\n    \"secret_key\":\"************\"\n  },\n  \"server\":{\n    \"cert_file\":\"\",\n    \"cert_key\":\"\",\n    \"domain\":\"mygraf.com\",\n    \"enable_gzip\":\"false\",\n    \"enforce_domain\":\"false\",\n    \"http_addr\":\"127.0.0.1\",\n    \"http_port\":\"0000\",\n    \"protocol\":\"http\",\n    \"root_url\":\"%(protocol)s://%(domain)s:%(http_port)s/\",\n    \"router_logging\":\"true\",\n    \"data_proxy_logging\":\"true\",\n    \"static_root_path\":\"public\"\n  },\n  \"session\":{\n    \"cookie_name\":\"grafana_sess\",\n    \"cookie_secure\":\"false\",\n    \"gc_interval_time\":\"\",\n    \"provider\":\"file\",\n    \"provider_config\":\"sessions\",\n    \"session_life_time\":\"86400\"\n  },\n  \"smtp\":{\n    \"cert_file\":\"\",\n    \"enabled\":\"false\",\n    \"from_address\":\"admin@grafana.localhost\",\n    \"from_name\":\"Grafana\",\n    \"host\":\"localhost:25\",\n    \"key_file\":\"\",\n    \"password\":\"************\",\n    \"skip_verify\":\"false\",\n    \"user\":\"\"},\n  \"users\":{\n    \"allow_org_create\":\"true\",\n    \"allow_sign_up\":\"false\",\n    \"auto_assign_org\":\"true\",\n    \"auto_assign_org_role\":\"Viewer\"\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#grafana-stats","title":"Grafana Stats","text":"<p><code>GET /api/admin/stats</code></p> <p>Example Request:</p> <pre><code>GET /api/admin/stats\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"user_count\":2,\n  \"org_count\":1,\n  \"dashboard_count\":4,\n  \"db_snapshot_count\":2,\n  \"db_tag_count\":6,\n  \"data_source_count\":1,\n  \"playlist_count\":1,\n  \"starred_db_count\":2,\n  \"grafana_admin_count\":2\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#global-users","title":"Global Users","text":"<p><code>POST /api/admin/users</code></p> <p>Create new user</p> <p>Example Request:</p> <pre><code>POST /api/admin/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\":\"User\",\n  \"email\":\"user@graf.com\",\n  \"login\":\"user\",\n  \"password\":\"userpassword\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"id\":5,\"message\":\"User created\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#password-for-user","title":"Password for User","text":"<p><code>PUT /api/admin/users/:id/password</code></p> <p>Change password for specific user</p> <p>Example Request:</p> <pre><code>PUT /api/admin/users/2/password HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"password\":\"userpassword\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#permissions","title":"Permissions","text":"<p><code>PUT /api/admin/users/:id/permissions</code></p> <p>Example Request:</p> <pre><code>PUT /api/admin/users/2/permissions HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{message: \"User permissions updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#delete-global-user","title":"Delete global User","text":"<p><code>DELETE /api/admin/users/:id</code></p> <p>Example Request:</p> <pre><code>DELETE /api/admin/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{message: \"User deleted\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/admin/#pause-all-alerts","title":"Pause all alerts","text":"<p><code>DELETE /api/admin/pause-all-alerts</code></p> <p>Example Request:</p> <pre><code>DELETE /api/admin/pause-all-alerts HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{state: \"new state\", message: \"alerts pause/un paused\", \"alertsAffected\": 100}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/","title":"Alerting API","text":"<p>You can use the Alerting API to get information about alerts and their states but this API cannot be used to modify the alert.  To create new alerts or modify them you need to update the dashboard json that contains the alerts. </p> <p>This API can also be used to create, update and delete alert notifications.</p>"},{"location":"dashboard/grafana/http_api/alerting/#get-alerts","title":"Get alerts","text":"<p><code>GET /api/alerts/</code></p> <p>Example Request:</p> <pre><code>GET /api/alerts HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"id\": 1,\n    \"dashboardId\": 1,\n    \"panelId\": 1,\n    \"name\": \"fire place sensor\",\n    \"message\": \"Someone is trying to break in through the fire place\",\n    \"state\": \"alerting\",\n    \"newStateDate\": \"2016-12-25\",\n    \"executionError\": \"\",\n    \"dashboardUri\": \"http://grafana.com/dashboard/db/sensors\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#get-one-alert","title":"Get one alert","text":"<p><code>GET /api/alerts/:id</code></p> <p>Example Request:</p> <pre><code>GET /api/alerts/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"id\": 1,\n  \"dashboardId\": 1,\n  \"panelId\": 1,\n  \"name\": \"fire place sensor\",\n  \"message\": \"Someone is trying to break in through the fire place\",\n  \"state\": \"alerting\",\n  \"newStateDate\": \"2016-12-25\",\n  \"executionError\": \"\",\n  \"dashboardUri\": \"http://grafana.com/dashboard/db/sensors\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#pause-alert","title":"Pause alert","text":"<p><code>POST /api/alerts/:id/pause</code></p> <p>Example Request:</p> <pre><code>POST /api/alerts/1/pause HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"alertId\": 1,\n  \"paused: true\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"alertId\": 1,\n  \"state\":   \"Paused\",\n  \"message\": \"alert paused\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#get-alert-notifications","title":"Get alert notifications","text":"<p><code>GET /api/alert-notifications</code></p> <p>Example Request:</p> <pre><code>GET /api/alert-notifications HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"name\": \"Team A\",\n  \"type\": \"email\",\n  \"isDefault\": true,\n  \"created\": \"2017-01-01 12:45\",\n  \"updated\": \"2017-01-01 12:45\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#create-alert-notification","title":"Create alert notification","text":"<p><code>POST /api/alerts-notifications</code></p> <p>Example Request:</p> <pre><code>POST /api/alerts-notifications HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\": \"new alert notification\",  //Required\n  \"type\":  \"email\", //Required\n  \"isDefault\": false,\n  \"settings\": {\n    \"addresses\": \"carl@grafana.com;dev@grafana.com\"\n  }\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"id\": 1, \n  \"name\": \"new alert notification\",\n  \"type\": \"email\",\n  \"isDefault\": false,\n  \"settings\": { addresses: \"carl@grafana.com;dev@grafana.com\"} }\n  \"created\": \"2017-01-01 12:34\", \n  \"updated\": \"2017-01-01 12:34\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#update-alert-notification","title":"Update alert notification","text":"<p><code>PUT /api/alerts-notifications/1</code></p> <p>Example Request:</p> <pre><code>PUT /api/alerts-notifications/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"id\": 1,\n  \"name\": \"new alert notification\",  //Required\n  \"type\":  \"email\", //Required\n  \"isDefault\": false,\n  \"settings\": { \n    \"addresses: \"carl@grafana.com;dev@grafana.com\"\n  }\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"id\": 1, \n  \"name\": \"new alert notification\",\n  \"type\": \"email\",\n  \"isDefault\": false,\n  \"settings\": { addresses: \"carl@grafana.com;dev@grafana.com\"} }\n  \"created\": \"2017-01-01 12:34\", \n  \"updated\": \"2017-01-01 12:34\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/alerting/#delete-alert-notification","title":"Delete alert notification","text":"<p><code>DELETE /api/alerts-notifications/:notificationId</code></p> <p>Example Request:</p> <pre><code>DELETE /api/alerts-notifications/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"message\": \"Notification deleted\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/auth/","title":"Authentication API","text":""},{"location":"dashboard/grafana/http_api/auth/#tokens","title":"Tokens","text":"<p>Currently you can authenticate via an <code>API Token</code> or via a <code>Session cookie</code> (acquired using regular login or oauth).</p>"},{"location":"dashboard/grafana/http_api/auth/#basic-auth","title":"Basic Auth","text":"<p>If basic auth is enabled (it is enabled by default) you can authenticate your HTTP request via standard basic auth. Basic auth will also authenticate LDAP users.</p> <p>curl example: <pre><code>?curl http://admin:admin@localhost:3000/api/org\n{\"id\":1,\"name\":\"Main Org.\"}\n</code></pre></p>"},{"location":"dashboard/grafana/http_api/auth/#create-api-token","title":"Create API Token","text":"<p>Open the sidemenu and click the organization dropdown and select the <code>API Keys</code> option.</p> <p></p> <p>You use the token in all requests in the <code>Authorization</code> header, like this:</p> <p>Example:</p> <pre><code>GET http://your.grafana.com/api/dashboards/db/mydash HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>The <code>Authorization</code> header value should be <code>Bearer &lt;your api key&gt;</code>.</p>"},{"location":"dashboard/grafana/http_api/dashboard/","title":"Dashboard API","text":""},{"location":"dashboard/grafana/http_api/dashboard/#create-update-dashboard","title":"Create / Update dashboard","text":"<p><code>POST /api/dashboards/db</code></p> <p>Creates a new dashboard or updates an existing dashboard.</p> <p>Example Request for new dashboard:</p> <pre><code>POST /api/dashboards/db HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Production Overview\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"rows\": [\n      {\n      }\n    ],\n    \"schemaVersion\": 6,\n    \"version\": 0\n  },\n  \"overwrite\": false\n}\n</code></pre> <p>JSON Body schema:</p> <ul> <li>dashboard \u2013 The complete dashboard model, id = null to create a new dashboard</li> <li>overwrite \u2013 Set to true if you want to overwrite existing dashboard with newer version or with same dashboard title.</li> </ul> <p>Example Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 78\n\n{\n  \"slug\": \"production-overview\",\n  \"status\": \"success\",\n  \"version\": 1\n}\n</code></pre> <p>Status Codes:</p> <ul> <li>200 \u2013 Created</li> <li>400 \u2013 Errors (invalid json, missing or invalid fields, etc)</li> <li>401 \u2013 Unauthorized</li> <li>412 \u2013 Precondition failed</li> </ul> <p>The 412 status code is used when a newer dashboard already exists (newer, its version is greater than the version that was sent). The same status code is also used if another dashboard exists with the same title. The response body will look like this:</p> <pre><code>HTTP/1.1 412 Precondition Failed\nContent-Type: application/json; charset=UTF-8\nContent-Length: 97\n\n{\n  \"message\": \"The dashboard has been changed by someone else\",\n  \"status\": \"version-mismatch\"\n}\n</code></pre> <p>In in case of title already exists the <code>status</code> property will be <code>name-exists</code>.</p>"},{"location":"dashboard/grafana/http_api/dashboard/#get-dashboard","title":"Get dashboard","text":"<p><code>GET /api/dashboards/db/:slug</code></p> <p>Will return the dashboard given the dashboard slug. Slug is the url friendly version of the dashboard title.</p> <p>Example Request:</p> <pre><code>GET /api/dashboards/db/production-overview HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"meta\": {\n    \"isStarred\": false,\n    \"slug\": \"production-overview\"\n  },\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Production Overview\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"rows\": [\n      {\n      }\n    ],\n    \"schemaVersion\": 6,\n    \"version\": 0\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/dashboard/#delete-dashboard","title":"Delete dashboard","text":"<p><code>DELETE /api/dashboards/db/:slug</code></p> <p>The above will delete the dashboard with the specified slug. The slug is the url friendly (unique) version of the dashboard title.</p> <p>Example Request:</p> <pre><code>DELETE /api/dashboards/db/test HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"title\": \"Test\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/dashboard/#gets-the-home-dashboard","title":"Gets the home dashboard","text":"<p><code>GET /api/dashboards/home</code></p> <p>Will return the home dashboard.</p> <p>Example Request:</p> <pre><code>GET /api/dashboards/home HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"meta\":   {\n    \"isHome\":true,\n    \"canSave\":false,\n    \"canEdit\":false,\n    \"canStar\":false,\n    \"slug\":\"\",\n    \"expires\":\"0001-01-01T00:00:00Z\",\n    \"created\":\"0001-01-01T00:00:00Z\"\n  },\n  \"dashboard\": {\n    \"editable\":false,\n    \"hideControls\":true,\n    \"nav\":[\n    {\n      \"enable\":false,\n    \"type\":\"timepicker\"\n    }\n    ],\n    \"rows\": [\n      {\n\n      }\n    ],\n    \"style\":\"dark\",\n    \"tags\":[],\n    \"templating\":{\n      \"list\":[\n      ]\n    },\n    \"time\":{\n    },\n    \"timezone\":\"browser\",\n    \"title\":\"Home\",\n    \"version\":5\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/dashboard/#tags-for-dashboard","title":"Tags for Dashboard","text":"<p><code>GET /api/dashboards/tags</code></p> <p>Get all tags of dashboards</p> <p>Example Request:</p> <pre><code>GET /api/dashboards/tags HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"term\":\"tag1\",\n    \"count\":1\n  },\n  {\n    \"term\":\"tag2\",\n    \"count\":4\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/dashboard/#dashboard-from-json-file","title":"Dashboard from JSON file","text":"<p><code>GET /file/:file</code></p>"},{"location":"dashboard/grafana/http_api/dashboard/#search-dashboards","title":"Search Dashboards","text":"<p><code>GET /api/search/</code></p> <p>Status Codes:</p> <ul> <li>query \u2013 Search Query</li> <li>tags \u2013 Tags to use</li> <li>starred \u2013 Flag indicating if only starred Dashboards should be returned</li> <li>tagcloud - Flag indicating if a tagcloud should be returned</li> </ul> <p>Example Request:</p> <pre><code>GET /api/search?query=MyDashboard&amp;starred=true&amp;tag=prod HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\":1,\n    \"title\":\"Production Overview\",\n    \"uri\":\"db/production-overview\",\n    \"type\":\"dash-db\",\n    \"tags\":[],\n    \"isStarred\":false\n  }\n]\n\n    \"email\":\"admin@mygraf.com\",\n    \"login\":\"admin\",\n    \"role\":\"Admin\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/","title":"Data source API","text":""},{"location":"dashboard/grafana/http_api/data_source/#get-all-datasources","title":"Get all datasources","text":"<p><code>GET /api/datasources</code></p> <p>Example Request:</p> <pre><code>GET /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\":1,\n    \"orgId\":1,\n    \"name\":\"datasource_elastic\",\n    \"type\":\"elasticsearch\",\n    \"access\":\"proxy\",\n    \"url\":\"http://mydatasource.com\",\n    \"password\":\"\",\n    \"user\":\"\",\n    \"database\":\"grafana-dash\",\n    \"basicAuth\":false,\n    \"basicAuthUser\":\"\",\n    \"basicAuthPassword\":\"\",\n    \"isDefault\":false,\n    \"jsonData\":null\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#get-a-single-data-sources-by-id","title":"Get a single data sources by Id","text":"<p><code>GET /api/datasources/:datasourceId</code></p> <p>Example Request:</p> <pre><code>GET /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"orgId\":1,\n  \"name\":\"test_datasource\",\n  \"type\":\"graphite\",\n  \"access\":\"proxy\",\n  \"url\":\"http://mydatasource.com\",\n  \"password\":\"\",\n  \"user\":\"\",\n  \"database\":\"\",\n  \"basicAuth\":false,\n  \"basicAuthUser\":\"\",\n  \"basicAuthPassword\":\"\",\n  \"isDefault\":false,\n  \"jsonData\":null\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#get-a-single-data-source-by-name","title":"Get a single data source by Name","text":"<p><code>GET /api/datasources/name/:name</code></p> <p>Example Request:</p> <pre><code>GET /api/datasources/name/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"orgId\":1,\n  \"name\":\"test_datasource\",\n  \"type\":\"graphite\",\n  \"access\":\"proxy\",\n  \"url\":\"http://mydatasource.com\",\n  \"password\":\"\",\n  \"user\":\"\",\n  \"database\":\"\",\n  \"basicAuth\":false,\n  \"basicAuthUser\":\"\",\n  \"basicAuthPassword\":\"\",\n  \"isDefault\":false,\n  \"jsonData\":null\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#get-data-source-id-by-name","title":"Get data source Id by Name","text":"<p><code>GET /api/datasources/id/:name</code></p> <p>Example Request:</p> <pre><code>GET /api/datasources/id/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#create-data-source","title":"Create data source","text":"<p><code>POST /api/datasources</code></p> <p>Example Request:</p> <pre><code>POST /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\":\"test_datasource\",\n  \"type\":\"graphite\",\n  \"url\":\"http://mydatasource.com\",\n  \"access\":\"proxy\",\n  \"basicAuth\":false\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"id\":1,\"message\":\"Datasource added\", \"name\": \"test_datasource\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#update-an-existing-data-source","title":"Update an existing data source","text":"<p><code>PUT /api/datasources/:datasourceId</code></p> <p>Example Request:</p> <pre><code>PUT /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"id\":1,\n  \"orgId\":1,\n  \"name\":\"test_datasource\",\n  \"type\":\"graphite\",\n  \"access\":\"proxy\",\n  \"url\":\"http://mydatasource.com\",\n  \"password\":\"\",\n  \"user\":\"\",\n  \"database\":\"\",\n  \"basicAuth\":true,\n  \"basicAuthUser\":\"basicuser\",\n  \"basicAuthPassword\":\"basicuser\",\n  \"isDefault\":false,\n  \"jsonData\":null\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Datasource updated\", \"id\": 1, \"name\": \"test_datasource\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#delete-an-existing-data-source-by-id","title":"Delete an existing data source by id","text":"<p><code>DELETE /api/datasources/:datasourceId</code></p> <p>Example Request:</p> <pre><code>DELETE /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Data source deleted\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#delete-an-existing-data-source-by-name","title":"Delete an existing data source by name","text":"<p><code>DELETE /api/datasources/name/:datasourceName</code></p> <p>Example Request:</p> <pre><code>DELETE /api/datasources/name/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Data source deleted\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/data_source/#data-source-proxy-calls","title":"Data source proxy calls","text":"<p><code>GET /api/datasources/proxy/:datasourceId/*</code></p> <p>Proxies all calls to the actual datasource.</p>"},{"location":"dashboard/grafana/http_api/loadtests/","title":"Loadtest API","text":"<p>Below are all the API endpoints for managing loadtest. Unless otherwise noted, all requests must include appropriate authentication headers (for example, a Bearer token).</p>"},{"location":"dashboard/grafana/http_api/loadtests/#get-all-loadtests","title":"Get all loadtests","text":"<p>Retrieve a paginated list of all loadtests. Supports an optional search query, along with <code>page</code> and <code>perpage</code> parameters.</p> <p>GET /api/loadtest</p> <p>Query Parameters</p> <ul> <li>query (optional): Filter results by matching loadtest name.  </li> <li>page (optional): Page number to return (default: <code>1</code>).  </li> <li>perpage (optional): Number of items per page (default: <code>1000</code>).</li> </ul> <p>Example Request</p> <pre><code>GET /api/loadtest?query=staging&amp;page=1&amp;perpage=20 HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n{\n    \"orgId\": 0,\n    \"totalCount\": 13,\n    \"loadtests\": [\n        {\n            \"Id\": 23,\n            \"OrgId\": 1,\n            \"Version\": 0,\n            \"Name\": \"some url\",\n            \"Path\": \"http://www.httpbin.org\",\n            \"State\": \" \",\n            \"Schedule\": \"Not Scheduled\",\n            \"ScheduleOverride\": 2,\n            \"NextExec\": \"0000-12-31T19:00:00-05:00\",\n            \"DatasourceId\": 1,\n            \"Location\": \"America/New_York\",\n            \"Data\": {\n                \"LGRegions\": [\n                    {\n                        \"distribution\": 100,\n                        \"name\": \"LocalHost\"\n                    }\n                ],\n                \"TestType\": 3,\n                \"datasourceName\": \"webload\",\n                \"detailedSchedule\": {\n                    \"Duration\": 1,\n                    \"MaxVC\": 1,\n                    \"RampDownTime\": 0,\n                    \"RampUpTime\": 0,\n                    \"Rounds\": 0\n                },\n                \"execoptions\": [],\n                \"is_specific\": true,\n                \"loadGenerators\": [],\n                \"name\": \"some url\",\n                \"path\": \"http://www.httpbin.org\",\n                \"schedule\": \"Not Scheduled\",\n                \"sleep\": 1000,\n                \"url\": \"http://www.httpbin.org\",\n                \"urls\": [\n                    {\n                        \"body\": \"formdata\",\n                        \"display\": 0,\n                        \"formdata\": [],\n                        \"headers\": [],\n                        \"method\": \"Get\",\n                        \"requestbody\": \"\",\n                        \"url\": \"http://www.httpbin.org\"\n                    }\n                ]\n            },\n            \"TestType\": 3,\n            \"Created\": \"2024-10-03T13:52:52-04:00\",\n            \"Updated\": \"2024-10-03T13:53:03-04:00\"\n    }  \n    ]\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#add-a-standard-loadtest-by-data-source-id","title":"Add a standard loadtest (by data source ID)","text":"<p>Creates a new standard (script-based) loadtest by datasourceId.</p> <p>POST /api/loadtest/byDatasourceId</p> <p>Request Body</p> Field Type Description <code>name</code> string Loadtest name <code>datasourceId</code> number Existing data source ID <code>path</code> string Path to the loadtest script or file <code>state</code> string Initial state (leave blank) <code>schedule</code> string Cron schedule or scheduling definition <code>location</code> string Timezone for schedule, e.g \"America/New_York\" (optional) <code>testType</code> number 1 = URL test, 2 = agenda test, 3 = template test <code>nextExec</code> string Next execution time (ISO 8601) (optional) <code>scheduleOverride</code> number 0 = none, 1 = run now, etc. <code>data</code> object Additional loadtest data (JSON object) <p>Example Request</p> <pre><code>POST /api/loadtest/byDatasourceId HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n\n{ \"name\": \"staging_test\", \"datasourceId\": 1, \"path\": \"/tests/staging.js\", \"state\": \"idle\", \"schedule\": \"0 */2 * * *\", \"location\": \"us-east\", \"testType\": 1, \"scheduleOverride\": 0, \"data\": { \"spawncount\": 50 } }\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest added\", \"id\": 5, \"name\": \"staging_test\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#add-a-standard-loadtest-by-data-source-name","title":"Add a standard loadtest (by data source name)","text":"<p>Creates a new standard loadtest, but references the data source by its name instead of id.</p> <p>POST /api/loadtest</p> <p>Request Body</p> Field Type Description <code>name</code> string Loadtest name <code>path</code> string Path to the loadtest script <code>state</code> string Initial state (e.g., \"idle\", \"scheduled\") <code>schedule</code> string Cron schedule or scheduling definition <code>location</code> string Geographic/runner location (optional) <code>data</code> object Additional loadtest data (JSON object) <p>Note: This endpoint also requires the data source name in the URL route.</p> <p>Example Request</p> <pre><code>POST /api/loadtest?DatasourceName=mydatasource HTTP/1.1 \nAccept: application/json \nContent-Type: application/json Authorization: \nBearer &lt;YOUR_API_TOKEN&gt;\n\n{ \"name\": \"my_loadtest\", \"path\": \"/tests/my_loadtest.js\", \"state\": \"idle\", \"schedule\": \"0 1 * * *\", \"location\": \"us-east\", \"data\": { \"spawncount\": 100 } }\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest added\", \"id\": 6, \"name\": \"my_loadtest\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#add-an-agenda-based-loadtest","title":"Add an agenda-based loadtest","text":"<p>Creates a new agenda-based loadtest (testType = 2) using a data source name.</p> <p>POST /api/loadtest/agenda</p> <p>Request Body</p> Field Type Description <code>name</code> string Loadtest name <code>path</code> string Path or reference to the agenda driver <code>state</code> string Initial state (e.g., \"idle\", \"scheduled\") <code>schedule</code> string Cron schedule or scheduling definition <code>location</code> string Geographic/runner location (optional) <code>data</code> object Additional loadtest data (JSON object) <p>Must specify the data source name in the query (as <code>:DatasourceName</code>). This sets <code>testType</code> to <code>2</code> internally.</p> <p>Example Request</p> <pre><code>POST /api/loadtest/agenda?DatasourceName=mydatasource HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n\n{ \"name\": \"agenda_demo\", \"path\": \"/tests/agenda_runner.js\", \"state\": \"idle\", \"schedule\": \"0 3 * * *\", \"location\": \"us-east\", \"data\": { \"spawncount\": 20, \"agendaPath\": \"/agendas/demo_agenda.json\", \"agendas\": [ { \"agendaname\": \"step1\", \"agendapath\": \"/agendas/step1.js\", \"percentage\": 50, \"execoptions\": [ { \"Name\": \"timeout\", \"Value\": \"30\" } ], \"sleepoptions\": {} } ] } }\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest added\", \"id\": 10, \"name\": \"agenda_demo\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#add-a-url-based-loadtest","title":"Add a URL-based loadtest","text":"<p>Creates a new URL-based loadtest (testType = 3) using a data source name.</p> <p>POST /api/loadtest/url</p> <p>Request Body</p> Field Type Description <code>name</code> string Loadtest name <code>path</code> string Some path or descriptor for the test (optional) <code>state</code> string Initial state (e.g., \"idle\", \"scheduled\") <code>schedule</code> string Cron schedule or scheduling definition <code>location</code> string Geographic/runner location (optional) <code>data</code> object Additional loadtest data (JSON object) <p>This sets <code>testType = 3</code> internally. For example, can store multiple URLs, request methods, headers, etc.</p> <p>Example Request</p> <pre><code>POST /api/loadtest/url?DatasourceName=mydatasource HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n\n{ \"name\": \"url_test_example\", \"path\": \"/urls/url_test_example\", \"state\": \"idle\", \"schedule\": \"0 4 * * *\", \"data\": { \"spawncount\": 30, \"url\": \"https://example.com\", \"urls\": [ { \"url\": \"https://example.com/login\", \"method\": \"POST\", \"requestbody\": \"{}\", \"headers\": [ {\"Name\": \"Content-Type\", \"Value\": \"application/json\"} ], \"formdata\": [] } ] } }\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest added\", \"id\": 11, \"name\": \"url_test_example\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#get-a-single-loadtest-by-id","title":"Get a single loadtest by ID","text":"<p>Retrieve a single loadtest, given its numeric ID.</p> <p>GET /api/loadtest/:id</p> <p>Example Request</p> <p>GET /api/loadtest/10 HTTP/1.1 Accept: application/json Content-Type: application/json Authorization: Bearer  <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"id\": 10, \"orgId\": 1, \"name\": \"agenda_demo\", \"path\": \"/tests/agenda_runner.js\", \"schedule\": \"0 3 * * *\", \"scheduleOverride\": 0, \"nextExec\": \"2025-04-22T03:00:00Z\", \"state\": \"idle\", \"datasourceId\": 1, \"location\": \"us-east\", \"data\": { \"spawncount\": 20, \"agendaPath\": \"/agendas/demo_agenda.json\", ... }, \"testType\": 2 }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#get-a-single-agenda-loadtest-by-id","title":"Get a single agenda loadtest by ID","text":"<p>Similar to above, but if you specifically know the test was created as <code>testType = 2</code> (agenda-based), you can use:</p> <p>GET /api/loadtest/agenda/:id</p> <p>This returns the same kind of object but often includes extra fields like <code>agendaPath</code>, <code>agendas</code>, <code>detailedSchedule</code>, etc.</p> <p>Example Request</p> <pre><code>GET /api/loadtest/agenda/10 HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"id\": 10, \"orgId\": 1, \"name\": \"agenda_demo\", \"path\": \"/tests/agenda_runner.js\", \"schedule\": \"0 3 * * *\", \"scheduleOverride\": 0, \"nextExec\": \"2025-04-22T03:00:00Z\", \"state\": \"idle\", \"datasourceId\": 1, \"location\": \"us-east\", \"agendaPath\": \"/agendas/demo_agenda.json\", \"spawnCount\": 20, \"detailedSchedule\": { \"rampUpTime\": 60, \"duration\": 300, \"rampDownTime\": 60, \"maxVC\": 100, \"limitRounds\": false }, \"agendas\": [ { \"agendaname\": \"step1\", \"agendapath\": \"/agendas/step1.js\", \"percentage\": 50, \"execoptions\": [ { \"Name\": \"timeout\", \"Value\": \"30\" } ], \"sleepoptions\": {} } ], \"testType\": 2, \"data\": { ... } }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#get-a-single-url-based-loadtest-by-id","title":"Get a single URL-based loadtest by ID","text":"<p>GET /api/loadtest/url/:id</p> <p>Returns extended URL-based test details if <code>testType = 3</code>.</p> <p>Example Request</p> <pre><code>GET /api/loadtest/url/11 HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"id\": 11, \"orgId\": 1, \"name\": \"url_test_example\", \"path\": \"/urls/url_test_example\", \"schedule\": \"0 4 * * *\", \"scheduleOverride\": 0, \"nextExec\": \"2025-04-22T04:00:00Z\", \"state\": \"idle\", \"datasourceId\": 1, \"location\": \"us-east\", \"url\": \"https://example.com\", \"urls\": [ { \"url\": \"https://example.com/login\", \"method\": \"POST\", \"requestbody\": \"{}\", \"headers\": [ { \"Name\": \"Content-Type\", \"Value\": \"application/json\" } ], \"formdata\": [] } ], \"spawnCount\": 30, \"testType\": 3, \"data\": { ... } }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#update-a-loadtest","title":"Update a loadtest","text":"<p>Updates an existing loadtest by ID.</p> <p>PUT /api/loadtest/:id</p> <p>Request Body</p> <p>Similar to the Add loadtest body, but includes any fields that require updating.</p> Field Type Description <code>name</code> string Loadtest name <code>path</code> string Script path or relevant file path <code>state</code> string Loadtest state <code>schedule</code> string Cron schedule or scheduling definition <code>location</code> string Geographic/runner location (optional) <code>scheduleOverride</code> number 0 = none, 1 = run now, etc. <code>data</code> object JSON object with details (e.g., spawncount, URL list, etc.) <p>Example Request</p> <pre><code>PUT /api/loadtest/5 HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n\n{ \"name\": \"staging_test_updated\", \"path\": \"/tests/new_staging.js\", \"schedule\": \"0 */4 * * *\", \"scheduleOverride\": 1, \"data\": { \"spawncount\": 80 } }\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest updated\", \"id\": 5, \"name\": \"staging_test_updated\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#delete-a-loadtest-by-id","title":"Delete a loadtest by ID","text":"<p>Removes a loadtest by its ID.</p> <p>DELETE /api/loadtest/:id</p> <p>Example Request</p> <pre><code>DELETE /api/loadtest/10 HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"load test deleted\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#delete-a-loadtest-by-name","title":"Delete a loadtest by name","text":"<p>Removes a loadtest by its name.</p> <p>DELETE /api/loadtest/name/:name</p> <p>Example Request</p> <pre><code>DELETE /api/loadtest/name/prod_loadtest HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n\n***Example Response***\n\n```text\nHTTP/1.1 200 \nContent-Type: application/json\n\n{ \"message\": \"loadtest was deleted\" }\n</code></pre>"},{"location":"dashboard/grafana/http_api/loadtests/#start-a-loadtest-by-id","title":"Start a loadtest by ID","text":"<p>Forces a loadtest to start immediately by updating its <code>state</code> and next execution.</p> <p>GET /api/loadtest/:id/start</p> <p>Example Request</p> <p>GET /api/loadtest/10/start HTTP/1.1 Accept: application/json Content-Type: application/json Authorization: Bearer  <p>Example Response</p> <p>HTTP/1.1 200 Content-Type: application/json</p> <p>{ \"message\": \"loadtest started\", \"id\": 10, \"name\": \"agenda_demo\" }</p>"},{"location":"dashboard/grafana/http_api/loadtests/#get-a-loadtest-by-name","title":"Get a loadtest by name","text":"<p>Retrieves a single loadtest by its unique name.</p> <p>GET /api/loadtest/name/:name</p> <p>Example Request</p> <pre><code>GET /api/loadtest/name/staging_test HTTP/1.1 \nAccept: application/json \nContent-Type: application/json \nAuthorization: Bearer &lt;YOUR_API_TOKEN&gt;\n</code></pre> <p>Example Response</p> <pre><code>HTTP/1.1 200 \nContent-Type: application/json\n\n{ \"id\": 5, \"orgId\": 1, \"name\": \"staging_test\", \"path\": \"/tests/staging.js\", \"schedule\": \"0 */2 * * *\", \"scheduleOverride\": 0, \"nextExec\": \"2025-04-22T02:00:00Z\", \"state\": \"scheduled\", \"datasourceId\": 1, \"location\": \"us-east\", \"data\": { ... }, \"testType\": 1 }\n</code></pre> <p>NOTE: The request and response bodies above are representative examples; actual fields (especially within <code>data</code>) can vary depending on the testType and extended settings. Always ensure you include the required headers and valid JSON structures in your requests.</p>"},{"location":"dashboard/grafana/http_api/org/","title":"Organisation API","text":""},{"location":"dashboard/grafana/http_api/org/#get-current-organisation","title":"Get current Organisation","text":"<p><code>GET /api/org</code></p> <p>Example Request:</p> <pre><code>GET /api/org HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"name\":\"Main Org.\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#get-organisation-by-id","title":"Get Organisation by Id","text":"<p><code>GET /api/orgs/:orgId</code></p> <p>Example Request:</p> <pre><code>GET /api/orgs/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"name\":\"Main Org.\",\n  \"address\":{\n    \"address1\":\"\",\n    \"address2\":\"\",\n    \"city\":\"\",\n    \"zipCode\":\"\",\n    \"state\":\"\",\n    \"country\":\"\"\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#get-organisation-by-name","title":"Get Organisation by Name","text":"<p><code>GET /api/orgs/name/:orgName</code></p> <p>Example Request:</p> <pre><code>GET /api/orgs/name/Main%20Org%2E HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"name\":\"Main Org.\",\n  \"address\":{\n    \"address1\":\"\",\n    \"address2\":\"\",\n    \"city\":\"\",\n    \"zipCode\":\"\",\n    \"state\":\"\",\n    \"country\":\"\"\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#create-organisation","title":"Create Organisation","text":"<p><code>POST /api/orgs</code></p> <p>Example Request:</p> <pre><code>POST /api/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\":\"New Org.\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"orgId\":\"1\",\n  \"message\":\"Organization created\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#update-current-organisation","title":"Update current Organisation","text":"<p><code>PUT /api/org</code></p> <p>Example Request:</p> <pre><code>PUT /api/org HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\":\"Main Org.\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#get-all-users-within-the-actual-organisation","title":"Get all users within the actual organisation","text":"<p><code>GET /api/org/users</code></p> <p>Example Request:</p> <pre><code>GET /api/org/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"orgId\":1,\n    \"userId\":1,\n    \"email\":\"admin@mygraf.com\",\n    \"login\":\"admin\",\n    \"role\":\"Admin\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#add-a-new-user-to-the-actual-organisation","title":"Add a new user to the actual organisation","text":"<p><code>POST /api/org/users</code></p> <p>Adds a global user to the actual organisation.</p> <p>Example Request:</p> <pre><code>POST /api/org/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"role\": \"Admin\",\n  \"loginOrEmail\": \"admin\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User added to organization\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#updates-the-given-user","title":"Updates the given user","text":"<p><code>PATCH /api/org/users/:userId</code></p> <p>Example Request:</p> <pre><code>PATCH /api/org/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"role\": \"Viewer\",\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization user updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#delete-user-in-actual-organisation","title":"Delete user in actual organisation","text":"<p><code>DELETE /api/org/users/:userId</code></p> <p>Example Request:</p> <pre><code>DELETE /api/org/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User removed from organization\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#organisations","title":"Organisations","text":""},{"location":"dashboard/grafana/http_api/org/#search-all-organisations","title":"Search all Organisations","text":"<p><code>GET /api/orgs</code></p> <p>Example Request:</p> <pre><code>GET /api/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\":1,\n    \"name\":\"Main Org.\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#update-organisation","title":"Update Organisation","text":"<p><code>PUT /api/orgs/:orgId</code></p> <p>Update Organisation, fields Adress 1, Adress 2, City are not implemented yet.</p> <p>Example Request:</p> <pre><code>PUT /api/orgs/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\":\"Main Org 2.\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#get-users-in-organisation","title":"Get Users in Organisation","text":"<p><code>GET /api/orgs/:orgId/users</code></p> <p>Example Request:</p> <pre><code>GET /api/orgs/1/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"orgId\":1,\n    \"userId\":1,\n    \"email\":\"admin@mygraf.com\",\n    \"login\":\"admin\",\n    \"role\":\"Admin\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#add-user-in-organisation","title":"Add User in Organisation","text":"<p><code>POST /api/orgs/:orgId/users</code></p> <p>Example Request:</p> <pre><code>POST /api/orgs/1/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"loginOrEmail\":\"user\",\n  \"role\":\"Viewer\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User added to organization\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#update-users-in-organisation","title":"Update Users in Organisation","text":"<p><code>PATCH /api/orgs/:orgId/users/:userId</code></p> <p>Example Request:</p> <pre><code>PATCH /api/orgs/1/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"role\":\"Admin\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization user updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/org/#delete-user-in-organisation","title":"Delete User in Organisation","text":"<p><code>DELETE /api/orgs/:orgId/users/:userId</code></p> <p>Example Request:</p> <pre><code>DELETE /api/orgs/1/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User removed from organization\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/other/","title":"Frontend Settings API","text":""},{"location":"dashboard/grafana/http_api/other/#get-settings","title":"Get Settings","text":"<p><code>GET /api/frontend/settings</code></p> <p>Example Request:</p> <pre><code>GET /api/frontend/settings HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"allowOrgCreate\":true,\n  \"appSubUrl\":\"\",\n  \"buildInfo\":{\n    \"buildstamp\":xxxxxx,\n    \"commit\":\"vyyyy\",\n    \"version\":\"zzzzz\"\n  },\n  \"datasources\":{\n    \"datasourcename\":{\n    \"index\":\"grafana-dash\",\n    \"meta\":{\n      \"annotations\":true,\n      \"module\":\"plugins/datasource/grafana/datasource\",\n      \"name\":\"Grafana\",\n      \"partials\":{\n        \"annotations\":\"app/plugins/datasource/grafana/partials/annotations.editor.html\",\n        \"config\":\"app/plugins/datasource/grafana/partials/config.html\"\n        },\n      \"pluginType\":\"datasource\",\n      \"serviceName\":\"Grafana\",\n      \"type\":\"grafanasearch\"\n      }\n    }\n  },\n  \"defaultDatasource\": \"Grafana\"\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/other/#login-api","title":"Login API","text":""},{"location":"dashboard/grafana/http_api/other/#renew-session-based-on-remember-cookie","title":"Renew session based on remember cookie","text":"<p><code>GET /api/login/ping</code></p> <p>Example Request:</p> <pre><code>GET /api/login/ping HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\": \"Logged in\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/preferences/","title":"User and Org Preferences API","text":"<p>Keys:</p> <ul> <li>theme - One of: <code>light</code>, <code>dark</code>, or an empty string for the default theme</li> <li>homeDashboardId - The numerical <code>:id</code> of a favorited dashboard, default: <code>0</code></li> <li>timezone - One of: <code>utc</code>, <code>browser</code>, or an empty string for the default</li> </ul> <p>Omitting a key will cause the current value to be replaced with the system default value.</p>"},{"location":"dashboard/grafana/http_api/preferences/#get-current-user-prefs","title":"Get Current User Prefs","text":"<p><code>GET /api/user/preferences</code></p> <p>Example Request:</p> <pre><code>GET /api/user/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"theme\":\"\",\"homeDashboardId\":0,\"timezone\":\"\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/preferences/#update-current-user-prefs","title":"Update Current User Prefs","text":"<p><code>PUT /api/user/preferences</code></p> <p>Example Request:</p> <pre><code>PUT /api/user/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"theme\": \"\",\n  \"homeDashboardId\":0,\n  \"timezone\":\"utc\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: text/plain; charset=utf-8\n\n{\"message\":\"Preferences updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/preferences/#get-current-org-prefs","title":"Get Current Org Prefs","text":"<p><code>GET /api/org/preferences</code></p> <p>Example Request:</p> <pre><code>GET /api/org/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"theme\":\"\",\"homeDashboardId\":0,\"timezone\":\"\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/preferences/#update-current-org-prefs","title":"Update Current Org Prefs","text":"<p><code>PUT /api/org/preferences</code></p> <p>Example Request:</p> <pre><code>PUT /api/org/preferences HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"theme\": \"\",\n  \"homeDashboardId\":0,\n  \"timezone\":\"utc\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: text/plain; charset=utf-8\n\n{\"message\":\"Preferences updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/sample_api_groovy/","title":"Sample API Usage using Groovy","text":"<p>The below is a sample Groovy script that starts a load-test in the Dashboard and generate an Analytics report.</p> <p>Can be used in local installation and in SaaS installations. You will need:</p> <ul> <li>Authorization Key - for local installtion, using an Admin user, go to user menu, API Keys and create an 'Editor' key. For SaaS, ask RadView Support.</li> <li>orgId - the Organization ID - default is 1, if using more than one organization see the ID in the Admin - Global Orgs menu. For SaaS, ask RadView Support.</li> <li>docRoot - entry point. For SaaS this is <code>http://saas.radview.com</code>, for local it's <code>http://localhost:3000</code> or where your Dashboard is installed.</li> <li>datasourceEndPoint - location for datasource. For direct, local, API calls, this can be <code>http://localhost:8080/api</code>. For proxied local calls it will be <code>http://localhost:3000/api/datasources/proxy/1/</code> with the appropriate datasource id. For SaaS, ask RadView support.</li> </ul> <pre><code>import groovy.json.JsonSlurper\n\n/*\n * //Example of using it:\n * auth_key = \"eyJrI.....\"\n * orgId = \"186\"\n * docRoot =\"http://saas.radview.com\"\n * datasourceEndpoint = \"https://saas.radview.com/api/datasources/proxy/190\"\n *\n * //Run test by it's name, get the create session id:\n * def sessionId =  runTestByName ( \"My Test\");\n *\n * //Wait for a session to finish running:\n * waitSessionEnd(sessionId);\n *\n * //Run Analytics report for the session:\n * saveAnalyticsReport([sessionId], \"c:\\\\temp\\\\summary.pdf\", \"Performance Summary\");\n *\n * //Run Analytics report to compare to a base line session\n * def baselineSessionId=3;\n * saveAnalyticsReport([sessionId, baselineSessionId], \"c:\\\\temp\\\\comparison.pdf\", null, \"Session Comparison Portfolio\");\n */\n\ndef getTestId(testName) {\n    def encTestName = URLEncoder.encode(testName, \"UTF-8\")\n    def findTestUrl = \"$docRoot/api/loadtest/search?query=$encTestName\"\n    def testData = getData(findTestUrl);\n    def jsonSlurper = new JsonSlurper()\n    def tests = jsonSlurper.parseText(testData)\n    //println tests\n    def loadtest = tests.loadtests.find { it.Name == testName}\n    //println loadtest\n    if (loadtest) {\n        return loadtest.Id\n    } else {\n        throw new RuntimeException(\"test '$testName' not found\")\n    }\n}\n\n\ndef waitSessionEnd(sessionId) {\n    while(true) {\n        def sessionObj = getSession(sessionId);\n        if (sessionObj.returnCode!=\"Running\") {\n            println(\"Session over - $sessionObj.returnCode\");\n            return true;\n        }\n        sleep(30000);\n        println(\"waiting for session to end...\");\n    }\n}\n\ndef saveAnalyticsReport(List sessionList, String outfileName, template=null, portfolio=null, reportFormat=null, reportName=null) {\n    //http://localhost:8080/api/analytics?sessionid=3&amp;portfolio=Summary%20Portfolio&amp;format=PDF&amp;param=TIME_FILTER_FROM_BEGINNING%3D180&amp;name=Report\n\n    def url  = datasourceEndpoint + \"/analytics?\";\n    sessionList.each {sessionId -&gt;\n        url += \"&amp;sessionid=\" + URLEncoder.encode(String.valueOf(sessionId), \"UTF-8\");\n    }\n    if (template != null) url += \"&amp;template=\" + URLEncoder.encode(template, \"UTF-8\");\n    if (portfolio != null) url += \"&amp;portfolio=\" + URLEncoder.encode(portfolio, \"UTF-8\");\n    if (reportFormat != null) url += \"&amp;format=\" + URLEncoder.encode(reportFormat, \"UTF-8\");\n    if (reportName != null) url += \"&amp;name=\" + URLEncoder.encode(reportName, \"UTF-8\");\n\n    def get = new URL(url).openConnection()\n    def getRC\n    get.addRequestProperty(\"Authorization\", \"Bearer $auth_key\")\n    get.addRequestProperty(\"X-Grafana-Org-Id\", orgId)\n    getRC = get.getResponseCode()\n    if (getRC != 200) {\n        throw new Exception(\"HTTP Error $getRC, while getting $url\")\n    }\n    def response =get.getInputStream().getBytes();\n    def outFile = new File(outfileName).withOutputStream { stream -&gt; stream.write(response)};\n    println (\"saved report to $outfileName\");\n}\n\n/**\n * @param testName to start running\n * @return sessionId of created session\n * @throws Error if could not start, or if waiting for sessionId timedout\n */\ndef runTestByName(testName) {\n    def previousSessionId = getLatestSessionId(testName)\n    def testId = getTestId(testName)\n    def timeoutMillis = 5*60*1000 //5 minutes\n    runTestById(testId)\n    def startTime = System.currentTimeMillis()\n    while(true) {\n        def sessionId = getLatestSessionId(testName)\n        if (sessionId != previousSessionId) {\n            println \"test started. session id: $sessionId\";\n            return sessionId\n        }\n        println \"waiting for test session id...\"\n        def runningTime = System.currentTimeMillis() - startTime\n        if (runningTime &gt; timeoutMillis  ) {\n            throw new RuntimeException(\"Timeout waiting for session id, test may have started\")\n        }\n        sleep(5000)\n    }\n}\n\ndef getSession(sessionId) {\n    return getJsonData(\"$datasourceEndpoint/session/$sessionId\")\n}\n\ndef runTestById(testId) {\n    def startResult = getData(\"$docRoot/api/loadtest/$testId/start\")\n    def jsonSlurper = new JsonSlurper()\n    def resultObj = jsonSlurper.parseText(startResult)\n    def resultMessage = resultObj.message\n    //println resultMessage\n    println \"Start test result: $resultMessage\"\n    return resultMessage\n}\n\ndef getLatestSessionId(testName) {\n    def sessionData = getData(datasourceEndpoint + \"/session/findSessions?timeRange=Last%20Day\")\n    def jsonSlurper = new JsonSlurper()\n    def sessions = jsonSlurper.parseText(sessionData)\n    def lastSession = sessions.find { it.testDescription == testName}\n    if (lastSession) {\n        return lastSession.sessionId\n    } else {\n        return -1\n    }\n}\n\ndef getData(url) {\n    def get = new URL(url).openConnection()\n    def getRC\n    get.addRequestProperty(\"Authorization\", \"Bearer $auth_key\")\n    get.addRequestProperty(\"X-Grafana-Org-Id\", orgId)\n    getRC = get.getResponseCode()\n    if (getRC != 200) {\n        throw new Exception(\"HTTP Error $getRC, while getting $url\")\n    }\n    def response =get.getInputStream().getText()\n    return response\n}\n\ndef getJsonData(url) {\n    def jsonSlurper = new JsonSlurper()\n    return jsonSlurper.parseText(getData(url))\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/sample_api_python/","title":"Sample API Usage using Python","text":"<p>The below is a sample Groovy script that starts a load-test in the Dashboard and generate an Analytics report.</p> <p>Can be used in local installation and in SaaS installations. You will need:</p> <ul> <li>Authorization Key - for local installtion, using an Admin user, go to user menu, API Keys and create an 'Editor' key. For SaaS, ask RadView Support.</li> <li>orgId - the Organization ID - default is 1, if using more than one organization see the ID in the Admin - Global Orgs menu. For SaaS, ask RadView Support.</li> <li>docRoot - entry point. For SaaS this is <code>http://saas.radview.com</code>, for local it's <code>http://localhost:3000</code> or where your Dashboard is installed.</li> <li>datasourceEndPoint - location for datasource. For direct, local, API calls, this can be <code>http://localhost:8080/api</code>. For proxied local calls it will be <code>http://localhost:3000/api/datasources/proxy/1/</code> with the appropriate datasource id. For SaaS, ask RadView support.</li> </ul> <pre><code>import requests\nimport time\nimport urllib.parse\nimport json\n\n#Auth-key - create in Dashboard API Keys menu or ask from support for SaaS\nauth_key = \"eyJrIj....\" \norgId = \"1\"\ndocRoot = \"http://localhost:3000/\" \ndatasourceEndpoint = \"http://localhost:3000/api/datasources/proxy/1\"\n\ndef get_test_id(test_name):\n    enc_test_name = urllib.parse.quote(test_name)\n    find_test_url = f\"{docRoot}/api/loadtest/search?query={enc_test_name}\"\n    test_data = get_data(find_test_url)\n    tests = json.loads(test_data)\n    loadtest = next((lt for lt in tests[\"loadtests\"] if lt[\"Name\"] == test_name), None)\n\n    if loadtest:\n        return loadtest[\"Id\"]\n    else:\n        raise RuntimeError(f\"Test '{test_name}' not found\")\n\n\ndef wait_session_end(session_id):\n    while True:\n        session_obj = get_session(session_id)\n        if session_obj[\"returnCode\"] != \"Running\":\n            print(f\"Session over - {session_obj['returnCode']}\")\n            return True\n        print(f\"Waiting for session {session_id} to end...\")\n        time.sleep(30)  # Sleep for 30 seconds\n\n\ndef save_analytics_report(session_list, outfile_name, template=None, portfolio=None, report_format=None,\n                          report_name=None):\n    url = f\"{datasourceEndpoint}/analytics?\"\n\n    for session_id in session_list:\n        url += f\"&amp;sessionid={urllib.parse.quote(str(session_id))}\"\n\n    if template:\n        url += f\"&amp;template={urllib.parse.quote(template)}\"\n    if portfolio:\n        url += f\"&amp;portfolio={urllib.parse.quote(portfolio)}\"\n    if report_format:\n        url += f\"&amp;format={urllib.parse.quote(report_format)}\"\n    if report_name:\n        url += f\"&amp;name={urllib.parse.quote(report_name)}\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {auth_key}\",\n        \"X-Grafana-Org-Id\": orgId\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code != 200:\n        raise Exception(f\"HTTP Error {response.status_code} while getting {url}\")\n\n    with open(outfile_name, 'wb') as outfile:\n        outfile.write(response.content)\n\n    print(f\"Saved report to {outfile_name}\")\n\n\ndef run_test_by_name(test_name):\n    previous_session_id = get_latest_session_id(test_name)\n    test_id = get_test_id(test_name)\n    timeout_millis = 5 * 60 * 1000  # 5 minutes\n    run_test_by_id(test_id)\n\n    start_time = time.time()\n    while True:\n        session_id = get_latest_session_id(test_name)\n        if session_id != previous_session_id:\n            print(f\"Test started. Session id: {session_id}\")\n            return session_id\n\n        print(\"Waiting for test session id...\")\n        running_time = (time.time() - start_time) * 1000  # Convert to milliseconds\n        if running_time &gt; timeout_millis:\n            raise RuntimeError(\"Timeout waiting for session id, test may have started\")\n\n        time.sleep(5)  # Sleep for 5 seconds\n\n\ndef get_session(session_id):\n    session_url = f\"{datasourceEndpoint}/session/{session_id}\"\n    session_data = get_data(session_url)\n    return json.loads(session_data)\n\n\ndef run_test_by_id(test_id):\n    start_url = f\"{docRoot}/api/loadtest/{test_id}/start\"\n    start_result = get_data(start_url)\n    result_obj = json.loads(start_result)\n    print(f\"Start test result: {result_obj['message']}\")\n    return result_obj[\"message\"]\n\n\ndef get_latest_session_id(test_name):\n    session_url = f\"{datasourceEndpoint}/session/findSessions?timeRange=Last%20Day\"\n    session_data = get_data(session_url)\n    sessions = json.loads(session_data)\n    last_session = next((s for s in sessions if s[\"testDescription\"] == test_name), None)\n    if last_session:\n        return last_session[\"sessionId\"]\n    else:\n        return -1\n\n\ndef get_data(url):\n    headers = {\n        \"Authorization\": f\"Bearer {auth_key}\",\n        \"X-Grafana-Org-Id\": orgId\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code != 200:\n        raise Exception(f\"HTTP Error {response.status_code} while getting {url}\")\n\n    return response.text\n\n# Example of usage\nif __name__ == \"__main__\":\n    session_id = run_test_by_name(\"my test name\")\n    wait_session_end(session_id)\n    save_analytics_report([session_id], \"summary.pdf\", \"Performance Summary\")\n</code></pre>"},{"location":"dashboard/grafana/http_api/snapshot/","title":"Snapshot API","text":""},{"location":"dashboard/grafana/http_api/snapshot/#create-new-snapshot","title":"Create new snapshot","text":"<p><code>POST /api/snapshots</code></p> <p>Example Request:</p> <pre><code>POST /api/snapshots HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"dashboard\": {\n    \"editable\":false,\n    \"hideControls\":true,\n    \"nav\":[\n    {\n      \"enable\":false,\n    \"type\":\"timepicker\"\n    }\n    ],\n    \"rows\": [\n      {\n\n      }\n    ],\n    \"style\":\"dark\",\n    \"tags\":[],\n    \"templating\":{\n      \"list\":[\n      ]\n    },\n    \"time\":{\n    },\n    \"timezone\":\"browser\",\n    \"title\":\"Home\",\n    \"version\":5\n    },\n  \"expires\": 3600\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"deleteKey\":\"XXXXXXX\",\n  \"deleteUrl\":\"myurl/dashboard/snapshot/XXXXXXX\",\n  \"key\":\"YYYYYYY\",\n  \"url\":\"myurl/dashboard/snapshot/YYYYYYY\"\n}\n</code></pre> <p>Keys:</p> <ul> <li>deleteKey \u2013 Key generated to delete the snapshot</li> <li>key \u2013 Key generated to share the dashboard</li> </ul>"},{"location":"dashboard/grafana/http_api/snapshot/#get-snapshot-by-id","title":"Get Snapshot by Id","text":"<p><code>GET /api/snapshots/:key</code></p> <p>Example Request:</p> <pre><code>GET /api/snapshots/YYYYYYY HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"meta\":{\n    \"isSnapshot\":true,\n    \"type\":\"snapshot\",\n    \"canSave\":false,\n    \"canEdit\":false,\n    \"canStar\":false,\n    \"slug\":\"\",\n    \"expires\":\"2200-13-32T25:23:23+02:00\",\n    \"created\":\"2200-13-32T28:24:23+02:00\"\n    },\n    \"dashboard\": {\n      \"editable\":false,\n      \"hideControls\":true,\n      \"nav\":[\n      {\n        \"enable\":false,\n      \"type\":\"timepicker\"\n      }\n      ],\n      \"rows\": [\n        {\n\n        }\n      ],\n      \"style\":\"dark\",\n      \"tags\":[],\n      \"templating\":{\n        \"list\":[\n        ]\n      },\n      \"time\":{\n      },\n      \"timezone\":\"browser\",\n      \"title\":\"Home\",\n      \"version\":5\n    }\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/snapshot/#delete-snapshot-by-id","title":"Delete Snapshot by Id","text":"<p><code>GET /api/snapshots-delete/:key</code></p> <p>Example Request:</p> <pre><code>GET /api/snapshots/YYYYYYY HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Snapshot deleted. It might take an hour before it's cleared from a CDN cache.\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/","title":"User HTTP resources / actions","text":""},{"location":"dashboard/grafana/http_api/user/#search-users","title":"Search Users","text":"<p><code>GET /api/users?perpage=10&amp;page=1</code></p> <p>Example Request:</p> <pre><code>GET /api/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Default value for the <code>perpage</code> parameter is <code>1000</code> and for the <code>page</code> parameter is <code>1</code>.</p> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\": 1,\n    \"name\": \"Admin\",\n    \"login\": \"admin\",\n    \"email\": \"admin@mygraf.com\",\n    \"isAdmin\": true\n  },\n  {\n    \"id\": 2,\n    \"name\": \"User\",\n    \"login\": \"user\",\n    \"email\": \"user@mygraf.com\",\n    \"isAdmin\": false\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#search-users-with-paging","title":"Search Users with Paging","text":"<p><code>GET /api/users/search?perpage=10&amp;page=1</code></p> <p>Example Request:</p> <pre><code>GET /api/users/search?perpage=10&amp;page=1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Default value for the <code>perpage</code> parameter is <code>1000</code> and for the <code>page</code> parameter is <code>1</code>. The <code>totalCount</code> field in the response can be used for pagination of the user list E.g. if <code>totalCount</code> is equal to 100 users and the <code>perpage</code> parameter is set to 10 then there are 10 pages of users.</p> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n{\n  \"totalCount\": 2,\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"Admin\",\n      \"login\": \"admin\",\n      \"email\": \"admin@mygraf.com\",\n      \"isAdmin\": true\n    },\n    {\n      \"id\": 2,\n      \"name\": \"User\",\n      \"login\": \"user\",\n      \"email\": \"user@mygraf.com\",\n      \"isAdmin\": false\n    }\n  ],\n  \"page\": 1,\n  \"perPage\": 10\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#get-single-user-by-id","title":"Get single user by Id","text":"<p><code>GET /api/users/:id</code></p> <p>Example Request:</p> <pre><code>GET /api/users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"email\": \"user@mygraf.com\"\n  \"name\": \"admin\",\n  \"login\": \"admin\",\n  \"theme\": \"light\",\n  \"orgId\": 1,\n  \"isGrafanaAdmin\": true\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#get-single-user-by-usernamelogin-or-email","title":"Get single user by Username(login) or Email","text":"<p><code>GET /api/users/lookup?loginOrEmail=user@mygraf.com</code></p> <p>Example Request using the email as option:</p> <pre><code>GET /api/users/lookup?loginOrEmail=user@mygraf.com HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Request using the username as option:</p> <pre><code>GET /api/users/lookup?loginOrEmail=admin HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"email\": \"user@mygraf.com\"\n  \"name\": \"admin\",\n  \"login\": \"admin\",\n  \"theme\": \"light\",\n  \"orgId\": 1,\n  \"isGrafanaAdmin\": true\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#user-update","title":"User Update","text":"<p><code>PUT /api/users/:id</code></p> <p>Example Request:</p> <pre><code>PUT /api/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"email\":\"user@mygraf.com\",\n  \"name\":\"User2\",\n  \"login\":\"user\",\n  \"theme\":\"light\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User updated\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#get-organisations-for-user","title":"Get Organisations for user","text":"<p><code>GET /api/users/:id/orgs</code></p> <p>Example Request:</p> <pre><code>GET /api/users/1/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"orgId\":1,\n    \"name\":\"Main Org.\",\n    \"role\":\"Admin\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#user","title":"User","text":""},{"location":"dashboard/grafana/http_api/user/#actual-user","title":"Actual User","text":"<p><code>GET /api/user</code></p> <p>Example Request:</p> <pre><code>GET /api/user HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"email\":\"admin@mygraf.com\",\n  \"name\":\"Admin\",\n  \"login\":\"admin\",\n  \"theme\":\"light\",\n  \"orgId\":1,\n  \"isGrafanaAdmin\":true\n}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#change-password","title":"Change Password","text":"<p><code>PUT /api/user/password</code></p> <p>Changes the password for the user</p> <p>Example Request:</p> <pre><code>PUT /api/user/password HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"oldPassword\": \"old_password\",\n  \"newPassword\": \"new_password\",\n  \"confirmNew\": \"confirm_new_password\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User password changed\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#switch-user-context","title":"Switch user context","text":"<p><code>POST /api/user/using/:organisationId</code></p> <p>Switch user context to the given organisation.</p> <p>Example Request:</p> <pre><code>POST /api/user/using/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Active organization changed\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#organisations-of-the-actual-user","title":"Organisations of the actual User","text":"<p><code>GET /api/user/orgs</code></p> <p>Return a list of all organisations of the current user.</p> <p>Example Request:</p> <pre><code>GET /api/user/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"orgId\":1,\n    \"name\":\"Main Org.\",\n    \"role\":\"Admin\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#star-a-dashboard","title":"Star a dashboard","text":"<p><code>POST /api/user/stars/dashboard/:dashboardId</code></p> <p>Stars the given Dashboard for the actual user.</p> <p>Example Request:</p> <pre><code>POST /api/user/stars/dashboard/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Dashboard starred!\"}\n</code></pre>"},{"location":"dashboard/grafana/http_api/user/#unstar-a-dashboard","title":"Unstar a dashboard","text":"<p><code>DELETE /api/user/stars/dashboard/:dashboardId</code></p> <p>Deletes the starring of the given Dashboard for the actual user.</p> <p>Example Request:</p> <pre><code>DELETE /api/user/stars/dashboard/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Dashboard unstarred\"}\n</code></pre>"},{"location":"dashboard/grafana/installation/behind_proxy/","title":"Running Grafana behind a reverse proxy","text":"<p>It should be straight forward to get Grafana up and running behind a reverse proxy. But here are some things that you might run into.</p> <p>Links and redirects will not be rendered correctly unless you set the server.domain setting. <pre><code>[server]\ndomain = foo.bar\n</code></pre></p> <p>To use sub path ex <code>http://foo.bar/grafana</code> make sure to include <code>/grafana</code> in the end of root_url. Otherwise Grafana will not behave correctly. See example below.</p>"},{"location":"dashboard/grafana/installation/behind_proxy/#examples","title":"Examples","text":"<p>Here are some example configurations for running Grafana behind a reverse proxy.</p>"},{"location":"dashboard/grafana/installation/behind_proxy/#grafana-configuration-ex-httpfoobarcom","title":"Grafana configuration (ex http://foo.bar.com)","text":"<pre><code>[server]\ndomain = foo.bar\n</code></pre>"},{"location":"dashboard/grafana/installation/behind_proxy/#nginx-configuration","title":"Nginx configuration","text":"<pre><code>server {\n  listen 80;\n  root /usr/share/nginx/www;\n  index index.html index.htm;\n\n  location / {\n   proxy_pass http://localhost:3000/;\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/installation/behind_proxy/#examples-with-sub-path-ex-httpfoobarcomgrafana","title":"Examples with sub path (ex http://foo.bar.com/grafana)","text":""},{"location":"dashboard/grafana/installation/behind_proxy/#grafana-configuration-with-sub-path","title":"Grafana configuration with sub path","text":"<pre><code>[server]\ndomain = foo.bar\nroot_url = %(protocol)s://%(domain)s:/grafana\n</code></pre>"},{"location":"dashboard/grafana/installation/behind_proxy/#nginx-configuration-with-sub-path","title":"Nginx configuration with sub path","text":"<pre><code>server {\n  listen 80;\n  root /usr/share/nginx/www;\n  index index.html index.htm;\n\n  location /grafana/ {\n   proxy_pass http://localhost:3000/;\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/installation/configuration/","title":"Configuration","text":"<p>The back-end has a number of configuration options that can be specified in a <code>.ini</code> configuration file or specified using environment variables.</p>"},{"location":"dashboard/grafana/installation/configuration/#config-file-locations","title":"Config file locations","text":"<ul> <li>Default configuration from <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\dashboard\\grafana\\conf\\defaults.ini</code></li> <li>Custom configuration from <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\dashboard\\grafana\\confcustom.ini</code></li> </ul>"},{"location":"dashboard/grafana/installation/configuration/#instance_name","title":"instance_name","text":"<p>Set the name of the grafana-server instance. Used in logging and internal metrics and in clustering info. Defaults to: <code>${HOSTNAME}</code>, which will be replaced with environment variable <code>HOSTNAME</code>, if that is empty or does not exist Grafana will try to use system calls to get the machine name.</p>"},{"location":"dashboard/grafana/installation/configuration/#paths","title":"[paths]","text":""},{"location":"dashboard/grafana/installation/configuration/#data","title":"data","text":"<p>Path to where Grafana stores the sqlite3 database (if used), file based sessions (if used), and other data.  This path is usually specified via command line in the init.d script or the systemd service file.</p>"},{"location":"dashboard/grafana/installation/configuration/#logs","title":"logs","text":"<p>Path to where Grafana will store logs. This path is usually specified via command line in the init.d script or the systemd service file.  It can be overridden in the configuration file or in the default environment variable file.</p>"},{"location":"dashboard/grafana/installation/configuration/#server","title":"[server]","text":""},{"location":"dashboard/grafana/installation/configuration/#http_addr","title":"http_addr","text":"<p>The IP address to bind to. If empty will bind to all interfaces</p>"},{"location":"dashboard/grafana/installation/configuration/#http_port","title":"http_port","text":"<p>The port to bind to, defaults to <code>3000</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#protocol","title":"protocol","text":"<p><code>http</code> or <code>https</code></p>"},{"location":"dashboard/grafana/installation/configuration/#domain","title":"domain","text":"<p>This setting is only used in as a part of the <code>root_url</code> setting (see below). Important if you use GitHub or Google OAuth.</p>"},{"location":"dashboard/grafana/installation/configuration/#enforce_domain","title":"enforce_domain","text":"<p>Redirect to correct domain if host header does not match domain. Prevents DNS rebinding attacks. Default is false.</p>"},{"location":"dashboard/grafana/installation/configuration/#root_url","title":"root_url","text":"<p>This is the full URL used to access Grafana from a web browser. This is important if you use Google or GitHub OAuth authentication (for the callback URL to be correct).</p> <p>Note This setting is also important if you have a reverse proxy in front of Grafana that exposes it through a subpath. In that case add the subpath to the end of this URL setting.</p>"},{"location":"dashboard/grafana/installation/configuration/#static_root_path","title":"static_root_path","text":"<p>The path to the directory where the front end files (HTML, JS, and CSS files). Default to <code>public</code> which is why the Grafana binary needs to be executed with working directory set to the installation path.</p>"},{"location":"dashboard/grafana/installation/configuration/#cert_file","title":"cert_file","text":"<p>Path to the certificate file (if <code>protocol</code> is set to <code>https</code>).</p>"},{"location":"dashboard/grafana/installation/configuration/#cert_key","title":"cert_key","text":"<p>Path to the certificate key file (if <code>protocol</code> is set to <code>https</code>).</p>"},{"location":"dashboard/grafana/installation/configuration/#router_logging","title":"router_logging","text":"<p>Set to true for Grafana to log all HTTP requests (not just errors). These are logged as Info level events to grafana log.</p>"},{"location":"dashboard/grafana/installation/configuration/#database","title":"[database]","text":"<p>Grafana needs a database to store users and dashboards (and other things). By default it is configured to use <code>sqlite3</code> which is an embedded database (included in the main Grafana binary).</p>"},{"location":"dashboard/grafana/installation/configuration/#url","title":"url","text":"<p>Use either URL or or the other fields below to configure the database Example: <code>mysql://user:secret@host:port/database</code></p>"},{"location":"dashboard/grafana/installation/configuration/#type","title":"type","text":"<p>Either <code>mysql</code>, <code>postgres</code> or <code>sqlite3</code>, it's your choice.</p>"},{"location":"dashboard/grafana/installation/configuration/#path","title":"path","text":"<p>Only applicable for <code>sqlite3</code> database. The file path where the database will be stored.</p>"},{"location":"dashboard/grafana/installation/configuration/#host","title":"host","text":"<p>Only applicable to MySQL or Postgres. Includes IP or hostname and port. For example, for MySQL running on the same host as Grafana: <code>host = 127.0.0.1:3306</code></p>"},{"location":"dashboard/grafana/installation/configuration/#name","title":"name","text":"<p>The name of the Grafana database. Leave it set to <code>grafana</code> or some other name.</p>"},{"location":"dashboard/grafana/installation/configuration/#user","title":"user","text":"<p>The database user (not applicable for <code>sqlite3</code>).</p>"},{"location":"dashboard/grafana/installation/configuration/#password","title":"password","text":"<p>The database user's password (not applicable for <code>sqlite3</code>). If the password contains <code>#</code> or <code>;</code> you have to wrap it with trippel quotes. Ex <code>\"\"\"#password;\"\"\"</code></p>"},{"location":"dashboard/grafana/installation/configuration/#ssl_mode","title":"ssl_mode","text":"<p>For Postgres, use either <code>disable</code>, <code>require</code> or <code>verify-full</code>. For MySQL, use either <code>true</code>, <code>false</code>, or <code>skip-verify</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#ca_cert_path","title":"ca_cert_path","text":"<p>(MySQL only) The path to the CA certificate to use. On many linux systems, certs can be found in <code>/etc/ssl/certs</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#client_key_path","title":"client_key_path","text":"<p>(MySQL only) The path to the client key. Only if server requires client authentication.</p>"},{"location":"dashboard/grafana/installation/configuration/#client_cert_path","title":"client_cert_path","text":"<p>(MySQL only) The path to the client cert. Only if server requires client authentication.</p>"},{"location":"dashboard/grafana/installation/configuration/#server_cert_name","title":"server_cert_name","text":"<p>(MySQL only) The common name field of the certificate used by the <code>mysql</code> server. Not necessary if <code>ssl_mode</code> is set to <code>skip-verify</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#security","title":"[security]","text":""},{"location":"dashboard/grafana/installation/configuration/#admin_user","title":"admin_user","text":"<p>The name of the default Grafana admin user (who has full permissions). Defaults to <code>admin</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#admin_password","title":"admin_password","text":"<p>The password of the default Grafana admin. Set once on first-run.  Defaults to <code>admin</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#login_remember_days","title":"login_remember_days","text":"<p>The number of days the keep me logged in / remember me cookie lasts.</p>"},{"location":"dashboard/grafana/installation/configuration/#secret_key","title":"secret_key","text":"<p>Used for signing keep me logged in / remember me cookies.</p>"},{"location":"dashboard/grafana/installation/configuration/#disable_gravatar","title":"disable_gravatar","text":"<p>Set to <code>true</code> to disable the use of Gravatar for user profile images. Default is <code>false</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#users","title":"[users]","text":""},{"location":"dashboard/grafana/installation/configuration/#allow_sign_up","title":"allow_sign_up","text":"<p>Set to <code>false</code> to prohibit users from being able to sign up / create user accounts. Defaults to <code>true</code>.  The admin user can still create users from the Grafana Admin Pages</p>"},{"location":"dashboard/grafana/installation/configuration/#allow_org_create","title":"allow_org_create","text":"<p>Set to <code>false</code> to prohibit users from creating new organizations. Defaults to <code>true</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#auto_assign_org","title":"auto_assign_org","text":"<p>Set to <code>true</code> to automatically add new users to the main organization (id 1). When set to <code>false</code>, new users will automatically cause a new organization to be created for that new user.</p>"},{"location":"dashboard/grafana/installation/configuration/#auto_assign_org_role","title":"auto_assign_org_role","text":"<p>The role new users will be assigned for the main organization (if the above setting is set to true).  Defaults to <code>Viewer</code>, other valid options are <code>Admin</code> and <code>Editor</code> and <code>Read Only Editor</code>. e.g. :</p> <p><code>auto_assign_org_role = Read Only Editor</code></p>"},{"location":"dashboard/grafana/installation/configuration/#auth","title":"[auth]","text":""},{"location":"dashboard/grafana/installation/configuration/#disable_login_form","title":"disable_login_form","text":"<p>Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false.</p>"},{"location":"dashboard/grafana/installation/configuration/#authanonymous","title":"[auth.anonymous]","text":""},{"location":"dashboard/grafana/installation/configuration/#enabled","title":"enabled","text":"<p>Set to <code>true</code> to enable anonymous access. Defaults to <code>false</code></p>"},{"location":"dashboard/grafana/installation/configuration/#org_name","title":"org_name","text":"<p>Set the organization name that should be used for anonymous users. If you change your organization name in the Grafana UI this setting needs to be updated to match the new name.</p>"},{"location":"dashboard/grafana/installation/configuration/#org_role","title":"org_role","text":"<p>Specify role for anonymous users. Defaults to <code>Viewer</code>, other valid options are <code>Editor</code> and <code>Admin</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#authgithub","title":"[auth.github]","text":"<p>You need to create a GitHub application (you find this under the GitHub profile page). When you create the application you will need to specify a callback URL. Specify this as callback:</p> <pre><code>http://&lt;my_grafana_server_name_or_ip&gt;:&lt;grafana_server_port&gt;/login/github\n</code></pre> <p>This callback URL must match the full HTTP address that you use in your browser to access Grafana, but with the prefix path of <code>/login/github</code>. When the GitHub application is created you will get a Client ID and a Client Secret. Specify these in the Grafana configuration file. For example:</p> <pre><code>[auth.github]\nenabled = true\nallow_sign_up = true\nclient_id = YOUR_GITHUB_APP_CLIENT_ID\nclient_secret = YOUR_GITHUB_APP_CLIENT_SECRET\nscopes = user:email\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\napi_url = https://api.github.com/user\nallow_sign_up = false\nteam_ids =\nallowed_organizations =\n</code></pre> <p>Restart the Grafana back-end. You should now see a GitHub login button on the login page. You can now login or sign up with your GitHub accounts.</p> <p>You may allow users to sign-up via GitHub authentication by setting the <code>allow_sign_up</code> option to <code>true</code>. When this option is set to <code>true</code>, any user successfully authenticating via GitHub authentication will be automatically signed up.</p>"},{"location":"dashboard/grafana/installation/configuration/#team_ids","title":"team_ids","text":"<p>Require an active team membership for at least one of the given teams on GitHub. If the authenticated user isn't a member of at least one of the teams they will not be able to register or authenticate with your Grafana instance. For example:</p> <pre><code>[auth.github]\nenabled = true\nclient_id = YOUR_GITHUB_APP_CLIENT_ID\nclient_secret = YOUR_GITHUB_APP_CLIENT_SECRET\nscopes = user:email,read:org\nteam_ids = 150,300\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\nallow_sign_up = true\n</code></pre>"},{"location":"dashboard/grafana/installation/configuration/#allowed_organizations","title":"allowed_organizations","text":"<p>Require an active organization membership for at least one of the given organizations on GitHub. If the authenticated user isn't a member of at least one of the organizations they will not be able to register or authenticate with your Grafana instance. For example</p> <pre><code>[auth.github]\nenabled = true\nclient_id = YOUR_GITHUB_APP_CLIENT_ID\nclient_secret = YOUR_GITHUB_APP_CLIENT_SECRET\nscopes = user:email,read:org\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\nallow_sign_up = true\n# space-delimited organization names\nallowed_organizations = github google\n</code></pre>"},{"location":"dashboard/grafana/installation/configuration/#authgoogle","title":"[auth.google]","text":"<p>You need to create a Google project. You can do this in the Google Developer Console.  When you create the project you will need to specify a callback URL. Specify this as callback:</p> <pre><code>http://&lt;my_grafana_server_name_or_ip&gt;:&lt;grafana_server_port&gt;/login/google\n</code></pre> <p>This callback URL must match the full HTTP address that you use in your browser to access Grafana, but with the prefix path of <code>/login/google</code>. When the Google project is created you will get a Client ID and a Client Secret. Specify these in the Grafana configuration file. For example:</p> <pre><code>[auth.google]\nenabled = true\nclient_id = YOUR_GOOGLE_APP_CLIENT_ID\nclient_secret = YOUR_GOOGLE_APP_CLIENT_SECRET\nscopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\nauth_url = https://accounts.google.com/o/oauth2/auth\ntoken_url = https://accounts.google.com/o/oauth2/token\nallowed_domains = mycompany.com mycompany.org\nallow_sign_up = true\n</code></pre> <p>Restart the Grafana back-end. You should now see a Google login button on the login page. You can now login or sign up with your Google accounts. The <code>allowed_domains</code> option is optional, and domains were separated by space.</p> <p>You may allow users to sign-up via Google authentication by setting the <code>allow_sign_up</code> option to <code>true</code>. When this option is set to <code>true</code>, any user successfully authenticating via Google authentication will be automatically signed up.</p>"},{"location":"dashboard/grafana/installation/configuration/#authgeneric_oauth","title":"[auth.generic_oauth]","text":"<p>This option could be used if have your own oauth service.</p> <p>This callback URL must match the full HTTP address that you use in your browser to access Grafana, but with the prefix path of <code>/login/generic_oauth</code>.</p> <pre><code>[auth.generic_oauth]\nenabled = true\nclient_id = YOUR_APP_CLIENT_ID\nclient_secret = YOUR_APP_CLIENT_SECRET\nscopes =\nauth_url =\ntoken_url =\napi_url =\nallowed_domains = mycompany.com mycompany.org\nallow_sign_up = true\n</code></pre> <p>Set api_url to the resource that returns basic user info.</p>"},{"location":"dashboard/grafana/installation/configuration/#authbasic","title":"[auth.basic]","text":""},{"location":"dashboard/grafana/installation/configuration/#enabled_1","title":"enabled","text":"<p>When enabled is <code>true</code> (default) the http api will accept basic authentication.</p>"},{"location":"dashboard/grafana/installation/configuration/#authldap","title":"[auth.ldap]","text":""},{"location":"dashboard/grafana/installation/configuration/#enabled_2","title":"enabled","text":"<p>Set to <code>true</code> to enable LDAP integration (default: <code>false</code>)</p>"},{"location":"dashboard/grafana/installation/configuration/#config_file","title":"config_file","text":"<p>Path to the LDAP specific configuration file (default: <code>/etc/grafana/ldap.toml</code>)</p> <p>For details on LDAP Configuration, go to the LDAP Integration page.</p>"},{"location":"dashboard/grafana/installation/configuration/#authproxy","title":"[auth.proxy]","text":"<p>This feature allows you to handle authentication in a http reverse proxy.</p>"},{"location":"dashboard/grafana/installation/configuration/#enabled_3","title":"enabled","text":"<p>Defaults to <code>false</code></p>"},{"location":"dashboard/grafana/installation/configuration/#header_name","title":"header_name","text":"<p>Defaults to X-WEBAUTH-USER</p>"},{"location":"dashboard/grafana/installation/configuration/#header_property","title":"header_property","text":"<p>Defaults to username but can also be set to email</p>"},{"location":"dashboard/grafana/installation/configuration/#auto_sign_up","title":"auto_sign_up","text":"<p>Set to <code>true</code> to enable auto sign up of users who do not exist in Grafana DB. Defaults to <code>true</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#session","title":"[session]","text":""},{"location":"dashboard/grafana/installation/configuration/#provider","title":"provider","text":"<p>Valid values are <code>memory</code>, <code>file</code>, <code>mysql</code>, <code>postgres</code>, <code>memcache</code> or <code>redis</code>. Default is <code>file</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#provider_config","title":"provider_config","text":"<p>This option should be configured differently depending on what type of session provider you have configured.</p> <ul> <li>file: session file path, e.g. <code>data/sessions</code></li> <li>mysql: go-sql-driver/mysql dsn config string, e.g. <code>user:password@tcp(127.0.0.1:3306)/database_name</code></li> <li>postgres: ex:  user=a password=b host=localhost port=5432 dbname=c sslmode=require</li> <li>memcache: ex:  127.0.0.1:11211</li> <li>redis: ex: <code>addr=127.0.0.1:6379,pool_size=100,prefix=grafana</code></li> </ul> <p>If you use MySQL or Postgres as the session store you need to create the session table manually.</p> <p>Mysql Example:</p> <pre><code>CREATE TABLE `session` (\n    `key`       CHAR(16) NOT NULL,\n    `data`      BLOB,\n    `expiry`    INT(11) UNSIGNED NOT NULL,\n    PRIMARY KEY (`key`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n</code></pre> <p>Postgres Example:</p> <pre><code>CREATE TABLE session (\n    key       CHAR(16) NOT NULL,\n    data      BYTEA,\n    expiry    INTEGER NOT NULL,\n    PRIMARY KEY (key)\n);\n</code></pre> <p>Postgres valid <code>sslmode</code> are <code>disable</code>, <code>require</code> (default), <code>verify-ca</code>, and <code>verify-full</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#cookie_name","title":"cookie_name","text":"<p>The name of the Grafana session cookie.</p>"},{"location":"dashboard/grafana/installation/configuration/#cookie_secure","title":"cookie_secure","text":"<p>Set to true if you host Grafana behind HTTPS only. Defaults to <code>false</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#session_life_time","title":"session_life_time","text":"<p>How long sessions lasts in seconds. Defaults to <code>86400</code> (24 hours).</p>"},{"location":"dashboard/grafana/installation/configuration/#analytics","title":"[analytics]","text":""},{"location":"dashboard/grafana/installation/configuration/#reporting_enabled","title":"reporting_enabled","text":"<p>When enabled Grafana will send anonymous usage statistics to <code>stats.grafana.org</code>. No IP addresses are being tracked, only simple counters to track running instances, versions, dashboard &amp; error counts. It is very helpful to us, so please leave this enabled. Counters are sent every 24 hours. Default value is <code>true</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#google_analytics_ua_id","title":"google_analytics_ua_id","text":"<p>If you want to track Grafana usage via Google analytics specify your Universal Analytics ID here. By default this feature is disabled.</p>"},{"location":"dashboard/grafana/installation/configuration/#dashboardsjson","title":"[dashboards.json]","text":"<p>If you have a system that automatically builds dashboards as json files you can enable this feature to have the Grafana backend index those json dashboards which will make them appear in regular dashboard search.</p>"},{"location":"dashboard/grafana/installation/configuration/#enabled_4","title":"enabled","text":"<p><code>true</code> or <code>false</code>. Is disabled by default.</p>"},{"location":"dashboard/grafana/installation/configuration/#path_1","title":"path","text":"<p>The full path to a directory containing your json dashboards.</p>"},{"location":"dashboard/grafana/installation/configuration/#smtp","title":"[smtp]","text":"<p>Email server settings.</p>"},{"location":"dashboard/grafana/installation/configuration/#enabled_5","title":"enabled","text":"<p>defaults to false</p>"},{"location":"dashboard/grafana/installation/configuration/#host_1","title":"host","text":"<p>defaults to localhost:25</p>"},{"location":"dashboard/grafana/installation/configuration/#user_1","title":"user","text":"<p>In case of SMTP auth, defaults to <code>empty</code></p>"},{"location":"dashboard/grafana/installation/configuration/#password_1","title":"password","text":"<p>In case of SMTP auth, defaults to <code>empty</code></p>"},{"location":"dashboard/grafana/installation/configuration/#cert_file_1","title":"cert_file","text":"<p>File path to a cert file, defaults to <code>empty</code></p>"},{"location":"dashboard/grafana/installation/configuration/#key_file","title":"key_file","text":"<p>File path to a key file, defaults to <code>empty</code></p>"},{"location":"dashboard/grafana/installation/configuration/#skip_verify","title":"skip_verify","text":"<p>Verify SSL for smtp server? defaults to <code>false</code></p>"},{"location":"dashboard/grafana/installation/configuration/#from_address","title":"from_address","text":"<p>Address used when sending out emails, defaults to <code>admin@grafana.localhost</code></p>"},{"location":"dashboard/grafana/installation/configuration/#from_name","title":"from_name","text":"<p>Name to be used when sending out emails, defaults to <code>Grafana</code></p>"},{"location":"dashboard/grafana/installation/configuration/#log","title":"[log]","text":""},{"location":"dashboard/grafana/installation/configuration/#mode","title":"mode","text":"<p>Either \"console\", \"file\", \"syslog\". Default is console and  file Use space to separate multiple modes, e.g. \"console file\"</p>"},{"location":"dashboard/grafana/installation/configuration/#level","title":"level","text":"<p>Either \"debug\", \"info\", \"warn\", \"error\", \"critical\", default is \"info\"</p>"},{"location":"dashboard/grafana/installation/configuration/#filters","title":"filters","text":"<p>optional settings to set different levels for specific loggers. Ex <code>filters = sqlstore:debug</code></p>"},{"location":"dashboard/grafana/installation/configuration/#metrics","title":"[metrics]","text":""},{"location":"dashboard/grafana/installation/configuration/#enabled_6","title":"enabled","text":"<p>Enable metrics reporting. defaults true. Available via HTTP API <code>/api/metrics</code>.</p>"},{"location":"dashboard/grafana/installation/configuration/#interval_seconds","title":"interval_seconds","text":"<p>Flush/Write interval when sending metrics to external TSDB. Defaults to 10s.</p>"},{"location":"dashboard/grafana/installation/configuration/#metricsgraphite","title":"[metrics.graphite]","text":"<p>Include this section if you want to send internal Grafana metrics to Graphite.</p>"},{"location":"dashboard/grafana/installation/configuration/#address","title":"address","text":"<p>Format <code>&lt;Hostname or ip&gt;</code>:port</p>"},{"location":"dashboard/grafana/installation/configuration/#prefix","title":"prefix","text":"<p>Graphite metric prefix. Defaults to <code>prod.grafana.%(instance_name)s.</code></p>"},{"location":"dashboard/grafana/installation/configuration/#snapshots","title":"[snapshots]","text":""},{"location":"dashboard/grafana/installation/configuration/#external_enabled","title":"external_enabled","text":"<p>Set to false to disable external snapshot publish endpoint (default true)</p>"},{"location":"dashboard/grafana/installation/configuration/#external_snapshot_url","title":"external_snapshot_url","text":"<p>Set root url to a Grafana instance where you want to publish external snapshots (defaults to https://snapshots-origin.raintank.io)</p>"},{"location":"dashboard/grafana/installation/configuration/#external_snapshot_name","title":"external_snapshot_name","text":"<p>Set name for external snapshot button. Defaults to <code>Publish to snapshot.raintank.io</code></p>"},{"location":"dashboard/grafana/installation/configuration/#remove-expired-snapshot","title":"remove expired snapshot","text":"<p>Enabled to automatically remove expired snapshots</p>"},{"location":"dashboard/grafana/installation/configuration/#remove-snapshots-after-90-days","title":"remove snapshots after 90 days","text":"<p>Time to live for snapshots.</p>"},{"location":"dashboard/grafana/installation/configuration/#external_image_storage","title":"[external_image_storage]","text":"<p>These options control how images should be made public so they can be shared on services like slack.</p>"},{"location":"dashboard/grafana/installation/configuration/#provider_1","title":"provider","text":"<p>You can choose between (s3, webdav). If left empty Grafana will ignore the upload action.</p>"},{"location":"dashboard/grafana/installation/configuration/#external_image_storages3","title":"[external_image_storage.s3]","text":""},{"location":"dashboard/grafana/installation/configuration/#bucket_url","title":"bucket_url","text":"<p>Bucket URL for S3. AWS region can be specified within URL or defaults to 'us-east-1', e.g. - http://grafana.s3.amazonaws.com/ - https://grafana.s3-ap-southeast-2.amazonaws.com/ - https://grafana.s3-cn-north-1.amazonaws.com.cn</p>"},{"location":"dashboard/grafana/installation/configuration/#access_key","title":"access_key","text":"<p>Access key. e.g. AAAAAAAAAAAAAAAAAAAA</p> <p>Access key requires permissions to the S3 bucket for the 's3:PutObject' and 's3:PutObjectAcl' actions.</p>"},{"location":"dashboard/grafana/installation/configuration/#secret_key_1","title":"secret_key","text":"<p>Secret key. e.g. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</p>"},{"location":"dashboard/grafana/installation/configuration/#external_image_storagewebdav","title":"[external_image_storage.webdav]","text":""},{"location":"dashboard/grafana/installation/configuration/#url_1","title":"url","text":"<p>Url to where Grafana will send PUT request with images</p>"},{"location":"dashboard/grafana/installation/configuration/#username","title":"username","text":"<p>basic auth username</p>"},{"location":"dashboard/grafana/installation/configuration/#password_2","title":"password","text":"<p>basic auth password</p>"},{"location":"dashboard/grafana/installation/configuration/#alerting","title":"[alerting]","text":""},{"location":"dashboard/grafana/installation/configuration/#enabled_7","title":"enabled","text":"<p>Defaults to true. Set to false to disable alerting engine and hide Alerting from UI.</p>"},{"location":"dashboard/grafana/installation/configuration/#execute_alerts","title":"execute_alerts","text":""},{"location":"dashboard/grafana/installation/configuration/#execute_alerts-true","title":"execute_alerts = true","text":"<p>Makes it possible to turn off alert rule execution.</p>"},{"location":"dashboard/grafana/installation/ldap/","title":"LDAP Authentication","text":"<p>Grafana (2.1 and newer) ships with a strong LDAP integration feature. The LDAP integration in Grafana allows your Grafana users to login with their LDAP credentials. You can also specify mappings between LDAP group memberships and Grafana Organization user roles.</p>"},{"location":"dashboard/grafana/installation/ldap/#configuration","title":"Configuration","text":"<p>You turn on LDAP in the main config file as well as specify the path to the LDAP specific configuration file (default: <code>/etc/grafana/ldap.toml</code>).</p>"},{"location":"dashboard/grafana/installation/ldap/#example-config","title":"Example config","text":"<pre><code># Set to true to log user information returned from LDAP\nverbose_logging = false\n\n[[servers]]\n# Ldap server host (specify multiple hosts space separated)\nhost = \"127.0.0.1\"\n# Default port is 389 or 636 if use_ssl = true\nport = 389\n# Set to true if ldap server supports TLS\nuse_ssl = false\n# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)\nstart_tls = false\n# set to true if you want to skip ssl cert validation\nssl_skip_verify = false\n# set to the path to your root CA certificate or leave unset to use system defaults\n# root_ca_cert = /path/to/certificate.crt\n\n# Search user bind dn\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\n# Search user bind password\n# If the password contains # or ; you have to wrap it with trippel quotes. Ex \"\"\"#password;\"\"\"\nbind_password = 'grafana'\n\n# User search filter, for example \"(cn=%s)\" or \"(sAMAccountName=%s)\" or \"(uid=%s)\"\nsearch_filter = \"(cn=%s)\"\n\n# An array of base dns to search through\nsearch_base_dns = [\"dc=grafana,dc=org\"]\n\n# In POSIX LDAP schemas, without memberOf attribute a secondary query must be made for groups.\n# This is done by enabling group_search_filter below. You must also set member_of= \"cn\"\n# in [servers.attributes] below.\n\n## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)\n# group_search_filter = \"(&amp;(objectClass=posixGroup)(memberUid=%s))\"\n## An array of the base DNs to search through for groups. Typically uses ou=groups\n# group_search_base_dns = [\"ou=groups,dc=grafana,dc=org\"]\n\n# Specify names of the ldap attributes your ldap uses\n[servers.attributes]\nname = \"givenName\"\nsurname = \"sn\"\nusername = \"cn\"\nmember_of = \"memberOf\"\nemail =  \"email\"\n\n# Map ldap groups to grafana org roles\n[[servers.group_mappings]]\ngroup_dn = \"cn=admins,dc=grafana,dc=org\"\norg_role = \"Admin\"\n# The Grafana organization database id, optional, if left out the default org (id 1) will be used\n# org_id = 1\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=users,dc=grafana,dc=org\"\norg_role = \"Editor\"\n\n[[servers.group_mappings]]\n# If you want to match all (or no ldap groups) then you can use wildcard\ngroup_dn = \"*\"\norg_role = \"Viewer\"\n</code></pre>"},{"location":"dashboard/grafana/installation/ldap/#bind-bind-password","title":"Bind &amp; Bind Password","text":"<p>By default the configuration expects you to specify a bind DN and bind password. This should be a read only user that can perform LDAP searches. When the user DN is found a second bind is performed with the user provided username &amp; password (in the normal Grafana login form).</p> <pre><code>bind_dn = \"cn=admin,dc=grafana,dc=org\"\nbind_password = \"grafana\"\n</code></pre>"},{"location":"dashboard/grafana/installation/ldap/#single-bind-example","title":"Single Bind Example","text":"<p>If you can provide a single bind expression that matches all possible users, you can skip the second bind and bind against the user DN directly. This allows you to not specify a bind_password in the configuration file.</p> <pre><code>bind_dn = \"cn=%s,o=users,dc=grafana,dc=org\"\n</code></pre> <p>In this case you skip providing a <code>bind_password</code> and instead provide a <code>bind_dn</code> value with a <code>%s</code> somewhere. This will be replaced with the username entered in on the Grafana login page. The search filter and search bases settings are still needed to perform the LDAP search to retrieve the other LDAP information (like LDAP groups and email).</p>"},{"location":"dashboard/grafana/installation/ldap/#posix-schema-no-memberof-attribute","title":"POSIX schema (no memberOf attribute)","text":"<p>If your ldap server does not support the memberOf attribute add these options:</p> <pre><code>## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)\ngroup_search_filter = \"(&amp;(objectClass=posixGroup)(memberUid=%s))\"\n## An array of the base DNs to search through for groups. Typically uses ou=groups\ngroup_search_base_dns = [\"ou=groups,dc=grafana,dc=org\"]\n</code></pre> <p>Also change set <code>member_of = \"cn\"</code> in the <code>[servers.attributes]</code> section.</p>"},{"location":"dashboard/grafana/installation/ldap/#ldap-to-grafana-org-role-sync","title":"LDAP to Grafana Org Role Sync","text":""},{"location":"dashboard/grafana/installation/ldap/#mappings","title":"Mappings","text":"<p>In <code>[[servers.group_mappings]]</code> you can map an LDAP group to a Grafana organization and role.  These will be synced every time the user logs in, with LDAP being the authoritative source.  So, if you change a user's role in the Grafana Org. Users page, this change will be reset the next time the user logs in. If you change the LDAP groups of a user, the change will take effect the next time the user logs in.</p>"},{"location":"dashboard/grafana/installation/ldap/#priority","title":"Priority","text":"<p>The first group mapping that an LDAP user is matched to will be used for the sync. If you have LDAP users that fit multiple mappings, the topmost mapping in the TOML config will be used.</p>"},{"location":"dashboard/grafana/plugins/","title":"Plugins","text":"<p>From Grafana 3.0 not only datasource plugins are supported but also panel plugins and apps. Having panels as plugins make it easy to create and add any kind of panel, to show your data or improve your favorite dashboards. Apps is something new in Grafana that enables bundling of datasources, panels, dashboards and Grafana pages into a cohesive experience.</p> <p>Grafana already have a strong community of contributors and plugin developers. By making it easier to develop and install plugins we hope that the community can grow even stronger and develop new plugins that we would never think about.</p> <p>You can discover available plugins on Grafana.net</p>"},{"location":"dashboard/grafana/plugins/installation/","title":"Grafana Plugins","text":"<p>From Grafana 3.0+ not only are datasource plugins supported but also panel plugins and apps. Having panels as plugins make it easy to create and add any kind of panel, to show your data or improve your favorite dashboards. Apps is something new in Grafana that enables bundling of datasources, panels, dashboards and Grafana pages into a cohesive experience.</p> <p>Grafana already have a strong community of contributors and plugin developers. By making it easier to develop and install plugins we hope that the community can grow even stronger and develop new plugins that we would never think about.</p> <p>To discover plugins checkout the official Plugin Repository.</p>"},{"location":"dashboard/grafana/plugins/installation/#installing-plugins","title":"Installing plugins","text":"<p>The easiest way to install plugins is by using the CLI tool grafana-cli which is bundled with grafana. Before any modification take place after modifying plugins, grafana-server needs to be restarted.</p>"},{"location":"dashboard/grafana/plugins/installation/#grafana-plugin-directory","title":"Grafana plugin directory","text":"<p>On Linux systems the grafana-cli will assume that the grafana plugin directory is <code>/var/lib/grafana/plugins</code>. It's possible to override the directory which grafana-cli will operate on by specifying the --pluginsDir flag. On Windows systems this parameter have to be specified for every call.</p>"},{"location":"dashboard/grafana/plugins/installation/#grafana-cli-commands","title":"Grafana-cli commands","text":"<p>List available plugins <pre><code>grafana-cli plugins list-remote\n</code></pre></p> <p>Install the latest version of a plugin <pre><code>grafana-cli plugins install &lt;plugin-id&gt;\n</code></pre></p> <p>Install a specific version of a plugin <pre><code>grafana-cli plugins install &lt;plugin-id&gt; &lt;version&gt;\n</code></pre></p> <p>List installed plugins <pre><code>grafana-cli plugins ls\n</code></pre></p> <p>Update all installed plugins <pre><code>grafana-cli plugins update-all\n</code></pre></p> <p>Update one plugin <pre><code>grafana-cli plugins update &lt;plugin-id&gt;\n</code></pre></p> <p>Remove one plugin <pre><code>grafana-cli plugins remove &lt;plugin-id&gt;\n</code></pre></p>"},{"location":"dashboard/grafana/plugins/developing/","title":"Index","text":"<p>+++ title = \"Developing Plugins\" type = \"docs\" [menu.docs] parent = \"plugins\" identifier = \"developing\" weight = 3 +++</p>"},{"location":"dashboard/grafana/plugins/developing/apps/","title":"Apps","text":"<p>+++ title = \"Developing App Plugins\" keywords = [\"grafana\", \"plugins\", \"documentation\"] type = \"docs\" [menu.docs] name = \"Developing App Plugins\" parent = \"developing\" weight = 6 +++</p>"},{"location":"dashboard/grafana/plugins/developing/apps/#grafana-apps","title":"Grafana Apps","text":"<p>App plugins are a new kind of grafana plugin that can bundle datasource and panel plugins within one package. It also enable the plugin author to create custom pages within grafana. The custom pages enable the plugin author to include things like documentation, sign up forms or controlling other services using HTTP requests.</p> <p>Datasource and panel plugins will show up like normal plugins. The app pages will be available in the main menu.</p> <p>{{&lt; imgbox img=\"/img/docs/v3/app-in-main-menu.png\" caption=\"App in Main Menu\" &gt;}}</p>"},{"location":"dashboard/grafana/plugins/developing/apps/#enabling-app-plugins","title":"Enabling app plugins","text":"<p>After installing an app, it has to be enabled before it shows up as a datasource or panel. You can do that on the app page in the config tab.</p>"},{"location":"dashboard/grafana/plugins/developing/apps/#developing-an-app-plugin","title":"Developing an App Plugin","text":"<p>An App is a bundle of panels, dashboards and/or data source(s). There is nothing different about developing panels and data sources for an app.</p> <p>Apps have to be enabled in Grafana and should import any included dashboards when the user enables it. A ConfigCtrl class should be created and the dashboards imported in the postUpdate hook. See example below:</p> <pre><code>export class ConfigCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, $q) {\n    this.$q = $q;\n    this.enabled = false;\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    return this.appEditCtrl.importDashboards().then(() =&gt; {\n      this.enabled = true;\n      return {\n        url: \"plugins/raintank-kubernetes-app/page/clusters\",\n        message: \"Kubernetes App enabled!\"\n      };\n    });\n  }\n}\nConfigCtrl.templateUrl = 'components/config/config.html';\n</code></pre> <p>If possible a link to a dashboard or custom page should be shown after enabling the app to guide the user to the appropriate place.</p> <p>{{&lt; imgbox img=\"/img/docs/app_plugin_after_enable.png\" caption=\"After enabling\" &gt;}}</p>"},{"location":"dashboard/grafana/plugins/developing/apps/#develop-your-own-app","title":"Develop your own App","text":"<p>Our goal is not to have a very extensive documentation but rather have actual code that people can look at. An example implementation of an app can be found in this example app repo</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/","title":"Code styleguide","text":"<p>+++ title = \"Plugin Code Styleguide\" type = \"docs\" [menu.docs] name = \"Plugin Code Styleguide\" parent = \"developing\" weight = 2 +++</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#grafana-plugin-code-styleguide","title":"Grafana Plugin Code Styleguide","text":"<p>This guide has two parts. The first part describes the metadata and the second part is a styleguide for HTML/CSS and JavaScript in Grafana plugins and applies if you are using ES6 in your plugin. If using TypeScript then the Angular TypeScript styleguide is recommended.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#metadata","title":"Metadata","text":"<p>The plugin metadata consists of a plugin.json file and the README.md file. These two files are used by Grafana and Grafana.net.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#pluginjson-mandatory","title":"Plugin.json (mandatory)","text":"<p>The plugin.json file is the same concept as the package.json file for an npm package. When Grafana starts it will scan the plugin folders and mount every folder that contains a plugin.json file unless the folder contains a subfolder named <code>dist</code>. In that case grafana will mount the <code>dist</code> folder instead.</p> <p>The most important fields are the first three, especially the id. The convention for the plugin id is [github username/org]-[plugin name]-[datasource|app|panel] and it has to be unique.</p> <p>Examples:</p> <pre><code>raintank-worldping-app\ngrafana-simple-json-datasource\ngrafana-piechart-panel\nmtanda-histogram-panel\n</code></pre> <p>The full file format for plugin.json is described here.</p> <p>Minimal plugin.json:</p> <pre><code>{\n  \"type\": \"panel\",\n  \"name\": \"Clock\",\n  \"id\": \"yourorg-clock-panel\",\n\n  \"info\": {\n    \"description\": \"Clock panel for grafana\",\n    \"author\": {\n      \"name\": \"Raintank Inc.\",\n      \"url\": \"http://raintank.io\"\n    },\n    \"keywords\": [\"clock\", \"panel\"],\n    \"version\": \"1.0.0\",\n    \"updated\": \"2015-03-24\"\n  },\n\n  \"dependencies\": {\n    \"grafanaVersion\": \"3.x.x\",\n    \"plugins\": [ ]\n  }\n}\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#readmemd","title":"README.md","text":"<p>The README.md file is rendered both on Grafana.net and in the plugins section in Grafana. The only difference from how GitHub renders markdown is that html is not allowed.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#file-and-directory-structure-conventions","title":"File and Directory Structure Conventions","text":"<p>Here is a typical directory structure for a plugin.</p> <pre><code>johnnyb-awesome-datasource\n|-- dist\n|-- spec\n|   |-- datasource_spec.js\n|   |-- query_ctrl_spec.js\n|   |-- test-main.js\n|-- src\n|   |-- img\n|   |   |-- logo.svg\n|   |-- partials\n|   |   |-- annotations.editor.html\n|   |   |-- config.html\n|   |   |-- query.editor.html\n|   |-- datasource.js\n|   |-- module.js\n|   |-- plugin.json\n|   |-- query_ctrl.js\n|-- Gruntfile.js\n|-- LICENSE\n|-- package.json\n|-- README.md\n</code></pre> <p>Most JavaScript projects have a build step and most Grafana plugins are built using Babel and ES6. The generated JavaScript should be placed in the <code>dist</code> directory and the source code in the <code>src</code> directory. We recommend that the plugin.json file be placed in the src directory and then copied over to the dist directory when building. The <code>README.md</code> can be placed in the root or in the dist directory.</p> <p>Directories:</p> <ul> <li><code>src/</code> contains plugin source files.</li> <li><code>src/partials</code> contains html templates.</li> <li><code>src/img</code> contains plugin logos and other images.</li> <li><code>spec/</code> contains tests (optional).</li> <li><code>dist/</code> contains built content.</li> </ul>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#html-and-css","title":"HTML and CSS","text":"<p>For the HTML on editor tabs, we recommend using the inbuilt Grafana styles rather than defining your own. This makes plugins feel like a more natural part of Grafana. If done correctly, the html will also be responsive and adapt to smaller screens. The <code>gf-form</code> css classes should be used for labels and inputs.</p> <p>Below is a minimal example of an editor row with one form group and two fields, a dropdown and a text input:</p> <pre><code>&lt;div class=\"editor-row\"&gt;\n  &lt;div class=\"section gf-form-group\"&gt;\n    &lt;h5 class=\"section-heading\"&gt;My Plugin Options&lt;/h5&gt;\n    &lt;div class=\"gf-form\"&gt;\n      &lt;label class=\"gf-form-label width-10\"&gt;Label1&lt;/label&gt;\n      &lt;div class=\"gf-form-select-wrapper max-width-10\"&gt;\n        &lt;select class=\"input-small gf-form-input\" ng-model=\"ctrl.panel.mySelectProperty\" ng-options=\"t for t in ['option1', 'option2', 'option3']\" ng-change=\"ctrl.onSelectChange()\"&gt;&lt;/select&gt;\n      &lt;/div&gt;\n      &lt;div class=\"gf-form\"&gt;\n        &lt;label class=\"gf-form-label width-10\"&gt;Label2&lt;/label&gt;\n        &lt;input type=\"text\" class=\"input-small gf-form-input width-10\" ng-model=\"ctrl.panel.myProperty\" ng-change=\"ctrl.onFieldChange()\" placeholder=\"suggestion for user\" ng-model-onblur /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Use the <code>width-x</code> and <code>max-width-x</code> classes to control the width of your labels and input fields. Try to get labels and input fields to line up neatly by having the same width for all the labels in a group and the same width for all inputs in a group if possible.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#build-scripts","title":"Build Scripts","text":"<p>Our recommendation is to use whatever you usually use - Grunt, Gulp or npm scripts. Most plugins seems to use Grunt so that is probably the easiest to get started with if you do not have a preferred build system. The only requirement is that it supports systemjs which is required by Grafana to load plugins.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#linting","title":"Linting","text":"<p>We recommend that you use a linter for your JavaScript. For ES6, the standard linter is eslint. Rules for linting are described in an .eslintrc that is placed in the root directory. Here is an example of linting rules in a plugin.</p>"},{"location":"dashboard/grafana/plugins/developing/code-styleguide/#es6-features","title":"ES6 features","text":"<ol> <li>Use <code>const</code> if a variable is not going to be reassigned.</li> <li>Prefer to use <code>let</code> instead <code>var</code> (Exploring ES6)</li> <li> <p>Use arrow functions, which don\u2019t shadow <code>this</code> (Exploring ES6):</p> <pre><code>testDatasource() {\n  return this.getServerStatus()\n  .then(status =&gt; {\n    return this.doSomething(status);\n  })\n}\n</code></pre> <p>better than</p> <p><pre><code>testDatasource() {\n  var self = this;\n  return this.getServerStatus()\n  .then(function(status) {\n    return self.doSomething(status);\n  })\n}\n</code></pre> 4. Use native Promise object:</p> <pre><code>metricFindQuery(query) {\n  if (!query) {\n    return Promise.resolve([]);\n  }\n}\n</code></pre> <p>better than</p> <p><pre><code>metricFindQuery(query) {\n  if (!query) {\n    return this.$q.when([]);\n  }\n}\n</code></pre> 5. If using Lodash, then be consequent and prefer that to the native ES6 array functions.</p> </li> </ol>"},{"location":"dashboard/grafana/plugins/developing/datasources/","title":"Datasources","text":"<p>+++ title = \"Developing Datasource Plugins\" keywords = [\"grafana\", \"plugins\", \"documentation\"] type = \"docs\" [menu.docs] name = \"Developing Datasource Plugins\" parent = \"developing\" weight = 6 +++</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#datasources","title":"Datasources","text":"<p>Datasource plugins enables people to develop plugins for any database that communicates over http. Its up to the plugin to transform the data into time series data so that any grafana panel can then show it.</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#datasource-development","title":"Datasource development","text":"<p>Our goal is not to have a very extensive documentation but rather have actual code that people can look at. An example implementation of a datasource can be found in this example datasource repo</p> <p>To interact with the rest of grafana the plugins module file can export 5 different components.</p> <ul> <li>Datasource (Required)</li> <li>QueryCtrl (Required)</li> <li>ConfigCtrl (Required)</li> <li>QueryOptionsCtrl</li> <li>AnnotationsQueryCtrl</li> </ul>"},{"location":"dashboard/grafana/plugins/developing/datasources/#plugin-json","title":"Plugin json","text":"<p>There are two datasource specific settings for the plugin.json</p> <pre><code>\"metrics\": true,\n\"annotations\": false,\n</code></pre> <p>These settings indicates what kind of data the plugin can deliver. At least one of them have to be true</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#datasource","title":"Datasource","text":"<p>The javascript object that communicates with the database and transforms data to times series.</p> <p>The Datasource should contain the following functions:</p> <pre><code>query(options) //used by panels to get data\ntestDatasource() //used by datasource configuration page to make sure the connection is working\nannotationQuery(options) // used by dashboards to get annotations\nmetricFindQuery(options) // used by query editor to get metric suggestions.\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/datasources/#testdatasource","title":"testDatasource","text":"<p>When a user clicks on the Save &amp; Test button when adding a new data source, the details are first saved to the database and then the <code>testDatasource</code> function that is defined in your data source plugin will be called. It is recommended that this function makes a query to the data source that will also test that the authentication details are correct. This is so the data source is correctly configured when the user tries to write a query in a new dashboard.</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#query","title":"Query","text":"<p>Request object passed to datasource.query function:</p> <pre><code>{\n  \"range\": { \"from\": \"2015-12-22T03:06:13.851Z\", \"to\": \"2015-12-22T06:48:24.137Z\" },\n  \"interval\": \"5s\",\n  \"targets\": [\n    { \"refId\": \"B\", \"target\": \"upper_75\" },\n    { \"refId\": \"A\", \"target\": \"upper_90\" }\n  ],\n  \"format\": \"json\",\n  \"maxDataPoints\": 2495 //decided by the panel\n}\n</code></pre> <p>There are two different kinds of results for datasources; time series and table. Time series is the most common format and is supported by all datasources and panels. Table format is only supported by the InfluxDB datasource and table panel. But we might see more of this in the future.</p> <p>Time series response from datasource.query. An array of:</p> <pre><code>[\n  {\n    \"target\":\"upper_75\",\n    \"datapoints\":[\n      [622,1450754160000],\n      [365,1450754220000]\n    ]\n  },\n  {\n    \"target\":\"upper_90\",\n    \"datapoints\":[\n      [861,1450754160000],\n      [767,1450754220000]\n    ]\n  }\n]\n</code></pre> <p>Table response from datasource.query. An array of:</p> <pre><code>[\n  {\n    \"columns\": [\n      {\n        \"text\": \"Time\",\n        \"type\": \"time\",\n        \"sort\": true,\n        \"desc\": true,\n      },\n      {\n        \"text\": \"mean\",\n      },\n      {\n        \"text\": \"sum\",\n      }\n    ],\n    \"rows\": [\n      [\n        1457425380000,\n        null,\n        null\n      ],\n      [\n        1457425370000,\n        1002.76215352,\n        1002.76215352\n      ],\n    ],\n    \"type\": \"table\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/datasources/#annotation-query","title":"Annotation Query","text":"<p>Request object passed to datasource.annotationQuery function:</p> <pre><code>{\n  \"range\": { \"from\": \"2016-03-04T04:07:55.144Z\", \"to\": \"2016-03-04T07:07:55.144Z\" },\n  \"rangeRaw\": { \"from\": \"now-3h\", to: \"now\" },\n  \"annotation\": {\n    \"datasource\": \"generic datasource\",\n    \"enable\": true,\n    \"name\": \"annotation name\"\n  }\n}\n</code></pre> <p>Expected result from datasource.annotationQuery:</p> <pre><code>[\n  {\n    \"annotation\": {\n      \"name\": \"annotation name\", //should match the annotation name in grafana\n      \"enabled\": true,\n      \"datasource\": \"generic datasource\",\n     },\n    \"title\": \"Cluster outage\",\n    \"time\": 1457075272576,\n    \"text\": \"Joe causes brain split\",\n    \"tags\": \"joe, cluster, failure\"\n  }\n]\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/datasources/#queryctrl","title":"QueryCtrl","text":"<p>A JavaScript class that will be instantiated and treated as an Angular controller when the user edits metrics in a panel. This class has to inherit from the app/plugins/sdk.QueryCtrl class.</p> <p>Requires a static template or templateUrl variable which will be rendered as the view for this controller.</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#configctrl","title":"ConfigCtrl","text":"<p>A JavaScript class that will be instantiated and treated as an Angular controller when a user tries to edit or create a new datasource of this type.</p> <p>Requires a static template or templateUrl variable which will be rendered as the view for this controller.</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#queryoptionsctrl","title":"QueryOptionsCtrl","text":"<p>A JavaScript class that will be instantiated and treated as an Angular controller when the user edits metrics in a panel. This controller is responsible for handling panel wide settings for the datasource, such as interval, rate and aggregations if needed.</p> <p>Requires a static template or templateUrl variable which will be rendered as the view for this controller.</p>"},{"location":"dashboard/grafana/plugins/developing/datasources/#annotationsqueryctrl","title":"AnnotationsQueryCtrl","text":"<p>A JavaScript class that will be instantiated and treated as an Angular controller when the user choose this type of datasource in the templating menu in the dashboard.</p> <p>Requires a static template or templateUrl variable which will be rendered as the view for this controller. The fields that are bound to this controller are then sent to the Database objects annotationQuery function.</p>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/","title":"Defaults and editor mode","text":"<p>+++ title = \"Plugin Defaults and Editor Mode\" type = \"docs\" [menu.docs] name = \"Plugin Defaults and Editor Mode\" parent = \"developing\" weight = 3 +++</p>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#plugin-defaults-and-editor-mode","title":"Plugin Defaults and Editor Mode","text":"<p>Most plugins allow users to customize the behavior by changing settings on an editor tab. These setting fields are saved in the dashboard json.</p>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#defaults","title":"Defaults","text":"<p>We define fields to be saved in Grafana by creating values on the panel object of the controller. You can see these values for any panel by choosing View JSON from the settings menu in Grafana. Here is an excerpt from the clock panel json (with some fields removed), the panel data is saved in the panels array:</p> <pre><code>{\n  \"id\": 4,\n  \"title\": \"Clock\",\n...\n  \"rows\": [\n    {\n...\n      \"panels\": [\n        {\n          \"bgColor\": \"rgb(132, 151, 130)\",\n          \"clockType\": \"24 hour\",\n</code></pre> <p>You can define panel data by first creating a variable with default values for the fields and then setting them on the panel object:</p> <pre><code>const panelDefaults = {\n  clockType: '24 hour',\n  fontSize: '60px',\n  fontWeight: 'normal',\n  bgColor: null\n};\n\nconstructor($scope, $injector) {\n  super($scope, $injector);\n  _.defaults(this.panel, panelDefaults);\n\n  this.updateClock();\n}\n</code></pre> <p>The Lodash function defaults, which is called in the code above: <code>_.defaults</code>, sets a default value only if the value is not already set. This way values that have been changed by the user will not be overwritten.</p> <p>These panel fields can be used in the controller or module.html template:</p> <pre><code>&lt;h2 style=\"font-size: {{ctrl.panel.fontSize}};\"&gt;{{ctrl.time}}&lt;/h2&gt;\n</code></pre> <p>If you want your users to be able to change these panel values then you need to expose them in the Grafana editor.</p>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#editor-mode","title":"Editor Mode","text":"<p>Editor mode is when a user clicks Edit on a panel. Every panel has a general tab where you change the title and width and some panels have more inbuilt tabs like the Metrics tab or Time Range tab. A panel plugin can add its own tab(s) so that a user can customize the panel. </p> <p>Grafana conventions mean all you need to do is to hook up an Angular template with input fields and Grafana will automatically save the values to the dashboard json and load them on dashboard load.</p>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#using-events","title":"Using Events","text":"<p>To add an editor tab you need to hook into the event model so that the tab is added when the init-edit-mode event is triggered. The following code should be added to the constructor of the plugin Ctrl class:</p> <pre><code>this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n</code></pre> <p>Then you need to create a handler function that is bound to the event. In the example above, the handler is called onInitEditMode. The tab is added by calling the controller function, addEditorTab. This function has three parameters; the tab name, the path to a html template for the new editor tab and the tab number.\u00a0It can be a bit tricky to figure out the path, the path name will be based on the id that is specified in the plugin.json file - for example grafana-clock-panel. The code below hooks up an Angular template called editor.html that is located in the <code>src/partials</code> directory.</p> <pre><code>onInitEditMode() {\n  this.addEditorTab('Options', 'public/plugins/grafana-clock-panel/editor.html', 2);\n}\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#editor-html-and-css","title":"Editor HTML and CSS","text":"<p>For editor tabs html, it is best to use Grafana css styles rather than custom styles. This is to preserve the look and feel of other tabs in Grafana.</p> <p>Most editor tabs should use the gf-form css class\u00a0from Grafana. The example below has one row with a couple of columns and each column is wrapped in a div\u00a0like this:</p> <pre><code>&lt;div class=\"section gf-form-group\"&gt;\n ```\n\nThen each pair, label and field is wrapped in a div with a gf-form class.\n\n```html\n&lt;div class=\"gf-form\"&gt;\n  &lt;label class=\"gf-form-label width-8\"&gt;Font Size&lt;/label&gt;\n  &lt;input type=\"text\" class=\"gf-form-input width-4\" ng-model=\"ctrl.panel.fontSize\" ng-change=\"ctrl.render()\" ng-model-onblur&gt;\n&lt;/div&gt;\n</code></pre> <p>Note that there are some Angular attributes here. ng-model will update the panel data. ng-change will render the panel when you change the value. This change will occur on the onblur event due to the ng-model-onblur attribute. This means you can see the effect of your changes on the panel while editing.</p> <p>{{&lt; imgbox img=\"/assets/img/blog/clock-panel-editor.png\" caption=\"Panel Editor\" &gt;}}</p> <p>On the editor tab we use a drop down for 12/24 hour clock, an input field for font size and a color picker for the background color.</p> <p>The drop down/select has its own gf-form-select-wrapper css class and looks like this:</p> <pre><code>&lt;div class=\"gf-form\"&gt;\n  &lt;label class=\"gf-form-label width-9\"&gt;12 or 24 hour&lt;/label&gt;\n  &lt;div class=\"gf-form-select-wrapper max-width-9\"&gt;\n    &lt;select class=\"input-small gf-form-input\" ng-model=\"ctrl.panel.clockType\" ng-options=\"t for t in ['12 hour', '24 hour', 'custom']\" ng-change=\"ctrl.render()\"&gt;&lt;/select&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>The color picker (or spectrum picker) is a component that already exists in Grafana. We use it like this for the background color:</p> <pre><code>&lt;spectrum-picker class=\"gf-form-input\" ng-model=\"ctrl.panel.bgColor\" ng-change=\"ctrl.render()\" &gt;&lt;/spectrum-picker&gt;\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/defaults-and-editor-mode/#editor-tab-finished","title":"Editor Tab Finished","text":"<p>To reiterate, this all ties together quite neatly. We specify properties and panel defaults in the constructor for the panel controller and these can then be changed in the editor. Grafana takes care of saving the changes.</p> <p>One thing to be aware of  is that panel defaults are used the first time a panel is created to set the initial values of the panel properties. After the panel is saved then the saved value will be used instead. So beware if you update panel defaults they will not automatically update the property in an existing panel. For example, if you set the default font size to 60px first and then in version 2 of the plugin change it to 50px, existing panels will still have 60px and only new panels will get the new 50px value.</p>"},{"location":"dashboard/grafana/plugins/developing/development/","title":"Development","text":"<p>+++ title = \"Developer Guide\" type = \"docs\" aliases = [\"/plugins/development/\", \"/plugins/datasources/\", \"/plugins/apps/\", \"/plugins/panels/\"] [menu.docs] name = \"Developer Guide\" parent = \"developing\" weight = 1 +++</p>"},{"location":"dashboard/grafana/plugins/developing/development/#developer-guide","title":"Developer Guide","text":"<p>From grafana 3.0 it's very easy to develop your own plugins and share them with other grafana users.</p> <p>There are two blog posts about authoring a plugin that might also be of interest to any plugin authors, Timing is Everything. Writing the Clock Panel Plugin for Grafana 3.0- part 1 and Timing is Everything. Editor Mode in Grafana 3.0 for the Clock Panel Plugin.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#short-version","title":"Short version","text":"<ol> <li>Setup grafana</li> <li>Clone an example plugin into <code>/var/lib/grafana/plugins</code>  or <code>data/plugins</code> (relative to grafana git repo if your running development version from source dir)</li> <li>Code away!</li> </ol>"},{"location":"dashboard/grafana/plugins/developing/development/#what-languages","title":"What languages?","text":"<p>Since everything turns into javascript it's up to you to choose which language you want. That said it's probably a good idea to choose es6 or typescript since we use es6 classes in Grafana. So it's easier to get inspiration from the Grafana repo is you choose one of those languages.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#buildscript","title":"Buildscript","text":"<p>You can use any build system you like that support systemjs. All the built content should end up in a folder named <code>dist</code> and committed to the repository.By committing the dist folder the person who installs your plugin does not have to run any buildscript.</p> <p>All our example plugins have build scripted configured.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#metadata","title":"Metadata","text":"<p>See the coding styleguide for details on the metadata.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#modulejsts","title":"module.(js|ts)","text":"<p>This is the entry point for every plugin. This is the place where you should export your plugin implementation. Depending on what kind of plugin you are developing you will be expected to export different things. You can find what's expected for datasource, panels and apps plugins in the documentation.</p> <p>The Grafana SDK is quite small so far and can be found here:</p> <ul> <li>SDK file in Grafana</li> <li>SDK Readme</li> </ul> <p>The SDK contains three different plugin classes: PanelCtrl, MetricsPanelCtrl and QueryCtrl. For plugins of the panel type, the module.js file should export one of these. There are some extra classes for data sources.</p> <p>Example:</p> <pre><code>import {ClockCtrl} from './clock_ctrl';\n\nexport {\n  ClockCtrl as PanelCtrl\n};\n</code></pre> <p>The module class is also where css for the dark and light themes is imported:</p> <pre><code>import {loadPluginCss} from 'app/plugins/sdk';\nimport WorldmapCtrl from './worldmap_ctrl';\n\nloadPluginCss({\n  dark: 'plugins/grafana-worldmap-panel/css/worldmap.dark.css',\n  light: 'plugins/grafana-worldmap-panel/css/worldmap.light.css'\n});\n\nexport {\n  WorldmapCtrl as PanelCtrl\n};\n</code></pre>"},{"location":"dashboard/grafana/plugins/developing/development/#start-developing-your-plugin","title":"Start developing your plugin","text":"<p>There are three ways that you can start developing a Grafana plugin.</p> <ol> <li>Setup a Grafana development environment. (described here) and place your plugin in the <code>data/plugins</code> folder.</li> <li>Install Grafana and place your plugin in the plugins directory which is set in your config file. By default this is <code>/var/lib/grafana/plugins</code> on Linux systems.</li> <li>Place your plugin directory anywhere you like and specify it grafana.ini.</li> </ol> <p>We encourage people to setup the full Grafana environment so that you can get inspiration from the rest of grafana code base.</p> <p>When Grafana starts it will scan the plugin folders and mount every folder that contains a plugin.json file unless the folder contains a subfolder named dist. In that case grafana will mount the dist folder instead. This makes it possible to have both built and src content in the same plugin git repo.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#grafana-events","title":"Grafana Events","text":"<p>There are a number of Grafana events that a plugin can hook into:</p> <ul> <li><code>init-edit-mode</code> can be used to add tabs when editing a panel</li> <li><code>panel-teardown</code> can be used for clean up</li> <li><code>data-received</code> is an event in that is triggered on data refresh and can be hooked into</li> <li><code>data-snapshot-load</code> is an event triggered to load data when in snapshot mode.</li> <li><code>data-error</code> is used to handle errors on dashboard refresh.</li> </ul> <p>If a panel receives data and hooks into the <code>data-received</code> event then it should handle snapshot mode too. Otherwise the panel will not work if saved as a snapshot. Getting Plugins to work in Snapshot Mode describes how to add support for this.</p>"},{"location":"dashboard/grafana/plugins/developing/development/#examples","title":"Examples","text":"<p>We currently have three different examples that you can fork/download to get started developing your grafana plugin.</p> <ul> <li>simple-json-datasource (small datasource plugin for querying json data from backends)</li> <li>example-app</li> <li>clock-panel</li> <li>singlestat-panel</li> <li>piechart-panel</li> </ul>"},{"location":"dashboard/grafana/plugins/developing/development/#other-articles","title":"Other Articles","text":"<ul> <li>Getting Plugins to work in Snapshot Mode</li> <li>Plugin Defaults and Editor Mode</li> <li>Grafana Plugin Code Styleguide</li> <li>Grafana Apps</li> <li>Grafana Datasources</li> <li>plugin.json Schema</li> </ul>"},{"location":"dashboard/grafana/plugins/developing/panels/","title":"Panels","text":"<p>+++ title = \"Installing Plugins\" type = \"docs\" [menu.docs] parent = \"developing\" weight = 1 +++</p>"},{"location":"dashboard/grafana/plugins/developing/panels/#panels","title":"Panels","text":"<p>Panels are the main building blocks of dashboards.</p>"},{"location":"dashboard/grafana/plugins/developing/panels/#panel-development","title":"Panel development","text":"<p>Examples</p> <ul> <li>clock-panel</li> <li>singlestat-panel</li> </ul>"},{"location":"dashboard/grafana/plugins/developing/plugin.json/","title":"Plugin.json","text":"<p>+++ title = \"plugin.json Schema\" keywords = [\"grafana\", \"plugins\", \"documentation\"] type = \"docs\" [menu.docs] name = \"plugin.json Schema\" parent = \"developing\" weight = 6 +++</p>"},{"location":"dashboard/grafana/plugins/developing/plugin.json/#pluginjson","title":"Plugin.json","text":"<p>The plugin.json file is mandatory for all plugins. When Grafana starts it will scan the plugin folders and mount every folder that contains a plugin.json file unless the folder contains a subfolder named <code>dist</code>. In that case grafana will mount the <code>dist</code> folder instead.</p>"},{"location":"dashboard/grafana/plugins/developing/plugin.json/#plugin-json-schema","title":"Plugin JSON Schema","text":"Property Description id unique name of the plugin - conventions described in styleguide type panel/datasource/app name Human readable name of the plugin info.description Description of plugin. Used for searching grafana net plugins info.author info.keywords plugin keywords. Used for search on grafana net info.logos link to project logos info.version project version of this commit. Must be semver dependencies.grafanaVersion Required grafana backend version for this plugin dependencies.plugins required plugins for this plugin."},{"location":"dashboard/grafana/plugins/developing/snapshot-mode/","title":"Snapshot mode","text":"<p>+++ title = \"Snapshot Mode\" type = \"docs\" [menu.docs] name = \"Snapshot Mode\" parent = \"developing\" weight = 6 +++</p>"},{"location":"dashboard/grafana/plugins/developing/snapshot-mode/#getting-plugins-to-work-in-snapshot-mode","title":"Getting Plugins to work in Snapshot Mode","text":"<p>{{&lt; imgbox img=\"/img/docs/Grafana-snapshot-example.png\" caption=\"A dashboard using snapshot data and not live data.\" &gt;}}</p> <p>Grafana has this great feature where you can save a snapshot of your dashboard. Instead of sending a screenshot of a dashboard to someone, you can send them a working, interactive Grafana dashboard with the snapshot data embedded inside it. The snapshot can be saved on your Grafana server and is available to all your co-workers. Raintank also hosts a snapshot server if you want to send the snapshot to someone who does not have access to your Grafana server.</p> <p>{{&lt; imgbox img=\"/img/docs/animated_gifs/snapshots.gif\" caption=\"Selecting a snapshot\" &gt;}}</p> <p>This all works because Grafana saves a snapshot of the current data in the dashboard json instead of fetching the data from a data source. However, if you are building a custom panel plugin then this will not work straight out of the box. You will need to make some small (and easy!) changes first.</p>"},{"location":"dashboard/grafana/plugins/developing/snapshot-mode/#enabling-support-for-loading-snapshot-data","title":"Enabling support for loading snapshot data","text":"<p>Grafana automatically saves data from data sources in the dashboard json when the snapshot is created so we do not have to write any code for that. Enabling snapshot support for reading time series data is very simple. First in the constructor, we need to add an event handler for <code>data-snapshot-load</code>. This event is triggered by Grafana when the snapshot data is loaded from the dashboard json.</p> <pre><code>constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    ...\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n</code></pre> <p>Then we need to create a simple event handler that just forwards the data on to our regular <code>data-received</code> handler:</p> <pre><code>onDataSnapshotLoad(snapshotData) {\n  this.onDataReceived(snapshotData);\n}\n</code></pre> <p>This will cover most use cases for snapshot support. Sometimes you will want to save data that is not time series data from a Grafana data source and then you have to do a bit more work to get snapshot support.</p>"},{"location":"dashboard/grafana/plugins/developing/snapshot-mode/#saving-custom-data-for-snapshots","title":"Saving custom data for snapshots","text":"<p>Data that is not time series data from a Grafana data source is not saved automatically by Grafana. Saving custom data for snapshot mode has to be done manually.</p> <p>{{&lt; imgbox img=\"/img/docs/Grafana-save-snapshot.png\" caption=\"Save snapshot\" &gt;}}</p> <p>Grafana gives us a chance to save data to the dashboard json when it is creating a snapshot. In the 'data-received' event handler, you can check the snapshot flag on the dashboard object. If this is true, then Grafana is creating a snapshot and you can manually save custom data to the panel json. In the example, a new field called snapshotLocationData in the panel json is initialized with a snapshot of the custom data.</p> <pre><code>onDataReceived(dataList) {\n  if (!dataList) return;\n\n  if (this.dashboard.snapshot &amp;&amp; this.locations) {\n    this.panel.snapshotLocationData = this.locations;\n  }\n</code></pre> <p>Now the location data is saved in the dashboard json but we will have to load it manually as well.</p>"},{"location":"dashboard/grafana/plugins/developing/snapshot-mode/#loading-custom-data-for-snapshots","title":"Loading custom data for snapshots","text":"<p>The example below shows a function that loads the custom data. The data source for the custom data (an external api in this case) is not available in snapshot mode so a guard check is made to see if there is any snapshot data available first. If there is, then the snapshot data is used instead of trying to load the data from the external api.</p> <pre><code>loadLocationDataFromFile(reload) {\n  if (this.map &amp;&amp; !reload) return;\n\n  if (this.panel.snapshotLocationData) {\n    this.locations = this.panel.snapshotLocationData;\n    return;\n  }\n</code></pre> <p>It is really easy to forget to add this support but it enables a great feature and can be used to demo your panel.</p> <p>If there is a panel plugin that you would like to be installed on the Raintank Snapshot server then please contact us via Slack or GitHub.</p>"},{"location":"dashboard/grafana/reference/admin/","title":"Administration","text":"<p>Grafana has two levels of administrators:</p> <ul> <li>Organizational administrators: These admins can manage users within specific organizations in a particular Grafana installation</li> <li>Grafana administrators: These super admins can manage users across all organizations in a Grafana installation. They can also change and access system-wide settings.</li> </ul>"},{"location":"dashboard/grafana/reference/admin/#organizational-administrators","title":"Organizational Administrators","text":"<p>As an Organizational administrator, you can add <code>Data Sources</code>, add Users to your Organization and modify Organization details and options.</p> <p>Note: If Grafana is configured with <code>users.allow_org_create = true</code>, any User of any Organization will be able to start their own Organization and become the administrator of that Organization.</p>"},{"location":"dashboard/grafana/reference/admin/#grafana-administrators","title":"Grafana Administrators","text":"<p> As a Grafana Administrator, you have complete access to any Organization or User in that instance of Grafana. When performing actions as a Grafana admin, the sidebar will change it's appearance as below to indicate you are performing global server administration.</p> <p>From the Grafana Server Admin page, you can access the System Info page which summarizes all of the backend configuration settings of the Grafana server.</p>"},{"location":"dashboard/grafana/reference/admin/#why-would-i-have-multiple-organizations","title":"Why would I have multiple Organizations?","text":"<p>Organizations in Grafana are best suited for a multi-tenant deployment. In a multi-tenant deployment, Organizations can be used to provide a full Grafana experience to different sets of users from a single Grafana instance, at the convenience of the Grafana Administrator.</p> <p>In most cases, a Grafana installation will only have one Organization. Since dashboards, data sources and other configuration items are not shared between organizations, there's no need to create multiple Organizations if you want all your users to have access to the same set of dashboards and data.</p>"},{"location":"dashboard/grafana/reference/annotations/","title":"Annotations","text":"<p>Annotations provide a way to mark points on the graph with rich events. When you hover over an annotation you can get title, tags, and text information for the event.</p> <p></p> <p>To add an annotation query click dashboard settings icon in top menu and select <code>Annotations</code> from the dropdown. This will open the <code>Annotations</code> edit view. Click the <code>Add</code> tab to add a new annotation query.</p> <p>Note: Annotations apply to all graphs in a given dashboard, not on a per-panel basis.</p>"},{"location":"dashboard/grafana/reference/annotations/#graphite-annotations","title":"Graphite annotations","text":"<p>Graphite supports two ways to query annotations.</p> <ul> <li>A regular metric query, use the <code>Graphite target expression</code> text input for this</li> <li>Graphite events query, use the <code>Graphite event tags</code> text input, specify an tag or wildcard (leave empty should also work)</li> </ul>"},{"location":"dashboard/grafana/reference/annotations/#elasticsearch-annotations","title":"Elasticsearch annotations","text":"<p>Grafana can query any Elasticsearch index for annotation events. The index name can be the name of an alias or an index wildcard pattern. You can leave the search query blank or specify a lucene query.</p> <p>If your elasticsearch document has a timestamp field other than <code>@timestamp</code> you will need to specify that. As well as the name for the fields that should be used for the annotation title, tags and text. Tags and text are optional.</p> <p>Note The annotation timestamp field in elasticsearch need to be in UTC format.</p>"},{"location":"dashboard/grafana/reference/annotations/#influxdb-annotations","title":"InfluxDB Annotations","text":"<p>For InfluxDB you need to enter a query like in the above screenshot. You need to have the <code>where $timeFilter</code> part. If you only select one column you will not need to enter anything in the column mapping fields.</p>"},{"location":"dashboard/grafana/reference/annotations/#prometheus-annotations","title":"Prometheus Annotations","text":"<p>Prometheus supports two ways to query annotations.</p> <ul> <li>A regular metric query</li> <li>A Prometheus query for pending and firing alerts (for details see Inspecting alerts during runtime)</li> </ul>"},{"location":"dashboard/grafana/reference/dashboard/","title":"Dashboard JSON","text":"<p>A dashboard in Grafana is represented by a JSON object, which stores metadata of its dashboard. Dashboard metadata includes dashboard properties, metadata from rows, panels, template variables, panel queries, etc.</p> <p>To view the JSON of a dashboard, follow the steps mentioned below:</p> <ol> <li>Go to a dashboard</li> <li>Click on <code>Manage dashboard</code> menu on the top navigation bar</li> <li>Select <code>View JSON</code> from the dropdown menu</li> </ol>"},{"location":"dashboard/grafana/reference/dashboard/#json-fields","title":"JSON fields","text":"<p>When a user creates a new dashboard, a new dashboard JSON object is initialized with the following fields:</p> <p>Note: In the following JSON, id is shown as null which is the default value assigned to it until a dashboard is saved. Once a dashboard is saved, an integer value is assigned to the <code>id</code> field.</p> <p><pre><code>{\n  \"id\": null,\n  \"title\": \"New dashboard\",\n  \"tags\": [],\n  \"style\": \"dark\",\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"hideControls\": false,\n  \"graphTooltip\": 1,\n  \"rows\": [],\n  \"time\": {\n    \"from\": \"now-6h\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"time_options\": [],\n    \"refresh_intervals\": []\n  },\n  \"templating\": {\n    \"list\": []\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"schemaVersion\": 7,\n  \"version\": 0,\n  \"links\": []\n}\n</code></pre> Each field in the dashboard JSON is explained below with its usage:</p> Name Usage id unique dashboard id, an integer title current title of dashboard tags tags associated with dashboard, an array of strings style theme of dashboard, i.e. <code>dark</code> or <code>light</code> timezone timezone of dashboard, i.e. <code>utc</code> or <code>browser</code> editable whether a dashboard is editable or not hideControls whether row controls on the left in green are hidden or not graphTooltip TODO rows row metadata, see rows section for details time time range for dashboard, i.e. last 6 hours, last 7 days, etc timepicker timepicker metadata, see timepicker section for details templating templating metadata, see templating section for details annotations annotations metadata, see annotations section for details schemaVersion TODO version TODO links TODO"},{"location":"dashboard/grafana/reference/dashboard/#rows","title":"rows","text":"<p><code>rows</code> field consists of an array of JSON object representing each row in a dashboard, such as shown below:</p> <pre><code> \"rows\": [\n    {\n      \"collapse\": false,\n      \"editable\": true,\n      \"height\": \"200px\",\n      \"panels\": [],\n      \"title\": \"New row\"\n    },\n    {\n      \"collapse\": true,\n      \"editable\": true,\n      \"height\": \"300px\",\n      \"panels\": [],\n      \"title\": \"New row\"\n    }\n  ]\n</code></pre> <p>Usage of the fields is explained below:</p> Name Usage collapse whether row is collapsed or not editable whether a row is editable or not height height of the row in pixels panels panels metadata, see panels section for details title title of row"},{"location":"dashboard/grafana/reference/dashboard/#panels","title":"panels","text":"<p>Panels are the building blocks a dashboard. It consists of datasource queries, type of graphs, aliases, etc. Panel JSON consists of an array of JSON objects, each representing a different panel in a row. Most of the fields are common for all panels but some fields depends on the panel type. Following is an example of panel JSON representing a <code>graph</code> panel type:</p> <pre><code>\"panels\": [\n        {\n          \"aliasColors\": {},\n          \"bars\": false,\n          \"datasource\": null,\n          \"editable\": true,\n          \"error\": false,\n          \"fill\": 0,\n          \"grid\": {\n            \"leftLogBase\": 1,\n            \"leftMax\": null,\n            \"leftMin\": null,\n            \"rightLogBase\": 1,\n            \"rightMax\": null,\n            \"rightMin\": null,\n            \"threshold1\": null,\n            \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n            \"threshold2\": null,\n            \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n          },\n          \"id\": 1,\n          \"legend\": {\n            \"avg\": false,\n            \"current\": false,\n            \"max\": false,\n            \"min\": false,\n            \"show\": true,\n            \"total\": false,\n            \"values\": false\n          },\n          \"lines\": true,\n          \"linewidth\": 1,\n          \"links\": [],\n          \"nullPointMode\": \"connected\",\n          \"percentage\": false,\n          \"pointradius\": 5,\n          \"points\": false,\n          \"renderer\": \"flot\",\n          \"seriesOverrides\": [],\n          \"span\": 4,\n          \"stack\": false,\n          \"steppedLine\": false,\n          \"targets\": [\n            {\n              \"aggregator\": \"max\",\n              \"alias\": \"$tag_instance_id\",\n              \"currentTagKey\": \"\",\n              \"currentTagValue\": \"\",\n              \"downsampleAggregator\": \"avg\",\n              \"downsampleInterval\": \"\",\n              \"errors\": {},\n              \"metric\": \"memory.percent-used\",\n              \"refId\": \"A\",\n              \"shouldComputeRate\": false,\n              \"tags\": {\n                \"app\": \"$app\",\n                \"env\": \"stage\",\n                \"instance_id\": \"*\"\n              }\n            }\n          ],\n          \"timeFrom\": null,\n          \"timeShift\": null,\n          \"title\": \"Memory Utilization\",\n          \"tooltip\": {\n            \"shared\": true,\n            \"value_type\": \"cumulative\"\n          },\n          \"type\": \"graph\",\n          \"x-axis\": true,\n          \"y-axis\": true,\n          \"y_formats\": [\n            \"percent\",\n            \"short\"\n          ]\n        },\n        {\n          \"aliasColors\": {},\n          \"bars\": false,\n          \"datasource\": null,\n          \"editable\": true,\n          \"error\": false,\n          \"fill\": 0,\n          \"grid\": {\n            \"leftLogBase\": 1,\n            \"leftMax\": null,\n            \"leftMin\": null,\n            \"rightLogBase\": 1,\n            \"rightMax\": null,\n            \"rightMin\": null,\n            \"threshold1\": null,\n            \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n            \"threshold2\": null,\n            \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n          },\n          \"id\": 2,\n          \"legend\": {\n            \"avg\": false,\n            \"current\": false,\n            \"max\": false,\n            \"min\": false,\n            \"show\": true,\n            \"total\": false,\n            \"values\": false\n          },\n          \"lines\": true,\n          \"linewidth\": 1,\n          \"links\": [],\n          \"nullPointMode\": \"connected\",\n          \"percentage\": false,\n          \"pointradius\": 5,\n          \"points\": false,\n          \"renderer\": \"flot\",\n          \"seriesOverrides\": [],\n          \"span\": 4,\n          \"stack\": false,\n          \"steppedLine\": false,\n          \"targets\": [\n            {\n              \"aggregator\": \"avg\",\n              \"alias\": \"$tag_instance_id\",\n              \"currentTagKey\": \"\",\n              \"currentTagValue\": \"\",\n              \"downsampleAggregator\": \"avg\",\n              \"downsampleInterval\": \"\",\n              \"errors\": {},\n              \"metric\": \"memory.percent-cached\",\n              \"refId\": \"A\",\n              \"shouldComputeRate\": false,\n              \"tags\": {\n                \"app\": \"$app\",\n                \"env\": \"prod\",\n                \"instance_id\": \"*\"\n              }\n            }\n          ],\n          \"timeFrom\": null,\n          \"timeShift\": null,\n          \"title\": \"Memory Cached\",\n          \"tooltip\": {\n            \"shared\": true,\n            \"value_type\": \"cumulative\"\n          },\n          \"type\": \"graph\",\n          \"x-axis\": true,\n          \"y-axis\": true,\n          \"y_formats\": [\n            \"short\",\n            \"short\"\n          ]\n        },\n</code></pre> <p>Usage of each field is explained below:</p> Name Usage TODO TODO"},{"location":"dashboard/grafana/reference/dashboard/#timepicker","title":"timepicker","text":"<p>Description: TODO</p> <pre><code>\"timepicker\": {\n    \"collapse\": false,\n    \"enable\": true,\n    \"notice\": false,\n    \"now\": true,\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"status\": \"Stable\",\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"3h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"3d\",\n      \"4d\",\n      \"7d\",\n      \"30d\"\n    ],\n    \"type\": \"timepicker\"\n  }\n</code></pre> <p>Usage of the fields is explained below:</p> Name Usage collapse whether timepicker is collapsed or not enable whether timepicker is enabled or not notice TODO now TODO refresh_intervals TODO status TODO time_options TODO type TODO"},{"location":"dashboard/grafana/reference/dashboard/#templating","title":"templating","text":"<p><code>templating</code> fields contains array of template variables with their saved values along with some other metadata, for example:</p> <pre><code> \"templating\": {\n    \"enable\": true,\n    \"list\": [\n      {\n        \"allFormat\": \"wildcard\",\n        \"current\": {\n          \"tags\": [],\n          \"text\": \"prod\",\n          \"value\": \"prod\"\n        },\n        \"datasource\": null,\n        \"includeAll\": true,\n        \"name\": \"env\",\n        \"options\": [\n          {\n            \"selected\": false,\n            \"text\": \"All\",\n            \"value\": \"*\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"stage\",\n            \"value\": \"stage\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"test\",\n            \"value\": \"test\"\n          }\n        ],\n        \"query\": \"tag_values(cpu.utilization.average,env)\",\n        \"refresh\": false,\n        \"refresh\": false,\n        \"type\": \"query\"\n      },\n      {\n        \"allFormat\": \"wildcard\",\n        \"current\": {\n          \"text\": \"apache\",\n          \"value\": \"apache\"\n        },\n        \"datasource\": null,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"multiFormat\": \"glob\",\n        \"name\": \"app\",\n        \"options\": [\n          {\n            \"selected\": true,\n            \"text\": \"tomcat\",\n            \"value\": \"tomcat\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"cassandra\",\n            \"value\": \"cassandra\"\n          }\n        ],\n        \"query\": \"tag_values(cpu.utilization.average,app)\",\n        \"refresh\": false,\n        \"regex\": \"\",\n        \"type\": \"query\"\n      }\n    ]\n  }\n</code></pre> <p>Usage of the above mentioned fields in the templating section is explained below:</p> Name Usage enable whether templating is enabled or not list an array of objects representing, each representing one template variable allFormat format to use while fetching all values from datasource, eg: <code>wildcard</code>, <code>glob</code>, <code>regex</code>, <code>pipe</code>, etc. current shows current selected variable text/value on the dashboard datasource shows datasource for the variables includeAll whether all value option is available or not multi whether multiple values can be selected or not from variable value list multiFormat format to use while fetching timeseries from datasource name name of variable options array of variable text/value pairs available for selection on dashboard query datasource query used to fetch values for a variable refresh TODO regex TODO type type of variable, i.e. <code>custom</code>, <code>query</code> or <code>interval</code>"},{"location":"dashboard/grafana/reference/dashboard/#annotations","title":"annotations","text":"<p>TODO</p>"},{"location":"dashboard/grafana/reference/export_import/","title":"Export and Import","text":"<p>Grafana Dashboards can easily be exported and imported, either from the UI or from the HTTP API.</p>"},{"location":"dashboard/grafana/reference/export_import/#exporting-a-dashboard","title":"Exporting a dashboard","text":"<p>Dashboards are exported in Grafana JSON format, and contain everything you need (layout, variables, styles, data sources, queries, etc)to import the dashboard at a later time.</p> <p>The export feature is accessed from the share menu.</p> <p></p>"},{"location":"dashboard/grafana/reference/export_import/#making-a-dashboard-portable","title":"Making a dashboard portable","text":"<p>If you want to export a dashboard for others to use then it could be a good idea to add template variables for things like a metric prefix (use constant variable) and server name.</p> <p>A template variable of the type <code>Constant</code> will automatically be hidden in the dashboard, and will also be added as an required input when the dashboard is imported.</p>"},{"location":"dashboard/grafana/reference/export_import/#importing-a-dashboard","title":"Importing a dashboard","text":"<p>To import a dashboard open dashboard search and then hit the import button.</p> <p></p> <p>From here you can upload a dashboard json file, paste a Grafana.net dashboard url or paste dashboard json text directly into the text area.</p> <p></p> <p>In step 2 of the import process Grafana will let you change the name of the dashboard, pick what data source you want the dashboard to use and specify any metric prefixes (if the dashboard use any).</p>"},{"location":"dashboard/grafana/reference/export_import/#discover-dashboards-on-grafananet","title":"Discover dashboards on Grafana.net","text":"<p>Find dashboards for common server applications at Grafana.net/dashboards.</p> <p></p>"},{"location":"dashboard/grafana/reference/export_import/#import-sharing-with-grafana-2x-or-30","title":"Import &amp; Sharing with Grafana 2.x or 3.0","text":"<p>Dashboards on Grafana.net use a new feature in Grafana 3.1 that allows the import process to update each panel so that they are using a data source of your choosing. If you are running a Grafana version older than 3.1 then you might need to do some manual steps either before or after import in order for the dashboard to work properly.</p> <p>Dashboards exported from Grafana 3.1+ have a new json section <code>__inputs</code> that define what data sources and metric prefixes the dashboard uses.</p> <p>Example: <pre><code>{\n  \"__inputs\": [\n    {\n      \"name\": \"DS_GRAPHITE\",\n      \"label\": \"graphite\",\n      \"description\": \"\",\n      \"type\": \"datasource\",\n      \"pluginId\": \"graphite\",\n      \"pluginName\": \"Graphite\"\n    },\n    {\n      \"name\": \"VAR_PREFIX\",\n      \"type\": \"constant\",\n      \"label\": \"prefix\",\n      \"value\": \"collectd\",\n      \"description\": \"\"\n    }\n  ],\n}\n</code></pre></p> <p>These are then referenced in the dashboard panels like this:</p> <pre><code>{\n  \"rows\": [\n      {\n        \"panels\": [\n          {\n            \"type\": \"graph\",\n            \"datasource\": \"${DS_GRAPHITE}\",\n          }\n        ]\n      }\n  ]\n}\n</code></pre> <p>These inputs and their usage in data source properties are automatically added during export in Grafana 3.1. If you run an older version of Grafana and want to share a dashboard on Grafana.net you need to manually add the inputs and templatize the datasource properties like above.</p> <p>If you want to import a dashboard from Grafana.net into an older version of Grafana then you can either import it as usual and then update the data source option in the metrics tab so that the panel is using the correct data source. Another alternative is to open the json file in a a text editor and update the data source properties to value that matches a name of your data source.</p>"},{"location":"dashboard/grafana/reference/keyboard_shortcuts/","title":"Keyboard Shortcuts","text":"<p>No mouse? No problem. Grafana has extensive keyboard shortcuts to allow you to navigate throughout the interface. This comes in especially handy when dealing with dealing with single-purpose machines powering on-wall displays that may not have a mouse available.</p>"},{"location":"dashboard/grafana/reference/keyboard_shortcuts/#dashboard-keyboard-shortcuts","title":"Dashboard Keyboard Shortcuts","text":"<p>Press <code>Shift</code>+<code>?</code> to open the keyboard shortcut dialog from anywhere within the dashboard views.</p> <p></p> Shortcut Action <code>Esc</code> Exit fullscreen edit/view mode, close search or any editor view <code>F</code> Open dashboard search view (also contains import/playlist controls) <code>R</code> Refresh (Fetches new data and rerenders panels) <code>CTRL</code>+<code>S</code> Save dashboard <code>CTRL</code>+<code>H</code> Hide row controls <code>CTRL</code>+<code>Z</code> Zoom out <code>CTRL</code>+<code>O</code> Enable/Disable shared graph crosshair <p>Note: Grafana keyboard shortcuts are the same across operating system.</p> <p>Have a suggestion for a new keyboard shortcut? Let us know.</p>"},{"location":"dashboard/grafana/reference/playlist/","title":"Playlist","text":"<p>The Playlist is a special type of Dashboard that rotates through a list of Dashboards. A Playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.</p> <p>Since Grafana automatically scales Dashboards to any resolution they're perfect for big screens!</p>"},{"location":"dashboard/grafana/reference/playlist/#creating-a-playlist","title":"Creating a Playlist","text":"<p>{{&lt; docs-imagebox img=\"/img/docs/v3/playlist.png\" max-width=\"25rem\" &gt;}}</p> <p>The Playlist feature can be accessed from Grafana's sidemenu, in the Dashboard submenu.</p> <p>Click on \"New Playlist\" button to create a new playlist. Firstly, name your playlist and configure a time interval for Grafana to wait on a particular Dashboard before advancing to the next one on the Playlist.</p> <p>You can search Dashboards by name (or use a regular expression), and add them to your Playlist. Or you could add tags which will include all the dashboards that belongs to a tag when the playlist start playing. By default, your starred dashboards will appear as candidates for the Playlist.</p> <p>Be sure to click the \"Add to dashboard\" button next to the Dashboard name to add it to the Playlist. To remove a dashboard from the playlist click on \"Remove[x]\" button from the playlist.</p> <p>Since the Playlist is basically a list of Dashboards, ensure that all the Dashboards you want to appear in your Playlist are added here.</p>"},{"location":"dashboard/grafana/reference/playlist/#saving-the-playlist","title":"Saving the playlist","text":"<p>Once all the wanted dashboards are added to a playlist, you can save this playlist by clicking on the green \"Save\" button. This will generate a unique URL for you playlist which can be shared if needed. Click on the generated URL or on the \"Play\" button from the \"Saved playlists\" list to start the playlist. If you want to share the URL, right click on the URL and copy the URL link and share.</p>"},{"location":"dashboard/grafana/reference/playlist/#starting-the-playlist","title":"Starting the playlist","text":"<p>Also, if you want, you can start the playlist without saving it by clicking on the green \"Start\" button at the bottom.</p>"},{"location":"dashboard/grafana/reference/playlist/#controlling-the-playlist","title":"Controlling the Playlist","text":"<p>Playlists can also be manually controlled utilizing the Playlist controls at the top of screen when in Playlist mode.</p> <p>Click the stop button to stop the Playlist, and exit to the current Dashboard. Click the next button to advance to the next Dashboard in the Playlist. Click the back button to rewind to the previous Dashboard in the Playlist.</p>"},{"location":"dashboard/grafana/reference/scripting/","title":"Scripted Dashboards","text":"<p>If you have lots of metric names that change (new servers etc) in a defined pattern it is irritating to constantly have to create new dashboards.</p> <p>With scripted dashboards you can dynamically create your dashboards using javascript. In the folder grafana install folder under <code>public/dashboards/</code> there is a file named <code>scripted.js</code>. This file contains an example of a scripted dashboard. You can access it by using the url: <code>http://grafana_url/dashboard/script/scripted.js?rows=3&amp;name=myName</code></p> <p>If you open scripted.js you can see how it reads url parameters from ARGS variable and then adds rows and panels.</p>"},{"location":"dashboard/grafana/reference/scripting/#example","title":"Example","text":"<pre><code>var rows = 1;\nvar seriesName = 'argName';\n\nif(!_.isUndefined(ARGS.rows)) {\n  rows = parseInt(ARGS.rows, 10);\n}\n\nif(!_.isUndefined(ARGS.name)) {\n  seriesName = ARGS.name;\n}\n\nfor (var i = 0; i &lt; rows; i++) {\n\n  dashboard.rows.push({\n    title: 'Scripted Graph ' + i,\n    height: '300px',\n    panels: [\n      {\n        title: 'Events',\n        type: 'graph',\n        span: 12,\n        fill: 1,\n        linewidth: 2,\n        targets: [\n          {\n            'target': \"randomWalk('\" + seriesName + \"')\"\n          },\n          {\n            'target': \"randomWalk('random walk2')\"\n          }\n        ],\n      }\n    ]\n  });\n\n}\n\nreturn dashboard;\n</code></pre>"},{"location":"dashboard/grafana/reference/scripting/#more-examples","title":"More examples","text":"<p>You can find more examples in <code>public/dashboards/</code> directory of your grafana installation.</p>"},{"location":"dashboard/grafana/reference/search/","title":"Dashboard Search","text":"<p>Dashboards can be searched by the dashboard name, filtered by one (or many) tags or filtered by starred status. The dashboard search is accessed through the dashboard picker, available in the dashboard top nav area.</p> <p></p> <ol> <li><code>Dashboard Picker</code>: The Dashboard Picker is your primary navigation tool to move between dashboards. It is present on all dashboards, and open the Dashboard Search. The dashboard picker also doubles as the title of the current dashboard.</li> <li><code>Search Bar</code>: The search bar allows you to enter any string and search both database and file based dashboards in real-time.</li> <li><code>Starred</code>: The starred link allows you to filter the list to display only starred dashboards.</li> <li><code>Tags</code>: The tags filter allows you to filter the list by dashboard tags.</li> </ol> <p>When using only a keyboard, you can use your keyboard arrow keys to navigate the results, hit enter to open the selected dashboard.</p>"},{"location":"dashboard/grafana/reference/search/#find-by-dashboard-name","title":"Find by dashboard name","text":"<p>To search and load dashboards click the open folder icon in the header or use the shortcut <code>CTRL</code>+<code>F</code>. Begin typing any part of the desired dashboard names. Search will return results for for any partial string match in real-time, as you type.</p> <p>Dashboard search is: - Real-time - Not case sensitive - Functional across stored and file based dashboards.</p>"},{"location":"dashboard/grafana/reference/search/#filter-by-tags","title":"Filter by Tag(s)","text":"<p>Tags are a great way to organize your dashboards, especially as the number of dashboards grow. Tags can be added and managed in the dashboard <code>Settings</code>.</p> <p>To filter the dashboard list by tag, click on any tag appearing in the right column. The list may be further filtered by clicking on additional tags:</p> <p></p> <p>Alternately, to see a list of all available tags, click the tags link in the search bar. All tags will be shown, and when a tag is selected, the dashboard search will be instantly filtered:</p> <p></p> <p>When using only a keyboard: <code>tab</code> to focus on the tags link, <code>\u25bc</code> down arrow key to find a tag and select with the <code>Enter</code> key.</p> <p>Note: When multiple tags are selected, Grafana will show dashboards that include all.</p>"},{"location":"dashboard/grafana/reference/search/#filter-by-starred","title":"Filter by Starred","text":"<p>Starring is a great way to organize and find commonly used dashboards. To show only starred dashboards in the list, click the starred link in the search bar:</p> <p></p> <p>When using only a keyboard: <code>tab</code> to focus on the stars link, <code>\u25bc</code> down arrow key to find a tag and select with the <code>Enter</code> key.</p>"},{"location":"dashboard/grafana/reference/sharing/","title":"Sharing features","text":"<p>Grafana provides a number of ways to share a dashboard or a specific panel to other users within your organization. It also provides ways to publish interactive snapshots that can be accessed by external partners.</p>"},{"location":"dashboard/grafana/reference/sharing/#share-dashboard","title":"Share dashboard","text":"<p>Share a dashboard via the share icon in the top nav. This opens the share dialog where you can get a link to the current dashboard with the current selected time range and template variables. If you have made changes to the dashboard, make sure those are saved before sending the link.</p>"},{"location":"dashboard/grafana/reference/sharing/#dashboard-snapshot","title":"Dashboard snapshot","text":"<p>A dashboard snapshot is an instant way to share an interactive dashboard publicly. When created, we strip sensitive data like queries (metric, template and annotation) and panel links, leaving only the visible metric data and series names embedded into your dashboard. Dashboard snapshots can be accessed by anyone who has the link and can reach the URL.</p> <p></p>"},{"location":"dashboard/grafana/reference/sharing/#publish-snapshots","title":"Publish snapshots","text":"<p>You can publish snapshots to you local instance or to snapshot.raintank.io. The later is a free service that is provided by Raintank that allows you to publish dashboard snapshots to an external grafana instance. The same rules still apply, anyone with the link can view it. You can set an expiration time if you want the snapshot to be removed after a certain time period.</p>"},{"location":"dashboard/grafana/reference/sharing/#share-panel","title":"Share Panel","text":"<p>Click a panel title to open the panel menu, then click share in the panel menu to open the Share Panel dialog. Here you have access to a link that will take you to exactly this panel with the current time range and selected template variables. You also get a link to service side rendered PNG of the panel. Useful if you want to share an image of the panel. Please note that for OSX and Windows, you will need to ensure that a <code>phantomjs</code> binary is available under <code>vendor/phantomjs/phantomjs</code>. For Linux, a <code>phantomjs</code> binary is included - however, you should ensure that any requisite libraries (e.g. libfontconfig) are available.</p>"},{"location":"dashboard/grafana/reference/sharing/#embed-panel","title":"Embed Panel","text":"<p>You can embed a panel using an iframe on another web site. This tab will show you the html that you need to use.</p> <p>Example:</p> <pre><code>&lt;iframe src=\"http://snapshot.raintank.io/dashboard/solo/snapshot/UtvRYDv650fHOV2jV5QlAQhLnNOhB5ZN?panelId=4&amp;fullscreen&amp;from=1427385145990&amp;to=1427388745990\" width=\"650\" height=\"300\" frameborder=\"0\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Below there should be an interactive Grafana graph embedded in an iframe:</p>"},{"location":"dashboard/grafana/reference/templating/","title":"Templating","text":"<p>Dashboard Templating allows you to make your Dashboards more interactive and dynamic.</p> <p>They\u2019re one of the most powerful and most used features of Grafana, and they\u2019ve recently gotten even more attention in Grafana 2.0 and Grafana 2.1.</p> <p>You can create Dashboard Template variables that can be used practically anywhere in a Dashboard: data queries on individual Panels (within the Query Editor), the names in your legends, or titles in Panels and Rows.</p> <p>You can configure Dashboard Templating by clicking the dropdown cog on the top of the Dashboard while viewing it.</p>"},{"location":"dashboard/grafana/reference/templating/#variable-types","title":"Variable types","text":"<p>There are three different types of Template variables: query, custom, and interval.</p> <p>They can all be used to create dynamic variables that you can use throughout the Dashboard, but they differ in how they get the data for their values.</p>"},{"location":"dashboard/grafana/reference/templating/#query","title":"Query","text":"<p>Note: The Query type is Data Source specific. Please consult the appropriate documentation for your particular Data Source.</p> <p>Query is the most common type of Template variable. Use the <code>Query</code> template type to generate a dynamic list of variables, simply by allowing Grafana to explore your Data Source metric namespace when the Dashboard loads.</p> <p>For example a query like <code>prod.servers.*</code> will fill the variable with all possible values that exists in that wildcard position (in the case of the Graphite Data Source).</p> <p>You can even create nested variables that use other variables in their definition. For example <code>apps.$app.servers.*</code> uses the variable $app in its own query definition.</p> <p>You can utilize the special ** All ** value to allow the Dashboard user to query for every single Query variable returned. Grafana will automatically translate ** All ** into the appropriate format for your Data Source.</p>"},{"location":"dashboard/grafana/reference/templating/#multi-select","title":"Multi-select","text":"<p>As of Grafana 2.1, it is now possible to select a subset of Query Template variables (previously it was possible to select an individual value or 'All', not multiple values that were less than All). This is accomplished via the Multi-Select option. If enabled, the Dashboard user will be able to enable and disable individual variables.</p> <p>The Multi-Select functionality is taken a step further with the introduction of Multi-Select Tagging. This functionality allows you to group individual Template variables together under a Tag or Group name.</p> <p>For example, if you were using Templating to list all 20 of your applications, you could use Multi-Select Tagging to group your applications by function or region or criticality, etc.</p> <p>Note: Multi-Select Tagging functionality is currently experimental but is part of Grafana 2.1. To enable this feature click the enable icon when editing Template options for a particular variable.</p> <p></p> <p>Grafana gets the list of tags and the list of values in each tag by performing two queries on your metric namespace.</p> <p>The Tags query returns a list of Tags.</p> <p>The Tag values query returns the values for a given Tag.</p> <p>Note: a proof of concept shim that translates the metric query into a SQL call is provided. This allows you to maintain your tag:value mapping independently of your Data Source.</p> <p>Once configured, Multi-Select Tagging provides a convenient way to group and your template variables, and slice your data in the exact way you want. The Tags can be seen on the right side of the template pull-down.</p> <p></p>"},{"location":"dashboard/grafana/reference/templating/#interval","title":"Interval","text":"<p>Use the <code>Interval</code> type to create Template variables around time ranges (eg. <code>1m</code>,<code>1h</code>, <code>1d</code>). There is also a special <code>auto</code> option that will change depending on the current time range, you can specify how many times the current time range should be divided to calculate the current <code>auto</code> range.</p> <p></p>"},{"location":"dashboard/grafana/reference/templating/#custom","title":"Custom","text":"<p>Use the <code>Custom</code> type to manually create Template variables around explicit values that are hard-coded into the Dashboard, and not dependent on any Data Source. You can specify multiple Custom Template values by separating them with a comma.</p>"},{"location":"dashboard/grafana/reference/templating/#repeating-panels-and-repeating-rows","title":"Repeating Panels and Repeating Rows","text":"<p>Template Variables can be very useful to dynamically change what you're visualizing on a given panel. Sometimes, you might want to create entire new Panels (or Rows) based on what Template Variables have been selected. This is now possible in Grafana 2.1.</p> <p>Once you've got your Template variables (of any type) configured the way you'd like, check out the Repeating Panels and Repeating Row documentation</p>"},{"location":"dashboard/grafana/reference/templating/#screencast-templated-graphite-queries","title":"Screencast - Templated Graphite Queries","text":""},{"location":"dashboard/grafana/reference/timerange/","title":"Time Range Controls","text":"<p>Grafana provides numerous ways to manage the time ranges of the data being visualized, both at the Dashboard-level and the Panel-level.</p> <p></p> <p>In the top right, you have the master Dashboard time picker (it's in between the 'Zoom out' and the 'Refresh' links).</p> <ol> <li><code>Current time range &amp; refresh interval</code>: This shows the current dashboard time and refresh interval. It also acts as the menu button to toggle the time range controls.</li> <li><code>Quick ranges</code>: Quick ranges are preset values to choose a relative time. At this time, quick ranges are not configurable, and will appear on every dashboard.</li> <li><code>Time range</code>: The time range section allows you to mix both explicit and relative ranges. The explicit time range format is <code>YYYY-MM-DD HH:MM:SS</code></li> <li><code>Refreshing every:</code> When enabled, auto-refresh will reload the dashboard at the specified time range. Auto-refresh is most commonly used with relative time ranges ending in <code>now</code>, so new data will appear when the dashboard refreshes.</li> </ol> <p>These settings apply to all Panels in the Dashboard (except those with Panel Time Overrides enabled)</p>"},{"location":"dashboard/grafana/reference/timerange/#time-units","title":"Time Units","text":"<p>The following time units are supported: <code>s (seconds)</code>, <code>m (minutes)</code>, <code>h (hours)</code>, <code>d (days)</code>, <code>w (weeks)</code>, <code>M (months)</code>, <code>y (years)</code>. The minus operator allows you to step back in time, relative to now. If you wish to display the full period of the unit (day, week, month, etc...), append <code>/$unit</code> to the end.</p> <p>Take a look at some examples to seen these concepts in practice:</p> Example Relative Range From: To: Last 5 minutes <code>now-5m</code> <code>now</code> The day so far <code>now/d</code> <code>now</code> This week <code>now/w</code> <code>now/w</code> Week to date <code>now/w</code> <code>now</code> Previous Month <code>now-1M/M</code> <code>now-1M/M</code>"},{"location":"dashboard/grafana/reference/timerange/#dashboard-level-time-picker-settings","title":"Dashboard-Level Time Picker Settings","text":"<p>There are two settings available from the Dashboard Settings area, allowing customization of the auto-refresh intervals and the definition of <code>now</code>.</p> <p></p>"},{"location":"dashboard/grafana/reference/timerange/#auto-refresh-options","title":"Auto-Refresh Options","text":"<p>It's possible to customize the options displayed for relative time and the auto-refresh options.</p> <p>From Dashboard settings, click the Timepicker tab. From here you can specify the relative and auto-refresh intervals. The Timepicker tab settings are saved on a per Dashboard basis.  Entries are comma separated and accept any valid time unit.</p>"},{"location":"dashboard/grafana/reference/timerange/#defining-now","title":"Defining Now","text":"<p>Users often ask, when will then be now? Grafana offers the ability to override the <code>now</code> value on a per dashboard basis. Most commonly, this feature is used to accommodate known delays in data aggregation to avoid null values.</p>"},{"location":"dashboard/grafana/reference/timerange/#panel-time-overrides-timeshift","title":"Panel time overrides &amp; timeshift","text":"<p>You can override the relative time range for individual panels, causing them to be different than what is selected in the Dashboard time picker in the upper right. This allows you to show metrics from different time periods or days at the same time.</p> <p></p> <p>You control these overrides in panel editor mode and the tab <code>Time Range</code>.</p> <p></p> <p>When you zoom or change the Dashboard time to a custom absolute time range, all panel overrides will be disabled. The panel relative time override is only active when the dashboard time is also relative. The panel timeshift override is always active, even when the dashboard time is absolute.</p> <p>The <code>Hide time override info</code> option allows you to hide the override info text that is by default shown in the upper right of a panel when overridden time range options.</p> <p>Note: You can only override the dashboard time with relative time ranges. Absolute time ranges are not available.</p>"},{"location":"dashboard/grafana/tutorials/ha_setup/","title":"How to setup Grafana for high availability","text":"<p>Alerting does not support high availability yet.</p> <p>Setting up Grafana for high availability is fairly simple. It comes down to two things:</p> <ul> <li>Use a shared database for multiple grafana instances.</li> <li>Consider how user sessions are stored.</li> </ul>"},{"location":"dashboard/grafana/tutorials/ha_setup/#configure-multiple-servers-to-use-the-same-database","title":"Configure multiple servers to use the same database","text":"<p>First you need to do is to setup mysql or postgres on another server and configure Grafana to use that database. You can find the configuration for doing that in the [database] section in the grafana config. Grafana will now persist all long term data in the database.  It also worth considering how to setup the database for high availability but thats outside the scope of this guide.</p>"},{"location":"dashboard/grafana/tutorials/ha_setup/#user-sessions","title":"User sessions","text":"<p>The second thing to consider is how to deal with user sessions and how to balance the load between servers.  By default Grafana stores user sessions on disk which works fine if you use <code>sticky sessions</code> in your load balancer.  Grafana also supports storing the session data in the database, redis or memcache which makes it possible to use round robin in your load balancer.  If you use mysql/postgres for session storage you first need a table to store the session data in. More details about that in [sessions] </p> <p>For Grafana itself it doesn't really matter if you store your sessions on disk or database/redis/memcache. But we suggest that you store the session in redis/memcache since it makes it easier to add/remote instances from the group. </p>"},{"location":"dashboard/grafana/tutorials/ha_setup/#alerting","title":"Alerting","text":"<p>Currently alerting does not support high availability. But this is something that we will be working on in the future. </p>"},{"location":"javascript/actions_objects_functions/","title":"WebLOAD Actions, Objects, and Functions","text":"<p>This chapter includes syntax specifications for the objects, properties, methods, and functions most useful for users who wish to program the code within their JavaScript scripts. To simplify and clarify the information presented, this chapter begins with a brief introduction to the concept of the basic Document Object Model, or DOM, upon which most website implementations are based. After this basic introduction, the rest of the chapter consists of reference entries for each item, arranged in alphabetical order.</p>"},{"location":"javascript/actions_objects_functions/#acceptencodinggzip-property","title":"AcceptEncodingGzip (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Sets the wlGlobals.AcceptEncodingGzip flag, which enables Gzip support. For each request, WebLOAD sends the header \u201cAccept-Encoding: gzip, deflate\u201d. This tells the server that the client can accept zipped content. As most servers will work correctly even if the client does not send the \u201cAccept-Encoding: gzip, deflate\u201d header, it is recommended not to set the wlGlobals.AcceptEncodingGzip flag because it is performance heavy. However, some servers will fail if it is not sent. The default value of AcceptEncodingGzip is false.</p> <p>You may want to test your application in GZIP mode in the following cases:</p> <ul> <li>The server only works in GZIP mode and rejects any requests that do not enable GZIP mode.</li> <li>GZIP is enabled and the server supports non-GZIP requests. A non-GZIP request means that the web server does less work, but places more stress on the network for large responses. This is acceptable if you are testing a back end server.</li> </ul> <p>However, if you realistically want to test an end-to-end system, enable GZIP support.</p> <p>GUI mode</p> <p>In WebLOAD Recorder, select or deselect the GZip Support checkbox in the Browser Parameters tab of the Default or Current Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Console, select or deselect the GZip Support checkbox in the Browser Parameters tab of the Default or Current Options dialog box or the Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Example</p> <p><code>a.AcceptEncodingGZip = true</code></p> <p>See also</p> <ul> <li>HTTP Components</li> </ul>"},{"location":"javascript/actions_objects_functions/#acceptlanguage-property","title":"AcceptLanguage (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Sets the wlGlobals.AcceptLanguage flag, which defines a global value for the AcceptLanguage header. Some applications/servers will behave differently depending on this setting. The AcceptLanguage flag is a simple string and WebLOAD does not enforce any checks on the values assigned to it.</p> <p>Example</p> <p><code>wlGlobals.AcceptLanguage = \u201cEn-us\u201d</code></p> <p>GUI mode</p> <p>In WebLOAD Recorder, select or deselect the Accept Language checkbox in the HTTP Parameters tab of the Default or Current Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Console, select or deselect the Accept Language checkbox in the HTTP Parameters tab of the Default or Current Options dialog box or the Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>Some Asian sites check the AcceptLanguage property, and, if they think the client is working in English, the flow might not be exactly as recorded.</p>"},{"location":"javascript/actions_objects_functions/#action-property","title":"action (property)","text":"<p>Property of Object</p> <ul> <li>form (see form (object) )</li> </ul> <p>Description</p> <p>Specifies the URL to which the form contents are to be sent for processing (read-only string).</p> <p>Example</p> <p><code>Document.forms[0].action</code></p>"},{"location":"javascript/actions_objects_functions/#add-method","title":"Add() (method)","text":"<p>Method of Objects</p> <ul> <li>wlGeneratorGlobal (see wlGeneratorGlobal (object) )</li> <li>wlSystemGlobal (see wlsystemglobal (object) )</li> </ul> <p>Description</p> <p>Adds the specified number value to the specified shared integer variable.</p> <p>Syntax</p> <p><code>Add(\u201cSharedIntVarName\u201d, number, ScopeFlag)</code></p> <p>Parameters</p> Parameter Name Description SharedIntVarName The name of a shared integer variable to be  incremented. number An integer with the amount to add to the  specified variable. ScopeFlag One of two flags, <code>WLCurrentAgenda</code> or WLAllAgendas, signifying the scope of  the shared variable.  When used as a method of the wlGeneratorGlobal object: <p></p> - The <code>WLCurrentAgenda</code> scope flag signifies variable values that you wish  to share between all threads of a single script, part of a single process,  running on a single Load Generator.  <p></p>  - The <code>WLAllAgendas</code> scope flag signifies variable values that you wish to share between all threads of  one or more scripts, common to a single spawned process, running on a single  Load Generator. <p></p> When used as a method of the <code>wlSystemGlobal</code> object:  <p></p> - The <code>WLCurrentAgenda</code> scope flag signifies  variable values that you wish to share between all threads of a single  script, potentially shared by multiple processes, running on multiple Load Generators, system wide.  <p></p> - The WLAllAgendas scope flag signifies  variable values that you wish to share between all threads of all scripts,  run by all processes, on all Load  Generators, system-wide. <p>Example</p> <p><code>wlGeneratorGlobal.Add(\u201cMySharedCounter\u201d, 5, WLCurrentAgenda)</code></p> <p><code>wlSystemGlobal.Add(\u201cMyGlobalCounter\u201d, 5, WLCurrentAgenda)</code></p> <p>See also</p> <ul> <li>Get() (see Get() (addition method) )</li> <li>Set() (see Set() (addition method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#authtype-property","title":"AuthType (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Specifies the authentication method to be used by the server: Kerberos or NTLM. The default value is NTLM.</p> <p>Note: The AuthType property is only relevant for playback.</p> <p>Example</p> <p><code>wlGlobals.AuthType = \u201cKerberos\u201d</code></p> <p>GUI mode</p> <p>To set the authentication method to be used by the server:</p> <ul> <li>In WebLOAD Console, select the authentication method in the Authentication tab of the Default, Current Session, or Script Options dialog box, accessed from the Tools tab of the ribbon.</li> <li>In WebLOAD Recorder, select the authentication method in the Authentication tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</li> </ul> <p>Comment</p> <p>If the <code>AuthType</code> property was set to \u201cKerberos\u201d and the server does not support Kerberos, WebLOAD will automatically change the authentication method to \u201cNTLM\u201d.</p> <p>See also</p> <ul> <li>KDCServer() (see KDCServer (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#async-property","title":"Async (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> <li>wlGlobals</li> </ul> <p>Description</p> <p>Causes the HTTP request to be asynchronous.</p> <p>The possible values of wlHttp.Async are:</p> <ul> <li>false \u2013 the following HTTP command is synchronous (default).</li> <li>true \u2013 the following HTTP command is asynchronous.</li> </ul> <p>When using asynchronous requests, the script does not wait for the request to complete before moving on to the next statement. In order to work with the response, you need to specify one of the asynchronous callback functions \u2013 onDocumentComplete (property)  and/or onDataReceived (property).</p> <p>Example</p> <pre><code>wlHttp.Async = true;\nwlHttp.onDocumentComplete = function(document) {\n    InfoMessage(\u201cResponse \u201c + document.wlSource);\n}\nwlHttp.Get(\u201chttp://something\u201d);\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>onDocumentComplete (property) </li> <li>onDataReceived (property) </li> <li>The Using Asynchronous Requests chapter in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#begintransaction-function","title":"BeginTransaction() (function)","text":"<p>Description</p> <p>Use the <code>BeginTransaction()</code> and <code>EndTransaction()</code> functions to define the start and finish of a logical block of code that you wish to redefine as a single logical transaction unit. This enables setting timers, verification tests, and other measurements for this single logical unit.</p> <p>Optionally, you can specify a period of time, which is the minimum amount of time for the transaction to control pacing. If the total time of the transaction is less than the time period specified, the machine sleeps for the remainder of the time in order to simulate the intermittent activity of real users.</p> <p>Note: If the transaction fails, it still sleeps for the specified time interval. This is true even if an error not directly connected to the transaction is received, for example, HTTP 500 for a GET within the transaction.</p> <p>Syntax</p> <pre><code>BeginTransaction(TransName, [SleepTime])\n\u2026\n  &lt;any valid JavaScript code&gt;\n\u2026\nEndTransaction(TransName,Verification,[SaveFlag])\n</code></pre> <p>Parameters</p> Parameter Name Description <code>TransName</code> The name assigned to this transaction, a  user-supplied string. <code>SleepTime</code> An integer value  specifying the interval of time (in milliseconds) for the minimum amount of  time for the transaction. . <p>Note: <code>BeginTransaction()</code> and <code>EndTransaction()</code> functions are usually accessed and inserted into script files directly through the WebLOAD Recorder. For example, the following figure illustrates a section in the Script Tree bracketed by BeginTransaction and EndTransaction nodes. The EndTransaction node is highlighted in the Script Tree.</p> <p></p> <p>To mark the beginning of a transaction, drag the Begin Transaction  icon from the Load toolbox into the Script Tree, directly above the first action you want to include in the transaction. The Begin Transaction dialog box opens. For additional information about the <code>BeginTransaction()</code> function, refer to Begin and End Transaction in the WebLOAD Recorder User\u2019s Guide.</p> <p>See also</p> <ul> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>Transaction Verification Components </li> <li>TransactionTime (see TransactionTime (property) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined) (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#cell-object","title":"cell (object)","text":"<p>Property of Objects</p> <p><code>cell</code> objects are grouped into collections of <code>cells</code>. The <code>cells</code> collection is a property of the following objects:</p> <ul> <li>row (see row (object) )</li> <li>wlTables (see wlTables (object) )</li> </ul> <p>Description</p> <p>A <code>cell</code> object contains all the data found in a single table cell. If the <code>cells</code> collection is a property of a <code>wlTables</code> object, then the collection refers to all the cells in a particular table. If the <code>cells</code> collection is a property of a <code>row</code> object, then the collection refers to all the cells in a particular row. Individual <code>cell</code> objects may be addressed by index number, similar to any object within a collection.</p> <p>Syntax</p> <p>Individual <code>cell</code> objects may be addressed by index number, similar to any object within a collection. For example, to access a property of the 16th cell in <code>myTable</code>, counting across rows and with the first cell indexed at 0, you could write:</p> <p><code>document.wlTables.myTable.cells[15].&lt;cell-property&gt;</code></p> <p>If you are working directly with the cells in a <code>wlTables</code> object, as opposed to the cells within a single <code>row</code> object, you may also specify a range of cells from anywhere within the table using the standard spreadsheet format. Specify a group of cells using a string with the following format:</p> <ul> <li>Use letters to indicate columns, starting with the letter A to represent the first column.</li> <li>Use numbers to indicate rows, starting with the number 1 to represent the first column.</li> </ul> <p>Note: This is not typical-the standard JavaScript index begins at 0 to represent the first element in a set.</p> <p>Example</p> <p>For cells within a wlTables object:</p> <p><code>document.wlTables.myTable.cells[\u201cA1:C3\u201d]</code></p> <p>In this example, the string <code>\u201cA1:C3\u201d</code> includes all cells from the first column of the first row up to the third column in the third row, reading across rows. This means that the first cell read is in the first column of the first row, the second cell read is in the second column of the first row, the third cell read is in the third column of the first row, and so on until the end of the first row. If the table includes eight columns, then the ninth cell read will be in the first column of the second row, and so on.</p> <p>For cells within a row object:</p> <p>To access a property of the 4th cell in the 3rd row in <code>myTable</code>, counting across rows and with the first cell indexed at 0, you could write:</p> <p><code>document.wlTables.myTable.rows[2].cells[3].&lt;cell-property&gt;</code></p> <p>Note: Individual table cells often are merged and span multiple rows. In such a case, the cell will only appear in the collection for the first of the set of rows that the cell spans.</p> <p>Properties</p> <p>Each <code>cell</code> object contains information about the data found in one cell of a table. The <code>cell</code> object includes the following properties:</p> <ul> <li>cellIndex (see cellIndex (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>tagName (see tagName (property) )</li> </ul> <p>Comment</p> <p><code>cell</code> is often accessed through the <code>wlTables</code> family of table, row, and cell objects.</p> <p>See also</p> <ul> <li> <p>cellIndex *Collections </p> </li> <li> <p>InnerHTML (see InnerHTML (property) ) (cell property)</p> </li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>row (see row (object) ) (#wltables-property)</li> <li>rowIndex (see rowIndex (property) ) (row property)</li> <li>tagName (see tagName (property) ) (cell property)</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#cellindex-property","title":"cellIndex (property)","text":"<p>Property of Object</p> <ul> <li>cell (see cell (object) )</li> </ul> <p>Description</p> <p>An integer containing the ordinal index number of this <code>cell</code> object within the parent table or row. Cells are indexed starting from zero, so the <code>cellIndex</code> of the first cell in a table or row is 0.</p> <p>Comment</p> <p><code>cellIndex</code> is a member of the <code>wlTables</code> family of table, row, and cell objects.</p> <p>See also</p> <ul> <li>cell</li> <li>Collections </li> <li>cols (see [cols (property) ] (wltables-property)</li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>row (see row (object) ) (wlTables property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>tagName (see tagName (property) ) (cell property)</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#charencoding-property","title":"CharEncoding (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Contains the value corresponding to the character set being used. The default value is Default (0), the regional settings of the computer. For a complete list of the supported character sets, see WebLOAD\u2013supported Character Sets </p> <p>Example</p> <p>If you want to specify that you are using Japanese (EUC), set the value of CharEncoding as follows:</p> <p><code>wlGlobals.CharEncoding = 51932</code></p> <p>GUI Mode</p> <p>In WebLOAD Console, select a character set in Character Encoding list box in the Browser Parameters tab of the Default Options or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, select a character set in the Character Encoding list box in the Browser Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>EnforceCharEncoding (see EnforceCharEncoding (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#checked-property","title":"checked (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> </ul> <p>Description</p> <p>For an <code>&lt;INPUT type=\"checkbox\"&gt;</code> or <code>&lt;INPUT type=\"radio\"&gt;</code> element, the checked property indicates whether the element has the HTML checked attribute, that is, whether the element is selected. The property has a value of true if the element has the checked attribute, or false otherwise (read-only).</p>"},{"location":"javascript/actions_objects_functions/#clearall-method","title":"ClearAll() (method)","text":"<p>Method of Object</p> <ul> <li>wlCookie (see wlCookie (object) ))</li> </ul> <p>Description</p> <p>Delete all cookies set by wlCookie in the current thread.</p> <p>Syntax</p> <p>wlCookie.ClearAll()</p>"},{"location":"javascript/actions_objects_functions/#clearcookiesatendofround-property","title":"ClearCookiesAtEndOfRound (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Indicates whether to clear the cookies at the end of each round. The default value of ClearCookiesAtEndOfRound is true. By setting this flag to false, the cookies list will not be cleared at the end of each round.</p> <p>Example</p> <p><code>wlGlobals.ClearCookiesAtEndOfRound = false</code></p>"},{"location":"javascript/actions_objects_functions/#cleardnscache-method","title":"ClearDNSCache() (method)","text":"<p>Method of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Clear the IP address cache.</p> <p>Syntax</p> <p><code>wlHttp.ClearDNSCache()</code></p> <p>GUI mode</p> <p>In WebLOAD Console, disable caching for the Load Generator or for the Probing</p> <p>Client during a test session by clearing the appropriate box in the Browser Parameters tab of the Default, Current Session Options or Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, disable caching during execution by clearing the appropriate box in the Browser Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>To enable or disable DNS caching, set the DNSUseCache (see DNSUseCache (property)) property.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ClearSSLCache() (see ClearSSLCache() (method) )</li> <li>DNSUseCache (see DNSUseCache (property) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#clearsslcache-method","title":"ClearSSLCache() (method)","text":"<p>Method of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Clear the SSL decoding-key cache.</p> <p>Syntax</p> <p><code>wlHttp.ClearSSLCache()</code></p> <p>GUI mode</p> <p>In WebLOAD Console, disable the SSL cache for the Load Generator or for the Probing</p> <p>Client during a test session by clearing the appropriate box in the Browser Parameters tab of the Default, Current Session Options or Script Options dialog box, accessed from the Tools tab of the ribbon..</p> <p>In WebLOAD Recorder, disable the SSL cache during execution by clearing the appropriate box in the Browser Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon..</p> <p>Comment</p> <p>To enable or disable SSL caching, set the SSLUseCache (see SSLUseCache (property) ) property.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ClearDNSCache() (see ClearDNSCache() (method) )</li> <li>DNSUseCache (see DNSUseCache (property) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#clientnum-property","title":"ClientNum (property)","text":"<p>Description</p> <p><code>ClientNum</code> is set to the serial number of the client in the WebLOAD test configuration. <code>ClientNum</code> is a read-only local property. Each client in a Load Generator has a unique <code>ClientNum</code>. However, two clients in two different Load Generators may have the same <code>ClientNum</code>.</p> <p>Note: While <code>ClientNum</code> is unique within a single Load Generator, it is not unique system wide. Use VCUniqueID() (see VCUniqueID() (function) ) to obtain an ID number which is unique system-wide.</p> <p>If there are N clients in a Load Generator, the clients are numbered 0, 1, 2, ..., N-1. You can access <code>ClientNum</code> anywhere in the local context of the Script (InitClient(), main script, TerminateClient(), etc.). <code>ClientNum</code> does not exist in the global context (<code>InitAgenda()</code>, TerminateAgenda(), etc.).</p> <p>If you mix Scripts within a single Load Generator, instances of two or more Scripts may run simultaneously on each client. Instances on the same client have the same <code>ClientNum</code> value.</p> <p><code>ClientNum</code> reports only the main client number. It does not report any extra threads spawned by a client to download nested images and frames (see LoadGeneratorThreads (property) ).</p> <p>Comment</p> <p>Earlier versions of WebLOAD referred to this value as ThreadNum. The variable name <code>ThreadNum</code> will still be recognized for backward compatibility.</p> <p>GUI mode</p> <p>WebLOAD recommends accessing global system variables, including the <code>ClientNum</code> identification property, through the WebLOAD Recorder. The variables that appear in this list are available for use at any point in a script file. In the WebLOAD Recorder main window, click Variable Windows in the Debug tab of the ribbon..</p> <p>For example, it is convenient to add <code>ClientNum</code> to a Message Node to clarify which client sent the messages that appear in the WebLOAD Console Log window.</p> <p></p> <p>See also</p> <ul> <li>GeneratorName() (see GeneratorName() (function) )</li> <li>GetOperatingSystem() (see GetOperatingSystem() (function) )</li> <li>Identification Variables and Functions </li> <li>RoundNum (see RoundNum (variable) )</li> <li>ThreadNum (see ThreadNum() (property) )</li> <li>VCUniqueID() (see VCUniqueID() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#close-function","title":"Close() (function)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul> <p>Description</p> <p>Closes an open file. When called as a method of the <code>wlOutputFile</code> object, closes the open output file being managed by that object.</p> <p>Syntax</p> <p>Function call:</p> <p><code>Close(filename)</code></p> <p>wlOutputFile method:</p> <p><code>wlOutputFile.Close()</code></p> <p>Parameters</p> Parameter  Name Description Function  call: <code>Filename</code> A string with the name of the ASCII output file to  be closed. wlOutputFile  method: No parameter is necessary  when this function is called as a method of the wlOutputFile object, since  the file to be closed is already known. <p>Example</p> <p>Function call:</p> <p><code>Close(MyFavoriteFile)</code></p> <p>wlOutputFile method:</p> <p><code>MyFileObj = new wlOutputFile(*filename*)</code></p> <p><code>\u2026</code></p> <p><code>MyFileObj.Close()</code></p> <p>Comment</p> <p>When you use the <code>Close()</code> function to close a file, data will be flashed to the disk.</p> <p>See also</p> <ul> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile (see wlOutputFile (object) )</li> <li>wlOutputFile() (see wlOutputFile (object) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#closeconnection-method","title":"CloseConnection() (method)","text":"<p>Method of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>Closes all open connections. If <code>CloseConnection()</code> is not called, all connections that were opened with the KeepAlive option (see KeepAlive (property) ) remain open until the end of the round. HTTP connections are automatically closed at the end of each round.</p> <p>Syntax</p> <p><code>wlHttp.CloseConnection()</code></p> <p>GUI mode</p> <p>WebLOAD recommends maintaining or closing connections through the WebLOAD</p> <p>Console. Enable maintaining connections for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default Options dialog box, accessed from the Tools tab of the ribbon..</p> <p>In WebLOAD Console, enable maintaining connections for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default Options or Current Session Options dialog box, accessed from the Tools tab of the ribbon..</p> <p>In WebLOAD Recorder, enable maintaining connections during execution by checking the appropriate box in the Browser Parameters tab of the Tools \u0086 Default or Current Project Options dialog box.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>KeepAlive (see KeepAlive (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#closeconnectionsatendofround-property","title":"CloseConnectionsAtEndOfRound  (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Indicates whether to close the connections at the end of each round. The default value of ClearCookiesAtEndOfRound is true, connections are closed between rounds. By setting this flag to false, the connections will be reused.</p> <p>Example</p> <pre><code>wlGlobals.CloseConnectionsAtEndOfRound  = false\n</code></pre>"},{"location":"javascript/actions_objects_functions/#cols-property","title":"cols (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> <li>wlTables (see wlTables (object) )</li> </ul> <p>Description</p> <p>When working with <code>wlTables</code> objects, an integer containing the number of columns in this table. The column number is taken from the COLS attribute in the <code>&lt;TABLE&gt;</code> tag. This property is optional. If the table does not have a COLS attribute then the value is undefined. When working with <code>element</code> objects of type <code>TextArea</code>, an integer containing the number of columns in this TextArea.</p> <p>Comment</p> <p><code>cols</code> is often accessed through the <code>wlTables</code> family of table, row, and cell objects.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>row (see row (object) ) (wlTables property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>tagName (see tagName (property) ) (cell property)</li> </ul>"},{"location":"javascript/actions_objects_functions/#connecttimeout-property","title":"ConnectTimeout (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>ConnectTimeout is used to set the amount of time the system will wait for an HTTP connection to be established before timing out. The ConnectTimeout property is defined in milliseconds. Use the ConnectTimeout property to fine tune the Load Generator performance.</p> <p>Example</p> <pre><code>wlGlobals.ConnectTimeout = 7\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#connectionspeed-property","title":"ConnectionSpeed (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>WebLOAD allows users to simulate various system and connection configurations, including setting a \u2018virtual limit\u2019 on the connection speed available during a test session. Obviously, the speed of the connection to a website is an important factor in the response time seen by users. Setting a limit on the connection speed during a test session allows testers working with higher-speed connections within their own labs to test systems for clients that may be limited in their own workplace connection speeds.</p> <p>By default, WebLOAD will work with the fastest available connection speed. Testers may set the connection speed to any slower value, measured in bits per second (bps). For example, users may set values of 14,400 bps, 28,800 bps, etc.</p> <p>Note: The typical single ISDN line can carry 64 Kb, a double line carries 128 Kb, and a T1 line can handle 1.5 Mb.</p> <p>Syntax</p> <p>You may assign a connection speed using the wlGlobals.ConnectionSpeed property. For example:</p> <pre><code>InitAgenda()\n{\n  wlGlobals.ConnectionSpeed=28800\n}\n// main Script body\nwlHttp.Get(\"http://abcdef\")\nSleep(1000)\n</code></pre> <p>GUI mode</p> <p>WebLOAD recommends setting the connection speed through the WebLOAD Console. You may set different connection speed limits for both the Load Generator and the Probing Client through the checkboxes on the Connection tab of the Default Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#content-property","title":"content (property)","text":"<p>Property of Object</p> <ul> <li>wlMetas (see wlMetas (object) )</li> </ul> <p>Description</p> <p>Retrieves the value of the CONTENT attribute of the META tag (read-only string).</p> <p>Syntax</p> <p><code>wlMetas[index#].content</code></p> <p>Example</p> <p><code>document.wlMetas[0].content</code></p> <p>See also</p> <ul> <li>httpEquiv (see httpEquiv (property) )</li> <li>Name (see Name (property) )</li> <li>Url (see Url (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#contentlength-function","title":"ContentLength (function)","text":"<p>Description</p> <p>Verifies the content length of the service response.</p> <p>Syntax</p> <p><code>wlVerification.ContentLength(operator, length, severity)</code></p> <p>Parameters</p> Parameter  Name Description operator One  of the following mathematical operators: <p></p> &lt; - less than. <p></p> &gt; - greater than.  <p></p>  = - equal to. length The  expected length of the content in bytes. severity Possible values of this parameter are: <p></p> - <code>WLSuccess</code>. The transaction  terminated successfully.   <p></p> - <code>WLMinorError</code>. This specific  transaction failed, but the test session may continue as usual. The Script  displays a warning message in the Log window and continues execution from the next statement.   <p></p> - <code>WLError</code>. This specific  transaction failed and the current test  round was aborted. The Script displays an error message in the Log window and  begins a new round.   <p></p> - <code>WLSevereError</code>. This specific  transaction failed and the test  session must be stopped completely. The Script displays an error message in  the Log window and the Load Generator on  which the  error occurred is stopped. <p>Example</p> <p>The following code verifies that the page content length is equal to 120 bytes. In case of failure, WebLOAD displays a fatal error and stops the execution.</p> <p><code>wlVerification.ContentLength(\"=\" , 120, WLSevereError);</code></p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#contenttype-property","title":"ContentType (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Specifies the content type of the HTTP request.</p> <p>Example</p> <p><code>wlGlobals.ContentType = \u201ctext/html\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#converthiddenfieldsmethod","title":"ConvertHiddenFields(method)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Converts hidden fields to dynamic values. This is done by correlate the Script so it uses the dynamic value of the field, not the value recorded in the Script.</p> <p>The ConvertHiddenFields method takes the URL to be submitted via a Get or Post action and searches for it in the current DOM. This is done by looping over the document.form[] collection until it finds a form whose action matches the URL. It then loops over its elements[] collection. Each element whose type is \u201chidden\u201d is then inserted into the wlHttp.FormData collection, overriding any existing value. The recorded values are replaced by the dynamic values during playback.</p> <p>Note: ConvertHiddenFields cannot be accessed directly by the user. See the example in the Comment section below.</p> <p>Syntax</p> <p>Use</p> <p><code>SaveCurrentHiddenFields(url)</code></p> <p>after the page with the fields and specify the URL of the page.</p> <p>Comment</p> <p>Because the WebLOAD Recorder does not filter internal frames of a page, there are cases when the data required for the correlation will not be found in the DOM of the previous request.</p> <p>For example:</p> <p>The page you are working with is called frame1.html and is an internal frame of a page called page.html, which has four internal frames (frame1 - frame 4). You recorded a navigation to page.html and then submitted the form on frame1.html. Thus, your Script would appear as follows:</p> <pre><code>Get page.html \nGet frame1.html \nGet frame2.html \nGet frame3.html\nGet frame4.html\nPost the form from frame1.html\n</code></pre> <p>In order to correlate the data for the final Post, you need the document from frame1. The intervening Get\u2019s, however, will not enable you to get this document. Manually insert the SaveCurrentHiddenFields() method after frame1.html in this example. This method saves the hidden fields so that the automatic correlation can use it when needed.</p>"},{"location":"javascript/actions_objects_functions/#cookiedomain-property","title":"CookieDomain (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>When set to true, the client checks if the cookie domain matches the request domain during GET/POST. Use this property if you need to emulate the setting of client side cookies or modify server cookies on the client side.</p> <p>Note: This property can only be inserted manually.</p> <p>Example wlGlobals.CookieDomain = false See also</p> <ul> <li>CookieExpiration (see CookieExpiration (property) )</li> <li>CookiePath (see CookiePath (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#cookieexpiration-property","title":"CookieExpiration (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>When set to true, the client checks if the cookie expiration matches the system time during GET/POST. Use this property if you need to emulate the setting of client side cookies or modify server cookies on the client side.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.CookieExpiration = false</code></p> <p>See also</p> <ul> <li>CookieDomain (see CookieDomain (property) )</li> <li>CookiePath (see CookiePath (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#cookiepath-property","title":"CookiePath (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>When set to <code>true</code>, the client checks if the cookie path matches the request path during GET/POST. Use this property if you need to emulate the setting of client side cookies or modify server cookies on the client side.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.CookiePath = false</code></p> <p>See also</p> <ul> <li>CookieDomain (see CookieDomain (property) )</li> <li>CookieExpiration (see CookieExpiration (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#copyfile-function","title":"CopyFile() (function)","text":"<p>Description</p> <p>Copies files from a source file on the console to a destination file on the Load Generator. The destination file is either explicitly or automatically named. CopyFile can copy both text and binary data files.</p> <p>Syntax</p> <p><code>CopyFile(SrcFileName [, DestFileName])</code></p> <p>Parameters</p> Parameter Name Description <code>SrcFileName</code> A literal string or  variable containing the full literal name of the file to be copied. WebLOAD  assumes that the source file is located in the default directory specified in  the File Locations tab (User Copy Files entry) in theTools &gt; Global Options dialog box in the WebLOAD  Console or in the Tools &gt; Settings dialog box in the WebLOAD Recorder. For additional information about  the file\u2019s location, refer to Determining  the Included File Location in the WebLOAD  Scripting Guide. <code>DestFileName</code> An optional literal string  or variable containing the full literal name of the file into which the  source file will be copied. If the target parameter is omitted, WebLOAD will  copy the source file to the current directory and return the file name as the  return value of the <code>CopyFile</code> function. <p>Return Value</p> <p>Optionally, a string with the target file name, returned if the <code>DestFileName</code></p> <p>parameter is not specified.</p> <p>Example</p> <p>To copy the auxiliary file <code>src.txt</code>, located on the WebLOAD Console, to the destination file <code>dest.txt</code> on the current Load Generator, use the following command:</p> <pre><code>function InitAgenda() {\n    \u2026\n    CopyFile(\u201csrc.txt\u201d, \u201cdest.txt\u201d)\n    \u2026\n}\n</code></pre> <p>You may then access the file as usual in the main body of the Script. For example:</p> <p><code>DataArr = GetLine(\u201cdest.txt\u201d)</code></p> <p>It is convenient to specify only the <code>SrcFileName</code>. To copy the auxiliary file <code>file.dat</code>, located on the WebLOAD Console, to the current Load Generator, using a single file name:</p> <pre><code>function InitAgenda() {\n    \u2026\n    filename = CopyFile(\u201cfile.dat\u201d)\n    \u2026\n    }\n    \u2026\n    GetLine(filename)\n    \u2026\n</code></pre> <p>GUI mode</p> <p>Note: <code>CopyFile()</code> and <code>IncludeFile()</code> functions can be added directly to the code in a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>Comment</p> <p>WebLOAD does not create new directories, so any directories specified as target directories must already exist.</p> <p>The <code>CopyFile</code> command must be inserted in the <code>InitAgenda()</code> section of your JavaScript program.</p> <p>The load engine first looks for the file to be copied in the default User Copy Files directory. If the file is not there, the file request is handed over to WebLOAD, which searches for the file using the following search path order:</p> <ol> <li> <p>If a full path name has been hardcoded into the CopyFile command, the system searches the specified location. If the file is not found in an explicitly coded directory, the system returns an error code of File Not Found and will not search in any other locations.</p> <p>Note: It is not recommended to hardcode a full path name, since the Script will then not be portable between different systems. This is especially important for networks that use both UNIX and Windows systems.</p> </li> <li> <p>Assuming no hardcoded full path name in the Script code, the system looks for the file in the current working directory, the directory from which WebLOAD was originally executed.</p> </li> <li>Finally, if the file is still not found, the system searches for the file sequentially through all the directories listed in the File Locations tab.</li> </ol> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile (see wlOutputFile (object) )</li> <li>wlOutputFile() (see wlOutputFile (object) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#createdom-function","title":"CreateDOM() (function)","text":"<p>Description</p> <p><code>CreateDOM</code> functions return a complete Document Object Model (DOM) tree. You may compare this expected DOM to the actual DOM generated automatically as your JavaScript Script runs</p> <p>Note: WebLOAD uses an extended version of the standard DOM. For more information, see Understanding the WebLOAD DOM structure in the WebLOAD Scripting Guide.</p> <p>Syntax</p> <p><code>DOM = CreateDOM(HTMLFileName)</code></p> <p>Parameters</p> Parameter Name Description <code>HTMLFileName</code> A literal string or  variable containing the full literal name of the HTML file in which the  information about the expected DOM is  found. <p>Return Value</p> <p>Returns a complete Document Object Model (DOM) tree.</p> <p>Example</p> <p><code>DOM = CreateDOM(\u201cHTMLsource\u201d)</code></p> <p>Comment</p> <p>One of the most common practices in functional testing is to compare a known set of correct results previously generated by an application (expected data) to the results produced by an actual current execution of the application (actual data). These sets of results are stored in various Document Object Models (DOMs).</p> <p>The actual DOM is created automatically each time an HTTP request is accessed through the document object. The expected DOM is assigned by the user to a specific HTTP command. To make the verification functions more easily readable, WebLOAD uses the alias ACTUAL to access the actual document and the alias EXPECTED to access the expected document.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#createtable-function","title":"CreateTable() (function)","text":"<p>Description</p> <p>WebLOAD provides a <code>CreateTable</code> function to automatically convert the tables found on an HTML page to parallel <code>wlTables</code> objects. This simplifies access to the exact table entry in which the user is interested. The <code>CreateTable()</code> function returns a <code>window</code> object that includes a <code>wlTables</code> collection. This is a collection of <code>wlTables</code> objects, each of which corresponds to one of the tables found on the HTML page used as the function parameter. The table data may be accessed as any standard <code>wlTables</code> data.</p> <p>Syntax </p> <p><code>CreateTable(HTMLFileName)</code></p> <p>Parameters</p> <p>Parameters</p> Parameter Name Description <code>HTMLFileName</code> A literal string or variable containing the full literal name of the HTML file in which the tables to be converted are found. <p>Return Value</p> <p>Returns a <code>window</code> object that includes a <code>wlTables</code> collection.</p> <p>Example</p> <pre><code>NewTableSet = CreateTable(\u201cHTMLTablePage\u201d) \nNumTables = NewTableSet.wlTables.length \nFirstTableName = NewTableSet.wlTables[0].id\n</code></pre> <p>Comment</p> <p><code>CreateTable()</code> is a member of the wlTables family of table, row, and cell objects.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined) (function) )</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#data-property","title":"Data (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>Holds a string to be submitted in an HTTP Post command.</p> <p>The Data property has two subfields:</p> <ul> <li><code>Data.Type</code> \u2013 The MIME type for the submission</li> <li><code>Data.Value</code> \u2013 The string to submit </li> </ul> <p>You can use Data in two ways:</p> <ul> <li>As an alternative to <code>FormData</code> if you know the syntax of the form submission.</li> <li>To submit a string that is not a standard HTML form and cannot be represented by <code>FormData</code>.</li> </ul> <p>Data is for posting data that is not meant to be HTTP encoded, for example Web service calls.</p> <p>Example</p> <p>Thus the following three code samples are equivalent:</p> <pre><code>//Sample 1\nwlHttp.Data.Type = \u201capplication/x-www-form-urlencoded\u201d \nwlHttp.Data.Value = \u201cSearchFor=icebergs&amp;SearchType=ExactTerm\u201d \nwlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d)\n//Sample 2\nwlHttp.FormData.SearchFor = \u201cicebergs\u201d \nwlHttp.FormData.SearchType = \u201cExactTerm\u201d \nwlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d)\n//Sample 3 \nwlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d +\n    \u201c?SearchFor=icebergs&amp;SearchType=ExactTerm\u201d)\n</code></pre> <p>Methods</p> <ul> <li>wlClear() (see wlClear() (method) )</li> </ul> <p>Properties</p> <ul> <li>type (see type (property) )</li> <li>value (see value (property) )</li> </ul> <p>Comment</p> <p><code>Data</code> and <code>DataFile</code> are both collections that hold sets of data. Data collections are stored within the Script itself, and are useful when you prefer to see the data directly. <code>DataFile</code> collections store the data in local text files, and are useful when you are working with large amounts of data, which would be too cumbersome to store within the Script code itself. When working with <code>DataFile</code> collections, only the name of the text file is stored in the Script itself.</p> <p>Your Script should work with either <code>Data</code> or <code>DataFile</code> collections. Do not use both properties within the same Script.</p> <p>See also</p> <ul> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#datafile-property","title":"DataFile (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>A file to be submitted in an HTTP Post command.</p> <p>WebLOAD sends the file using a MIME protocol. DataFile has two subfields:</p> <ul> <li><code>DataFile.Type</code>-the MIME type</li> <li><code>DataFile.FileName</code>-the name of the file, for example,      <code>\u201cc:\\\\MyWebloadData\\\\BigFile.doc\u201d</code> `</li> </ul> <p>WebLOAD sends the file when you call the wlHttp.Post() method.</p> <p>Methods</p> <ul> <li>wlClear() (see wlClear() (method) )</li> </ul> <p>Properties</p> <ul> <li>FileName (see FileName (property) )</li> </ul> <p>Comment</p> <p><code>DataFile</code> is used for sending files and parallels the posting of mulipart data in HTML. <code>Data</code> and <code>DataFile</code> are both collections that hold sets of data. <code>Data</code> collections are stored within the Script itself, and are useful when you prefer to see the data directly. <code>DataFile</code> collections store the data in local text files, and are useful when you are working with large amounts of data which would be too cumbersome to store within the Script code itself, or binary data. When working with <code>DataFile</code> collections, only the name of the text file is stored in the Script itself.</p> <p>See also</p> <ul> <li>Data (see Data (property) )</li> <li>Erase (see Erase (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> <li>value (see value (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#debugmessage-function","title":"DebugMessage() (function)","text":"<p>Description</p> <p>Displays a debug message in the Log View of WebLOAD Recorder.</p> <p>Syntax </p> <p><code>DebugMessage(msg)</code></p> <p>Parameters</p> Parameter Name Description <code>msg</code> A string with an informative message to be sent to WebLOAD Recorder, to be displayed in the Log View. <p>Comment</p> <p>If you call <code>DebugMessage()</code> in the main script, WebLOAD sends a debug message to the Log View of WebLOAD Recorder. The message is not written to the Console\u2019s Log</p> <p>View during script execution and has no impact on the continued execution of the Script.</p> <p>GUI mode</p> <p>WebLOAD recommends adding message functions to your Script files directly through the WebLOAD Recorder. Drag the Message icon from the General toolbox into the Script Tree at the desired location.</p> <p>See also</p> <ul> <li>InfoMessage() (see InfoMessage() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#decodebinaryend-property","title":"DecodeBinaryEnd (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The DecodeBinaryEnd property is used in conjunction with SaveSource and document.wlSource to enable the user to parse binary data returned from the server. SaveSource and document.wlSource are used to store the server response in wlSource. Since the JavaScript engine does not know how to represent NULLs (binary 0), the engine will convert all binary nulls in the response body to the value of the DecodeBinaryNullAs string. The DecodeBinaryEnd and DecodeBinaryStart properties are used to limit this action to a specific range in the response buffer. If they are not set, the engine will search for binary nulls in the entire buffer. DecodeBinaryEnd and DecodeBinaryStart are used as performance safeguards in case the buffer is very large and you want to parse a section at the start of the buffer.</p> <p>The value of DecodeBinaryEnd starts from 0 and designates an offset from the beginning of the buffer. The default value of DecodeBinaryEnd is -1. This indicates that starting from the DecodeBinaryStart location until the end of the buffer will be converted to binary nulls.</p> <p>Note: This property can only be inserted manually.</p> <p>Example wlGlobals.DecodeBinaryEnd=4 </p> <p>See also</p> <ul> <li>DecodeBinaryNullAs (see DecodeBinaryNullAs (property) ))</li> <li>DecodeBinaryStart (see DecodeBinaryStart (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#decodebinarynullas-property","title":"DecodeBinaryNullAs (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Supports the decoding of binary data. Decoding is not performed by default. In order to decode binary data, the user must call DecodeBinaryNullAs and provide a string value to replace the NULL character.</p> <p>Note: This property can only be inserted manually.</p> <p>Syntax</p> <p><code>wlGlobals.DecodeBinaryNullAs = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>WLGlobals.DecodeBinaryNullAs = \u201cClassified\u201d</code></p> <p>See also</p> <ul> <li>DecodeBinaryEnd (see DecodeBinaryEnd (property) )</li> <li>DecodeBinaryStart (see DecodeBinaryStart (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#decodebinarystart-property","title":"DecodeBinaryStart (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The DecodeBinaryStart property is used in conjunction with SaveSource and document.wlSource to enable the user to parse binary data returned from the server. SaveSource and document.wlSource are used to store the server response in wlSource. Since the JavaScript engine does not know how to represent NULLs (binary 0), the engine will convert all binary nulls in the response body to the value of the DecodeBinaryNullAs string. The DecodeBinaryEnd and DecodeBinaryStart properties</p> <p>are used to limit this action to a specific range in the response buffer. If they are not set, the engine will search for binary nulls in the entire buffer. DecodeBinaryEnd and DecodeBinaryStart are used as performance safeguards in case the buffer is very large and you want to parse a section at the start of the buffer.</p> <p>The value of DecodeBinaryEnd starts from 0 and designates an offset from the beginning of the buffer. The default value of DecodeBinaryStart is -1. This indicates that starting from the beginning of the buffer until the DecodeBinaryEnd location will be converted to binary nulls.</p> <p>Note: This property can only be inserted manually.</p> <p>Example </p> <p><code>wlGlobals.DecodeBinaryStart=1</code></p> <p>See also</p> <ul> <li>DecodeBinaryEnd (see DecodeBinaryEnd (property) )</li> <li>DecodeBinaryNullAs (see DecodeBinaryNullAs (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#defaultchecked-property","title":"defaultchecked (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> </ul> <p>Description</p> <p>For an <code>&lt;INPUT type=\u201ccheckbox\u201d&gt;</code> or <code>&lt;INPUT type=\u201cradio\u201d&gt;</code> element, the default checked value of the form element (read-only string).</p> <p>See also</p> <ul> <li>checked (see checked (property) )</li> <li>cols (see cols (property) )</li> <li>defaultvalue (see defaultvalue (property) )</li> <li>id (see id (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>MaxLength (see MaxLength (property) )</li> <li>Name (see Name (property) )</li> <li>option (see option (object) )</li> <li>row (see row (object) )</li> <li>selectedindex (see selectedindex (property) )</li> <li>Size (see Size (property) )</li> <li>title (see title (property) )</li> <li>type (see type (property) )</li> <li>Url (see Url (property) )</li> <li>value (see value (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#defaultselected-property","title":"defaultselected (property)","text":"<p>Property of Object</p> <ul> <li>option (see option (object) ))</li> </ul> <p>Description</p> <p>Returns a Boolean value specifying whether this option was the one originally \u201cselected\u201d before any user acted upon this \u201cselect\u201d control.</p> <p>See also</p> <ul> <li>defaultchecked (see defaultchecked (property) )</li> <li>selected (see selected (property) )</li> <li>value (see value (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#defaultvalue-property","title":"defaultvalue (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> </ul> <p>Description</p> <p>The default value of the form element (read-only string).</p>"},{"location":"javascript/actions_objects_functions/#defineconcurrent-function","title":"DefineConcurrent() (function)","text":"<p>Description</p> <p>Use the <code>DefineConcurrent()</code> function to define the beginning point, after which all Post and Get HTTP requests are collected, but not executed, until an <code>ExecuteConcurrent()</code> function is run. At this point, the collected HTTP requests are executed concurrently, by two or more threads. The number of threads is defined</p> <p>in WebLOAD Console in the multithreading number in the Browser Parameters tab of the Script Options dialog box.</p> <p>To simultaneously execute Post and Get HTTP requests, you must define where in the script to begin collecting the requests and where to stop collecting and begin executing them. The HTTP requests are collected until the engine encounters an <code>ExecuteConcurrent()</code> function in the script. For more information about the <code>ExecuteConcurrent()</code> function, see <code>ExecuteConcurrent()</code> (function) .</p> <p>All requests performed from the beginning of the <code>DefineConcurrent()</code> function to the <code>ExecuteConcurrent()</code> function are stored in an array of documents. You can access every document by index number or document name as follows:</p> <ul> <li>By index: <code>wlConcurrentDocuments[i]</code></li> <li>By DocName: <code>wlConcurrentDocuments[\"documentname\"]</code></li> </ul> <p>The DocName is an optional name you set for a document for quick access from <code>wlConcurrentDocuments</code>. The format for setting the name is: <code>wlHttp.DocName = \u201cdocumentname\u201d</code> where <code>DocName</code> is written with a capital <code>D</code> and <code>N</code>. The default document name is: <code>all_Concurrent_&lt;index&gt;.</code></p> <p>Example</p> <pre><code>DefineConcurrent()\n\u2026\n    &lt;any valid JavaScript code, including Post and Get requests&gt;\nwlHttp.DocName = \"document\"\n\n\u2026\n\nExecuteConcurrent()\nfor (i=0; i&lt;wlConcurrentDocuments.length; i++) \n    InfoMessage(\"index \"+i+\" : \"+wlConcurrentDocuments[i].URL)\nInfoMessage(\"by DocName: \"+wlConcurrentDocuments[\"document\"].URL)\nInfoMessage(\"default name: \"\n+wlConcurrentDocuments[\"all_Concurrent_2\"].URL)\n</code></pre> <p>GUI mode</p> <p>Note: The <code>DefineConcurrent()</code> function is usually inserted into script files directly through the WebLOAD Recorder. Drag the Define Concurrent  icon from the Load toolbox into the Script Tree at the desired location.</p> <p>For additional information about the <code>DefineConcurrent()</code> function, refer to Define Concurrent in the WebLOAD Recorder User\u2019s Guide.</p> <p>See also</p> <ul> <li><code>ExecuteConcurrent()</code> (see <code>ExecuteConcurrent()</code> (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#delete-method","title":"Delete() (method)","text":""},{"location":"javascript/actions_objects_functions/#delete-http-method","title":"Delete() (HTTP method)","text":"<p>Method of Objects</p> <p>This function is implemented as a method of the following object:</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Delete command.</p> <p>Syntax </p> <p><code>Delete([URL]</code></p> <p>Parameters</p> Parameter Name Description <code>[URL]</code> An optional parameter identifying the      document URL.      You may optionally      specify the URL as a parameter of the method. <code>Delete()</code> connects to the first URL that has been      specified from the following list, in the order specified:      <p></p> * A <code>Url</code> parameter specified in the method call.    <p></p> * The <code>Url</code> property of the <code>wlHttp</code> object.   <p></p> * The local default <code>wlLocals.Url.</code> <p></p> * The global default <code>wlGlobals.Url.</code> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Head() (see Head() (method) )</li> <li>Header (see Header (property) )</li> <li>Options() (see Options() (method) )</li> <li>Post() (see Post() (method) )</li> <li>Put() (see Put() (method) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#delete-cookie-method","title":"Delete() (cookie method)","text":"<p>Method of Objects</p> <ul> <li>wlCookie (see wlCookie (object) )</li> </ul> <p>Description</p> <p>This method deletes all cookies set by <code>wlCookie</code> in the current thread.</p> <p>Syntax</p> <p><code>wlCookie.Delete(name, domain, path)</code></p> <p>Parameters</p> Parameter  Name Description name A descriptive name used for the cookie to  be deleted, for example, <code>\u201cCUSTOMER\u201d</code>. domain The top-level domain name  for the cookie being deleted, for example,<code>\u201cwww.ABCDEF.com\u201d</code>. path The top-level directory  path, within the specified domain, for the cookie being deleted, for example,  \u201c/\u201d. <p>Example</p> <p><code>wlCookie.Delete(\u201cCUSTOMER\u201d, \u201cwww.ABCDEF.com\u201d, \u201c/\u201d)</code></p> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#deleteemptycookies-property","title":"DeleteEmptyCookies (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Indicates whether to delete existing cookies if the server sends a \u201cset-cookie\u201d header with empty values for the existing cookies. If DeleteEmptyCookies is false, the existing cookies are set to their empty value (null). The default value of DeleteEmptyCookies is false.</p> <p>Example</p> <p><code>wlGlobals.DeleteEmptyCookies = false</code></p> <p>Comments</p> <p>Some servers tell the client to delete existing cookies by sending the client empty cookies.</p>"},{"location":"javascript/actions_objects_functions/#disablesleep-property","title":"DisableSleep (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Setting this property defines how the engine should handle the Sleep command in the script. This boolean flag indicates whether the recorded sleep pauses will be included in the test session (false) or ignored (true).</p> <p>Example</p> <p><code>wlGlobals.DisableSleep = true</code></p> <p>Comment</p> <p>Sleep periods during test sessions are by default kept to the length of the sleep period recorded by the user during the original recording session. If you wish to include sleep intervals but change the time period, set <code>DisableSleep</code> to <code>false</code> and assign values to the other sleep properties as follows:</p> <ul> <li><code>SleepRandomMin</code> \u2013 Assign random sleep interval lengths, with the minimum time period equal to this property value.</li> <li><code>SleepRandomMax</code> \u2013 Assign random sleep interval lengths, with the maximum time period equal to this property value.</li> <li><code>SleepDeviation</code> \u2013 Assign random sleep interval lengths, with the time period ranging between this percentage value more or less than the original recorded time period.</li> </ul> <p>GUI mode</p> <p>WebLOAD recommends setting the sleep mode through the WebLOAD Console. Select a setting from the Sleep Time Control tab of the Default, Current or Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>Sleep() (see Sleep() (function) ))</li> <li>SleepDeviation (see SleepDeviation (property) )</li> <li>SleepRandomMax (see SleepRandomMax (property) )</li> <li>SleepRandomMin (see SleepRandomMin (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#dnsusecache-property","title":"DNSUseCache (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enable caching of IP addresses that WebLOAD receives from a domain name server. The value of <code>DNSUseCache</code> may be:</p> <ul> <li>false \u2013 Disable IP address caching.</li> <li>true \u2013 Enable IP address caching (default).</li> </ul> <p>Assign a <code>true</code> value to reduce the time for domain name resolution. Assign a <code>false</code> value if you want to include the time for name resolution in the WebLOAD performance statistics.</p> <p>GUI mode</p> <p>WebLOAD recommends enabling or disabling the DNS cache through the WebLOAD Console. Enable caching for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>To clear the DNS cache, set the ClearDNSCache() (see ClearDNSCache() (method) ) property.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ClearDNSCache() (see ClearDNSCache() (method) )</li> <li>ClearSSLCache() (see ClearSSLCache() (method) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#document-object","title":"document (object)","text":"<p>Description</p> <p>Represents the HTML <code>document</code> in a given browser window. The <code>document</code> object is one of the main entry points into the DOM, used to retrieve parsed HTML data. <code>document</code> objects store the complete parse results for downloaded HTML pages. Use the <code>document</code> properties to retrieve links, forms, nested frames, and other information about the <code>document</code>.</p> <p><code>document</code> objects are local to a single thread. WebLOAD creates an independent <code>document</code> object for each thread of a script. You cannot create new <code>document</code> objects using the JavaScript new operator, but you can access HTML <code>document</code>s through the properties and methods of the standard DOM objects. <code>document</code> properties are read- only.</p> <p>Syntax</p> <p>Access all elements of the Browser DOM through the <code>document</code> object, using the standard syntax. For example, to access links, use the following expression:</p> <p><code>document.links[0]</code></p> <p>Methods</p> <ul> <li>wlGetAllForms() (see wlGetAllForms() (method) )</li> <li>wlGetAllFrames() (see wlGetAllFrames() (method) )</li> <li>wlGetAllLinks() (see wlGetAllLinks() (method) )</li> </ul> <p>Properties</p> <ul> <li>form (see form (object) )</li> <li>frames (see frames (object) )</li> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>script (see script (object) )</li> <li>title (see title (property) )</li> <li>wlHeaders (see wlHeaders (object) )</li> <li>wlMetas (see wlMetas (object) )</li> <li>wlSource (see wlSource (property) )</li> <li>wlStatusLine (see wlStatusLine (property) )</li> <li>wlStatusNumber (see wlStatusNumber (property) )</li> <li>wlTables (see wlTables (object) )</li> <li>wlVersion (see wlVersion (property) )</li> <li>wlXmls (see wlXmls (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#elapsedroundtime-property","title":"ElapsedRoundTime (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>The minimum amount of time (in milliseconds) for the round to be played back. If the total time it takes for the round to be played back is less than the time period specified, the machine sleeps for the remainder of the time. This property must be set in <code>InitAgenda()</code>. If it is set anywhere else, it is ignored.</p> <p>The behavior of the sleep time is affected by the Sleep Time Control settings that are set in the Current Project Options of the WebLOAD Recorder and Console. These settings can be one of the following:</p> <ul> <li>Sleep time as recorded (default for the Console) \u2013 Runs the script with the delays corresponding to the natural pauses that occurred when recording the script.</li> <li>Ignore recorded sleep time (default for the WebLOAD Recorder) \u2013 Eliminates any pauses when running the script and runs a worst-case stress test.</li> <li>Set random sleep time \u2013 Sets the ranges of delays to represent a range of users.</li> <li>Set sleep time deviation \u2013 Sets the percentage of deviation from the recorded value to represent a range of users.</li> </ul> <p>For more information on setting the Sleep Time Control settings, see Configuring Sleep Time Control Options in the WebLOAD Recorder User\u2019s Guide.</p> <p>Example</p> <pre><code>function InitAgenda(){\n    wlGlobals.ElapsedRoundTime = 50000; \n    //round should take at least 5 seconds\n}\n</code></pre>"},{"location":"javascript/actions_objects_functions/#element-object","title":"element (object)","text":"<p>Property of Object</p> <p><code>element</code> objects are grouped into collections of <code>elements</code>. The <code>elements</code> collection is also a property of the following objects:</p> <ul> <li>form (see form (object) )</li> </ul> <p>Description</p> <p>Each <code>element</code> object stores the parsed data for a single HTML form element such as <code>&lt;INPUT&gt;</code>, <code>&lt;BUTTON&gt;</code>, <code>&lt;TEXTAREA&gt;</code>, or <code>&lt;SELECT&gt;</code>. The full <code>elements</code> collection stores all the controls found in a given form except for objects of <code>input type=image</code>. (Compare to the form (see form (object) ) object, which stores the parsed data for an entire HTML form.)</p> <p>element objects are local to a single thread. You cannot create new element objects using the JavaScript new operator, but you can access HTML elements through the properties and methods of the standard DOM objects. element properties are read- only.</p> <p>Syntax</p> <p><code>element</code> objects are organized into collections of <code>elements. elements[0]</code> refers to the first child element, <code>elements[1]</code> refers to the second child element, etc. To access an individual element\u2019s properties, check the <code>length</code> property of the <code>elements</code> collection and use an index number to access the individual elements. For example, to find out how many <code>element</code> objects are contained within <code>forms[1]</code>, check the value of:</p> <p><code>document.forms[1].elements.length</code></p> <p>You can access a member of the elements collection either by its index number or by its HTML name attribute. For example, suppose that the first element of a form is coded by the HTML tag.</p> <p><code>&lt;INPUT type=\u201ctext\u201d name=\u201cyourname\u201d&gt;</code></p> <p>You can access this element by writing either of the following expressions:</p> <p><code>document.forms[0].elements[0]</code></p> <p><code>document.forms[0].elements[\u201cyourname\u201d]</code></p> <p><code>document.forms[0].elements.yourname</code></p> <p><code>document.forms[0].yourname</code></p> <p>Example</p> <p>Access each element\u2019s properties directly using either of the following lines:</p> <p><code>document.forms[0].elements[0].type</code></p> <p>-Or-</p> <p><code>document.forms[0].yourname.type</code></p> <p>Properties</p> <ul> <li>checked (see checked (property) )</li> <li>cols (see cols (property) )</li> <li>defaultchecked (see defaultchecked (property) )</li> <li>defaultvalue (see defaultvalue (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>Name (see Name (property) )</li> <li>id (see id (property) )</li> <li>InnerImage (see InnerImage (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>MaxLength (see MaxLength (property) )</li> <li>option (see option (object) )</li> <li>OuterLink (see OuterLink (property) )</li> <li>row (see row (object) )</li> <li>selectedindex (see selectedindex (property) )</li> <li>Size (see Size (property) )</li> <li>title (see title (property) )</li> <li>type (see type (property) )</li> <li>Url (see Url (property) )</li> <li>value (see value (property) )</li> </ul> <p>Comment</p> <p>The most frequently accessed input elements are of type <code>Button</code>, <code>CheckBox</code>, <code>File</code>, <code>Image</code>, <code>Password</code>, <code>Radio</code>, <code>Reset</code>, <code>Select</code>, <code>Submit</code>, <code>Text</code>, and <code>TextArea</code>.</p> <p>See also</p> <ul> <li>Collections </li> <li>Image (see Image (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#encodebinary-property","title":"EncodeBinary (property)","text":"<p>The EncodeBinary property is identical to the EncodeRequestBinaryData property. For additional information, see EncodeRequestBinaryData (property) </p>"},{"location":"javascript/actions_objects_functions/#imencodeformdata-property","title":"imEncodeFormdata (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Sets the wlGlobals.EncodeFormdata flag.</p> <p>Generally, when an HTTP client (Microsoft Internet Explorer/Firefox or WebLOAD) sends a post request to the server, the data must be HTTP encoded. Special characters such as blanks, \u201c&gt;\u201c signs, and so on, are replaced by \u201c%xx\u201d. For example, a space is encoded as \u201c%20\u201d.</p> <p>Turn off the encoding when the script sends large requests that have no data that needs to be encoded. This improves performance as it bypasses the scanning and reformatting of the request buffer.</p> <p>GUI mode</p> <p>In WebLOAD Console, select or deselect the Encode Form Data checkbox in the HTTP Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, select or deselect the Encode Form Data checkbox in the HTTP Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Example</p> <p><code>wlGlobals.EncodeFormData = true</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#encoderequestbinarydata-property","title":"EncodeRequestBinaryData (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>Used to specify if the binary data in requests should be encoded. The default value of EncodeRequestBinaryData is false.</p> <p>For example, if a mobile operator wants to simulate the sending of binary data from the browser (phone) to the server. Part of the binary data is a value (for example, phone number) that needs parameterization. When the EncodeRequestBinaryData flag is set to true, the binary form data \"x0Ax0BAMIRx00\" appears as \"%0A%0BAMIR%00\" in the script.</p> <p>Example</p> <p><code>wlGlobals.EncodeRequestBinaryData = true</code></p> <p>GUI mode</p> <p>In WebLOAD Recorder, check Encode Binary Data in the Script Generation tab of the</p> <p>Recording and Script Generation Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>EncodeResponseBinaryData (see EncodeResponseBinaryData (property) )</li> <li>EncodeBinary (see EncodeBinary (property) )</li> <li>SaveSource (see SaveSource (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#encoderesponsebinarydata-property","title":"EncodeResponseBinaryData (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>Indicates whether binary data sent in responses should be encoded. EncodeResponseBinaryData can be used with web pages that have binary data sent in responses and on which you would want to perform correlation on that binary data.</p> <p>The default value of EncodeResponseBinaryData is false. When set to true, the response will be encoded when the user accesses document.wlSource. The encoding is performed on the original data, when it is accessed. Readable characters that are not letters are not encoded. That is, \"!@#$%^&amp;()\" remains \"!@#$%^&amp;()\" and carriage return and tab are translated to \\r\\t. The response is saved in document.wlSource only if the SaveSource flag is set to true.</p> <p>Example</p> <p><code>wlGlobals.EncodeResponseBinaryData = true</code></p> <p>See also</p> <ul> <li>EncodeRequestBinaryData (see EncodeRequestBinaryData (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#encoding-property","title":"encoding (property)","text":"<p>Property of Object</p> <ul> <li>form (see form (object) )</li> </ul> <p>Description</p> <p>A read-only string that specifies the MIME encoding for the form.</p> <p>See also</p> <ul> <li>form (see form (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#endtransaction-function","title":"EndTransaction() (function)","text":"<p>Description</p> <p>Use the <code>BeginTransaction()</code> and <code>EndTransaction()</code> functions to define the start and finish of a logical block of code that you wish to redefine as a single logical transaction unit. This enables setting timers, verification tests, and other measurements for this single logical unit.</p> <p>Syntax</p> <pre><code>BeginTransaction(TransName)\n\u2026\n  &lt;any valid JavaScript code&gt;`\n\u2026\n  [SetFailureReason(ReasonName)] \nEndTransaction(TransName,Verification,[SaveFlag],[FailureReason])\n</code></pre> <p>Parameters</p> Parameter  Name Description TransName The name assigned to this transaction, a  user-supplied string. Verification A call to any verification  function that returns one of the following values: <code>WLSuccess</code>,<code>WLMinorError</code>, <code>WLError</code>, or <code>WLSevereError</code>. If the verification  function does not explicitly return a value, the default value is always <code>WLSuccess</code>.  Verification may also be  an expression, constant, or variable that evaluates to one of the preceding  return values. See VerificationFunction() (user-defined) (seeVerificationFunction() (user-defined) (function) ), for more information. [SaveFlag] An optional Boolean flag  specifying whether WebLOAD should save the results ofall transaction instances, successes and failures, (<code>true</code>), for later analysis with  Data Drilling, or should save only results of failed transaction instances that triggered some sort of error  flag, (<code>false</code>, default). [FailureReason] An optional user-supplied string that  provides a reason for the failure.GUI mode <p>Note: <code>BeginTransaction()</code> and <code>EndTransaction()</code> functions are usually accessed and inserted into script files directly through the WebLOAD Recorder. For example, the following figure illustrates a section in the Script Tree bracketed by BeginTransaction and EndTransaction nodes. The EndTransaction node is highlighted in the Script Tree.</p> <p></p> <p>To mark the end of a transaction, drag the End Transaction  icon from the Load toolbox into the Script Tree, directly after the last action you want included in the script.</p> <p>For additional information about the <code>EndTransaction()</code> function, refer to Begin and End Transaction in the WebLOAD Recorder User\u2019s Guide.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#enforcecharencoding-property","title":"EnforceCharEncoding (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Indicates whether the parser should use the character set it parses in the HTML pages or override it using the <code>CharEncoding</code> property. The default value is false (use the encoding from the HTML pages).</p> <p>The <code>EnforceCharEncoding</code> property can be set to one of the following values:</p> <ul> <li>true \u2013 Use the <code>CharEncoding</code> property.</li> <li>false (default) \u2013 Get the encoding from the HTML pages.</li> </ul> <p>Example </p> <p><code>wlGlobals.EnforceCharEncoding = false</code></p> <p>GUI mode</p> <p>In WebLOAD Console, check Enforce Character Encoding in the Browser Parameters</p> <p>tab of the Default Options or Current Session Options dialog box, accessed from the</p> <p>Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, check Enforce Character Encoding in the Browser Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>CharEncoding (see CharEncoding (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#erase-property","title":"Erase (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Indicates whether or not to clear the WebLOAD properties of a <code>wlHttp</code> object after each <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> call. <code>wlHttp.Erase</code> is a read/write property. The default value is true. This section briefly discusses the implications of each setting.</p> <p>wlHttp.Erase=true (default)</p> <p>When <code>Erase</code> is set to <code>true</code>, WebLOAD automatically erases all <code>wlHttp</code> property values after each HTTP access. You must reassign any properties you need before the next HTTP access. For this reason, assign the properties of <code>wlHttp</code> only in the main script, not in <code>InitClient()</code>, so they will be reassigned in every round.</p> <p>Thus if <code>Erase</code> is set to <code>true</code> the following script is incorrect. In this script, the wlHttp properties are assigned values in <code>InitClient()</code>. The script would connect to the <code>Url</code> and submit the FormData only in the first round. After the first <code>Post()</code> call, the <code>Url</code> and <code>FormData</code> property values are erased, so WebLOAD cannot use them in subsequent rounds.</p> <p><pre><code>function InitClient() {  //Wrong!\n    wlHttp.Url = \u201chttp://www.ABCDEF.com/products.exe\u201d \n    wlHttp.FormData[\u201cName\u201d] = \u201cJohn Smith\u201d \n    wlHttp.FormData[\u201cProduct Interest\u201d] = \u201cModems\u201d\n}\n//Main script \nwlHttp.Post()\n</code></pre> To solve the problem, assign the <code>wlHttp</code> property values in the main script, so that the assignments are executed before each <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> call:</p> <p><pre><code>//Main script     //OK\nwlHttp.Url = \u201chttp://www.ABCDEF.com/products.exe\u201d \nwlHttp.FormData[\u201cName\u201d] = \u201cJohn Smith\u201d \nwlHttp.FormData[\u201cProduct Interest\u201d] = \u201cModems\u201d \nwlHttp.Post()\n</code></pre> Alternatively, you could assign values to wlLocals properties, which are not erased:</p> <pre><code>function InitClient() {     //OK\n    wlLocals.Url = \u201chttp://www.ABCDEF.com/products.exe\u201d \n    wlLocals.FormData[\u201cName\u201d] = \u201cJohn Smith\u201d \n    wlLocals.FormData[\u201cProduct Interest\u201d] = \u201cModems\u201d\n}\n\n//Main script \nwlHttp.Post() \nwlHttp.Erase=false\n</code></pre> <p>You may set <code>Erase</code> to <code>false</code> to prevent erasure. For example, if for some reason you absolutely had to assign values to the <code>wlHttp</code> properties in the <code>InitClient()</code> function of the script, change the value of the <code>Erase</code> property to <code>false</code>. If <code>Erase</code> is <code>false</code>, the properties retain their values through subsequent rounds.</p> <p>Thus another way to correct the preceding example is to write:</p> <pre><code>function InitClient() {       //OK \nwlHttp.Erase = false \nwlHttp.Url =\n        \u201chttp://www.ABCDEF.com/products.exe\u201d \nwlHttp.FormData[\u201cName\u201d] = \u201cJohn Smith\u201d \nwlHttp.FormData[\u201cProduct Interest\u201d] = \u201cModems\u201d\n}\n//Main script \nwlHttp.Post()\n</code></pre> <p>User-defined properties are not linked to the <code>wlHttp.Erase</code> property and will not be erased automatically by WebLOAD. The only way to reset or erase user-defined properties is for the user to set the new values explicitly.</p> <p>See also</p> <ul> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>DataCollection.type (see type (property) )</li> <li>DataCollection.value (see value (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> <li>wlClear() (see wlClear() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#errormessage-function","title":"ErrorMessage() (function)","text":"<p>Description</p> <p>Use this function to display an error message in the Log Window and abort the current round.</p> <p>Syntax <code>ErrorMessage(msg)</code></p> <p>Parameters</p> Parameter Name Description <code>msg</code> string with an error      message to be sent to the WebLOAD Console. <p>Comment</p> <p>If you call <code>ErrorMessage()</code> in the main script, WebLOAD stops the current round of execution. Execution continues with the next round, at the beginning of the main script.</p> <p>You may also use the wlException object with the built-in <code>try()/catch()</code> commands to catch errors within your script.</p> <p>GUI mode</p> <p>WebLOAD recommends adding message functions to your script files directly through the WebLOAD Recorder. Message function commands can be added to the script in Visual Editing mode using the Toolbox message item and the Insert menu command.</p> <p>Message function command lines may also be added directly to the code in a JavaScript Object within a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>See also</p> <ul> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException (see wlException (object) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#errormessage-property","title":"ErrorMessage (property)","text":"<p>Property of Object</p> <ul> <li>wlVerification (see wlVerification (object) )</li> </ul> <p>Description</p> <p><code>ErrorMessage</code> is used to define a global error message that appears in the Log window when a verification fail error occurs. When defined, <code>ErrorMessage</code> affects all the verifications in which an error message is not defined. If you define an error message for a specific verification, it overrides the global error message defined in the <code>ErrorMessage</code> property.</p> <p>Example</p> <p>To set the global error message displayed in the Log window in the event of any verification fail errors to my <code>personalized error message</code>, write:</p> <p><code>wlVerification.ErrorMessage = \u201cmy personalized error message\u201d</code></p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>PageTime (see PageTime (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#evaluatescript-function","title":"EvaluateScript() (function)","text":"<p>Description</p> <p>Enables testers to include scripts and specify the point during script execution at which the script should be executed.</p> <p>Syntax</p> <p><code>EvaluateScript(\u201cScript\u201d, RunModeConstant)</code></p> <p>Parameters</p> Parameter Name Description Script A valid JavaScript syntax, including  function calls. RunModeConstant One of the following list  of constants that acts as a flag when passed as a parameter to <code>EvaluateScript().</code> Defines the point during  script execution at which WebLOAD should execute the script being included  here. Possible choices include: <p></p> - <code>WLAfterInitAgenda</code> <p></p> - <code>WLBeforeInitClient</code> <p></p> - <code>WLBeforeThreadActivation</code> <p></p> - <code>WLOnThreadActivation</code> <p></p> - <code>WLBeforeRound</code> <p></p> - <code>WLAfterRound</code> <p></p> - <code>WLAfterTerminateClient</code> <p></p> - <code>WLAfterTerminateAgenda</code> <p>Comment</p> <p>If the script to be executed is in an external file, use the following:</p> <p><code>IncludeFile(filename.js)</code></p> <p><code>EvaluateScript(\u201cMyFunction()\u201d,WLAfterRound)</code></p> <p>Where <code>MyFunction()</code> is defined in filename.js.</p>"},{"location":"javascript/actions_objects_functions/#event-property","title":"event (property)","text":"<p>Property of Objects</p> <ul> <li>link (see link (object) )</li> <li>script (see script (object) )</li> </ul> <p>Description</p> <p>Represents the event that occurred to the parent object or the event for which the script is written.</p>"},{"location":"javascript/actions_objects_functions/#executeconcurrent-function","title":"ExecuteConcurrent() (function)","text":"<p>Description</p> <p>Use the <code>ExecuteConcurrent()</code> function to define the point after which all Post and Get HTTP requests, which have been collected since the <code>DefineConcurrent()</code> function was run, are executed. At this point, the collected HTTP requests are executed concurrently, by two or more threads. The number of threads is defined in the</p> <p>WebLOAD Console in the multithreading number in the Browser Parameters tab of the Script Options dialog box.</p> <p>Note: This function can only be inserted in your script after a <code>DefineConcurrent()</code> function. For more information about the <code>DefineConcurrent()</code> function, see DefineConcurrent() (function) .</p> <p>When the engine encounters the <code>ExecuteConcurrent()</code> function, it stops collecting the HTTP requests in the script and starts their execution.</p> <p>Example</p> <pre><code>DefineConcurrent()\n\u2026\n    &lt;any valid JavaScript code, including Post and Get requests&gt;\n\u2026 \nExecuteConcurrent()\n</code></pre> <p>GUI mode</p> <p>Note: The <code>ExecuteConcurrent()</code> function is usually inserted into script files directly through the WebLOAD Recorder. Drag the Execute Concurrent  icon, from the Load toolbox, into the Script Tree at the desired location.</p> <p>For additional information about the <code>ExecuteConcurrent()</code> function, refer to</p> <p>Execute Concurrent in the WebLOAD Recorder User\u2019s Guide.</p> <p>See also</p> <ul> <li>DefineConcurrent() (see DefineConcurrent() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#extractvaluefunction","title":"extractValue()(function)","text":"<p>Description</p> <p>Use this function to extract a specific string contained within another string.</p> <p>Syntax</p> <p><code>retVarName = extractValue(prefix, suffix, str, instance)</code></p> <p>Parameters</p> Parameter Name Description retVarName A variable name that will be generated to  the agenda prefix A string indicating the beginning of the  string to be extracted. suffix A string indicating the end of the string  to be extracted. instance When there is more than  one appearance of the prefix string following by the suffix string, this  optional parameter can be used to indicate the correct string to be returned.  The default value is 1.  For example, when instance  is 3, the third appearance of the  prefix string followed by the suffix string indicates the string to be  returned. <p>Return Value</p> <p>The <code>extractValue</code> function returns the extracted string.</p> <p>Example</p> <p>The following function extracts \u2018x\u2019 out of \u2018axb\u2019:</p> <p><code>retStr = extractValue(\u201ca\u201d, \u201cb\u201d, \u201caxb\u201d)</code></p> <p>Since no <code>instance</code> parameter is specified, WebLOAD automatically adds the default value of the <code>instance</code> parameter:</p> <p><code>retStr = extractValue(\u201ca\u201d, \u201cb\u201d, \u201caxb\u201d,1)</code></p> <p>The following function extracts \u2018tttatt\u2019 out of \u2018zzzatttattbaxbzzzbzz\u2019:</p> <p><code>retStr = extractValue(\u201ca\u201d, \u201cb\u201d,\u201czzzatttattbaxbzzzbzz\u201d,1)</code></p> <p>The following function extracts \u2018x\u2019 out of \u2018zzzatttattbaxbzzzbzz\u2019:</p> <p><code>retStr = extractValue(\u201ca\u201d, \u201cb\u201d,\u201czzzatttattbaxbzzzbzz\u201d,2)</code></p>"},{"location":"javascript/actions_objects_functions/#filename-property","title":"FileName (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp.DataFile (see DataFile (property) )</li> </ul> <p>Description</p> <p>This property is a string that holds the name of the file being submitted through an HTTP Post command.</p> <p>Syntax</p> <p><code>wlHttp.DataFile.FileName = \u201cDataFileName\u201d</code></p> <p>See also</p> <ul> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> <li>type (see type (property) )</li> <li>value (see value (property) )</li> <li>wlClear() (see wlClear() (method) )</li> <li>wlHttp (see wlHttp (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#filterurl-property","title":"FilterURL (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The value of the FilterURL property is a list of filters separated by semi-colons. When retrieving a resource, the engine checks whether the value of any of these filters appear in the URL. If the value of any of the filters appears in the URL, the URL is not executed. Filtering is only performed during playback.</p> <p>Example</p> <p>For example, if <code>FilterURL = \u201cynet;cnn.com\u201d</code>, the engine will filter URLs from ynet.com and ynet.co.il, as well as URLS from cnn.com.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#form-object","title":"form (object)","text":"<p>Property of Object</p> <p><code>form</code> objects are grouped into collections of <code>forms</code>. The <code>forms</code> collection is a property of the following object:</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Specifies that the contained controls are all elements of a <code>form</code>. Each <code>form</code> object stores the parsed data for a complete HTML <code>form</code> (<code>&lt;FORM&gt;</code> tag). A <code>form</code> object contains the complete set of elements and input controls (text, radio buttons, checkboxes, etc.) that are all components of a single <code>form</code>. (Compare to the element (see element (object) ) object, which stores the parsed data for a single HTML <code>form</code> element.)</p> <p><code>form</code> objects are local to a single thread. You cannot create new <code>form</code> objects using the JavaScript new operator, but you can access HTML <code>forms</code> through the properties and methods of the standard DOM objects. <code>form</code> properties are read-only.</p> <p><code>form</code> objects are grouped together within collections of <code>forms</code>, as described in Collections (see Collections ). A forms collection contains all form links (HTML <code>&lt;FORM&gt;</code> elements) within the document.</p> <p>Syntax</p> <p>The <code>forms</code> collection includes a length property that reports the number of <code>form</code> objects within a document (read-only). To find out how many <code>form</code> objects are contained within a document, check the value of:</p> <p>document.forms.length</p> <p>Use an index number to access an individual form\u2019s properties. Access each form\u2019s properties directly using the following syntax:</p> <p><code>document.forms[*index*#].&lt;*form-property*&gt;</code></p> <p>You can also access a member of the <code>forms</code> collection by its HTML name attribute. For example, suppose that the first form on an HTML page is introduced by the tag:</p> <pre><code>&lt;FORM name=\u201cSignUp\u201d`\n    action=\u201chttp://www.ABCDEF.com/FormProcessor.exe\u201d \n    method=\u201cpost\u201d&gt;\n</code></pre> <p>You can access this form by writing any of the following expressions:</p> <p><code>document.forms[0]</code></p> <p><code>document.forms[\u201cSignUp\u201d]</code></p> <p><code>document.forms.SignUp</code></p> <p><code>document.SignUp</code></p> <p>Properties</p> <ul> <li>element (see element (object) )</li> <li>encoding (see encoding (property) )</li> <li>id (see id (property) )</li> <li>method (see method (property) )</li> <li>Name (see Name (property) )</li> <li>target (see target (property) </li> <li>Url (see Url (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>document (see document (object) )</li> <li>element (see element (object) )</li> <li>Image (see Image (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#formdata-property","title":"FormData (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>A collection containing form field values. WebLOAD submits the field values to the HTTP server when you call the <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> method of the <code>wlHttp</code> object. FormData goes through HTTP encoding before being sent to the server in the same manner as content-type=application/x-www-form-urlencoded.</p> <p>The collection indices are the field names (HTML name attributes). Before you call <code>wlHttp.Post()</code>, set the value of each element to the data that you want to submit in the HTML field. The fields can be any HTML controls, such as buttons, text areas, or hidden controls.</p> <p>Method</p> <p>Use the wlClear() (see wlClear() (method) ) method to delete specific FormData fields or clear all the FormData fields at once.</p> <p>JavaScript supports two equivalent notations for named collection elements: FormData.FirstName or FormData[\u201cFirstName\u201d]. The latter notation also supports spaces in the name, for example, FormData[\u201cFirst Name\u201d].</p>"},{"location":"javascript/actions_objects_functions/#getting-formdata-using-get","title":"Getting FormData using Get()","text":"<p>You can get form data using a Get() call. For example:</p> <p><code>wlHttp.FormData[\u201cFirstName\u201d] = \u201cBill\u201d</code></p> <p><code>wlHttp.FormData[\u201cLastName\u201d] = \u201cSmith\u201d</code></p> <p><code>wlHttp.FormData[\u201cEmailAddress\u201d] = \u201cbsmith@ABCDEF.com\u201d</code></p> <p><code>wlHttp.Get(\u201chttp://www.ABCDEF.com/submit.cgi\u201d)</code></p> <p>WebLOAD appends the form data to the URL as a query statement, using the following syntax:</p> <pre><code>http://www.ABCDEF.com/submit.cgi\n     ?FirstName=Bill&amp;LastName=Smith\n     &amp;EmailAddress=bsmith@ABCDEF.com\n</code></pre>"},{"location":"javascript/actions_objects_functions/#submitting-formdata-using-post","title":"Submitting FormData using Post()","text":"<p>Suppose you are testing an HTML form that requires name and email address data. You need to submit the form to the submit.cgi program, which processes the data. You can code this in the following way:</p> <pre><code>wlHttp.FormData[\u201cFirstName\u201d] = \u201cBill\u201d \nwlHttp.FormData[\u201cLastName\u201d] = \u201cSmith\u201d\nwlHttp.FormData[\u201cEmailAddress\u201d] = \u201cbsmith@ABCDEF.com\nwlHttp.Post(\u201chttp://www.ABCDEF.com/submit.cgi\u201d)\n</code></pre> <p>The <code>Post()</code> call connects to <code>submit.cgi</code> and sends the <code>FormData</code> fields. In the above example, WebLOAD would post the following fields:</p> <pre><code>FirstName=Bil\nLastName=Smith\nEmailAddress=bsmith@ABCDEF.com\n</code></pre> <p>You may also submit FormData with missing fields or with data files.</p> <p>See also</p> <ul> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> <li>type (see type (property) )</li> <li>value (see value (property) )</li> <li>wlClear() (see wlClear() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#frames-object","title":"frames (object)","text":"<p>Property of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>The <code>frames</code> object retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window. Each window object contains one of the child windows found in a browser window frameset. The <code>frames</code> collection stores the complete parse results for downloaded HTML <code>frames</code>, including nested child windows. Use the <code>frames</code> properties to retrieve information about any child windows to which the current window or document are linked.</p> <p><code>frames</code> collections are local to a single thread. WebLOAD creates an independent <code>frames</code> collection for each thread of a script. You cannot create new <code>frames</code> collections using the JavaScript <code>new</code> operator, but you can access HTML frames through the properties and methods of the standard DOM objects. frames properties are read-only.</p> <p>Syntax</p> <p>The <code>frames</code> collection includes a length property that reports the number of frame objects within a document (read-only). To find out how many window objects are contained within a document, check the value of:</p> <p><code>document.frames.length</code></p> <p>Use an index number to access an individual frame\u2019s properties. Access each window\u2019s properties directly using the following syntax:</p> <p><code>document.frames[#].&lt;child-property&gt;</code></p> <p>You can also access a member of the frames collection by its HTML name attribute. For example:</p> <p><code>document.frames[\u201cnamestring\u201d]</code></p> <p>-Or-</p> <p><code>document.frames.namestring</code></p> <p>If the GetFrames property is <code>false</code>, the frames collection is empty.</p> <p>Example</p> <p>Access each window\u2019s properties directly through an index number:</p> <p><code>document.frames[1].location</code></p> <p>Access the first child window using the following expression:</p> <p><code>frames[0]</code></p> <p>Access the first child window\u2019s link objects directly using the following syntax:</p> <p><code>frames[0].frames[0].links[#].&lt;property&gt;</code></p> <p>For example:</p> <p><code>document.frames[0].links[0].protocol</code></p> <p>Properties</p> <ul> <li>Index (see Index (property) )</li> <li>Name (see Name (property) )</li> <li>title (see title (property) )</li> <li>Url (see Url (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>GetFrames (see GetFrames (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#function-property","title":"Function (property)","text":"<p>Property of Object</p> <ul> <li>wlVerification (see wlVerification (object) )</li> </ul> <p>Description</p> <p><code>Function</code> is used to define a global JavaScript function called when a verification fail error occurs. When defined, <code>Function</code> affects all the verifications in which a JavaScript function is not defined. If you define a JavaScript function for a specific verification, it overrides the global JavaScript function defined in the <code>Function</code> property.</p> <p>Example</p> <p>To set the global JavaScript function called in the event of any verification fail errors to</p> <p><code>GetOperatingSystem(),</code> write:</p> <p><code>wlVerification.Function = GetOperatingSystem()</code></p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>PageTime (see PageTime (property) )</li> <li>Severity (see Severity (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#generatorname-function","title":"GeneratorName() (function)","text":"<p>Description</p> <p><code>GeneratorName()</code> provides a unique identification for the current Load Generator instance, even with multiple spawned processes running simultaneously. The identification string is composed of a combination of the current Load Generator name, computer name, and other internal markers.</p> <p>Syntax</p> <p><code>GeneratorName()</code></p> <p>Return Value</p> <p>Returns a unique identification string for the current Load Generator.</p> <p>GUI mode</p> <p>WebLOAD recommends accessing global system variables, including the <code>GeneratorName()</code> identification function through the WebLOAD Recorder. All the variables that appear in this list are available for use at all times in a script file. In the WebLOAD Recorder main window, click Variables Windows in the Debug tab of the ribbon.</p> <p>For example, it is convenient to add <code>GeneratorName()</code> to a Message Node to clarify which Load Generator sent the messages that appear in the WebLOAD Console Log window.</p> <p>See also</p> <ul> <li>GetOperatingSystem() (see GetOperatingSystem() (function) )</li> <li>Identification Variables and Functions </li> <li>RoundNum (see RoundNum (variable) ))</li> <li>VCUniqueID() (see VCUniqueID() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#get-method","title":"Get() (method)","text":""},{"location":"javascript/actions_objects_functions/#get-addition-method","title":"Get() (addition method)","text":"<p>Method of Objects</p> <ul> <li>wlGeneratorGlobal (see wlGeneratorGlobal (object) )</li> <li>wlSystemGlobal (see wlSystemGlobal (object) )</li> </ul> <p>Description</p> <p>Returns the current value of the specified shared variable.</p> <p>Syntax</p> <p><code>Get(\u201cSharedVarName\u201d, ScopeFlag)</code></p> <p>Parameters</p> Parameter Name Description SharedVarName The name of a shared variable whose value should  be returned. ScopeFlag One of two flags, WLCurrentAgenda or WLAllAgendas, signifying the scope of  the shared variable.  When used as a method of the wlGeneratorGlobal object:<p></p>- The WLCurrentAgenda scope flag signifies variable values that you wish  to share between all threads of a single script, part of a single process,  running on a single Load Generator.  <p></p>- The WLAllAgendas scope flag signifies variable values that you wish to share between  all threads of one or more scripts, common to a single spawned process,  running on a single Load Generator.  When used as a method of the <code>wlSystemGlobal</code> object:  <p></p>- The WLCurrentAgenda scope flag signifies  variable values that you wish to share between all threads of a single  script, potentially shared by multiple processes, running on multiple Load Generators, system wide.  <p></p>- The WLAllAgendas scope flag signifies  variable values that you wish to share between all threads of all scripts,  run by all processes, on all Load  Generators, system-wide. <p>Return Value</p> <p>Returns the current value of the specified shared variable.</p> <p>Example</p> <p>CurrentCount = wlGeneratorGlobal.Get(\u201cMySharedCounter\u201d, WLCurrentAgenda)</p> <p>CurrentCount = wlSystemGlobal.Get(\u201cMyGlobalCounter\u201d, WLCurrentAgenda)</p> <p>See also</p> <ul> <li>Add() (see Add() (method) )</li> <li>Set() (see Set() (addition method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#get-cookie-method","title":"Get() (cookie method)","text":"<p>Method of Objects</p> <ul> <li>location (see location (object) )</li> <li>wlCookie (see wlCookie (object) )</li> </ul> <p>Description</p> <p>Searches for the value of a specific cookie and returns it. If there is more than one cookie with the same name, the method returns the first occurrence.</p> <p>Syntax</p> <p><code>wlCookie.Get(name[, domain][, path])</code></p> <p>Parameters</p> Parameter Name Description name A  descriptive name identifying the cookie, for example,  \u201cCUSTOMER\u201d. domain The top-level domain name of the cookie, for example,\u201cwww.ABCDEF.com\u201d. path The top-level directory  path, within the specified domain, of the cookie, for example, \u201c/\u201d. <p>Return Value</p> <p>Returns the value of the cookie found.</p> <p>Example</p> <p><code>retValue = wlCookie.Get(\u201cCUSTOMER\u201d, \u201c[www.ABCDEF.com](http://www.abcdef.com/)\u201d, \u201c/\u201d )</code></p>"},{"location":"javascript/actions_objects_functions/#get-transaction-method","title":"Get() (transaction method)","text":"<p>Method of Objects</p> <p>This function is implemented as a method of the following object:</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Get command. The method gets the FormData, Data, or DataFile properties in the Get command. In this way, you can get any type of data from an HTTP server.</p> <p>Syntax</p> <p><code>Get([URL] [, TransName])</code></p> <p>Parameters</p> Parameter Name Description [URL] An optional parameter identifying the document  URL.  You may optionally specify  the URL as a parameter of the method. <code>Get()</code> connects to the first URL that has been specified  from the following list, in the order specified:<p></p>- A <code>Url</code> parameter  specified in the method call.  <p></p>- The Url property of  the <code>wlHttp</code> object.  <p></p>- The local default <code>wlLocals.Url</code>.  <p></p>- The global default <code>wlGlobals.Url.</code> [TransName] An optional user-supplied  string with the transaction name as it will appear in the Statistics Report.  <p></p>Use named transactions to identify specific HTTP transactions by  name. This simplifies assigning counters when you want WebLOAD to  automatically calculate a specific transaction\u2019s occurrence, success, and  failure rates. <p></p> The run-time statistics  for transactions to which you have assigned a name appear in the Statistics  Report. For your convenience, WebLOAD offers an Automatic Transaction option.  In the WebLOAD Console, select Automatic Transaction from the General Tab of  the Global Options dialog box. Automatic Transaction is set to <code>true</code> by default. With Automatic Transaction,  WebLOAD automatically assigns a name to every Get and Post HTTP transaction.  This makes statistical analysis simpler, since all HTTP transaction activity  is measured, recorded, and reported for you automatically. You do not have to  remember to add naming instructions to each Get and Post command in your script. The name assigned by  WebLOAD is simply the URL used by that Get or Post transaction. If your  script includes multiple transactions to the same URL, the information will  be collected cumulatively for those transactions. <p>Example</p> <pre><code>function InitAgenda() {\n    //Set the default URL\n    wlGlobals.Url = \u201chttp://www.ABCDEF.com\u201d\n}\n//Main script\n//Connect to the default URL: \nwlHttp.Get()\n//Connect to a different, explicitly set URL: \nwlHttp.Get(\u201chttp://www.ABCDEF.com/product_info.html\u201d)\n//Assign a name to the following HTTP transact:\nurl= http://www.ABCDEF.com/product_info.html\nwlHttp.Get(url,\n       \u201cUpdateBankAccount\u201d)\n</code></pre> <p>Use named transactions as a shortcut in place of the  <code>BeginTransaction()...EndTransaction()</code> module. For example, this is one way to identify a logical transaction unit:</p> <pre><code>BeginTransaction(\u201cUpdateBankAccount\u201d) \n  wlHttp.Get(url)\n        // the body of the transaction\n        // any valid JavaScript statements wlHttp.Post(url);\n  wlHttp.Post(url);\nEndTransaction(\u201cUpdateBankAccount\u201d)\n        // and so on\n</code></pre> <p>Using the named transaction syntax, you could write:</p> <pre><code>wlHttp.Get(url,\u201dUpdateBankAccount\u201d)\n        // the body of the transaction\n        // any valid JavaScript statements \nwlHttp.Post(url,\u201dUpdateBankAccount\u201d)\n        // and so on\n</code></pre> <p>For the HTTPS protocol, include <code>\u201chttps://\u201d</code> in the URL and set the required properties of the <code>wlGlobals</code> object:</p> <p><code>wlHttp.Get(\"https://www.ABCDEF.com\")</code></p> <p>Comment</p> <p>You may not use the <code>TransName</code> parameter by itself. <code>Get()</code> expects to receive either no parameters, in which case it uses the script\u2019s default URL, or one parameter, which must be an alternate URL value, or two parameters, including both a URL value and the transaction name to be assigned to this transaction.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Delete() (see Delete() (HTTP method)) </li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Head() (see Head() (method) )</li> <li>Header (see Header (property) )</li> <li>Options() (see Options() (method) )</li> <li>Post() (see Post() (method) )</li> <li>Put() (see Put() (method) </li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getapplets-property","title":"GetApplets (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of Java Applets in an HTML page. The default value of GetApplets is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetApplets = true</code></p> <p>See also</p> <ul> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) ))</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getcss-property","title":"GetCss (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of cascading style sheets in an HTML page. The default value of GetCss is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetCss = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementbyid-function","title":"GetElementById() (function)","text":"<p>Description</p> <p>Used to retrieve the element with the specified identification value by querying the DOM of the HTML from the last response.</p> <p>Syntax</p> <p><code>GetElementById(\u201cid\u201d)</code></p> Parameter Name Description id The identification value  of the element to retrieve, enclosed in quotation marks. <p>Return Value</p> <p>The first element with the requested identification value or Null if no element was found.</p> <p>See also</p> <ul> <li>GetElementByName() (see GetElementByName() (function) )</li> <li>GetElementsById() (see GetElementsById() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementsbyid-function","title":"GetElementsById() (function)","text":"<p>Description</p> <p>Used to retrieve an array of all elements with the specified identification value by querying the DOM of the HTML from the last response.</p> <p>Note: An element can be from the <code>document.forms[].elements[]</code>, <code>document.links[]</code> or <code>document.images[]</code> collections.</p> <p>Syntax</p> <p><code>GetElementsById(\u201cid\u201d)</code></p> <p>Return Value</p> <p>A list of the requested elements.</p> <p>Example</p> <pre><code>wlHttp.Get(\"www.abc.com\")\nvar elementArr = GetElementsById(\"id4\"); \nfor (var i in elementArr ) {\n    var elm = elementArr[i];\n    InfoMessage( \"ID:\" + elm.id + \", Name:\" + elm.name + \", Type:\" + elm.type + \", Value:\" + elm.value );\n\n}\n</code></pre> <p>The expected output is:</p> <p><pre><code>4.11    ID:id4, Name:event, Type:hidden, Value:search\n4.23    ID:id4, Name:process, Type:hidden, Value:login\n</code></pre> See also</p> <ul> <li>GetElementsByName() (see GetElementsByName() (function) )</li> <li>GetElementById() (see GetElementById() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementbyname-function","title":"GetElementByName() (function)","text":"<p>Description</p> <p>Used to retrieve the element with the specified name by querying the DOM of the HTML from the last response.</p> <p>Note: An element can be from the document.forms[].elements[], document.links[] or document.images[] collections.</p> <p>Syntax</p> <p><code>GetElementByName(\u201cname\u201d)</code></p> Parameter Name Description name The name of the elements to retrieve, enclosed in  quotation marks. <p>Return Value</p> <p>The first element with the requested name or Null if no element was found.</p> <p>See also</p> <ul> <li>GetElementsByName() (see GetElementsByName() (function) )</li> <li>GetElementById() (see GetElementById() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementsbyname-function","title":"GetElementsByName() (function)","text":"<p>Description</p> <p>Used to retrieve an array of all elements with the specified name by querying the DOM of the HTML from the last response.</p> <p>Note: An element can be from the document.forms[].elements[], document.links[] or document.images[] collections.</p> <p>Syntax</p> <p><code>GetElementsByName(\u201cname\u201d)</code></p> Parameter Name Description name The name of the elements to retrieve, enclosed in  quotation marks. <p>Return Value</p> <p>A list of the requested elements.</p> <p>Example</p> <pre><code>wlHttp.Get(\"http://www.webloadmpstore.com/login.php\")\nvar elementArr = GetElementsByName(\"event\");\nfor (var i in elementArr ) { \n    var elm = elementArr[i];\n    InfoMessage( \"Name:\" + elm.name + \", ID:\" + elm.id + \", Type:\" + \n    elm.type + \", Value:\" + elm.value );\n}\n</code></pre> <p>The expected output is:</p> <pre><code>4.11    Name:event, ID:, Type:hidden, Value:search\n\n4.23    Name:event, ID:, Type:hidden, Value:login\n</code></pre> <p>See also</p> <ul> <li>GetElementByName() (see GetElementByName() (function) )</li> <li>GetElementsById() (see GetElementsById() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementvaluebyid-function","title":"GetElementValueById() (function)","text":"<p>Description</p> <p>Used to retrieve the value of the element with the specified identification value by querying the DOM of the HTML from the last response.</p> <p>Note: An element can be from the document.forms[].elements[], document.links[] or document.images[] collections.</p> <p>Syntax</p> <p><code>GetElementValueById(\u201cid\u201d)</code></p> Parameter Name Description id The identification value of the element, enclosed in quotation marks. <p>Return Value</p> <p>The value of the first element with the requested identification value or Null if no element was found.</p> <p>Example <code>GetElementValueById(\u201csessionid\u201d)</code></p> <p>See also</p> <ul> <li>GetElementValueByName() (see GetElementValueByName() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getelementvaluebyname-function","title":"GetElementValueByName() (function)","text":"<p>Description</p> <p>Used to retrieve the value of the element with the specified name by querying the DOM of the HTML from the last response.</p> <p>Note: An element can be from the document.forms[].elements[], document.links[] or document.images[] collections.</p> <p>Syntax</p> <p><code>GetElementValueByName(\u201cname\u201d)</code></p> Parameter Name Description name The name of the elements to retrieve, enclosed in  quotation marks. <p>Return Value</p> <p>The value of the first element with the requested name or Null if no element was found.</p> <p>Example</p> <pre><code>wlHttp.Get(\"http://www.webloadmpstore.com/login.php\")\nvar elementArr = GetElementValueByName(\"event\");\nfor (var i in elementArr ) { \n    var elm = elementArr[i];\n    InfoMessage( \"Name:\" + elm.name + \", ID:\" + elm.id + \", Type:\" + \n    elm.type + \", Value:\" + elm.value );\n}\n</code></pre> <p>See also</p> <ul> <li>GetElementValueById() (see GetElementValueById() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getembeds-property","title":"GetEmbeds (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of embedded objects in an HTML page. The default value of GetEmbeds is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetEmbeds = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getfieldvalue-method","title":"GetFieldValue() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the HTML value attribute (initial value) of a form field, given its name attribute.</p> <p>Syntax</p> <p><code>GetFieldValue(FieldName [, frame])</code></p> <p>Parameters</p> Parameter Name Description FieldName The name of the field whose value is to be  retrieved. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested value of the specified field.</p> <p>Example</p> <p><code>ClientFirstName = wlHtml.GetFieldValue(\u201cFirstName\u201d)</code></p> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional <code>frame</code> parameter. In that case, the method only searches within the specified <code>frame</code> and all its nested frames.</p>"},{"location":"javascript/actions_objects_functions/#getfieldvalueinform-method","title":"GetFieldValueInForm() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the HTML value attribute (initial value) of a form field, given its name attribute. This method is similar to <code>GetFieldValue()</code>, but the search is limited to a specific form within a specific frame.</p> <p>Syntax</p> <p><code>GetFieldValueInForm(FormIndex, FieldName [, frame])</code></p> <p>Parameters</p> Parameter  Name Description FormIndex Index number that  identifies the specific form to which the search is to be limited. FieldName The name of the field whose value is to be  retrieved. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested HTML value attribute of the form field.</p> <p>Example</p> <p>If an HTML page includes two frames with a form in the second frame.</p> <p><code>wlHtml.GetFieldValueInForm(0, \u201cFirstName\u201d, Frame1)</code> searches the first form in Frame1 and returns <code>\u201cBill\u201d</code>.</p> <p>Comment</p> <p>The method does not search within nested frames. Omit the optional <code>frame</code> parameter if the HTML page does not contain frames.</p>"},{"location":"javascript/actions_objects_functions/#getformaction-method","title":"GetFormAction() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve a form object, representing a <code>&lt;FORM&gt;</code> element. The action attribute specifies the URL where the form data is to be submitted.</p> <p>Syntax</p> <p><code>GetFormAction(FormIndex [, frame])</code></p> <p>Parameters</p> Parameter Name Description FormIndex Index number that  identifies the specific form to which the search is to be limited. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested form object.</p> <p>Example</p> <p>If an HTML page includes two frames with a form in the second frame</p> <p><code>wlHtml.GetFormAction(0, Frame1)</code> returns a form object for the form.</p> <p>Comment</p> <p>The method does not search within nested frames. Omit the optional <code>frame</code> parameter if the HTML page does not contain frames.</p>"},{"location":"javascript/actions_objects_functions/#getframebyurl-method","title":"GetFrameByUrl() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve a frame object given its URL.</p> <p>Syntax</p> <p><code>GetFrameByUrl(UrlPattern [, frame])</code></p> <p>Parameters</p> Parameter  Name Description UrlPattern The URL for the frame requested. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested frame.</p> <p>Example</p> <pre><code>//Retrieve Frame0\nFrame0 = wlHtml.GetFrameByUrl(\u201chttp://MyCompany/Frame0.html\u201d)\n//Retrieve Frame0.1\nFrame0_1 = wlHtml.GetFrameByUrl(\u201chttp://MyCompany/Frame0B.html\u201d)\n</code></pre> <p>You may use * as a wildcard character in the URL. The method returns the first frame matching the search pattern. For example:</p> <pre><code>// To match URL (http://MyCompany/Frame0B.html)\nFrame0_1 = wlHtml.GetFrameByUrl(\u201c*B.htm*\u201d)\n</code></pre> <p>You may narrow the search to frames nested within a specific parent frame by specifying the optional <code>frame</code> parameter. For example:</p> <pre><code>//Search within Frame0 and retrieve Frame0.0\nFrame0_0 = wlHtml.GetFrameByUrl(\u201c*/MyCompany/*\u201d,Frame0)\n</code></pre> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>Comment out <code>GetFrames=false</code> when you use the GetFrameByUrl method.</p>"},{"location":"javascript/actions_objects_functions/#getframes-property","title":"GetFrames (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of Frames and IFrames in an HTML page. The default value of GetFrames is true.</p> <p>Note: This property can only be inserted manually.   Although the default value for GetFrames is true, during recording, the following is automatically inserted in the script: <code>wlGlobals.GetFrames=false</code>;</p> <p>Example</p> <p><code>wlGlobals.GetFrames = true</code></p> <p>Comments</p> <p>When GetMetas is true, GetFrames should also be true as the redirection is retrieved as a frame (see GetMetas (property) ).</p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getframeurl-method","title":"GetFrameUrl() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve a <code>location</code> object representing the URL of an HTML page. Optionally, specify a nested <code>frame</code>.</p> <p>Syntax</p> <p><code>GetFrameUrl([frame])</code></p> Parameter Name Description [frame] An optional frame specification, used to limit the scope of the search to a specific frame. <p>Comment</p> <p>Comment out <code>GetFrames=false</code> when you use the GetFrameByUrl method.</p> <p>Return Value</p> <p>The requested location object.</p> <p>Comment</p> <p>This method is equivalent to the location property of a frame object (see *frames (object)).</p>"},{"location":"javascript/actions_objects_functions/#getheadervalue-method","title":"GetHeaderValue() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the value of an HTTP header field.</p> <p>Syntax</p> <p><code>GetHeaderValue(HeaderName [, frame])</code></p> <p>Parameters</p> Parameter  Name Description HeaderName The name of the header whose value is to be  retrieved. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested HTTP header field value.</p> <pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F\nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html\nConnection: close\nHost: Server2.MyCompany.com:80\n\nwlHtml.GetHeaderValue(\u201cHost\u201d)\nreturns \u201cServer2.MyCompany.com\".\n</code></pre> <p>-Or-</p> <pre><code>document.wlHeaders[\u201chost\u201d] \ndocument.frame[0].wlHeaders[\u201chost\u201d]\n</code></pre> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#gethost-method","title":"GetHost() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the host of a URL, including the port number.</p> <p>Syntax</p> <p>GetHost([frame])</p> <p>Parameters</p> Parameter Name Description [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested host information.</p> <p>Example</p> <p>For the following HTTP Header example:</p> <pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html \nConnection: close\nHost: Server2.MyCompany.com:80 \n\nwlHtml.GetHost()\nreturns \u201cServer2.MyCompany.com:80\u201d.\n</code></pre> <p>-Or-</p> <pre><code>document.wlHeaders[\u201chostname\u201d] \ndocument.frame[0].wlHeaders[\u201chostname\u201d]\n</code></pre> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#gethostname-method","title":"GetHostName() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the host name of a URL, not including the port number.</p> <p>Syntax</p> <p><code>GetHostName([frame])</code></p> <p>Parameters</p> Parameter Name Description [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested host name.</p> <p><pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F\nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html\nConnection: close\nHost: Server2.MyCompany.com:80\n</code></pre> calling <code>wlHtml.GetHostName()</code> returns \u201cServer2.MyCompany.com\u201d.</p> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getimages-property","title":"GetImages (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of images in an HTML page. The default value of <code>GetImages</code>is true.</p> <p>When <code>GetImages</code> is false, the load engine does not retrieve the images from an HTML page.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetImages = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getimagesinthinclient-property","title":"GetImagesInThinClient (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>When set to true, the \u201cThin\u201d client will retrieve images. The default value of GetImagesInThinClient is false.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetImagesInThinClient = true</code></p> <p>See also</p> <ul> <li>SetClientType (see SetClientType (function) )</li> <li>Collections </li> <li>document (see document (object) )</li> <li>Header (see Header (property) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getipaddress-method","title":"GetIPAddress() (method)","text":"<p>Method of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Returns the identity of the current IP address.</p> <p>Syntax</p> <p><code>GetIPAddress()</code></p> <p>Return Value</p> <p>Returns a string with the IP address for the current Virtual Client.</p> <p>Example</p> <p><pre><code>wlHttp.MultiIPSupport = true \nCurrentIPAddress = wlHttp.GetIPAddress()\nwlHttp.Get()\n</code></pre> Comment</p> <p>Requesting the identity of the current IP address is only meaningful if your script is handling more than one IP address. <code>GetIPAddress()</code> therefore can only return a value if <code>MultiIPSupport=true</code>. If <code>MultiIPSupport</code> is turned off this method will return <code>\u201cUndefined\u201d</code>.</p> <p>The scope of <code>MultiIPSupport</code> depends, of course, on whether it was set through <code>wlGlobals</code>, <code>wlLocals</code>, or <code>wlHttp</code>. For example, if your script sets <code>wlGlobals.MultiIPSupport</code>, then <code>GetIPAddress()</code> returns a value at any point in the script. If you set only wlHttp.<code>MultiIPSupport</code>, then <code>GetIPAddress()</code> returns a value only if called before the next immediate HTTP transaction.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#getline-function","title":"GetLine() (function)","text":"<p>Description</p> <p>The <code>GetLine()</code> function reads and parses data from an ASCII file. The function reads the file one line at a time in the following way:</p> <ul> <li>If you opened the file using the default sequential mode (see Open() (function) ), then:<ul> <li>The first <code>GetLine()</code> call in any thread of a Load Generator reads the first line of the file.</li> <li>Each successive call in any thread of any process of the Load Generator (across the master and slave processes of a single Load Generator/script combination) reads the next line of the file.</li> <li>When the last line of the file has been read, the next access loops back to the first line of the file.</li> </ul> </li> <li>If you opened the file for random access (see Open() (function) ), each successive call in any thread of any process of the Load Generator (across the master and slave processes of a single Load Generator/script combination) reads some randomly selected line of the file. To read the input file lines in random order, you must include <code>Open(filename, WLRandom)</code> in the script\u2019s <code>InitAgenda()</code> function.</li> </ul> <p>In this way, a relatively small file can supply an unending stream of test data, and different clients are supplied with different sequences of data.</p> <p>Note: The last line of the file should not include a carriage return.</p> <p>Syntax</p> <p><code>GetLine(filename[, delimiter])</code></p> <p>Parameters</p> Parameter  Name Description filename A string with the name of  the file being read. May optionally include the full directory path. [delimiter] Optional character separating fields in one  line of the input file. Default delimiter character is a comma. <p>Return Value</p> <p>The <code>GetLine</code> function returns an array containing both the full lines and the individual tokens. The array (called <code>LineArray</code> in this example) includes the following elements:</p> <ul> <li>LineArray[0]-the complete line. For example:       <code>\u201cJohn,Smith,jsmith@ABC.com\u201d</code></li> <li>LineArray[1]-the first token. In this example:      <code>\u201cJohn\u201d</code></li> <li>LineArray[2]-the second token. In this example:      <code>\u201cSmith\u201d</code></li> <li>LineArray[3]-the third token. In this example:      <code>\u201cjsmith@ABC.com\u201d</code></li> <li>LineArray.RoundNum-number of rounds through the file (including the current round). For example: 4</li> <li>LineArray.LineNum-the number of the line that was just read. For example: 1</li> </ul> <p>Example</p> <p>To read and parse the next line of the mydata.txt ASCII input file, in this case including a directory path:</p> <p><code>LineArray = GetLine(\u201cc:\\\\temp\\\\mydata.txt\u201d)</code></p> <p>To specify a different <code>delimiter</code>:</p> <p><code>LineArray = GetLine(\u201cc:\\\\temp\\\\mydata.txt\u201d, \u201c:\u201d)</code></p> <p>Comment</p> <p>JavaScript requires that you double the backslash in strings. If your directory path includes the backslash character, remember to double the backslashes, as in the preceding example.</p> <p>If the line found in the file contains no separator characters, then the entire line is considered to be a single token. In that case, the function returns a two-element array (<code>LineArray[0]</code> and <code>LineArray[1]</code>), each containing the entire line.</p> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>File Management Functions </li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile (see wlOutputFile() (constructor) )</li> <li>wlOutputFile() (see wlOutputFile (object) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getline-method","title":"GetLine() (method)","text":"<p>Method of Object</p> <ul> <li>wlInputFile (see wlInputFile (object) )</li> </ul> <p>Description</p> <p>The <code>GetLine()</code> function reads and parses data from an ASCII file. The function reads the file one line at a time in the following way:</p> <ul> <li>If you opened the file using the default WLFileSequential access method (see Open() (method) ), then:<ul> <li>The first <code>GetLine()</code> call in any thread of a Load Generator reads the first line of the file.</li> <li>Each successive call in any thread of any process of any Load Generator reads the next line of the file.</li> <li>When the last line of the file has been read, the next access loops back to the first line of the file.</li> </ul> </li> <li>If you opened the file using the WLFileSequentialUnique access method (see Open() (method) ), then the procedure is basically as when using the WLFileSequential access mode, except that the if the value/row is being used by another VC, it is not retrieved, but skipped.</li> <li>If you opened the file using the WLFileRandom access method (see Open() (method) ), <code>GetLine()</code> reads a random value/row from the file, where there might be multiple access to the same line by different Load Generator machines.</li> <li>If you opened the file using the WLFileRandomUnique access method (see Open() (method) ), <code>GetLine()</code> reads a unique, unused value/row randomly from the file.</li> </ul> <p>Note: The last line of the file should not include a carriage return.</p> <p>Syntax</p> <p><code>strInputFileLine = myFileObj.getLine(*delimiter*)</code></p> <p>Parameters</p> Parameter  Name Description delimiter Optional character separating fields in one  line of the input file. Default delimiter character is a comma. <p>Return Value</p> <p>The GetLine function returns an array containing both the full lines and the individual tokens. The array (called <code>strInputFileLine</code> in this example) includes the following elements:</p> <ul> <li>strInputFileLine [0]-the complete line. For example:        <code>\u201cJohn,Smith, jsmith@ABC.com\u201d</code></li> <li>strInputFileLine [1]-the first token. In this example:      <code>\u201cJohn\u201d</code></li> <li>strInputFileLine [2]-the second token. In this example:      <code>\u201cSmith\u201d</code></li> <li>strInputFileLine [3]-the third token. In this example:      <code>\u201cjsmith@ABC.com\u201d</code></li> <li>strInputFileLine.LineNum-the number of the line that was just read. For example: 1</li> </ul> <p>Example</p> <p>To read and parse the next line of the ASCII input file specified in myFileObj:</p> <p><code>strInputFileLine = GetLine(\u201c,\u201d)</code></p> <p>Comment</p> <p>If the line found in the file contains no separator characters, then the entire line is considered to be a single token. In that case, the function returns a two-element array (<code>strInputFileLine[0]</code> and <code>strInputFileLine[1])</code>, each containing the entire line.</p> <p>See also</p> <ul> <li>File Management Functions </li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlInputFile (see wlInputFile() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getlinkbyname-method","title":"GetLinkByName() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve a location object representing a link, given the hypertext display.</p> <p>Syntax</p> <p><code>GetLinkByName(Hypertext [, frame])</code></p> <p>Parameters</p> Parameter  Name Description Hypertext The hypertext displayed in the desired  link. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested location object.</p> <p>Example</p> <p>Suppose the HTML on a page contains:</p> <p><code>&lt;A href=\u201chttp://MyCompany/link1.html\u201d&gt;Product information &lt;/A&gt;</code></p> <p>In this example,</p> <p><code>wlHtml.GetLinkByName(\u201cProduct information\u201d)</code></p> <p>returns a location object for <code>http://MyCompany/link1.html.</code></p> <p>The search is case sensitive. You may use the * wildcard character in the <code>Hypertext</code> string. For example, </p> <p><code>wlHtml.GetLinkByName(\u201c*roduct info*\u201d)</code>  also returns an object for <code>http://MyCompany/link1.html.</code></p> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getlinkbyurl-method","title":"GetLinkByUrl() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve a location object representing a link, given part of the URL string.</p> <p>Syntax</p> <p><code>GetLinkByUrl(UrlPattern [, frame])</code></p> <p>Parameters</p> Parameter  Name Description UrlPattern The URL of the desired link. Use the *  wildcard character to represent the missing parts. [frame] An optional frame  specification, used to limit the scope of the search to a specific frame. <p>Return Value</p> <p>The requested location object.</p> <p>Example</p> <p>Suppose the HTML on a page contains:</p> <p><code>&lt;A href=\u201chttp://MyCompany/link1.html\u201d&gt;Product information &lt;/A&gt;</code></p> <p>In this example,</p> <p><code>wlHtml.GetLinkByUrl(\u201c*link1.htm*\u201d)</code> returns a <code>location</code> object for <code>http://MyCompany/link1.html.</code></p> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified <code>frame</code> and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getmessage-method","title":"GetMessage() (method)","text":"<p>Method of Object</p> <ul> <li>wlException (see wlException (object) )</li> </ul> <p>Description</p> <p>Returns the message string text stored in this object.</p> <p>Syntax</p> <p><code>*wlExceptionObject*.GetMessage()</code></p> <p>Return Value</p> <p>Text string of the error message for this object.</p> <p>Example</p> <p><code>MeaningfulErrorMessage = myExceptionObject.GetMessage()</code></p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException (see wlException (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getmetas-property","title":"GetMetas (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>The <code>GetMetas</code> property, when set to true, enables the support of redirection for non-recorded scripts, for websites using the HTML META tag (for example, www.ynet.co.il).</p> <p>Note: Since scripts that were recorded automatically include the redirected URL, the <code>GetMetas</code> property should be used only in scripts that were written manually and that contain a URL with meta direction.</p> <p>Example</p> <p><code>wlGlobals.GetMetas = false</code></p> <p>Comments</p> <ul> <li>Because the redirection is retrieved as a frame, the GetFrames property must be set to true (see GetFrames (property) ).</li> <li>The additional wlHttp.GET will not be part of the script (it will be like frame 0).</li> <li>The desired page will be requested only on playback.</li> <li>The page will not be visible in WebLOAD Recorder\u2019s Browser View. This is because redirection will not be performed (the document will not be replaced). WebLOAD implements the redirected URL by adding a frame to the parent HTML. That is, the first page will be added with an extra frame containing the redirection URL (fully parsed and all the objects in it will be get).</li> </ul>"},{"location":"javascript/actions_objects_functions/#getoperatingsystem-function","title":"GetOperatingSystem() (function)","text":"<p>Description</p> <p>Returns a string identifying the operating system running on the current Load Generator.</p> <p>Syntax</p> <p><code>GetOperatingSystem()</code></p> <p>Return Value</p> <p>Returns the name of the operating system running on the current Load Generator in</p> <p>the format of the operating system name followed by some version identification.</p> <p>For example, if the Load Generator is working with a Solaris platform, this function would return the string \u2018Solaris\u2019 followed by the version name and release number, such as SunOS2.</p> <p>If the Load Generator is working with a Linux platform, this function would return the string \u2018Linux\u2019 followed by the version name and release number, such as RedHat1.</p> <p>If the Load Generator is working with a Windows platform, possible return values include:</p> <ul> <li>Windows 95</li> <li>Windows 98</li> <li>Windows NT/2000 (ServicePack#)</li> <li>Windows XP</li> <li>Windows (for any other Windows version)</li> </ul> <p>See also</p> <ul> <li>GeneratorName() (see GeneratorName() (function) )</li> <li>Identification Variables and Functions </li> <li>RoundNum (see RoundNum (variable) )</li> <li>VCUniqueID() (see VCUniqueID() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getothers-property","title":"GetOthers (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of objects not covered by the other Get methods in an HTML page. The default value of GetOthers is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetOthers = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getportnum-method","title":"GetPortNum() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the port number of the current URL.</p> <p>Syntax</p> <p><code>GetPortNum([frame])</code></p> <p>Return Value</p> <p>The requested number.</p> <p>Example</p> <p>For the following HTTP Header example:</p> <pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html \nConnection: close\nHost: Server2.MyCompany.com:80\n</code></pre> <p><code>wlHtml.GetPortNum()</code> would return a value such as 80.</p> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional <code>frame</code> parameter. In that case, the method searches within the specified <code>frame</code> and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getqsfieldvalue-method","title":"GetQSFieldValue() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the value of a search attribute in a URL. The search attributes are the fields following the ? symbol, appended to the end of a URL.</p> <p>Syntax</p> <p><code>GetQSFieldValue(Url, FieldName)</code></p> <p>Parameters</p> Parameter  Name Description Url The complete URL string to be parsed and  searched. FieldName The name of the field whose value is to be  retrieved. <p>Return Value</p> <p>The requested value.</p> <p>Example</p> <p>The following search string:</p> <p><code>wlHtml.GetQSFieldValue(\u201chttp://www.ABCDEF.com/query.exe + \u201c?SearchFor=icebergs&amp;SearchType=ExactTerm\u201d,\u201dSearchFor\u201d)</code></p> <p>returns <code>\u201cicebergs\u201d</code>.</p>"},{"location":"javascript/actions_objects_functions/#getscripts-property","title":"GetScripts (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of external JavaScript scripts in an HTML page. The default value of GetScripts is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetScripts = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetXml() (see GetXml() (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getseverity-method","title":"GetSeverity() (method)","text":"<p>Method of Object</p> <ul> <li>wlException (see wlException (object) )</li> </ul> <p>Description</p> <p>Returns the severity level value stored in this object.</p> <p>Syntax</p> <p><code>wlExceptionObject.GetSeverity()</code></p> <p>Return Value</p> <p>Integer, representing one of the following error level values:</p> <ul> <li><code>WLError</code>-this specific transaction failed and the current test round was aborted. The script displays an error message in the Log window and begins a new round.</li> <li><code>WLSevereError</code>-this specific transaction failed and the test session must be stopped completely. The script displays an error message in the Log window and the Load Generator on which the error occurred is stopped.</li> </ul> <p>Example</p> <p><code>SeverityLevel = myExceptionObject.GetSeverity()</code></p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetMessage() (see GetMessage() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#getstatusline-method","title":"GetStatusLine() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the status string from the HTTP header.</p> <p>Syntax</p> <p><code>GetStatusLine([frame])</code></p> Parameter  Name Description [frame] An optional frame  specification, used to retrieve the status string of a specific frame. <p>Return Value</p> <p>The requested status string.</p> <p>Example</p> <p>For the following HTTP Header example:</p> <pre><code>HTTP/1.1 200 OK`\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html Connection: close\nHost: Server2.MyCompany.com:80\n\n\nwlHtml.GetStatusLine()  //would return \u201cOK\u201d.\n</code></pre> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional <code>frame</code> parameter. In that case, the method searches within the specified <code>frame</code> and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getstatusnumber-method","title":"GetStatusNumber() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the status code from the HTTP header.</p> <p>Syntax</p> <p><code>GetStatusNumber([frame])</code></p> <p>Parameters</p> Parameter Name Description [frame] An optional frame  specification, used to retrieve the status code of a specific frame. <p>Return Value</p> <p>The requested status number.</p> <p>Example</p> <p>For the following HTTP Header example:</p> <p><pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html \nConnection: close\nHost: Server2.MyCompany.com:80\n\nlHtml.GetStatusNumber()  //would return 200.\n</code></pre> Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional <code>frame</code> parameter. In that case, the method searches within the specified <code>frame</code> and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#geturi-method","title":"GetUri() (method)","text":"<p>Method of Object</p> <ul> <li>wlHtml (see wlHtml (object) )</li> </ul> <p>Description</p> <p>Retrieve the URI part of a URL. The URI is the portion of the address following the host name.</p> <p>Syntax</p> <p><code>GetUri([frame])</code></p> Parameter Name Description [frame] An optional frame specification, used to retrieve  the URI of a specific frame. <p>Return Value</p> <p>The requested URI string.</p> <p>Example</p> <p>For the following HTTP Header example:</p> <pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html \nConnection: close\nHost: Server2.MyCompany.com:80\n\nwlHtml.GetUri() //would return \u201cWebPage.html\u201d.\n</code></pre> <p>Comment</p> <p>By default, the method searches in all frames of the parse tree and returns the first match. You may narrow the search by specifying an optional frame parameter. In that case, the method searches within the specified frame and all its nested frames.</p> <p>If you are specifying a frame, comment out <code>GetFrames=false</code>.</p>"},{"location":"javascript/actions_objects_functions/#getxml-property","title":"GetXML (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables the retrieval of external XML in an HTML page. The default value of GetXML is true.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.GetXML = true</code></p> <p>See also</p> <ul> <li>GetApplets() (see GetApplets (property) )</li> <li>GetCss() (see GetCss (property) )</li> <li>GetEmbeds() (see GetEmbeds (property) )</li> <li>GetFrames() (see GetFrames (property) )</li> <li>GetImages() (see GetImages (property) )</li> <li>GetOthers() (see GetOthers (property) )</li> <li>GetScripts() (see GetScripts (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#hash-property","title":"hash (property)","text":"<p>Property of Object</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The HTML anchor portion of the URL, not including the # initial symbol (read-only string).</p> <p>Example</p> <p>Given the following HTML fragment:</p> <pre><code>&lt;A href=\"https://www.ABCDEF.com:80/products/order.html#modems\"&gt;\n&lt; A href=\u201chttp://www.ABCDEF.com/search.exe?\n     SearchFor=modems&amp;SearchType=ExactTerm\u201d&gt;\nlinks[0].hash is \u201cmodems\u201d.\n</code></pre>"},{"location":"javascript/actions_objects_functions/#head-method","title":"Head() (method)","text":"<p>Method of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Head command.</p> <p>Syntax</p> <p><code>Head()</code></p> <p>Comment</p> <p>This method operates in the same way as <code>Get()</code>, but it retrieves only the HTTP or HTTPS header from the server. It does not download the body of the URL, such as a Web page.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Post() (see Post() (method) )</li> <li>wlGlobals</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#header-property","title":"Header (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>A collection of HTTP header fields that you want to send in a <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> call.</p> <p>Example</p> <p>By default, WebLOAD sends the following header in any HTTP command:</p> <pre><code>host: &lt;host&gt;\nuser-agent: Radview/HttpLoader 1.0 \naccept: */*\n</code></pre> <p>Here, <code>&lt;host&gt;</code> is the host name to which you are connecting, for example:</p> <p><code>www.ABCDEF.com:81.</code></p> <p>You may reset these properties, for example, as follows:</p> <p><code>wlHttp.UserAgent = \u201cMozilla/4.03 [en] (WinNT; I)\u201d</code></p> <p>Alternatively, you can use the Header property to override one of the default header fields. For example, you can redefine the following header field:</p> <p><code>wlHttp.Header[\u201cuser-agent\u201d] = \u201cMozilla/4.03 [en] (WinNT; I)\u201d</code></p> <p>GUI mode</p> <p>WebLOAD offers a simple way to reset configuration properties using the various tabs of the Default Options dialog box, accessed from the Tools tab of the ribbon. Resetting configuration properties as you run and rerun various testing scenarios enables you to fine tune your tests to match your exact needs at that moment. For example, you can reset the user-agent value through the Browser Parameters tab.</p> <p>Comment</p> <p>Use the wlClear() (see wlClear() (method) ) method to delete specific Header fields or clear all the Header fields at once.</p> <p>You cannot override the host header or set a cookie header using the Header property. To set a cookie, see wlCookie (see wlCookie (object) )</p> <p>Use the <code>wlHttp.Header</code> property to change or reset specific individual values immediately before executing the next <code>wlHttp GET/POST request</code>.</p> <p>Any information set using the <code>wlHttp.Header</code> property takes priority over any defaults set through the GUI (recommended) or using the <code>wlGlobals</code>, <code>wlLocals</code>, or <code>wlHttp</code> properties. If there is any discrepancy between the document header information and the HTTP values, WebLOAD will work with the information found in the <code>wlHttp.Header</code> property while also issuing a warning to the user.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Post() (see Post() (method) )</li> <li>type (see type (property) )</li> <li>UserAgent (see UserAgent (property) )</li> <li>value (see value (property) )</li> <li>wlClear() (see wlClear() (method) )</li> <li>wlGlobals</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#host-property","title":"host (property)","text":"<p>Property of Object</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The host portion of the URL, including both the host name and the port (read-only string).</p> <p>Example</p> <p>Given the following HTML fragment:</p> <pre><code>&lt;A href=\"https://www.ABCDEF.com:80/products/order.html#modems\"&gt;\n&lt;A href=\u201chttp://www.ABCDEF.com/search.exe?\n     SearchFor=modems&amp;SearchType=ExactTerm\u201d&gt;\nlinks[0].host is \u201cwww.ABCDEF.com:80\u201d\n</code></pre>"},{"location":"javascript/actions_objects_functions/#hostname-property","title":"hostname (property)","text":"<p>Property of Object</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The host name portion of the URL (read-only string).</p> <p>Example</p> <p>Given the following HTML fragment:</p> <pre><code>&lt;A href=\"https://www.ABCDEF.com:80/products/order.html#modems\"&gt;\n&lt;A href=\u201chttp://www.ABCDEF.com/search.exe?\n     SearchFor=modems&amp;SearchType=ExactTerm\u201d&gt;\nlinks[0].host is \u201cwww.ABCDEF.com\"\n</code></pre>"},{"location":"javascript/actions_objects_functions/#href-property","title":"href (property)","text":"<p>Property of Object</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The complete URL of the link (read-only string).</p> <p>Example</p> <p>Given the following HTML fragment:</p> <pre><code>&lt;A href=\"https://www.ABCDEF.com:80/products/order.html#modems\"&gt;\n&lt;A href=\u201chttp://www.ABCDEF.com/search.exe?\n     SearchFor=modems&amp;SearchType=ExactTerm\u201d&gt;\nlinks[0].href is \n\u201chttps://www.ABCDEF.com/products/order.html#modems\u201d\n</code></pre> <p>Comment</p> <p>The <code>hre</code>f property contains the entire URL. The other <code>link</code> properties contain portions of the URL. <code>links[#].href</code> is the default property for the <code>link</code> object. For example, if</p> <p><code>links[0\\]=\u2018http://microsoft.com\u2019</code></p> <p>then the following two URL specifications are equivalent:</p> <p><code>mylink=links[0].href</code></p> <p>and</p> <p><code>mylink=links[0]</code></p>"},{"location":"javascript/actions_objects_functions/#httpcachescope-property","title":"HttpCacheScope (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Defines when the Http cache will be cleared. Possible values are:</p> <ul> <li>None \u2013 Defines that all Virtual Clients simulate a browser with no available cache.</li> <li>SingleCommand \u2013 Defines that cache be cleared after each request.</li> <li>SingleCommandIfModified \u2013 Defines that WebLOAD will check for a newer version of the cached item with every request. Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</li> <li>SingleRound \u2013 Defines that cache be cleared after each script execution round. This is the default value for the HttpCacheScope property.</li> <li>WholeRun \u2013 Defines that the cache will never be cleared. Each client maintains its own cache.</li> <li>WholeRunIfModified \u2013 Defines that WebLOAD will check for a newer version of the cached item after each round. Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</li> </ul> <p>Example</p> <p><code>wlGlobals.HttpCacheScope = \u201cSingleCommand\u201d</code></p> <p>GUI mode</p> <p>In the WebLOAD Recorder, select one of the cache scope options in the Browser Cache tab of the Default/Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Note: The default value for the cache scope is SingleRound.</p> <p>See also</p> <ul> <li>HttpCacheCachedTypes (see HttpCacheCachedTypes (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#httpcachecachedtypes-property","title":"HttpCacheCachedTypes (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Specifies the type of content to include in the HTTP cache: None, HTML, JS, CSS, XML, Applet, Image, Dynamic (a URL with a query string). The default value is JS, CSS, XML, Applet, Image.</p> <p>Example</p> <p><code>wlGlobals.HttpCacheCachedTypes = \u201cImage,CSS\u201d</code></p> <p>GUI mode</p> <p>For wlGlobals.HttpCacheCachedTypes, you can also set the Cache Content Filter from WebLOAD Recorder or Console.</p> <p>In WebLOAD Recorder, in the Browser Cache tab of the Default or Current Options dialog box, select either the Default or User Filter in the Cache Content Filter area. If you select User Filter, check the relevant filters.</p> <p>In WebLOAD Console, in the Browser Cache tab of the Default or Current Options dialog box or the Script Options dialog box, select either the Default or User Filter in the Cache Content Filter area. If you select User Filter, check the relevant filters.</p> <p>See also</p> <ul> <li>HttpCacheScope (see HttpCacheScope (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#httpequiv-property","title":"httpEquiv (property)","text":"<p>Property of Object</p> <ul> <li>wlMetas (see wlMetas (object) )</li> </ul> <p>Description</p> <p>Retrieves the value of the HTTP-EQUIV attribute of the META tag (read-only string).</p> <p>Syntax </p> <p><code>wlMetas[index#].httpEquiv</code></p> <p>Example </p> <p><code>document.wlMetas[0].httpEquiv</code></p> <p>See also</p> <ul> <li>content (see content (property) )</li> <li>Name (see Name (property) )</li> <li>Url (see Url (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#httpsproxy-httpsproxyusername-httpsproxypassword-properties","title":"HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Identifies the proxy server that the script uses for HTTP SSL access when <code>UseSameProxyforSSL</code> is set to false. The user name and password are for SSL proxy servers that require user authorization. These properties are used when you are working with a separate SSL proxy.</p> <p>Note: This property can only be inserted manually.</p> <p>Syntax</p> <p><code>wlGlobals.httpsProxyProperty = \u201cTextString\u201d</code></p> <p>Example</p> <pre><code>wlGlobals.httpsProxy = \u201cproxy.ABCDEF.com:8080\u201d\nwlGlobals.httpsProxyUserName = \u201cBill\u201d \nwlGlobals.httpsProxyPassWord = \u201cClassified\u201d\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> <li>Proxy, ProxyUserName, ProxyPassWord (see Proxy, ProxyUserName,</li> <li>ProxyNTUserName, ProxyNTPassWord (see ProxyNTUserName, ProxyNTPassWord</li> <li>HttpsProxyNTUserName, HttpsProxyNTPassWord (see HttpsProxyNTUserName, HttpsProxyNTPassWord (properties))</li> <li>UseSameProxyForSSL (see UseSameProxyForSSL (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#httpsproxyntusername-httpsproxyntpassword-properties","title":"HttpsProxyNTUserName, HttpsProxyNTPassWord (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Provides user authorization to the proxy server that the script uses for HTTP SSL access on Windows servers when <code>UseSameProxyforSSL</code> is set to <code>false</code>.</p> <p>Syntax</p> <p><code>wlGlobals.httpsProxyNTProperty = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>wlGlobals.httpsProxyNTUserName = \u201cBill\u201d</code></p> <p><code>wlGlobals.httpsProxyNTPassWord = \u201cClassified\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> <li>HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord (see HttpsProxy,)</li> <li>Proxy, ProxyUserName, ProxyPassWord (see Proxy, ProxyUserName,)</li> <li>ProxyNTUserName, ProxyNTPassWord (see ProxyNTUserName, ProxyNTPassWord)</li> <li>UseSameProxyForSSL (see UseSameProxyForSSL (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#id-property","title":"id (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>form (see form (object) )</li> <li>frames (see frames (object) )</li> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>script (see script (object) )</li> <li>Select </li> <li>wlTables (see wlTables (object) )</li> <li>wlXmls (see wlXmls (object) ))</li> </ul> <p>Description</p> <p>Retrieves the string identifying the parent object. The ID value is taken from the ID attribute within the tag. This property is optional. If this object does not have an ID attribute then the value is undefined.</p> <p>When working with <code>element</code>, <code>forms</code>, <code>frames</code>, <code>image</code>, or <code>map</code> objects, returns a string containing an alternative identification means for the complete image, map, forms or frame or for elements of type Button, CheckBox, File, Image, Password, Radio, Reset, Select, Submit, Text, and TextArea.</p> <p>Example</p>"},{"location":"javascript/actions_objects_functions/#wltables-example","title":"wlTables example:","text":"<p>If the first table on a page is assigned the ID tag myTable, access the table using any of the following:</p> <p><code>document.wlTables[0]</code></p> <p>-Or-</p> <p><code>document.wlTables.myTable</code></p> <p>-Or-</p> <p><code>document.wlTables[myTable]</code></p> <p>If duplicate identifiers are found, the id property will refer to the first <code>wlTables</code> object found with that identifier.</p>"},{"location":"javascript/actions_objects_functions/#wlxmls-example","title":"wlXmls example:","text":"<p>If the first XML object on a page is assigned the ID tag <code>myXmlDoc</code>, access the object using any of the following:</p> <p><code>MyBookstore = document.wlXmls[0]</code></p> <p>-Or-</p> <p>M<code>yBookstore = document.wlXmls.myXmlDoc</code></p> <p>-Or-</p> <p><code>MyBookstore = document.wlXmls[\u201cmyXmlDoc\u201d]</code></p> <p>If duplicate identifiers are found, the id property will refer to the first XML object found with that identifier.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li>cols (see cols (property) </li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>load() (see load() (method) )</li> <li>loadXML() (see loadXML() (method) </li> <li>load() and loadXML() Method Comparison </li> <li>row (see row (object) ) (wlTables property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>src (see src (property) )</li> <li>tagName (see tagName (property) ) (cell property)</li> <li>Working with HTTP Protocol in the WebLOAD Scripting Guide</li> <li>XMLDocument (see XMLDocument (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#image-object","title":"Image (object)","text":"<p>Property of Objects</p> <p><code>Image</code> objects on a Web page are accessed through the <code>document.all</code> collection of the standard DOM structure.</p> <p>Description</p> <p>Each <code>Image</code> object represents one of the images or video clips embedded in a document (HTML <code>&lt;IMG&gt;</code> element). <code>Image</code>objects are accessed through Images Collections . (Compare to the element (see element (object) ) object, which stores the parsed data for a single HTML form element, where the element may be any one of a variety of types, and the form (see form (object) ) object, which stores the parsed data for an entire HTML form.)</p> <p><code>image</code> objects are grouped together within collections of <code>images</code>, accessed directly through the <code>document</code> object (<code>document.images[#]</code>).</p> <p>Syntax</p> <p>To find out how many <code>image</code> objects are contained within a document, check the value of:</p> <p><code>document.images.length</code></p> <p>Access each image\u2019s properties directly using the following syntax:</p> <p><code>document.images[index#].&lt;image-property&gt;</code></p> <p>Example</p> <p><code>document.images[1].src</code></p> <p>Properties</p> <ul> <li>id (see id (property) )</li> <li>InnerLink (see InnerLink (property) )</li> <li>Name (see Name (property) )</li> <li>OuterLink (see OuterLink (property) )</li> <li>protocol (see protocol (property) )</li> <li>src (see src (property) )</li> <li>Url (see Url (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>form (see form (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#includefile-function","title":"IncludeFile() (function)","text":"<p>Description</p> <p>Instructs WebLOAD to include the specified file, and optionally execute scripts that are stored within that file, as part of the initialization process before beginning the main script execution rounds. Encourages modular programming by enabling easy access to sets of library function files.</p> <p>Syntax</p> <p><code>IncludeFile(filename[, WLExecuteScript])</code></p> <p>Parameters</p> Parameter Name Description filename A string or variable  containing the full literal name of the file to be included. WebLOAD assumes  that the file is located in the default directory specified in the File  Locations tab (User Include Files entry) in theTools &gt; Global Options dialog box in the WebLOAD  Console or in the Tools &gt; Settings dialog box in the WebLOAD Recorder. For additional information about  the included file\u2019s location, refer to Determining  the Included File Location in the WebLOAD  Scripting Guide. Once the file is found, any functions or variables  defined within that file are compiled and included within the calling script  when the script is compiled. WLExecuteScript <code>WLExecuteScript</code> is a global  constant that acts as a flag when passed as a parameter to <code>IncludeFile()</code>. <code>WLExecuteScript</code> is an optional parameter. When included, WebLOAD  will not only compile the definitions found in the specified file. WebLOAD  will also execute any additional commands or functions found within that file  outside the included function definitions. With <code>WLExecuteScript</code> , WebLOAD  enables work with self- initializing include files that can define, set, and  execute the commands necessary to initialize a work environment at compile  time. <p>Example</p> <p>To include the external file <code>MyFunction.js</code>, located on the WebLOAD Console during WebLOAD testing, use the following command:</p> <pre><code>function InitAgenda() { \n    IncludeFile(\u201cMyFunction.js\u201d)\n}\n</code></pre> <p>Comment</p> <p>The <code>IncludeFile</code> command must be inserted in the <code>InitAgenda()</code> section of your JavaScript program.</p> <p>The load engine first looks for the file to be included in the default User Include Files directory. If the file is not there, the file request is handed over to WebLOAD, which searches for the file using the following search path order:</p> <ol> <li> <p>If a full path name has been hardcoded into the <code>IncludeFile</code> command, the system searches the specified location. If the file is not found in an explicitly coded directory, the system returns an error code of File Not Found and will not search in any other locations.</p> <p>Note: It is not recommended to hardcode a full path name, since the script will then not be portable between different systems. This is especially important for networks that use both UNIX and Windows systems.</p> </li> <li> <p>Assuming no hardcoded full path name in the script code, the system looks for the file in the current working directory, the directory from which WebLOAD was originally executed.</p> </li> <li>Finally, if the file is still not found, the system searches for the file sequentially through all the directories listed in the File Locations tab.</li> </ol> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile (see wlOutputFile (object) )</li> <li>wlOutputFile() (see wlOutputFile (object) )</li> <li>Write() (see Write() (method) ))</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#index-property","title":"Index (property)","text":"<p>Property of Objects</p> <ul> <li>frames (see frames (object) )</li> </ul> <p>Description</p> <p>Sets or retrieves the index number of the parent object. For example, the ordinal position of an option in a list box.</p> <p>See also</p> <ul> <li>Collections </li> </ul>"},{"location":"javascript/actions_objects_functions/#infomessage-function","title":"InfoMessage() (function)","text":"<p>Description</p> <p>Displays a generally informative (but not necessarily problematic) message in the Log Window.</p> <p>Syntax</p> <p><code>InfoMessage(msg)</code></p> <p>Parameters</p> Parameter Name Description msg A string with an informative message to be sent to the WebLOAD Console. <p>Comment</p> <p>If you call <code>InfoMessage()</code> in the main script, WebLOAD sends an informative message to the Log window and continues with script execution as usual. The message has no impact on the continued execution of the WebLOAD test.</p> <p>GUI mode</p> <p>WebLOAD recommends adding message functions to your script files directly through the WebLOAD Recorder. Message function command lines may also be added directly to the code in a JavaScript Object within a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>See also</p> <ul> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException (see wlException (object) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#innerhtml-property","title":"InnerHTML (property)","text":"<p>Property of Objects</p> <ul> <li>cell (see cell (object) )</li> <li>script (see script (object) )</li> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>Sets or retrieves the HTML found between the start and end tags of the object.</p> <p>Syntax</p> <p>When working with <code>cell</code> objects, use the uppercase form:</p> <p><code>\u2026cells[2].InnerHTML</code></p> <p>When working with script or wlXmls objects, use the lowercase form:</p> <p><code>\u2026scripts[2].innerHTML</code></p> <p>Comment</p> <p>The <code>InnerHTML</code> property for <code>cell</code> objects is written in uppercase.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex (see cellIndex (property) </li> <li>Collections </li> <li>cols (see cols (property) ) (wlTables property)</li> <li>InnerImage (see InnerImage (property) )</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>load() (see load() (method) </li> <li>loadXML() (see loadXML() (method) )</li> <li>load() and loadXML() Method Comparison </li> <li>row (see row (object) ) (wlTables property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>src (see src (property) )</li> <li>tagName (see tagName (property) ) (cell property)</li> <li>wlTables (see wlTables (object) )</li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#innerimage-property","title":"InnerImage (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>Sets or retrieves the image found between the <code>&lt;Start&gt;</code> and <code>&lt;End&gt;</code> tags of the object. When working with a <code>button</code> object, the image that appears on the button. When working with a <code>link</code> or <code>locatio</code>n object, the image that appears over the link. When working with a <code>TableCell</code> object, the image that appears over a table cell.</p> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>src (see src (property) </li> </ul>"},{"location":"javascript/actions_objects_functions/#innerlink-property","title":"InnerLink (property)","text":"<p>Property of Objects</p> <ul> <li>Image (see Image (object) )</li> </ul> <p>Description</p> <p>Represents the inner link field for the parent <code>image</code> object.</p> <p>See also</p> <ul> <li>Collections </li> <li>form (see form (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#innertext-property","title":"InnerText (property)","text":"<p>Property of Object</p> <ul> <li>cell (see cell (object) )</li> <li>element (see element (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>Sets or retrieves only the text found between the <code>&lt;Start&gt;</code> and <code>&lt;End&gt;</code> tags of the object. When working with a Button element object, the text that appears on the button. When working with a <code>link</code> or <code>location</code> object, the text that appears over the link. When working with a <code>TableCell</code> object, the text that appears over a table cell.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li>cols (see cols (property) ) (wlTables property)</li> <li>element (see element (object) )</li> <li>id (see id (property) ) (wlTables and wlXmls property)</li> <li>InnerHTML (see InnerHTML (property) ) (cell and wlXmls property)</li> <li>InnerImage (see InnerImage (property) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>row (see row (object) ) (wlTables property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>src (see src (property) </li> <li>tagName (see tagName (property) ) (cell property)</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#jvmtype-property","title":"JVMType (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The JVMType property indicates the JVM to be used in the Load Generator. The value of this property is defined using the WebLOAD Console or WebLOAD Recorder and overrides the JVM definition in <code>webload.ini.</code></p> <p>The value (string) of this property is the key for <code>WLJVMs.xml</code>. This file (located on every WebLOAD Machine in the <code>&lt;WebLOAD Installation Directory&gt;\\extensions\\JVMs</code> directory) contains the following parameters for each JVM:</p> <ul> <li>Type (the value from the flag)</li> <li>Path (should be machine-agnostic)</li> <li>Options</li> </ul> <p>When Type is \"Default\", the RadView default (installed) JVM will be used. The default JVM\u2019s path is defined in <code>webload.ini</code>, as it depends on the WebLOAD installation path.</p> <p>Note: The classpath definitions are defined in <code>webload.ini</code>.</p> <p>GUI mode</p> <p>In WebLOAD Console, select a JVM from the Select run-time JVM to be used drop- down list in the Java Options tab of the Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, select a JVM from the Select run-time JVM to be used drop- down list in the Java Options tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p>"},{"location":"javascript/actions_objects_functions/#kdcserver-property","title":"KDCServer (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Specifies the address of the Key Distribution Center (KDC) server if you are using the Kerberos authentication method.</p> <p>Note: The <code>KDCServer</code> property is only relevant for playback.</p> <p>Syntax</p> <p><code>KDCServer(ServerName)</code></p> <p>Parameters</p> Parameter Name Description ServerName The name of the KDC server if you are using the  Kerberos authentication method. <p>Example</p> <p><code>wlGlobals.KDCServer = \u201cqa4\u201d</code></p> <p>GUI mode</p> <p>To specify the name of the KDC server if you are using the Kerberos authentication method:</p> <ul> <li>In WebLOAD Console, select the Kerberos radio button and enter the address of the KDC server in the Kerberos Server field in the Authentication tab of the Default, Current Session, or Script Options dialog box, accessed from the Tools tab of the ribbon.</li> <li>In WebLOAD Recorder, select the Kerberos radio button and enter the address of the KDC server in the Kerberos Server field in the Authentication tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</li> </ul> <p>Comment</p> <p>Only the server name should be specified in <code>KDCServer</code>. For example, specify \u201cqa4\u201d rather than \u201cqa4.radview.co.il\u201d.</p> <p>See also</p> <ul> <li>AuthType (see AuthType (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#keepalive-property","title":"KeepAlive (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enable WebLOAD to keep an HTTP connection alive between successive accesses in the same round of the main script. The possible values are:</p> <ul> <li>false \u2013 Do not keep an HTTP connection alive.</li> <li>true \u2013 Keep the connection alive if the server permits. (default)</li> </ul> <p>Keeping a connection alive saves time between accesses. WebLOAD attempts to keep the connection alive unless you switch to a different server. However, some HTTP servers may refuse to keep a connection alive.</p> <p>Use the <code>wlHttp.CloseConnection()</code> method to explicitly close a connection that you have kept alive. Otherwise, the connection is automatically closed at the end of each round.</p> <p>Comment</p> <p>You should not keep a connection alive if establishing the connection is part of the performance test.</p> <p>GUI mode</p> <p>WebLOAD recommends maintaining or closing connections through the WebLOAD Console. Enable maintaining connections for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>CloseConnection() (see CloseConnection() (method) )</li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> <li>Working with HTTP Protocol in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#keepredirectionheaders-property","title":"KeepRedirectionHeaders (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>Used to indicate whether to get the location headers of all redirections. The default value of <code>KeepRedirectionHeaders</code> is false.</p> <p>Example</p> <p><code>wlGlobals.KeepRedirectionHeaders = true</code></p> <p>Comment</p> <p>This property is useful for the following scenario, which occurs in correlation. During a</p> <p>redirection, in the middle of one of the URLs, there is a parameter in the Location header that is needed for the next Get. Since only the headers of the last Get in a series of redirections are stored in document.wlHeaders, the KeepRedirectionHeaders property, when set to true, enables all the headers in a series of redirections to be saved. The value can be extracted from document.wlHeaders after the navigation is complete.</p> <p>See also</p> <ul> <li>SaveHeaders (see SaveHeaders (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#key-property","title":"key (property)","text":"<p>Property of Objects</p> <ul> <li>Header (see Header (property) )</li> <li>wlHeaders (see wlHeaders (object) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul> <p>Description</p> <p>The search key name (read-only).</p> <p>Syntax</p>"},{"location":"javascript/actions_objects_functions/#for-wlheaders","title":"For wlHeaders:","text":"<p><code>document.wlHeaders[index#].key = \u201cTextString\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#for-wlsearchpairs","title":"For wlSearchPairs:","text":"<p><code>document.links[1].wlSearchPairs[index#].key = \u201cTextString\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#for-wlhttpheader","title":"For wlHttp.Header:","text":"<p><code>wlHttp.Header[\u201ckey\u201d] = \u201cTextString\u201d</code></p> <p>Example</p>"},{"location":"javascript/actions_objects_functions/#for-wlheaders_1","title":"For wlHeaders:","text":"<p><code>document.wlHeaders[0].key = \u201cServer\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#for-wlsearchpairs_1","title":"For wlSearchPairs:","text":"<p><code>document.links[1].wlSearchPairs[0].key = \u201cServer\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#for-wlhttpheader_1","title":"For wlHttp.Header:","text":"<p><code>wlHttp.Header[\u201ckey\u201d] = \u201cServer\u201d</code></p> <p>See also</p> <ul> <li>value (see value (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#language-property","title":"language (property)","text":"<p>Property of Object</p> <ul> <li>script (see script (object) )</li> </ul> <p>Description</p> <p>Retrieves the language in which the current script is written.</p> <p>Example</p> <p><code>\u201cjavascript</code>\u201d specifies that the script is written in JavaScript. </p> <p><code>\u201cvbscript\u201d</code> specifies that the script is written in Visual Basic Script.</p>"},{"location":"javascript/actions_objects_functions/#link-object","title":"link (object)","text":"<p>Property of Objects</p> <p>Links on a Web page are accessed through <code>link</code> objects that are grouped into collections of <code>links</code>. The <code>links</code> collection is a property of the document object.</p> <p>Description</p> <p>A <code>link</code> object contains information on an external document to which the current document is linked. Each <code>link</code> object points to one of the URL <code>links</code> (HTML <code>&lt;A&gt;</code> elements) within the document. Each <code>link</code> object stores the parsed data for the HTML <code>link</code> (<code>&lt;A&gt;</code> element).</p> <p><code>link</code> objects are local to a single thread. You cannot create new <code>link</code> objects using the JavaScript new operator, but you can access HTML <code>links</code> through the properties and methods of the standard DOM objects. <code>link</code> properties are read-only.</p> <p><code>link</code> objects are organized into Collections (see Collections ) of <code>links</code> or <code>anchors</code>. To access an individual link\u2019s properties, check the <code>length</code> property of the <code>links</code> collection and use an index number to access the individual <code>links</code>.</p> <p>Syntax</p> <p>To find out how many <code>link</code> objects are contained within a document, check the value of:</p> <p><code>document.links.length</code></p> <p>Access each link\u2019s properties directly using the following syntax:</p> <p><code>document.links[#].&lt;link-property&gt;</code></p> <p>Example</p> <p><code>document.links[1].protocol</code></p> <p>Properties</p> <ul> <li>hash (see hash (property) )</li> <li>host (see host (property) )</li> <li>hostname (see hostname (property) )</li> <li>href see href (property) </li> <li>id (see id (property) )</li> <li>InnerImage (see InnerImage (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>Name (see Name (property) ))</li> <li>pathname (see pathname (property) )</li> <li>port (see port (property) )</li> <li>protocol (see protocol (property) ))</li> <li>search (see search (property) )</li> <li>target (see target (property) )</li> <li>title (see title (property) )</li> <li>Url (see Url (property) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>document (see document (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#load-method","title":"load() (method)","text":"<p>Method of Objects</p> <p>XML DOM objects on a Web page are accessed through collections of <code>wlXmls</code> objects. The <code>load()</code> function is a method of the following object:</p> <ul> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>Call <code>load(URL)</code> to download XML documents from a website and automatically load these documents into XML DOM objects.</p> <p>Do not include any external references when using <code>load()</code>.</p> <p><code>load()</code> relies on the MSXML parser to performs any HTTP transactions needed to download the XML document. The MSXML module accesses external servers and completes all necessary transactions without any control or even knowledge on the part of the WebLOAD system tester. From WebLOAD\u2019s perspective, these transactions are never performed in the context of the test session. For this reason, any settings that the user enters through the WebLOAD script or Console will not be relayed to the MSXML module and will have no effect on the document \u2018load\u2019. For the same reason, the results of any transactions completed this way will not be included in the WebLOAD statistics reports.</p> <p>Syntax</p> <p><code>load(URLString)</code></p> <p>Parameters</p> Parameter Name Description URLString String parameter with the URL or filename where  the XML document may be found. <p>Example</p> <pre><code>myXMLDoc = document.wlXmls[0]\nmyXMLdoc.load(\u201chttp://server/xmls/file.xml\u201d)\n</code></pre> <p>Comment</p> <p>You may use <code>load()</code> repeatedly to load and reload XML data into XML DOM objects. Remember that each new \u2018load\u2019 into an XML DOM object will overwrite any earlier data stored in that object.</p> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>loadXML() (see loadXML() (method) </li> <li>load() and loadXML() Method Comparison </li> <li>src (see src (property) </li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#load-and-loadxml-method-comparison","title":"load() and loadXML() Method Comparison","text":"<p>Description</p> <p>WebLOAD supports both the <code>load()</code> and the <code>loadXML()</code> methods to provide the user with maximum flexibility. The following table summarizes the advantages and disadvantages of each method:</p> Advantages Disadvantages loadXML() Parameters that the user has defined through  WebLOAD for the testing session will be applied to this transaction. The method fails if the  DTD section of the XML document string includes any external references. load() The user may load XML files that include  external references in the DTD section. Parameters that the user  has defined through WebLOAD for the testing session will not be applied to  this transaction.  WebLOAD does not record the HTTP Get operation.  The transaction results  are not included in the session statistics report.  Using this method may  adversely affect the test session results. <p>Comment</p> <p>If you wish to measure the time it took to load the XML document using the <code>load()</code> method, create a timer whose results will appear in the WebLOAD statistics. For example:</p> <pre><code>myXMLDoc = document.wlXmls[0]\nSetTimer(\u201cGetXMLTime\u201d)\nmyXMLdoc.load(\u201chttp://server/xmls/file.xml\u201d)\nSendTimer(\u201cGetXMLTime\u201d)\n</code></pre> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) </li> <li>loadXML() (see loadXML() (method) </li> <li>src (see src (property) </li> <li>wlXmls (see wlXmls (object) )</li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#loadgeneratorthreads-property","title":"LoadGeneratorThreads (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Optionally, WebLOAD can allocate extra threads to download nested images and frames.</p> <p>For clients that you define in a <code>Load Generator</code>, this option is controlled by the LoadGeneratorThreads property. The default value of this property is Single, which means that Virtual Clients will not use extra threads to download data from the Server.</p> <p>For the Probing Client, the option is controlled by the <code>ProbingClientThreads</code> property. The default is Multiple, which means that the client can use three extra threads for nested downloads. This simulates the behavior of Web browsers, which often use extra threads to download nested images and frames.</p> <p>The possible values of these properties are:</p> <ul> <li>Single \u2013 Do not use extra threads to download nested images and frames. (default for LoadGeneratorThreads)</li> <li>Multiple \u2013 Allocate three extra threads per client (for a total of four threads per client) to download nested images and frames (default for <code>ProbingClientThreads</code>).</li> <li>Any specific number of threads between 1 and 8, such as \u201c5\u201d \u2013 Allocate that exact number of extra threads per client to download nested images and frames.</li> </ul> <p>Example</p> <p>You can assign any of these properties independently within a single script. In that case, if you configure a Probing Client to run the script, WebLOAD uses the value of <code>ProbingClientThreads</code> and ignores LoadGeneratorThreads (vice versa if you configure a Load Generator to run the script). For example, you might write:</p> <pre><code>function InitAgenda() {\n//Do not use extra threads if a\n// Probing Client runs the script\nwlGlobals.ProbingClientThreads = \u201cSingle\u201d\n//Use extra threads if a Load Generator runs the script \nwlGlobals.LoadGeneratorThreads = \u201cMultiple\u201d\n}\n</code></pre> <p>Comment</p> <p>The extra threads have no effect on the <code>ClientNum</code> value of the client. The <code>ClientNum</code> variable reports only the main thread number of each client, not the extra threads.</p> <p>GUI mode</p> <p>WebLOAD recommends enabling or disabling multi-threaded virtual clients through the WebLOAD Console. Enable multi-threading for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default or Current Session Options dialog box and setting the number of threads you prefer.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ProbingClientThreads (see ProbingClientThreads (property) ))</li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#loadxml-method","title":"loadXML() (method)","text":"<p>Method of Object</p> <p>XML DOM objects on a Web page are accessed through collections of <code>wlXmls</code> objects. The <code>loadXML()</code> function is a method of the following objects:</p> <ul> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>Call <code>loadXML(XMLDocString)</code> to load XML documents into XML DOM objects. This allows users to work with XML documents and data that did not originate in HTML Data Islands, such as with Native Browsing. In a typical scenario, a user downloads an XML document. WebLOAD saves the document contents in string form. The string is then used as the parameter for <code>loadXML()</code>. The information is loaded automatically into an XML object.</p> <p>Note: Creating a new, blank XML DOM object with <code>WLXmlDocument()</code> and then loading it with a parsed XML string using <code>loadXML()</code> is essentially equivalent to creating a new XML DOM object and loading it immediately using <code>WLXmlDocument</code>(xmlStr). As with the <code>WLXmlDocument(xmlStr)</code> constructor, only standalone, self-contained DTD strings may be used for the <code>loadXML()</code> parameter. External references in the DTD section are not allowed.</p> <p>Syntax </p> <p><code>loadXML(XMLDocStr)</code></p> <p>Parameters</p> Parameter Name Description XMLDocStr String parameter that contains a literal XML document in string format. <p>Example</p> <pre><code>//create a new XML document object\nNewXMLObj = new WLXmlDocument() \nwlHttp.SaveSource = true\nwlHttp.Get(\u201chttp://www.server.com/xmls/doc.xml\u201d) \nXMLDocStr = document.wlSource\n//load the new object with XML data\n//from the saved source. We are assuming \n// no external references, as explained above \nNewXMLObj.loadXML(XMLDocStr)\n</code></pre> <p>Comment</p> <p>You may use <code>loadXML()</code> repeatedly to load and reload XML data into XML DOM objects. Remember that each new \u2018load\u2019 into an XML DOM object will overwrite any earlier data stored in that object.</p> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) </li> <li>load() and loadXML() Method Comparison </li> <li>src (see src (property) </li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#location-object","title":"location (object)","text":"<p>Property of Objects</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>A location object stores the parsed URL and location data of the frame or root window. For an overview of parsing, see Parsing Web pages in the WebLOAD Scripting Guide.</p> <p><code>location</code> objects are local to a single thread. You cannot create new <code>location</code> objects using the JavaScript <code>new</code> operator, but you can access HTML locations through the properties and methods of the standard DOM objects. The properties of <code>location</code> are read-only.</p> <p>Syntax</p> <p>Access the location\u2019s properties directly using the following syntax:</p> <p><code>document.location.&lt;location-property&gt;</code></p> <p>Properties</p> <p>Note: The properties of <code>location</code> are identical to those of <code>link</code>. The only exception is that <code>location</code> has no <code>target</code> property. Also, the <code>location</code> object is not part of any collection. The <code>location</code> properties are listed below for reference.</p> <ul> <li>hash (see hash (property) )</li> <li>host (see host (property) )</li> <li>hostname (see hostname (property) )</li> <li>href (see href (property) </li> <li>id (see id (property) )</li> <li>InnerText (see InnerText (property) )</li> <li>Name (see Name (property) )</li> <li>pathname (see pathname (property) )</li> <li>port (see port (property) )</li> <li>protocol (see protocol (property) ))</li> <li>search (see search (property) )</li> <li>title (see title (property) )</li> <li>Url (see Url (property) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul> <p>Comment</p> <p>The <code>href</code> property contains the entire URL. The other <code>location</code> properties contain portions of the URL. <code>location.href</code> is the default property for the <code>location</code> object.</p> <p>For example, if</p> <p><code>location=\u2018http://microsoft.com\u2019</code></p> <p>then the following two URL specifications are equivalent:</p> <p><code>mylocation=location.href</code></p> <p>-Or-</p> <p><code>mylocation=location</code></p> <p>See also</p> <ul> <li>link (see link (object))</li> </ul>"},{"location":"javascript/actions_objects_functions/#maxlength-property","title":"MaxLength (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> </ul> <p>Description</p> <p>The maximum number of characters the user can enter into a Text or Password element.</p>"},{"location":"javascript/actions_objects_functions/#maxpagetime-function","title":"MaxPageTime (function)","text":"<p>Description</p> <p>Verifies the PageTime of the service response. If the PageTime (time to download the page) exceeds the specified maximum value, the verification fails.</p> <p>Syntax</p> <p><code>wlVerification.MaxPageTime(timeLimit, severity)</code></p> <p>Parameters</p> Parameter Name Description timeLimit The maximum amount of time to download the  page in seconds. severity Possible values of this parameter are:<p></p>- <code>WLSuccess</code>. The transaction  terminated successfully. <p></p>- <code>WLMinorError</code>. This specific  transaction failed, but the test session may continue as usual. The script  displays a warning message in the Log window and continues execution from the  next statement.  <p></p>- <code>WLError</code>. This specific  transaction failed and the current test  round was aborted. The script displays an error message in the Log window and  begins a new round. <p></p>- <code>WLSevereError</code>. This specific  transaction failed and the test  session must be stopped completely. The script displays an error message in  the Log window and the Load Generator on  which the  error occurred is stopped. <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#method-property","title":"method (property)","text":"<p>Property of Object</p> <ul> <li>form (see form (object) )</li> </ul> <p>Description</p> <p>Specifies the method that the browser should use to send the form data to the server (read-only string). A value of <code>\u201cGet\u201d</code> will append the arguments to the action URL and open it as if it were an anchor. A value of <code>\u201cPost\u201d</code> will send the data through an HTTP Post transaction. The default is <code>\u201cPost\u201d</code>.</p>"},{"location":"javascript/actions_objects_functions/#multiipsupport-property","title":"MultiIPSupport (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>WebLOAD enables use of all available IP addresses. This allows testers to simulate clients with different IP addresses using only one Load Generator. You must first generate additional IP addresses on your machine to use when testing and then set the <code>MultiIPSupport</code> property to true to enable multiple IP support. For more information about generating additional IP addresses, see Generating IP Addresses in the script in the WebLOAD Scripting Guide.</p> <p>Note: Setting the <code>MultiIPSupport</code> property to true without generating additional IP addresses on your machine will not enable multiple IP support.</p> <p>The possible values of <code>wlGlobals.MultiIPSupport</code> are:</p> <ul> <li>false \u2013 Use only one IP address. (default)</li> <li>true \u2013 Use all available IP addresses.</li> </ul> <p>When connecting Load Generators through a modem, <code>MultiIPSupport</code> should be set to false.</p> <p>Probing Clients use only one IP address. Load Generators are set by default to use only one IP address, but may be set to use multiple IP addresses through the <code>MultiIPSupport</code> property.</p> <p>GUI mode</p> <p>In WebLOAD Console, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>When the Load Generator has more than one IP address (one or more addresses on a network interface card or one or more network interface cards) WebLOAD uses ALL of the available IP addresses. Before setting <code>MultiIPSupport</code> to <code>true</code>, make sure that all of the Applications Being Tested to which the script refers are accessible through all the network interface cards.</p> <p>Use the GetIPAddress() (see GetIPAddress() (method) )) method to check the identity of the current IP address.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>GetIPAddress() (see GetIPAddress() (method) )</li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> <li>MultiIPSupportType() (see MultiIPSupportType (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#multiipsupporttype-property","title":"MultiIPSupportType (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The MultiIPSupportType property works with the <code>wlGlobals.MultiIPSupport</code> property, and supports the following values:</p> <ul> <li>PerClient (default) \u2013 Preserves the current behavior. This means that there are different IPs per client but the same IP is used for all rounds.</li> <li>PerRound \u2013 Supports the use of a different IP from the pool per client, per round, until the pool is exhausted, after which it returns to the beginning.</li> </ul> <p>This property is only referenced when <code>wlGlobals.MultiIPSupport</code> is true.</p> <p>Note: To support multiple IP addresses, you must generate additional IP addresses on your machine and then set the <code>MultiIPSupport</code> property to true. For more information about generating additional IP addresses, see Generating IP Addresses in the script in the WebLOAD Scripting Guide.</p> <p>GUI mode</p> <p>In WebLOAD Console, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>When the Load Generator has more than one IP address (one or more addresses on a network interface card or one or more network interface cards), WebLOAD uses ALL of the available IP addresses. Before setting <code>MultiIPSupport</code> to true, make sure that all of the Systems under Test (SUT) to which the script refers are accessible through all the network interface cards.</p> <p>Use GetIPAddress() (see GetIPAddress() (method) ) to check the identity of the current IP address.</p> <p>See also</p> <ul> <li>HTTP Components* </li> <li>GetIPAddress() see GetIPAddress() (method) </li> <li>MultiIPSupport() see MultiIPSupport (property) </li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#multiipsupportprotocol-property","title":"MultiIPSupportProtocol (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The MultiIPSupportProtocol property works with the <code>wlGlobals.MultiIPSupport</code> property, and supports the following values:</p> <ul> <li>All (default) \u2013 Support both the IPv4 and IPv6 protocols.</li> <li>IPv4Only \u2013 Support only the IPv4 IP protocol.</li> <li>IPv6Only \u2013 Support only the IPv6 IP protocol.</li> </ul> <p>This property is only referenced when <code>wlGlobals.MultiIPSupport</code> is true.</p> <p>GUI mode</p> <p>In WebLOAD Console, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Recorder, check or uncheck Multi IP Support in the HTTP Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>GetIPAddress() (see GetIPAddress() (method) )</li> <li>MultiIPSupport() (see MultiIPSupport (property) )</li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#name-property","title":"Name (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>form (see form (object) )</li> <li>frames (see frames (object) )</li> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>Select </li> <li>wlMetas (see wlMetas (object) )</li> </ul> <p>Description</p> <p>Sets or retrieves the identification string of the parent object.</p> <p>Note: You can access a collection member either by its index number or by its HTML name attribute.</p> <p>When working with a <code>wlMetas</code> collection, the <code>Name</code> property holds the value of the NAME attribute of the META tag.</p> <p>When working with an <code>elements</code> collection, the <code>Name</code> property holds the HTML name attribute of the form element (read-only string). The is the identification string for elements of type Button, CheckBox, File, Image, Password, Radio, Reset, Select, Submit, Text, and TextArea. The name attribute is required. If a form element does not have a name, WebLOAD does not include it in the <code>element</code>s collection.</p> <p>Syntax</p> <p>Collection members may be accessed either through an index number or through a member name, if it exists. For example:</p> <p>Access the first child window on a Web page using the following expression:</p> <p><code>frames[0]</code></p> <p>Access the first child window\u2019s link objects directly using the following syntax:</p> <p><code>frames[0].frames[0].links[#].&lt;property&gt;</code></p> <p>Alternatively, you may access a member of the frames collection by its HTML name attribute. For example:</p> <p><code>document.frames[\u201cnamestring\u201d]</code></p> <p>-Or-</p> <p><code>document.frames.namestring</code></p> <p>See also</p> <ul> <li>Collections </li> <li>content (see content (property) )</li> <li>httpEquiv (see httpEquiv (property) )</li> <li>Url (see Url (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#ntusername-ntpassword-properties","title":"NTUserName, NTPassWord (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The user name and password that the script uses for Windows NT Challenge response authentication (NT Challenge Response).</p> <p>Comments</p> <p>A user is only authenticated once during a round with a set of credentials. Each subsequent request will use these credentials regardless of what is contained in the script. If the value of these credentials are changed after authentication, they will only be used during the next round, not during the current round.</p> <p>For example, if you are trying to send a request to a URL with a group of users (user1, user2, and user3), but user1 has already been authenticated, the login is always performed for user1 until the round is complete.</p> <p>GUI mode</p> <p>By default, WebLOAD senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console. Enter user authentication information through the Authentication tab of the Default or Current Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also set NT user values using the <code>wlGlobals</code> properties. For example:</p> <p><code>wlGlobals.NTUserName = \u201cBill\u201d</code></p> <p><code>wlGlobals.NTPassWord = \u201cClassified\u201d</code></p> <p>Comment</p> <p>WebLOAD automatically sends the user name and password when a <code>wlHttp</code> object connects to an HTTP site. If an HTTP server requests NT Challenge Response authentication and you have not assigned values to <code>NTUserName</code> and <code>NTPassWord</code>, WebLOAD submits the Windows NT user name and password under which the script is running.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Rules of Scope for Local and Global Variables in the WebLOAD Scripting Guide</li> <li>Working with HTTP Protocol in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#num-method","title":"Num() (method)","text":"<p>Method of Object</p> <ul> <li>wlRand (see wlRand (object) </li> </ul> <p>Description</p> <p>Return a random integer.</p> <p>Syntax</p> <p><code>wlRand.Num([seed])</code></p> <p>Return Value</p> <p>A random integer.</p> <p>Parameters</p> Parameter Name Description [seed] Optional seed integer used on first call to this method only if there was no previous call to the wlRand.Seed() method. <p>Example</p> <p><code>wlRand.Num(12345)</code></p> <p>See also</p> <ul> <li>Range() (see Range() (method) ))</li> <li>Seed() (see Seed() (method) )</li> <li>Select() (see Select() (method) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#ondatareceived-property","title":"onDataReceived (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>Define a callback function to be called every time more data is received for the request. This is useful for working with asynchronous requests (when wlHttp.Async=true) that need to be inspected before they are completed, for example in an HTTP streaming push scenario.</p> <p>Use the callback function to handle the asynchronous request, for example \u2013 validate the response and make a further request.</p> <p>The callback function argument is a limited \u2018document\u2019 object. The document object contains only the following properties:</p> <ul> <li>wlSource (see wlSource (property) )</li> <li>wlStatusNumber (see wlStatusNumber (property) )</li> <li>wlStatusLine (see wlStatusLine (property) )</li> </ul> <p>Note: The callback is expected to run in a timely manner, because it blocks the execution of other callback functions. Specifically, try to:</p> <p>Avoid making synchronous HTTP requests \u2013 use asynchronous ones instead.</p> <p>Avoid using Sleep() inside a callback function \u2013 instead, use setTimeout() (function) to execute code after a certain period of time.</p> <p>Note: The onDataRecived callback is called many times \u2013 each time more data is received. If you only need to inspect the complete response, use the onDocumentComplete (property) callback instead.</p> <p>Example</p> <pre><code>wlHttp.Async = true;\n\nwlHttp.onDataReceived = function(document) {\n\n{\n\nif (document.wlStatusNumber==200)\n\n{\n\nInfoMessage( \u201cGot response so far: \u201c + document.wlSource );\n\n}\n\n}\n\nwlHttp.Get(\u201chttp:///.... \u201d)\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>The Using Asynchronous Requests chapter in the WebLOAD Scripting Guide</li> <li>wlSource (property) </li> <li>wlStatusNumber (property) </li> <li>wlStatusLine (property) </li> <li>Async (property) </li> <li>onDocumentComplete (property) </li> </ul>"},{"location":"javascript/actions_objects_functions/#ondocumentcomplete-property","title":"onDocumentComplete (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>Define a callback function to be called after the request has been completed. Useful in asynchronous requests (when wlHttp.Async=true)</p> <p>Use the callback function to handle the asynchronous request, for example \u2013 validate the response and make a further request.</p> <p>The callback function argument is the \u2018document\u2019 object, containing the response data, headers, status, etc.</p> <p>Note: The callback is expected to run in a timely manner, because it blocks the execution of other callback functions. Specifically, try to:</p> <p>Avoid making synchronous HTTP requests \u2013 use asynchronous ones instead.</p> <p>Avoid using Sleep() inside a callback function \u2013 instead, use setTimeout() (function) to execute code after a certain period of time.</p> <p>Note: The onDocumentComplete callback is called only once \u2013 when the request is fully completed. To handle partial responses, use the onDataReceived (property) callback.</p> <p>Example</p> <pre><code>wlHttp.Async = true;\n\nwlHttp.onDocumentComplete = function(document) {\n\nInfoMessage(\u201cResponse \u201c + document.wlSource);\n\n}\n\n[wlHttp.Get(\u201chttp://get](http://get-asynch-data/)-asynch-data\u201d);\n\n//the script will continue to here immediately, not waiting for the request to complete. It will run the onDocumentComplete function when the request is finished.\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>The Using Asynchronous Requests chapter in the WebLOAD Scripting Guide</li> <li>document (object) )</li> <li>Async (property) </li> <li>onDataReceived (property) </li> </ul>"},{"location":"javascript/actions_objects_functions/#open-method","title":"Open() (method)","text":"<p>Method of Object</p> <ul> <li>wlInputFile (see wlInputFile (object) )</li> </ul> <p>Description</p> <p>Opens the input file specified in the <code>wlInputFile</code> object. This should be done in the <code>InitClient</code> section of your script.</p> <p>Syntax</p> <pre><code>function InitAgenda()\n{\n  \u2026\n  fileID = CopyFile(&lt;full path&gt;)\n  \u2026\n}\nfunction InitClient()\n{\n  \u2026\n  MyFileObj = new wlInputFile(fileID)\n  MyFileObj.Open([AccessMethod], [ShareMethod], [UsageMethod],\n  [EndOfFileBehavior], [HeaderLines], [\u2018Delimiter\u2019])\n  \u2026\n}\n</code></pre> <p>Parameters</p> Parameter Name Description <code>AccessMethod</code> An optional parameter that  defines the method for reading the next value/row from the file. All values  are enumerated numeric values. Possible values are:<p></p>- <code>WLFileSequential</code>. Every client gets the  next value/row from the file, where there might be multiple access to the same line by different Load Generator  machines. This is the default value.  <p></p>- <code>WLFileSequentialUnique</code>. Gets the next unique  value/row from the file. Preferably, the unique value is the next available  value in sequential order. If another VC is using this value/row, the VC is  not able to access this value/row and will get the next available value/row.  It is recommended to have more values/rows in the file than the number of  clients to avoid delays. <p></p>- <code>WLFileRandom</code>. Gets a random value/row  from the file. There might be multiple access to the same line by different  Load Generator machines. <p></p>- <code>WLFileRandomUnique</code>. Gets a unique, unused value/row randomly from the file. It is  recommended to have more values/rows in the file than the number of clients  to avoid  delays. <code>ShareMethod</code> An optional parameter indicating how the  file is shared among scripts. All values are enumerated numeric values.  Possible values are:<p></p>- WLFileNotShared. The file can be read only by the current script, and each Load  Generator machine manages a copy of  the file for its VCs independently. If there are multiple Load Generator  processes on a single machine, then the processes share the file. This is the  default value.  <p></p>- WLFileLGShared. The file can be read only by the  current script, and all Load Generators on any Load Generator machine  share the same copy of the file, which is synchronized between them. <p></p>- WLFileAgendaShared. The file can be shared by more than one script.  The unique identifier of the file is its path. The file can be shared by  different scripts, but a copy of the file is managed separately for each Load  Generator machine. If you are using the script\u2013Shared share method, all the  scripts sharing the file should use the WLFileSequentialUnique access method.  <p></p>- WLFileAgendaLGShared. A single file is shared among Load Generators and among scripts. <code>UsageMethod</code> An optional parameter that  defines when to release the value/row back to the \u2018pool\u2019 so that it can be  read again from the file. This parameter is only relevant for the  WLFileSequentialUnique and WLFileRandomUnique access methods. All values are  enumerated numeric values. Possible values are:<p></p>- WLFilePerRound. The script reads a new  value/row from the file once every  round. The value/row is released at the end of the round. This is the default value.  <p></p>- WLFileOncePerClient. The script reads a new value/row from the file  once at the beginning of the test (in InitClient). The value/row is released  at TerminateClient.  <p></p>- WLFileOncePerSession. The  script reads a new value/row from the file once, at the beginning of the  session (in InitClient). The value/row is released at the end of the session  (in TerminateAgenda).  <p></p>- WLFileAnytime. The script can read a new  value/row from the file at any time during a round. It can read a new  value/row more than once during a round. The values are released at the end  of the round. This enables more than one  value/row  to be used concurrently and uniquely. <code>EndOfFileBehavior</code> An optional parameter that  defines how WebLOAD behaves when it reaches the end of the file. All values  are enumerated numeric values. <p></p> Note: If you have defined the <code>AccessMethod</code> as WLFileSequential or  WLFileSequentialUnique, the <code>EndOfFileBehavior</code> parameter is mandatory.  Possible values are:  <p></p>- WLFileStartOver. Start from the beginning  of the file. This is the default value.  <p></p>- WLFileKeepLast. Keep the last value.  <p></p>- WLFileAbortVC. Abort the specific VC that  tried to read past the end of the  file. An error message is written to the log  file.  <p></p>- WLFileAbortTest. Abort the entire test when a VC tries to  read past the end of the  file. An error message is written to the log file. HeaderLines An optional parameter that defines the  number of header lines the file contains. All values are enumerated numeric  values. Possible values are:<p></p>- 0. The file does not  contain any header lines. This is the default  value.<p></p>- Where <code>&lt;X&gt;</code>  is any number above zero. The file contains  <code>&lt;X&gt;</code> header lines at  its beginning. The values contained in these header lines are not used as  parameters but as variable  names in  the JavaScript code. Delimiter (Optional) The delimiter  being used in the file. The default value is a comma. <p>Example</p> <pre><code>function InitAgenda()\n\n{\n    InFile1 = CopyFile(\u201cC:\\\\temp\\input.txt\u201d)\n}\nFunction InitClient()\n{\n    myFileObj = new wlInputFile(InFile1) \n    myFileObj.open(WLFileSequentialUnique, WLFileAgendaShared)\n}\n/*** WLIDE \u2026. ***/\nstrLine = myFileObj.getLine(\u201c,\u201d)\n</code></pre> <p>See also</p> <ul> <li>CopyFile() (see CopyFile() (function) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) ))</li> <li>wlInputFile() (see wlInputFile() (constructor) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#open-function","title":"Open() (function)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul> <p>Description</p> <p>Opens the output file, specified in the wlOutputFile object. By default, the file is opened for sequential access, enabling the parameters in the file to be read sequentially. This is unique across the master and slave processes of a single Load Generator/script combination. The master assigns the next line of the file that will be</p> <p>read sequentially for each slave. When all the information in the file is read (seeGetLine() (function) ), it is returned to the beginning of the file.</p> <p>Alternatively, to open the input file and read its contents in random order, you must include <code>Open(filename, wlRandom)</code> in the script\u2019s <code>InitAgenda()</code> function.</p> <p>Note: The last line of the file should not include a carriage return.</p> <p>Syntax</p> <p>For sequential access:</p> <pre><code>MyFileObj = new wlOutputFile(filename)\n\u2026\nMyFileObj.Open()\n</code></pre> <p>For random access:</p> <p><code>Open(filename, wlRandom)</code></p> <p>Parameters</p> Parameter  Name Description filename The name of the file to be opened. wlRandom A flag indicating that the file should be  opened in random access mode. <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the Form Data Wizard in the WebLOAD Scripting Guide</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile() (see wlOutputFile() (constructor) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#option-object","title":"option (object)","text":"<p>Property of Object</p> <p><code>Option</code> objects are grouped into collections of <code>options</code> that are themselves properties of the following:</p> <ul> <li>element (see element (object) )</li> <li>Select </li> </ul> <p>Description</p> <p>A collection of the nested <code>&lt;OPTION&gt;</code> objects only found within elements of type SELECT, that is, <code>forms[n].elements[n].type = \u201cSELECT\u201d</code>. Each <code>option</code> object denotes one choice in a <code>select</code> element, containing information about a selected form element.</p> <p><code>option</code> objects are local to a single thread. You cannot create new <code>option</code> objects using the JavaScript new operator, but you can access HTML <code>options</code> through the properties and methods of the standard DOM objects. <code>option</code> properties are read- only.</p> <p><code>option</code> objects are grouped together within collections of <code>options</code>. To access an individual option\u2019s properties, check the length property of the options collection and use an index number to access the individual options.</p> <p>Syntax</p> <p>To find out how many <code>option</code> objects are contained within a form element, check the value of:</p> <p><code>document.forms[#].elements[#].options.length</code></p> <p>Access each option\u2019s properties directly using the following syntax:</p> <p><code>document.forms[#].elements[#].options[#].&lt;option-property&gt;</code></p> <p>For example:</p> <p><code>document.forms[1].elements[2].options[0].selected</code></p> <p>Comment</p> <p>Options only exist if the type of the parent element is <code>&lt;SELECT&gt;</code>, that is, <code>forms[n].elements[n].type = \u201cSELECT\u201d</code>. For example, to check whether a form element is of type <code>&lt;SELECT&gt;</code> and includes an options collection, you could use the following script:</p> <pre><code>function InitAgenda()\n{\nwlGlobals.Proxy = \u201cwebproxy.xyz.com:8080\u201d\n    // Through proxy \nwlGlobals.SaveSource = true \nwlGlobals.ParseForms = true \nwlGlobals.ParseTables = true\n}\nfunction CheckElementType(WebTestSite)\n{\nwlHttp.Get(WebTestSite)\nif (document.forms.length &gt; 0)\n    if (document.forms[0].elements.length &gt; 0)\n    {\n        InfoMessage(\u201cWe have a candidate. \u201c +\n                        \u201cElement type is \u201c + \n        document.forms[0].elements[0].type)\n        InfoMessage (\u201cdocument.forms[0].elements[0].options.length is \u201c\n        + document.forms[0].elements[0].options.length)\n    }\n}\nCheckElementType(\u201chttp://www.TestSite1.com/domain/pulldown.htm\u201d)\nCheckElementType(\u201chttp://www.TestSite2.com/\u201d) \nErrorMessage(\u201cDone!\u201d)\n</code></pre> <p>Properties</p> <ul> <li>defaultselected (see defaultselected (property) )</li> <li>selected (see selected (property) ))</li> <li>value (see value (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#options-method","title":"Options() (method)","text":"<p>Method of Objects</p> <p>This function is implemented as a method of the following object:</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Options command.</p> <p>Syntax</p> <p><code>Options([URL])</code></p> <p>Parameters</p> Parameter Name Description [URL] An optional parameter identifying the document URL.  You may optionally specify  the URL as a parameter of the method. Options() connects to the first URL that has been specified  from the following list, in the order specified:<p></p>- A Url parameter  specified in the method call.  <p></p>- The Url property of  the wlHttp object.  <p></p>- The local default wlLocals.Url.  <p></p>- The global default wlGlobals.Url. <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) ))</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Delete() (see Delete() (HTTP method)) </li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Head() (see Head() (method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) )</li> <li>Put() (see Put() (method) </li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#outerlink-property","title":"OuterLink (property)","text":"<p>Property of Objects</p> <ul> <li>Image (see Image (object) )</li> </ul> <p>Description</p> <p>Represents the outer link field for the parent image object.</p> <p>See also</p> <ul> <li>Collections </li> <li>form (see form (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#outfile-property","title":"Outfile (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>The name of a file to which WebLOAD writes response data from the HTTP server.</p> <p>The <code>Outfile</code> will contain the data from the next HTTP transaction, so the <code>Outfile</code> command must precede the next transaction.</p> <p>The default is \"\", which means do not write the response data.</p> <p>If there is more than one transaction after the <code>Outfile</code> property, only the response data from the first transaction will be written. To write the response data from each transaction an <code>Outfile</code> statement must be placed PRIOR to each transaction.</p> <p>The <code>Outfile</code> property is independent of the SaveSource property. <code>Outfile</code> saves in a file. SaveSource stores the downloaded data in <code>document.wlSource</code>, in memory.</p> <p>The <code>Outfile</code> property is used to implement the Log Report.</p> <p>Example</p> <p>To write the response data from </p> <p><code>http://note/radview/radview.html</code> in  <code>\u201cc:\\temp.html\u201d</code></p> <p>you might write:</p> <pre><code>wlHttp.Outfile = \"c:\\\\temp.html\"\nwlHttp.Get(\"http://note/radview/radview.html\")\n</code></pre> <p>Comment</p> <p>The <code>Outfile</code> property saves server response data. To save Agenda output messages, use the wlOutputFile. (see wlOutputFile (object) )</p> <p>Note: If the content is zipped (for example when wlGlobals.AcceptEncodingGzip = true. The response headers will show \"Content-Encoding: gzip\") the outfile will be the zipped content. To view the content you can unzip it, for example by using the extension to \".gz\"</p> <p>See also</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#pagecontentlength-property","title":"PageContentLength (property)","text":"<p>Property of Object</p> <ul> <li>wlVerification (see wlVerification (object) )</li> </ul> <p>Description</p> <p><code>PageContentLength</code> is used to retrieve the size in bytes of the content object in the GET/POST request. The content object may only be HTML, ASP, or JPG.</p> <p>Syntax</p> <p><code>wlVerification.PageContentLength</code></p> <p>Example</p> <pre><code>lHttp.Get(\"http://www.google.com/\")\nInfoMessage(\"page size\" + wlVerification.PageContentLength)\n</code></pre> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) ))</li> <li>PageTime (see PageTime (property) )</li> <li>Severity (see Severity (property) ))</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#pagetime-property","title":"PageTime (property)","text":"<p>Property of Object</p> <ul> <li><code>wlVerification</code> (see wlVerification (object) )</li> </ul> <p>Description</p> <p>PageTime is used to retrieve the page time of the last GET. That is, the total time taken to retrieve the page.</p> <p>Syntax</p> <p><code>wlVerification.PageTime</code></p> <p>Example</p> <pre><code>wlHttp.Get(\"http://www.google.com/\")\nInfoMessage(\"page time\" + wlVerification.PageTime)\n</code></pre> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parse-property","title":"Parse (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing on an HTML page.</p> <p>The Parse property can be set to one of the following values:</p> <ul> <li>always (default) \u2013 Each page is parsed and the DOM is created every time the page is visited.</li> <li>OnceOnly \u2013 The page is parsed and the DOM is created only the first time the page is visited. The same data is then reused on future visits.</li> <li>no \u2013 The DOM is not created and no object can be retrieved.</li> </ul> <p>Note: If you want the page to be parsed and the DOM created the first time the page is visited and then reuse this data, set the ParseOnce property to true. For information about the ParseOnce property.This property can only be inserted manually.</p> <p>Syntax</p> <p><code>wlGlobals.Parse = \u201cAlways\u201d</code></p> <p>See also</p> <ul> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseapplets-property","title":"ParseApplets (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables/disables parsing of Java applets on an HTML page. The ParseApplets property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of Java applets.</li> <li>false \u2013 Disables parsing of Java applets.</li> </ul> <p>Note: This property can only be inserted manually. If GetApplets is true, ParseApplets will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseApplets = false</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property)) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parsecss-property","title":"ParseCss (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of cascading style sheets on an HTML page. The ParseApplets property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of cascading style sheets.</li> <li>false \u2013 Disables parsing of cascading style sheets.</li> </ul> <p>Note: This property can only be inserted manually.   If GetCss is true, ParseCss will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseCss = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseembeds-property","title":"ParseEmbeds (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of embedded objects on an HTML page. The ParseEmbeds property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of embedded objects.</li> <li>false \u2013 Disables parsing of embedded objects.</li> </ul> <p>Note: This property can only be inserted manually.</p> <p>Note: If GetEmbeds is true, ParseEmbeds will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseEmbeds = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseforms-property","title":"ParseForms (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of forms on an HTML page. The ParseForms property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of forms.</li> <li>false \u2013 Disables parsing of forms.</li> </ul> <p>Note: This property can only be inserted manually. </p> <p>Note:  If GetForms is true, ParseForms will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseForms = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseimages-property","title":"ParseImages (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of images on an HTML page. The ParseImages property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of images.</li> <li>false \u2013 Disables parsing of images.</li> </ul> <p>Note: This property can only be inserted manually. </p> <p>Note If GetImages is true, ParseImages will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseImages = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parselinks-property","title":"ParseLinks (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of links and areas on an HTML page. The ParseLinks property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of links.</li> <li>false \u2013 Disables parsing of links.</li> </ul> <p>Note: This property can only be inserted manually. </p> <p>Note:If GetLinks is true, ParseLinks will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseLinks = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parsemetas-property","title":"ParseMetas (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of metas on an HTML page. The ParseMetas property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of metas.</li> <li>false \u2013 Disables parsing of metas.</li> </ul> <p>Note: This property can only be inserted manually. </p> <p>Note: If GetMetas is true, ParseMetas will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseMetas = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseonce-property","title":"ParseOnce (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>When set to <code>true</code>, the webpage is parsed and the DOM is created only the first time the page is visited. The same data is reused on future visits. The ParseOnce property is set when you call <code>SetClientType(\u201cThin\u201d)</code>. By default, the ParseOnce property is set to <code>true</code>.</p> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.ParseOnce = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property))</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> <li>SetClientType (see SetClientType (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parseothers-property","title":"ParseOthers (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing on an HTML page for all objects not covered by specific parsing properties. The ParseOthers property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of other objects.</li> <li>false \u2013 Disables parsing of other objects.</li> </ul> <p>Note: This property can only be inserted manually.</p> <p>Example</p> <p><code>wlGlobals.ParseOthers = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parsescripts-property","title":"ParseScripts (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of JavaScript scripts on an HTML page. The ParseScripts property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of JavaScript scripts.</li> <li>false \u2013 Disables parsing of JavaScript scripts.</li> </ul> <p>Note: This property can only be inserted manually. If GetScripts is true, ParseScripts will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseScripts = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseTables (see ParseTables (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parsetables-property","title":"ParseTables (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of tables on an HTML page. The ParseTables property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of tables.</li> <li>false \u2013 Disables parsing of tables.</li> </ul> <p>Note: This property can only be inserted manually.  Note: If GetTables is true, ParseTables will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseTables = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property) )</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseXML (see ParseXML (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#parsexml-property","title":"ParseXML (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enables parsing of XML on an HTML page. The ParseXML property can be set to one of the following values:</p> <ul> <li>true (default) \u2013 Enables parsing of XML.</li> <li>false \u2013 Disables parsing of XML.</li> </ul> <p>Note: This property can only be inserted manually.  </p> <p>Note: If GetXML is true, ParseXML will automatically be assumed to be true, even if it is set to false.</p> <p>Example</p> <p><code>wlGlobals.ParseXML = true</code></p> <p>See also</p> <ul> <li>Parse (see Parse (property))</li> <li>ParseApplets (see ParseApplets (property) )</li> <li>ParseCss (see ParseCss (property) )</li> <li>ParseEmbeds (see ParseEmbeds (property) )</li> <li>ParseForms (see ParseForms (property) )</li> <li>ParseImages (see ParseImages (property) )</li> <li>ParseLinks (see ParseLinks (property) )</li> <li>ParseMetas (see ParseMetas (property) )</li> <li>ParseOnce (see ParseOnce (property) )</li> <li>ParseOthers (see ParseOthers (property) )</li> <li>ParseScripts (see ParseScripts (property) )</li> <li>ParseTables (see ParseTables (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#password-property","title":"PassWord (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The password that the script uses to log onto a restricted HTTP site. WebLOAD automatically uses the appropriate access protocol. For example, if a site expects clients to use the NT Authentication protocol, the appropriate user name and password will be stored and sent accordingly.</p> <p>Comments</p> <p>A user is only authenticated once during a round with a set of credentials. Each subsequent request will use these credentials regardless of what is contained in the script. If the value of these credentials are changed after authentication, they will only be used during the next round, not during the current round.</p> <p>For example, if you are trying to send a request to a URL with a group of users (user1, user2, and user3), but user1 has already been authenticated, the login is always performed for user1 until the round is complete.</p> <p>GUI mode</p> <p>WebLOAD by default senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console by entering user authentication information through the Authentication tab of the Default or Current Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also set user values using the wlGlobals properties. WebLOAD automatically sends the user name and password when a wlHttp object connects to an HTTP site. For example:</p> <p><code>wlGlobals.UserName = \u201cBill\u201d</code></p> <p><code>wlGlobals.PassWord = \u201cTopSecret\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Working with the HTTP Protocol in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#pathname-property","title":"pathname (property)","text":"<p>Property of Objects</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The URI portion of the URL, including the directory path and filename (read-only string).</p> <p>Example</p> <p><code>\u201c/products/order.html\u201d</code> <code>\u201c/search.exe\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#port-property","title":"port (property)","text":"<p>Property of Objects</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The port of the URL (read-only integer).</p> <p>Example</p> <p>80</p>"},{"location":"javascript/actions_objects_functions/#post-method","title":"Post() (method)","text":"<p>Method of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Post command. The method sends the FormData, Data, or DataFile properties in the Post command. In this way, you can submit any type of data to an HTTP server.</p> <p>Syntax</p> <p><code>Post([URL] [, TransName])</code></p> <p>Parameters</p> Parameter Name Description [URL] An optional parameter identifying the document  URL.  You may optionally specify  the URL as a parameter of the method. Post() connects to first URL that has  been specified from the following list:<p></p>- A Url parameter  specified in the method call.  <p></p>- The Url property of  the wlHttp object.  <p></p>- The local default wlLocals.Url.  <p></p>- The global default wlGlobals.Url.  The URL must be a server that accepts the posted  data. [TransName] An optional user-supplied  string with the transaction name as it will appear in the Statistics Report,  described in theData Drilling- WebLOAD  transaction reports section of the WebLOAD  Scripting Guide.<p></p> Use named transactions to identify specific HTTP transactions by  name. This simplifies assigning counters when you want WebLOAD to  automatically calculate a specific transaction\u2019s occurrence, success, and  failure rates.<p></p> The run-time statistics  for transactions to which you have assigned a name appear in the Statistics  Report. For your convenience, WebLOAD offers an Automatic Transaction option.  In the WebLOAD Console, select Automatic Transaction from the General Tab of  the Global Options dialog box. Automatic Transaction is set to true by default. With Automatic Transaction,  WebLOAD automatically assigns a name to every Get and Post HTTP transaction.  This makes statistical analysis simpler, since all HTTP transaction activity  is measured, recorded, and reported for you automatically. You do not have to  remember to add naming instructions to each Get and Post command in your script. The name assigned by  WebLOAD is simply the URL used by that Get or Post transaction. If your  script includes multiple transactions to the same URL, the information will  be collected cumulatively for those transactions. <p>Example</p> <pre><code>function InitAgenda() {\n  //Set the default URL\n  wlGlobals.Url = \u201chttp://www.ABCDEF.com\u201d\n}\n//Main script\n//Connect to the default URL: \nwlHttp.Post()\n//Connect to a different, explicitly set URL: \nwlHttp.Post(\u201chttp://www.ABCDEF.com/product_info.html\u201d)\n//Assign a name to the following HTTP transact: \nwlHttp.Get(\u201chttp://www.ABCDEF.com/product_info.html\u201d,\n                    \u201cUpdateBankAccount\u201d)\n//Submit to a CGI program\nwlHttp.Url = \u201chttp://www.ABCDEF.com/search.cgi\u201d \nwlHttp.FormData[\u201cSeachTerm\u201d] = \u201cocean+currents\u201d \nwlHttp.Post()\n//Submit to an HTTP server of any type \nwlHttp.FormData[\u201cFirstName\u201d] = \u201cBill\u201d \nwlHttp.FormData[\u201cLastName\u201d] = \u201cSmith\u201d \nwlHttp.Post(\u201chttp://www.ABCDEF.com/formprocessor.exe\u201d)\n</code></pre> <p>Use named transactions as a shortcut in place of the <code>BeginTransaction()...EndTransaction()</code> module. For example, this is one way to identify a logical transaction unit:</p> <pre><code>BeginTransaction(\u201cUpdateBankAccount\u201d) \n    wlHttp.Get(url)\n        // the body of the transaction\n        // any valid JavaScript statements \n    wlHttp.Post(url);\nEndTransaction(\u201cUpdateBankAccount\u201d)\n        // and so on\n</code></pre> <p>Using the named transaction syntax, you could write:</p> <pre><code>wlHttp.Get(url,\u201dUpdateBankAccount\u201d)\n    // the body of the transaction\n    // any valid JavaScript statements \nwlHttp.Post(url,\u201dUpdateBankAccount\u201d)\n    // and so on\n</code></pre> <p>For the HTTPS protocol, include <code>\u201chttps://\u201d</code> in the URL and set the required properties of the <code>wlGlobals</code> object:</p> <p><code>wlHttp.Post(\"https://www.ABCDEF.com\")</code> The URL can contain a string of attribute data.</p> <p><pre><code>wlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d+ \n    \u201c?SearchFor=icebergs&amp;SearchType=ExactTerm\u201d)\n</code></pre> Alternatively, you can specify the attributes in the <code>FormData</code> or <code>Data</code> property. The method automatically appends these in the correct syntax to the URL. Thus the following two code fragments are each equivalent to the preceding Post command.</p> <p><code>wlHttp.Data.Type = \u201capplication/x-www-form-urlencoded\u201d</code> <code>wlHttp.Data.Value = \u201cSearchFor=icebergs&amp;SearchType=ExactTerm\u201d</code> <code>wlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d)</code></p> <p>-Or-</p> <p><code>wlHttp.FormData.SearchFor = \u201cicebergs\u201d</code> <code>wlHttp.FormData.SearchType = \u201cExactTerm\u201d</code> <code>wlHttp.Post(\u201chttp://www.ABCDEF.com/query.exe\u201d)</code></p> <p>Comment</p> <p>You may not use the <code>TransName</code> parameter by itself. <code>Post()</code> expects to receive either no parameters, in which case it uses the script\u2019s default URL, or one parameter, which must be an alternate URL value, or two parameters, including both a URL value and the transaction name to be assigned to this transaction.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Delete() (see Delete() (HTTP method)) </li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Head() (see Head() (method) )</li> <li>Options() (see Options() (method) )</li> <li>Put() (see Put() (method) </li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#probingclientthreads-property","title":"ProbingClientThreads (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals (see wlGlobals (object) )</li> <li>wlHttp (see wlHttp (object) )</li> <li>wlLocals (see wlLocals (object) )</li> </ul> <p>Description</p> <p>Optionally, WebLOAD can allocate extra threads to download nested images and frames.</p> <p>For clients that you define in a Load Generator, this option is controlled by the <code>LoadGeneratorThreads</code> property. The default value of this property is Single, which means that Virtual Clients will not use extra threads to download data from the server.</p> <p>For the Probing Client, the option is controlled by the ProbingClientThreads property. The default is Multiple, which means that the client can use three extra threads for nested downloads. This simulates the behavior of Web browsers, which often use extra threads to download nested images and frames.</p> <p>The possible values of these properties are:</p> <ul> <li>Single \u2013 Do not use extra threads to download nested images and frames. (default for LoadGeneratorThreads)</li> <li>Multiple \u2013 Allocate three extra threads per client (for a total of four threads per client) to download nested images and frames. (default for <code>ProbingClientThreads</code>)</li> <li>Any specific number of threads between 1 and 8, such as \u201c5\u201d \u2013 Allocate that exact number of extra threads per client to download nested images and frames.</li> </ul> <p>Example</p> <p>You can assign any of these properties independently within a single script. In that case, if you configure a Probing Client to run the script, WebLOAD uses the value of <code>ProbingClientThreads</code> and ignores <code>LoadGeneratorThreads</code> (vice versa if you configure a Load Generator to run the script). For example, you might write:</p> <pre><code>function InitAgenda() {\n    //Do not use extra threads if a\n    // Probing Client runs the script\n    wlGlobals.ProbingClientThreads = \u201cSingle\u201d\n    //Use extra threads if a\n    // Load Generator runs the script\n    wlGlobals.LoadGeneratorThreads = \u201cMultiple\u201d\n}\n</code></pre> <p>Comment</p> <p>The extra threads have no effect on the <code>ClientNum</code> value of the client. The <code>ClientNum</code> variable reports only the main thread number of each client, not the extra threads.</p> <p>GUI mode</p> <p>WebLOAD recommends enabling or disabling multi-threaded virtual clients through the WebLOAD Console. Enable multi-threading for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default or Current Session Options dialog box and setting the number of threads you prefer</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>LoadGeneratorThreads (see LoadGeneratorThreads (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#protocol-property","title":"protocol (property)","text":"<p>Property of Objects</p> <ul> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The HTTP protocol portion of the URL for the parent object (read-only string).</p> <p>Example</p> <p><code>\u201chttps://\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#proxy-proxyusername-proxypassword-properties","title":"Proxy, ProxyUserName, ProxyPassWord (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Identifies the proxy server that the script uses for HTTP access. The user name and password are for proxy servers that require user authorization.</p> <p>GUI mode</p> <p>WebLOAD by default senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console in one of the following ways:</p> <ul> <li>Enter user authentication information through the Authentication tab of the</li> </ul> <p>Default or Current Options dialog box, accessed from the Tools tab of the ribbon.</p> <ul> <li>You may also set proxy user values using the wlGlobals properties. WebLOAD automatically connects via the proxy when a wlHttp object connects to an HTTP site.</li> </ul> <p>Syntax</p> <p><code>wlGlobals.ProxyProperty = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>wlGlobals.Proxy = \u201cproxy.ABCDEF.com:8080\u201d</code> <code>wlGlobals.ProxyUserName = \u201cBill\u201d</code> <code>wlGlobals.ProxyPassWord = \u201cClassified\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> <li>HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord (see HttpsProxy,)</li> <li>HttpsProxyNTUserName, HttpsProxyNTPassWord (see HttpsProxyNTUserName, HttpsProxyNTPassWord (properties))</li> <li>ProxyNTUserName, ProxyNTPassWord (see ProxyNTUserName, ProxyNTPassWord)</li> </ul>"},{"location":"javascript/actions_objects_functions/#proxyexceptions-property","title":"ProxyExceptions (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>The <code>ProxyExceptions</code> property accepts a string based on what the user entered in the Proxy Options tab of the Recording and Script Generation Options dialog box. This string indicates the URLs whose support does not go through the proxy. The format of this string is based on the Internet Explorer format. For more information, see http://www.microsoft.com/technet/prodtechnol/ie/ieak/techinfo/deploy/60/en/corppro x.mspx?mfr=true.</p> <p>Example</p> <p><code>wlGlobals.ProxyExceptions = \u201c*.example.com\u201d</code></p> <p>GUI mode</p> <p>WebLOAD takes the current settings of the browser and displays them in the Proxy Options tab of the Recording and Script Generation Options dialog box in WebLOAD Recorder.</p> <p>In WebLOAD Recorder, click Recording and Script Generation Options in the Tools tab of the ribbon, and click the Proxy Options tab. Modify the fields, as necessary.</p>"},{"location":"javascript/actions_objects_functions/#proxyntusername-proxyntpassword-properties","title":"ProxyNTUserName, ProxyNTPassWord (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Provides user authorization to the proxy server that the script uses for HTTP access on Windows servers.</p> <p>GUI mode</p> <p>WebLOAD by default senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console in one of the following ways:</p> <ul> <li>Use the Authentication tab of the Default or Current Options dialog box to enter user authentication information.</li> <li>You may also set proxyNT user values using the <code>wlGlobals</code> properties. WebLOAD automatically connects via the proxy when a <code>wlHttp</code> object connects to an HTTP site.</li> </ul> <p>Syntax</p> <p><code>wlGlobals.ProxyNTProperty = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>wlGlobals.ProxyNTUserName = \u201cBill\u201d</code></p> <p><code>wlGlobals.ProxyNTPassWord = \u201cClassified\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> <li>HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord (see HttpsProxy,)</li> <li>HttpsProxyNTUserName, HttpsProxyNTPassWord see HttpsProxyNTUserName, HttpsProxyNTPassWord (properties)</li> <li>Proxy, ProxyUserName, ProxyPassWord (see Proxy, ProxyUserName,)</li> </ul>"},{"location":"javascript/actions_objects_functions/#put-method","title":"Put() (method)","text":"<p>Method of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>Perform an HTTP or HTTPS Put command. The method sends the FormData, Data, or DataFile properties in the Put command. In this way, you can submit any type of data to an HTTP server.</p> <p>Syntax</p> <p><code>Put([URL] [, TransName])</code></p> <p>Parameters</p> Parameter Name Description [URL] An optional parameter identifying the document  URL.  You may optionally specify the URL as a parameter  of the method. Put() connects to first URL that has been specified from the  following list:<p></p>- A Url parameter specified in the method call.  <p></p>- The Url property of the wlHttp object.  <p></p>- The local default wlLocals.Url.  <p></p>- The global default wlGlobals.Url.  The URL must be a server that accepts the  submitted data. [TransName] An optional user-supplied  string with the transaction name as it will appear in the Statistics Report,  described in theData Drilling- WebLOAD  transaction reports section of the WebLOAD  Scripting Guide.  Use named transactions to identify specific HTTP transactions by  name. This simplifies assigning counters when you want WebLOAD to  automatically calculate a specific transaction\u2019s occurrence, success, and  failure rates.  The run-time statistics  for transactions to which you have assigned a name appear in the Statistics  Report. For your convenience, WebLOAD offers an Automatic Transaction option.  In the WebLOAD Console, select Automatic Transaction from the General Tab of  the Global Options dialog box. Automatic Transaction is set to <code>true</code> by default. With Automatic Transaction,  WebLOAD automatically assigns a name to every Get, Post and Put HTTP  transaction. This makes statistical analysis simpler, since all HTTP  transaction activity is measured, recorded, and reported for you  automatically. You do not have to remember to add naming instructions to each  Get, Post and Put command in your script. The name assigned by WebLOAD is  simply the URL used by that Get, Post or Put transaction. If your script  includes multiple transactions to the same URL, the information will be  collected cumulatively for those transactions. <p>Comment</p> <p>You may not use the TransName parameter by itself. Put() expects to receive either no parameters, in which case it uses the script\u2019s default URL, or one parameter, which must be an alternate URL value, or two parameters, including both a URL value and the transaction name to be assigned to this transaction.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Delete() (see Delete() (HTTP method)) </li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Head() (see Head() (method) )</li> <li>Options() (see Options() (method) )</li> <li>Post() (see Post() (method) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#range-method","title":"Range() (method)","text":"<p>Method of Object</p> <ul> <li>wlRand (see wlRand (object) )</li> </ul> <p>Description</p> <p>Return a random integer between <code>start</code> and <code>end</code>.</p> <p>Syntax</p> <p><code>wlRand.Range(start, end, [seed])</code></p> <p>Parameters</p> Parameter Name Description start Integer signifying start of specified range  of numbers. end Integer signifying end of specified range of  numbers. [seed] Optional seed integer used on first call to  this method only if there was no previous call to the wlRand.Seed() method. <p>Return Value</p> <p>A random integer that falls within the specified range.</p> <p>Example <code>wlRand.Num(12345)</code></p> <p>See also</p> <ul> <li>Num() (see Num() (method) )</li> <li>Seed()</li> <li>(see Seed() (method) )</li> <li>Select() (see Select() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#readfile-function","title":"ReadFile() (function)","text":"<p>Description</p> <p>Reads the entire contents of the given file.</p> <p>Syntax</p> <p><code>ReadFile(fileName)</code></p> <p>Parameters</p> <p>fileName to read</p> <p>Comment</p> <p>ReadFile a low level function to read a full file. For parameterization usage, Parameterization Manager is more appropriate.</p> <p>If the file is not found, an error is shown. Older versions (prior to 12.7) would return an empty string instead. To use the old behavior if needed, use <code>ReadFile_deprecated()</code>, alternatively, use <code>UNDOC_WLFileExist(fileName)</code> to check if the file exists.</p>"},{"location":"javascript/actions_objects_functions/#receivetimeout-property","title":"ReceiveTimeout (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>WebLOAD performs read operations in a loop. Each iteration of the loop consists of a wait on the socket until the server is ready, followed by a receive operation, if the read on the socket was successful. This is performed until all the information is read, or until the time spent in the loop exceeds the specified timeout value in the ReceiveTimeout property, or a socket error occurs. If a timeout or socket error occur,</p> <p>WebLOAD then tries to reestablish a connection (see RequestRetries (property) ). The default value of the ReceiveTimeout property is 900,000 ms.</p> <p>Example</p> <p><code>wlGlobals.ReceiveTimeout = 550000</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>RequestRetries (see RequestRetries (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#redirectionlimit-property","title":"RedirectionLimit (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>The maximum number of redirection \u2018hops\u2019 allowed during a test session. The default value is 10.</p> <p>GUI mode</p> <p>WebLOAD recommends setting the redirection limit through the WebLOAD Console. Check Redirection Enabled and enter a limiting number on the Browser Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also assign a redirection limit value using the <code>wl.RedirectionLimit</code> property.</p> <p><code>wlGlobals.RedirectionLimit = IntegerValue</code></p> <p>Example</p> <p><code>wlGlobals.RedirectionLimit = 10</code></p>"},{"location":"javascript/actions_objects_functions/#referer-property","title":"Referer (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> <li>wlLocals (see wlLocals (object) )</li> </ul> <p>Description</p> <p>The Referer property is used by the recorder to store the referer header and is a synonym for wlHttp.Headers[\u201creferer\u201d]. The Referer property is used as shorthand for accessing the referer header in the wlHttp.Headers collection.</p> <p>GUI mode</p> <p>To tell the system whether or not to record the referer header in the Referer property, select or deselect the Record Referer Header checkbox in the Script Content tab of the Recording and Script Generation Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p><code>wlHttp.Header[\u201cReferer\u201d] = \u201chttp://www.testaddress.com/\u201d.</code></p> <p>Example</p> <p><code>wlHttp.Header[\u201cReferer\u201d] = \u201chttp://www.easycar.com/\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> </ul>"},{"location":"javascript/actions_objects_functions/#remove-method","title":"remove() (method)","text":"<p>Method of Objects</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul> <p>Description</p> <p>This method deletes the wlOutputFile object and closes the output file.</p> <p>Syntax</p> <p><code>wlOutputFile.remove()</code></p> <p>Example</p> <pre><code>MyFileObj = new wlOutputFile(filename)\n\u2026\nMyFileObj.remove()\n</code></pre> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#reportevent-function","title":"ReportEvent() (function)","text":"<p>Description</p> <p>This function enables you to record specific events as they occur. This information is very helpful when analyzing website performance with Data Drilling.</p> <p>Syntax</p> <p><code>ReportEvent(EventName[, description])</code></p> <p>Parameters</p> Parameter  Name Description EventName A user-supplied string  that identifies the specific event and appears in the results tables of the  WebLOAD Data Drilling feature. Since this name is used as a table header and  sort key, it must be a short string that is used consistently to identify  events, such as \u201cURLMismatch\u201d. [description] An optional user-supplied string that may be  longer and more detailed than the EventName, providing more  information about the specific event. <p>See also</p> <ul> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined) (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#reportlog-method","title":"ReportLog() (method)","text":"<p>Method of Object</p> <ul> <li>wlException (see wlException (object) )</li> </ul> <p>Description</p> <p>Sends a message to the Log Window that includes the error message and severity level stored in this <code>wlException</code> object.</p> <p>Syntax</p> <p><code>ReportLog()</code></p> <p>Example</p> <p><code>myUserException.ReportLog()</code></p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#requestretries-property","title":"RequestRetries (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Read operations are performed in a loop until all information is read. If the duration of this loop exceeds a specified timeout (see ReceiveTimeout (property) ) or a socket error occurs, the Virtual Client will then retry to establish a connection.</p> <p>RequestRetries is the maximum number of times that the Virtual Client will attempt to reconnect to the server. The default value of RequestRetries is 9.</p> <p>Example</p> <p><code>wlGlobals.RequestRetries = 7</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ReceiveTimeout (see ReceiveTimeout (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#reset-method","title":"Reset() (method)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile() (see wlOutputFile (object) ))</li> </ul> <p>Description</p> <p>Return to the beginning of the output file.</p> <p>Syntax</p> <p><code>Reset()</code></p> <p>Example</p> <pre><code>MyFileObj = new wlOutputFile(filename)\n\u2026\n`MyFileObj.Reset()\n</code></pre> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>wlOutputFile() (see wlOutputFile() (constructor) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#responsecontenttype-property","title":"ResponseContentType (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The language in which WebLOAD receives the response from the SUT. This can be <code>HTML</code>, <code>XML</code>, or <code>Not Defined</code> and is used to decide whether or not to parse the response. If ResponseContentType is set to HTML or XML, the content of the response is treated as either HTML or XML, as specified. If not, an algorithm checks the content type of the response. This algorithm uses two other wlGlobals: HtmlContentTypes and XmlContentTypes. These contain a list of content types that specify HTMLs and XMLs, respectively. The algorithm checks whether the content type of the response matches either of these lists.</p> <p>Syntax</p> <p><code>wlGlobals.ResponseContentType = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>wlGlobals.ResponseContentType = \u201cHTML\u201d</code></p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#roundnum-variable","title":"RoundNum (variable)","text":"<p>Description</p> <p>The number of times that WebLOAD has executed the main script of a client during the WebLOAD test, including the current execution. <code>RoundNum</code> is a read-only local variable, reporting the number of rounds for the specific WebLOAD client, no matter how many other clients may be running the same script.</p> <p><code>RoundNum</code> does not exist in the global context of a script (InitAgenda(), etc.). In the local context:</p> <ul> <li>In <code>InitClient(), RoundNum = 0.</code></li> <li>In the main script, <code>RoundNum = 1, 2, 3, ....</code></li> <li>In <code>TerminateClient()</code>, <code>OnScriptAbort()</code>, or <code>OnErrorTerminateClient()</code>, <code>RoundNum</code> keeps its value from the final round.</li> </ul> <p>The WebLOAD clients do not necessarily remain in synchronization. The <code>RoundNum</code> may differ for different clients running the same script.</p> <p>If a thread stops and restarts for any reason, the <code>RoundNum</code> continues from its value before the interruption. This can occur, for example, after you issue a Pause command from the WebLOAD Console.</p> <p>If you mix scripts in a single Load Generator, WebLOAD maintains an independent round counter for each script. For example, if WLFileAgendaShared GUI mode WebLOAD recommends accessing global system variables, including the <code>RoundNum</code> identification variable, through the WebLOAD Recorder. The variables that appear in this list are available for use at any point in a script file. In the WebLOAD Recorder main window, click Variables Windows in the Debug tab of the ribbon..</p> <p>For example, it is convenient to add <code>RoundNum</code> to a Message Node to clarify the round in which the messages that appear in the WebLOAD Console Log window originated.</p> <p></p> <p>Note: <code>RoundNum</code> can also be added directly to the code in a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>See also</p> <ul> <li>GeneratorName() (see GeneratorName() (function) )</li> <li>GetOperatingSystem() (see GetOperatingSystem() (function) )</li> <li>Identification Variables and Functions </li> <li>Using the IntelliSense JavaScript Editor </li> <li>VCUniqueID() (see VCUniqueID() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#row-object","title":"row (object)","text":"<p>Property of Objects</p> <p><code>row</code> objects are grouped into collections of <code>rows</code>. The <code>rows</code> collection is a property of the following objects:</p> <ul> <li>wlTables (see wlTables (object) )</li> </ul> <p>Description</p> <p>When working with <code>TextArea element</code> objects, a <code>row</code> object contains the number of rows in the TextArea.</p> <p>When working with <code>wlTables</code> objects, a <code>row</code> object contains all the data found in a single table row. Individual row objects may be addressed by index number, similar to any object within a collection.</p> <p>Syntax</p> <p>Individual <code>row</code> objects are addressed by index number, similar to any object within a collection. Access each row\u2019s properties directly using the following syntax:</p> <p><code>document.wlTables.myTable.rows[#].&lt;row-property&gt;</code></p> <p>Example</p> <p>To find out how many row objects are contained within myTable, check the value of:</p> <p><code>document.wlTables.myTable.rows.length</code></p> <p>To access a property of the 16th row in <code>myTable</code>, with the first row indexed at 0, you could write:</p> <p><code>document.wlTables.myTable.rows[15].rowIndex</code></p> <p>To access a property of the 4th cell in the 3rd row in myTable, counting across rows and with the first cell indexed at 0, you could write:</p> <p><code>document.wlTables.myTable.rows[2].cells[3].&lt;cell-property&gt;</code></p> <p>Properties</p> <p>Each row object contains information about the data found in the cells of a single table row. The row object includes the following properties:</p> <ul> <li>cell (see cell (object) ) (row property)</li> <li>rowIndex (see rowIndex (property) ) (row property)</li> </ul> <p>Comment</p> <p><code>The row object may be accessed as a member of the wlTables family of table, row, and cell objects.</code></p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li>cols (see cols (property) ) (wlTables property)</li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>rowIndex (see rowIndex (property) )</li> <li>tagName (see tagName (property) ) (cell property)</li> </ul>"},{"location":"javascript/actions_objects_functions/#rowindex-property","title":"rowIndex (property)","text":"<p>Property of Object</p> <ul> <li>row (see row (object) )</li> </ul> <p>Description</p> <p>An integer containing the ordinal index number of this <code>row</code> object within the parent table. Rows are indexed starting from zero, so the <code>rowIndex</code> of the first row in a table is 0.</p> <p>Comment</p> <p>The <code>rowIndex</code> property is a member of the <code>wlTables</code> family of table, row, and cell objects.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li>cols (see cols (property) ) (wlTables property)</li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>row (see row (object) ) (wlTables property)</li> <li>tagName (see tagName (property) ) (cell property)</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#saveheaders-property","title":"SaveHeaders (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Instruct WebLOAD to store the HTML response headers in wlHeaders.</p> <ul> <li>false \u2013Do not store the header. (default)</li> <li>true \u2013 Store the header in document.wlHeaders.</li> </ul> <p>Note: This property can only be inserted manually.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#savesource-property","title":"SaveSource (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Instruct WebLOAD to store the complete HTML source code downloaded in an HTTP command.</p> <ul> <li>false \u2013 Do not store the source HTML (default).</li> <li>true \u2013 Store the source HTML in <code>document.wlSource</code>.</li> </ul> <p>If you enable <code>SaveSource</code>, WebLOAD automatically stores the downloaded HTML whenever the script calls the <code>wlHttp.Get()</code> or <code>wlHttp.Post()</code> method. WebLOAD stores the most recent download in the document.wlSource property, refreshing it when the script calls <code>wlHttp.Get()</code> or <code>wlHttp.Post()</code> again. The stored code includes any scripts or other data embedded in the HTML. Your script can retrieve the code from <code>document.wlSource</code> and interpret it in any desired way.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#savetransaction-property","title":"SaveTransaction (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Instruct WebLOAD to save detailed information about all transactions, both successes and failures, for later analysis in the Data Drilling reports.</p> <p>By default, WebLOAD only saves detailed information about transaction failures for later analysis, since most test sessions are focused on tracking down and identifying the causes of errors and failures.</p> <p>WebLOAD also provides the option of storing and analyzing the data for all transactions in a test session, successes and failures, through the SaveTransaction property. However, this property should be used carefully, since a successful test session may run for an extended period, and saving data on each transaction success could quickly use up all available disk space.</p> <p>Note: Transaction data is only saved for the number of instances defined in the Instance limit field in the WebLOAD Console (Global Options dialog box, in the Data Drilling tab).</p> <p>Possible values of the SaveTransaction property are:</p> <ul> <li>false \u2013 Do not store detailed data on successful transactions (default).</li> <li>true \u2013 Store detailed data on successful transactions.</li> </ul> <p>The SaveTransaction property works with the following parameters in the Functional Testing tab (Automatic Data Collection area) of the Current Session Options/Default Options dialog box in the WebLOAD Console, as follows:</p> <ul> <li>Pages \u2013 When selected, WebLOAD provides timers and counters for every \u201cGet\u201d in the session. When SaveTransaction is set to true, WebLOAD provides an aggregate breakdown for all objects in the page.</li> <li>Object level \u2013 When selected, WebLOAD provides timers and counters for every object in every page. When SaveTransaction is set to true, WebLOAD provides breakdown information for every object in every page.</li> <li>HTTP level \u2013 When selected, WebLOAD provides breakdown information for every failed transaction in every page. When SaveTransaction is set to true, WebLOAD provides breakdown information for every instance of every failed transaction in every page.</li> </ul> <p>Example</p> <pre><code>function InitAgenda() { \n    wlGlobals.SaveTransaction = true\n}\n</code></pre> <p>Comment</p> <p>As with all <code>wlGlobals</code> configuration properties, the <code>SaveTransaction</code> property must be set in the <code>InitAgenda()</code> function, as illustrated in the preceding example.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#script-object","title":"script (object)","text":"<p>Property of Object</p> <p>Scripts on a Web page are accessed through <code>script</code> objects that are grouped into collections of <code>scripts</code>. The <code>scripts</code> collection is a property of the following object:</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Specifies a script object in the current <code>document</code> that is interpreted by a script engine. <code>script</code> objects are grouped together within collections of <code>scripts</code>.</p> <p>Syntax</p> <p>The <code>scripts</code> collection includes a <code>length</code> property that reports the number of script objects within a document (read-only). To access an individual script\u2019s properties, check the <code>length</code> property of the <code>scripts</code> collection and use an index number to access the individual <code>scripts</code>. For example, to find out how many script objects are contained within a document, check the value of:</p> <p><code>document.scripts.length</code></p> <p>Access each script\u2019s properties directly using the following syntax:</p> <p><code>document.scripts[index#].&lt;scripts-property&gt;</code></p> <p>Example</p> <p><code>document.scripts[1].language</code></p> <p>Properties</p> <ul> <li>event (see event (property) )</li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>language (see language (property) )</li> <li>src (see src (property) </li> </ul> <p>See also</p> <ul> <li>Collections </li> </ul>"},{"location":"javascript/actions_objects_functions/#search-property","title":"search (property)","text":"<p>Property of Objects</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>The search attribute string of the URL, not including the initial ? symbol (read-only string).</p> <p>Example</p> <p><code>\u201cSearchFor=modems&amp;SearchType=ExactTerm\u201d</code></p>"},{"location":"javascript/actions_objects_functions/#seed-method","title":"Seed() (method)","text":"<p>Method of Object</p> <ul> <li>wlRand (see wlRand (object) )</li> </ul> <p>Description</p> <p>Initialize the random number generator. Call the <code>Seed()</code> method in the <code>InitAgenda()</code> function of a script, using any integer as a <code>seed</code>.</p> <p>Syntax</p> <p><code>wlRand.Seed(seed)</code></p> Parameter Name Description <code>seed</code> Seed integer. <p>Example</p> <p><code>wlRand.Seed(12345)</code></p> <p>See also</p> <ul> <li>Num() (see Num() (method) )</li> <li>Range() (see Range() (method) )</li> <li>Select() (see Select() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#select","title":"Select","text":""},{"location":"javascript/actions_objects_functions/#select-method","title":"Select() (method)","text":"<p>Method of Object</p> <ul> <li>wlRand (see wlRand (object) )</li> </ul> <p>Description</p> <p>Select one element of a set at random.</p> <p>Syntax</p> <p><code>wlRand.Select(val1, val2, ..., val</code>N<code>)</code></p> <p>Parameters</p> Parameter  Name Description val1\u2026valN Any number of parameters itemizing the elements in  a set. The parameters can be numbers, strings, or any other objects. <p>Return Value</p> <p>The value of one of its parameters, selected at random.</p> <p>Example</p> <p><code>wlRand.Select(21, 57, 88, 93)</code></p> <p>See also</p> <ul> <li>Num() (see Num() (method) )</li> <li>Range() (see Range() (method) )</li> <li>Seed() (see Seed() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectsecondtimeout-property","title":"SelectSecondTimeout (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Specify a second option for the amount of time the system will wait for a TCP connection to be established before timing out. The default value of SelectSecondTimeout is 0 milliseconds.</p> <p>Syntax</p> <p><code>wlGlobals.SelectSecondTimeout = number</code></p> <p>Example </p> <p><code>wlGlobals.SelectSecondTimeout = 100</code> </p> <p>See also</p> <ul> <li>SelectSwitchNum (see SelectSwitchNum (property) )</li> <li>SelectTimeout (see SelectTimeout (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectswitchnum-property","title":"SelectSwitchNum (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The number of iterations after which the timeout is made shorter and the sleep time longer to ease the stress on the CPU. The default value of SelectSwitchNum is 100.</p> <p>Syntax</p> <p>wlGlobals.SelectSwitchNum = number</p> <p>Example wlGlobals.SelectSwitchNum = 500 Comment</p> <p>The following describes the basic functionality of the Load Engine.</p> <p>Each read operation is limited by the RecvTimeout property. That is, the entire algorithm described below exits when it reaches the RecvTimeout timeout.</p> <p>First, a send operation is performed with a request to the server:</p> <pre><code>numberOfIterations = 0\n\nwhile (wlGlobals.SendTimeout not exceeded) {\n\nif (numberOfIterations &lt; wlGlobals.SelectWriteSwitchNum { timeout = wlGlobals.SelectWriteTimeout\n\nsleepTime = wlGlbobals.SelectWriteSecondTimeout\n\n}\n\nelse {\n\ntimeout = wlGlobals.SelectWriteSecondTimeout\n\nsleepTime = wlGlbobals.SelectWriteTimeout\n\n}\n\nselect for read (timeout) if (socket ready) break\n\n}\n\nsend request\n</code></pre> <p>Then the Load Engine attempts to read the response:</p> <pre><code>numberOfIterations = 0\n\nwhile (wlGlobals.RecvTimeout not exceeded) {\n\nif (numberOfIterations &lt; wlGlobals.SelecSwitchNum { timeout = wlGlobals.SelecTimeout\n\nsleepTime = wlGlbobals.SelectSecondTimeout\n\n}\n\nelse {\n\ntimeout = wlGlobals.SelectSecondTimeout sleepTime = wlGlbobals.SelectTimeout\n\n}\n\nselect for write (timeout) if (socket ready) break\n\n}\n\nread response\n</code></pre> <p>The IO operations of the Load Engine are synchronous, basically looping and polling the sockets. The Load Engine performs a select on the socket with a timeout. If the select on the socket fails, a short sleep is performed and the system tries to perform the select again until the timeout specified in the SelectTimeout property is exceeded. This also enables the Load Engine to check with the monitor between selects to see if the session has ended.</p> <p>See also</p> <ul> <li>SelectSecondTimeout (see SelectSecondTimeout (property) ))</li> <li>SelectTimeout (see SelectTimeout (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selecttimeout-property","title":"SelectTimeout (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>A timeout used when performing a select on a socket. If the select on the socket fails, a short sleep is performed and the system tries to perform the select again until the timeout specified in the SelectTimeout property is exceeded. The default value of SelectTimeout is 200 milliseconds.</p> <p>Syntax</p> <p>wlGlobals.SelectTimeout = number</p> <p>Example wlGlobals.SelectTimeout = 300 See also</p> <ul> <li>SelectSecondTimeout (see SelectSecondTimeout (property) )</li> <li>SelectSwitchNum (see SelectSwitchNum (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectwritesecondtimeout-property","title":"SelectWriteSecondTimeout (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Specify a second option of the amount of time that the connection should stay open while nothing is being written to it. The default value of SelectWriteSecondTimeout is 10 milliseconds.</p> <p>Syntax</p> <p><code>wlGlobals.*SelectWriteSecondTimeout* = number</code></p> <p>Example</p> <p>wlGlobals.SelectWriteSecondTimeout = 100</p> <p>See also</p> <ul> <li>SelectWriteSwitchNum (see SelectWriteSwitchNum (property) )</li> <li>SelectWriteTimeout (see SelectWriteTimeout (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectwriteswitchnum-property","title":"SelectWriteSwitchNum (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Indicate the amount of time that elapses before switching from the first write timeout to the second write timeout. The default value of SelectWriteSwitchNum is100 milliseconds.</p> <p>Syntax</p> <p>wlGlobals.SelectWriteSwitchNum = number</p> <p>Example wlGlobals.SelectWriteSwitchNum = 100 See also</p> <ul> <li>SelectWriteSecondTimeout (see SelectWriteSecondTimeout )</li> <li>SelectWriteTimeout (see SelectWriteTimeout )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectwritetimeout-property","title":"SelectWriteTimeout (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Specify the amount of time that the connection should stay open while nothing is being written to it. The default value of SelectWriteTimeout is 200 milliseconds.</p> <p>Syntax</p> <p>wlGlobals.SelectWriteTimeout = number</p> <p>Example wlGlobals.SelectWriteTimeout = 300 See also</p> <ul> <li>SelectWriteSecondTimeout (see SelectWriteSecondTimeout (property) )</li> <li>SelectWriteSwitchNum (see SelectWriteSwitchNum (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#selected-property","title":"selected (property)","text":"<p>Property of Objects</p> <ul> <li>option (see option (object) ))</li> </ul> <p>Description</p> <p>The selected property has a value of true if this <code>&lt;OPTION&gt;</code> element has been selected, or false otherwise (read-only).</p> <p>See also</p> <ul> <li>location (see location (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#selectedindex-property","title":"selectedindex (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>Indicates which of the nested <code>&lt;OPTION&gt;</code> elements is selected in an element of type</p> <p><code>&lt;SELECT&gt;</code>. The possible values are 0, 1, 2, For example, if the first <code>&lt;OPTION&gt;</code></p> <p>element is selected, then selectedindex = 0 (read-only). The default value is 0.</p>"},{"location":"javascript/actions_objects_functions/#sendbuffersize-property","title":"SendBufferSize (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The SendBufferSize property defines the amount of space allocated to the outgoing data buffer. The default value of SendBufferSize is -1, which indicates that the entire request should be sent in one buffer.</p> <p>Note: This property can only be inserted manually.</p> <p>Syntax</p> <p><code>wlGlobals.SendBufferSize = number</code></p> <p>Example</p> <p><code>wlGlobals.SendBufferSize = 300</code></p>"},{"location":"javascript/actions_objects_functions/#sendclientstatistics-property","title":"SendClientStatistics (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>SendClientStatistics is used to define whether or not to send statistics. It should be set in InitAgenda. The console writes the raw data to C:\\Documents and Settings``\\Local Settings\\Temp\\ClientStat.txt. To change the name, add CLIENT_STATISTICS_FILE = \u201cfile-name\u201d to webload.ini on the console side. By default, this will save the raw statistics data for all the clients. <p>Only statistics calculated by the Load Generator are supported. Statistics like hits/second are not sent and empty statistics, for example, RoundTime where no round was completed within a time slice, are sent as -1.</p> <p>Example</p> <p>wlGlobals.SendClientStatistics = true</p> <p>See also</p> <ul> <li>SendClientStatisticsFilter (see SendClientStatisticsFilter (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sendclientstatisticsfilter-property","title":"SendClientStatisticsFilter (property)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>This is a very simple filter for choosing clients for which to send statistics. The format is \u201c1;4;8;\u201d. Each number is a client number and you can specify as many client numbers as you want. Ranges and wildcards are not supported. If no client numbers are specified, statistics are sent for all clients.</p> <p>If spawning is being used and you specify, for example, \u201c1\u201d, statistics for the first VC will be sent for each slave process.</p> <p>Only statistics calculated by the Load Generator are supported. Statistics like hits/second are not sent and empty statistics, for example, RoundTime where no round was completed within a time slice, are sent as -1.</p> <p>Note: The filter and file name are not checked.</p> <p>Syntax</p> <p>wlGlobals.SendClientStatisticsFilter = \u201c<code>&lt;client number&gt;</code>;<code>&lt;client number&gt;</code>;\u201d</p> <p>Example</p> <p><code>wlGlobals.SendClientStatisticsFilter = \u201c2;3;8\u201d</code></p> <p>See also</p> <ul> <li>SendClientStatistics (see SendClientStatistics (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#sendcounter-function","title":"SendCounter() (function)","text":"<p>Description</p> <p>Use this function to count the number of times an event occurs and output the value to the WebLOAD Console. Call SendCounter() in the main script of a script.</p> <p>Syntax</p> <p>SendCounter(EventName)</p> <p>See also</p> <ul> <li>SendMeasurement() (see SendMeasurement() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> </ul>"},{"location":"javascript/actions_objects_functions/#sendmeasurement-function","title":"SendMeasurement() (function)","text":"<p>Description</p> <p>Use this function to assign a value to the specified statistical measurement. Call</p> <p>SendMeasurement() in the main script of a script.</p> <p>Syntax</p> <p><code>SendMeasurement(MeasurementName, value)</code></p> <p>Parameters</p> Parameter  Name Description MeasurementName A string with the name of the measurement  being set. value An integer value to set. <p>Example</p> <p><code>NumberOfImagesInPage = document.images.length</code></p> <p><code>SendMeasurement(\u201cNumberOfImagesInPage\u201d,NumberOfImagesInPage)</code></p> <p>GUI mode</p> <p>WebLOAD recommends setting measurement functions within script files directly through the WebLOAD Recorder. In WebLOAD Recorder, drag the Send Measurement icon from the Load toolbox into the Script Tree at the desired location. The Send Measurement dialog box opens. Select a measurement name and its value and click OK. The Send Measurement item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>See also</p> <ul> <li>SendCounter() (see Send Counter() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> </ul>"},{"location":"javascript/actions_objects_functions/#sendtimer-function","title":"SendTimer() (function)","text":"<p>Description</p> <p>Use this function to output the value of a timer to the WebLOAD Console. Call SendTimer() in the main script of a script, immediately after any step or sequence of steps whose time you want to measure. Before the sequence of steps, you must call SetTimer() to zero the timer.</p> <p>Syntax</p> <p><code>SendTimer(TimerName)</code></p> <p>Example</p> <p><code>SendTimer(\u201cLink 3 Time\u201d)</code></p> <p>GUI mode</p> <p>WebLOAD recommends setting timer functions within script files directly through the WebLOAD Recorder. In WebLOAD Recorder, drag the Send Timer  icon from the Load toolbox into the Script Tree at the desired location. The Send Timer dialog box opens. Enter a timer name and click OK. The Send Timer item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>See also</p> <ul> <li>SendCounter() (see Send Counter() (function) )</li> <li>SendMeasurement() (see SendMe asurement() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> </ul>"},{"location":"javascript/actions_objects_functions/#set-method","title":"Set() (method)","text":""},{"location":"javascript/actions_objects_functions/#set-addition-method","title":"Set() (addition method)","text":"<p>Method of Objects</p> <ul> <li>wlGeneratorGlobal (see wlGeneratorGlobal (object) )</li> <li>wlSystemGlobal (see wlSystemGlobal (object) )</li> </ul> <p>Description</p> <p>Assigns a number, Boolean, or string value to the specified shared variable. If the variable does not exist, WebLOAD will create a new variable.</p> <p>Syntax</p> <p><code>Set(\u201cSharedVarName\u201d, value, ScopeFlag)</code></p> <p>Parameters</p> Parameter  Name Description SharedVarName The name of a shared variable to be set. value The value to be assigned to the specified  variable. ScopeFlag One of two flags, WLCurrentAgenda or WLAllAgendas, signifying the scope of  the shared variable.  When used as a method of the wlGeneratorGlobal object:<p></p>- The WLCurrentAgenda scope flag signifies variable values that you wish  to share between all threads of a single script, part of a single process,  running on a single Load Generator.  <p></p>- The WLAllAgendas scope flag signifies variable values that you wish to share between  all threads of one or more scripts, common to a single spawned process,  running on a single Load Generator.  When used as a method of the <code>wlSystemGlobal</code> object:  <p></p>- The WLCurrentAgenda scope flag signifies  variable values that you wish to share between all threads of a single  script, potentially shared by multiple processes, running on multiple Load  Generators, system wide.  <p></p>- The WLAllAgendas scope flag signifies  variable values that you wish to share between all threads of all scripts,  run by all  processes,  on all Load Generators, system-wide. <p>Example</p> <p><code>wlGeneratorGlobal.Set(\u201cMySharedCounter\u201d, 0, WLCurrentAgenda)</code></p> <p><code>wlSystemGlobal.Set(\u201cMyGlobalCounter\u201d, 0, WLCurrentAgenda)</code></p> <p>See also</p> <ul> <li>Add() (see Add() (method) )</li> <li>Get() (see Get() (addition method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#set-cookie-method","title":"Set() (cookie method)","text":"<p>Method of Object</p> <ul> <li>location (see location (object) )</li> <li>wlCookie (see wlCookie (object) )</li> </ul> <p>Description</p> <p>Creates a cookie.</p> <p>You can set an arbitrary number of cookies in any thread. If you set more than one cookie applying to a particular domain, WebLOAD submits them all when it connects to the domain.</p> <p>Syntax</p> <p><code>wlCookie.Set(name, value, domain, path [, expire])</code></p> <p>Parameters</p> Parameter  Name Description name A descriptive name  identifying the type of information stored in the cookie, for example, \u201cCUSTOMER\u201d. value A value for the named cookie, for example, \u201cJOHN_SMITH\u201d. domain The top-level domain name to which the  cookie should be submitted, for example,\u201cwww.ABCDEF.com\u201d. path The top-level directory  path, within the specified domain, to which the cookie is submitted, for  example, \u201c/\u201d. expire An optional expiration  timestamp of the cookie, in a format such as \u201cWed, 08-Apr-98 17:29:00 GMT\u201d. <p>Comment</p> <p>Set cookies within the main script of the script. WebLOAD deletes all the cookies at the end of each round. If you wish to delete cookies in the middle of a round, use the Delete() or ClearAll() method.</p> <p>Example</p> <p>If you combine the examples used to illustrate the parameters for this method, you end up with the following:</p> <p><code>wlCookie.Set(\u201cCUSTOMER\u201d, \u201cJOHN_SMITH\u201d, [\u201cwww.ABCDEF.com](http://www.ABCDEF.com/)\u201d, \u201c/\u201d,</code></p> <p><code>\u201cWed, 08-Apr-98 17:29:00 GMT\u201d)</code></p> <p>Where:</p> <ul> <li>The method creates a cookie containing the data CUSTOMER=JOHN_SMITH. This is the data that the thread submits when it connects to a URL in the domain.</li> <li>The domain of our sample cookie is www.ABCDEF.com/. The thread submits the cookie when it connects to any URL in or below this domain, for example, http://info.www.ABCDEF.com/customers/FormProcessor.exe.</li> <li>The cookie is valid until the expiration time, which in this case is Wednesday, April 8, 1998, at 17:29 GMT.</li> </ul>"},{"location":"javascript/actions_objects_functions/#setclienttype-function","title":"SetClientType (function)","text":"<p>Description</p> <p>The HTTP client has the following sub types, which can be set using the SetClientType function. These sub-types are:</p> <ul> <li>Normal (default) \u2013 When the client type is set to Normal, a DOM is created without tables.</li> <li>Thick \u2013 When the client type is set to Thick, the tables structure is included in the DOM.</li> <li>Thin \u2013 When the client type is set to Thin, no DOM or headers are created, and each page is parsed only once. This type is used for very high performance with static pages.</li> </ul> <p>Use the SetClientType function with the Thick sub-type when you want to parse tables or with the Thin sub-type when you want optimize tests for simple writes with static pages.</p> <p>Syntax</p> <p>setClientType(clientType)</p> <p>Example</p> <p>setClientType(thick)</p> <p>Comment</p> <p>When you call SetClientType(\u201cThin\u201d), the ParseOnce flag is set to true. Each page will only be parsed the first time it is read and the list of all the resources it accesses will be saved. The next time the page is needed, the list will be reused and no additional parsing will be performed.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>ParseOnce (see ParseOnce (property) )</li> <li>GetImagesInThinClient (see GetImagesInThinClient (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#setfailurereason-function","title":"SetFailureReason() (function)","text":"<p>Description</p> <p>This function enables you to specify possible reasons for a transaction failure within your transaction verification function. These reasons will also appear in the Statistics Report. The default reason for most HTTP command (Get, Post, and Head) failures is simply HTTP-Failure. Unless you specify another reason for failure, HTTP-Failure will be set automatically whenever an HTTP transaction fails on the HTTP protocol level. SetFailureReason() allows you to add more meaningful information to your error reports.</p> <p>Syntax</p> <p>SetFailureReason(ReasonName) ****</p> <p>Comment</p> <p>The SetFailureReason() function accepts a literal string as the parameter. This string identifies the cause of the failure. To get an accurate picture of different failure causes, be sure to use identification strings consistently for each failure type. For example, don\u2019t use both \u2018User Not Logged\u2019 and \u2018User Not LoggedIn\u2019 for the same type of failure, or your reports statistics will not be as informative. If you do not specify a specific reason for the failure, the system will register a \u2018General Failure\u2019, the default fail value.</p> <p>See also</p> <ul> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#settimeout-function","title":"setTimeout() (function)","text":"<p>Description</p> <p>Execute the specified callback after a specified number of milliseconds.</p> <p>The script execution will continue immediately, not waiting for the specified time or the function to execute (unlike the Sleep() (function), which instructs the script to pause for a specified time).</p> <p>Syntax</p> <p>setTimeout (Func, PauseTime)</p> <p>Parameters</p> Parameter  Name Description Func Function to be called after the specified  number of milliseconds PauseTime An integer value specifying the number of  milliseconds to pause. <p>Example</p> <p>To pause for 1 second, write:</p> <pre><code>InfoMessage(\u201cbefore setTimeout\u201d);\n\nsetTimeout( function() {\n\nInfoMessage(\u201cin setTimeout\u201d);\n\n} , 1000);\n\nInfoMessage(\u201cafter setTimeout\u201d);\n\nSleep(2000);\n\nInfoMessage(\u201cafter sleep\u201d);\n</code></pre> <p>See also</p> <ul> <li>Sleep() (function) </li> </ul>"},{"location":"javascript/actions_objects_functions/#settimer-function","title":"SetTimer() (function)","text":"<p>Description</p> <p>Use this function to zero a timer. Call SetTimer() in the main script of a script, immediately before any step or sequence of steps whose time you want to measure. Be sure to zero the timer in every round of the script; the timer continues running between rounds if you do not zero it.</p> <p>Syntax SetTimer(TimerName) Parameters</p> <p>Example</p> <p><code>SetTimer(\u201cLink 3 Time\u201d)</code></p> <p>GUI mode</p> <p>WebLOAD recommends setting timer functions within script files directly through the WebLOAD Recorder. In WebLOAD Recorder, drag the Set Timer icon from the Load toolbox into the Script Tree at the desired location. The Set Timer dialog box opens.</p> <p>Enter a timer name and click OK. The Set Timer item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>See also</p> <ul> <li>SendCounter() (see SendCounter() (function) )</li> <li>SendMeasurement() (see SendMeasurement() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> </ul>"},{"location":"javascript/actions_objects_functions/#severeerrormessage-function","title":"SevereErrorMessage() (function)","text":"<p>Description</p> <p>Use this function to display a severe error message in the Log Window of the WebLOAD Console, stop the session, and abort the Load Generator.</p> <p>Syntax</p> <p>SevereErrorMessage(msg)</p> <p>Comment</p> <p>If you call SevereErrorMessage() in the main script, WebLOAD stops all activity in the Load Generator and runs the error handling functions (OnScriptAbort(), etc.), if they exist in the script. You may also use the wlException (see wlException (object) ) object with the built-in try()/catch() commands to catch errors within your script. For more information about error management and execution sequence options, see Error Management in the WebLOAD Scripting Guide.</p> <p>GUI mode</p> <p>WebLOAD recommends adding message functions to your script files directly through the WebLOAD Recorder. Drag the Message icon from the WebLOAD Recorder toolbox into the script. The Message dialog box opens. Enter the message text, select a severity level for the message, and click OK.</p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> <li>wlException (see wlException (object) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#severity-property","title":"Severity (property)","text":"<p>Property of Object</p> <ul> <li>wlVerification (see wlVerification (object) )</li> </ul> <p>Description</p> <p>Severity is used to define the global severity of a verification fail error. When defined, Severity affects all the verifications in which severity is not defined. If you define the error severity for a specific verification, it overrides the global severity defined in the Severity property.</p> <p>Possible values of the Severity property are:</p> <ul> <li>WLSuccess \u2013 The transaction terminated successfully.</li> <li>WLMinorError \u2013 This specific transaction failed, but the test session may continue as usual. The script displays a warning message in the Log window and continues execution from the next statement.</li> <li>WLError \u2013 This specific transaction failed and the current test round was aborted. The script displays an error message in the Log window and begins a new round.</li> <li>WLSevereError \u2013 This specific transaction failed and the test session must be stopped completely. The script displays an error message in the Log window and the Load Generator on which the error occurred is stopped.</li> </ul> <p>Example</p> <p>To set the global severity of all verification fail errors to WLError, write:</p> <p><code>wlVerification.Severity = WLError</code></p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>PageTime (see PageTime (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#size-property","title":"Size (property)","text":"<p>Property of Object</p> <ul> <li>element (see element (object) )</li> <li>Select </li> </ul> <p>Description</p> <p>The size of a File, Password, Select, or Text element. When working with a Select element, determines the number of rows that will be displayed, regardless of the number of options chosen.</p>"},{"location":"javascript/actions_objects_functions/#sleep-function","title":"Sleep() (function)","text":"<p>Description</p> <p>Pause for a specified number of milliseconds.</p> Parameter  Name Description PauseTime An integer value specifying the number of  milliseconds to pause. <p>Syntax Sleep(PauseTime) Parameters</p> <p>Example</p> <p>To pause for 1 second, write:</p> <p>Sleep(1000)</p> <p>GUI mode</p> <p>WebLOAD recommends setting sleep functions within script files directly through the WebLOAD Recorder. Drag the Sleep ** icon from the General toolbox into the Script Tree at the desired location. The Sleep dialog box opens. Enter or select the duration of the sleep and click OK**. The Sleep item appears in the Script Tree and the JavaScript code is added to the script.</p> <p>Sleep function command lines may also be added directly to the code in a JavaScript Object within a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>Comment</p> <p>Specify one of the sleep options when running a test script in the Sleep Time Control tab, through the WebLOAD Recorder from the Tools \u0086 Default or Current Project Options or through the WebLOAD Console from the Tools \u0086 Default or Current Project Options:</p> <ul> <li>Sleep time as recorded \u2013 Runs the script with the delays corresponding to the natural pauses that occurred when recording the script.</li> <li>Ignore recorded sleep time (default) \u2013 Eliminates any pauses when running the script and runs a worst-case stress test.</li> <li>Set random sleep time \u2013 Sets the ranges of delays to represent a range of users.</li> <li>Set sleep time deviation \u2013 Sets the percentage of deviation from the recorded value to represent a range of users.</li> </ul> <p>For more information on setting the Sleep Time Control settings, see Configuring Sleep Time Control Options in the WebLOAD Recorder User\u2019s Guide.</p> <p>See also</p> <ul> <li>DisableSleep (see DisableSleep (property) )</li> <li>SendCounter() (see SendCounter() (function) )</li> <li>SendMeasurement() (see SendMeasurement() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>SleepDeviation (see SleepDeviation (property) )</li> <li>SleepRandomMax (see SleepRandomMax (property) )</li> <li>SleepRandomMin (see SleepRandomMin (property) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> <li>Using the IntelliSense JavaScript Editor </li> </ul>"},{"location":"javascript/actions_objects_functions/#sleepalways-function","title":"SleepAlways() (function)","text":"<p>Description</p> <p>Pause for a specified number of milliseconds, regardless of settings. Unlke Sleep(), this function does not take into account sleep settings, and will sleep the given time even when sleep settings is set to ignore or have a max-sleep setting.</p> Parameter  Name Description PauseTime An integer value specifying the number of  milliseconds to pause. <p>Syntax SleepAlways(PauseTime) Parameters</p> <p>Example</p> <p>To pause for 1 second, regaredless of settings, write:</p> <p>SleepAlways(1000)</p> <p>Comment</p> <p>This command ignore the sleep options defined in the Sleep Time Control tab</p> <p>See also</p> <ul> <li>DisableSleep (see DisableSleep (property) )</li> <li>SendCounter() (see SendCounter() (function) )</li> <li>SendMeasurement() (see SendMeasurement() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>SleepDeviation (see SleepDeviation (property) )</li> <li>SleepRandomMax (see SleepRandomMax (property) )</li> <li>SleepRandomMin (see SleepRandomMin (property) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> <li>Using the IntelliSense JavaScript Editor </li> </ul>"},{"location":"javascript/actions_objects_functions/#sleepdeviation-property","title":"SleepDeviation (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Integer that indicates the percentage by which recreated sleep periods should deviate from the original recorded time.</p> <p>Example</p> <p>wlGlobals.SleepDeviation = 10</p> <p>Recreated sleep periods will be within a range of +- 10% of the original recorded time.</p> <p>Comment</p> <p>Sleep periods during test sessions are by default kept to the length of the sleep period recorded by the user during the original recording session. If you wish to include sleep intervals but change the time period, set DisableSleep to false and assign values to the other sleep properties as follows:</p> <ul> <li>SleepRandomMin - Assign random sleep interval lengths, with the minimum time period equal to this property value.</li> <li>SleepRandomMax - Assign random sleep interval lengths, with the maximum time period equal to this property value.</li> <li>SleepDeviation - Assign random sleep interval lengths, with the time period ranging between this percentage value more or less than the original recorded time period.</li> </ul> <p>GUI mode</p> <p>In WebLOAD Recorder, select the sleep mode in the Sleep Time Control tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Console, select the sleep mode in the Sleep Time Control tab of the Default or Current Session Options dialog box or the Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>DisableSleep (see DisableSleep (property) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SleepRandomMax (see SleepRandomMax (property) )</li> <li>SleepRandomMin (see SleepRandomMin (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sleeprandommax-property","title":"SleepRandomMax (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Integer that indicates the maximum length of a recreated sleep period when not using the original recorded time.</p> <p>Syntax</p> <p><code>wlGlobals.SleepRandomMax = 5000</code></p> <p>Recreated sleep periods will fall within a range whose maximum value is 5000 milliseconds.</p> <p>Comment</p> <p>Sleep periods during test sessions are by default kept to the length of the sleep period recorded by the user during the original recording session. If you wish to include sleep intervals but change the time period, set DisableSleep to false and assign values to the other sleep properties as follows:</p> <ul> <li>SleepRandomMin - Assign random sleep interval lengths, with the minimum time period equal to this property value.</li> <li>SleepRandomMax - Assign random sleep interval lengths, with the maximum time period equal to this property value.</li> <li>SleepDeviation - Assign random sleep interval lengths, with the time period ranging between this percentage value more or less than the original recorded time period.</li> </ul> <p>GUI mode</p> <p>In WebLOAD Recorder, select the sleep mode in the Sleep Time Control tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Console, select the sleep mode in the Sleep Time Control tab of the Default or Current Session Options dialog box or in the Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>DisableSleep (see DisableSleep (property) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SleepDeviation (see SleepDeviation (property) )</li> <li>SleepRandomMin (see SleepRandomMin (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sleeprandommin-property","title":"SleepRandomMin (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Integer that indicates the minimum length of a recreated sleep period when not using the original recorded time.</p> <p>Syntax</p> <p><code>wlGlobals.SleepRandomMin = 1000</code></p> <p>Recreated sleep periods will fall within a range whose minimum value is 1000 milliseconds.</p> <p>Comment</p> <p>Sleep periods during test sessions are by default kept to the length of the sleep period recorded by the user during the original recording session. If you wish to include sleep intervals but change the time period, set DisableSleep to false and assign values to the other sleep properties as follows:</p> <ul> <li>SleepRandomMin \u2013 Assign random sleep interval lengths, with the minimum time period equal to this property value.</li> <li>SleepRandomMax \u2013 Assign random sleep interval lengths, with the maximum time period equal to this property value.</li> <li>SleepDeviation \u2013 Assign random sleep interval lengths, with the time period ranging between this percentage value more or less than the original recorded time period.</li> </ul> <p>GUI mode</p> <p>In WebLOAD Recorder, select the sleep mode in the Sleep Time Control tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>In WebLOAD Console, select the sleep mode in the Sleep Time Control tab of the Default or Current Session Options dialog box or in the Script Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>DisableSleep (see DisableSleep (property) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SleepDeviation (see SleepDeviation (property) )</li> <li>SleepRandomMax (see SleepRandomMax (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#src-property","title":"src (property)","text":"<p>Property of Object</p> <ul> <li>Image (see Image (object) )</li> <li>script (see script (object) )</li> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>Retrieves the complete URL of the parent object, that is the URL to an external file that contains the source code or data for this image, script, or XML DOM object.</p> <p>Example \u201cwww.ABCDEF.com/images/logo.gif\u201d See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) </li> <li>loadXML() (see loadXML() (method) </li> <li>load() and loadXML() Method Comparison </li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslbitlimit-property","title":"SSLBitLimit (property)","text":"<p>Property of Object</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>WebLOAD provides the option of setting a limit to the maximum SSL bit length available to Virtual Clients when contacting the Server. By default, WebLOAD supports a maximum SSLBitLimit of 128 bits. Users may lower the SSLBitLimit as necessary.</p> <p>You may assign an SSL bit limit value using the wlGlobals.SSLBitLimit property. Check the value of this property if you wish to verify the maximum cipher strength (SSL bit limit) available for the current test session. For example, if all ciphers are enabled, then the maximum cipher strength is 128.</p> <p>Note: Defining an SSL bit limit with the SSLBitLimit property is a low-level approach to enabling or disabling individual protocols. Even if you prefer to program property values directly rather than working through the GUI, it is usually preferable to use the SSLCryptoStrength (see SSLCryptoStrength (property) )) to define and enable cipher levels and cryptographic strengths using a higher, more categorical approach.</p> <p>Syntax</p> <p><code>wlGlobals.SSLBitLimit</code> = IntegerValue</p> <p>Example</p> <p><code>wlGlobals.SSLBitLimit = 56</code></p> <p>-Or-</p> <p>CurrentBitLimit = wlGlobals.SSLBitLimit</p> <p>GUI mode</p> <p>WebLOAD recommends setting the SSL bit limit through the WebLOAD Console. Check SSL Bit Limit and select a value from the drop-down list on the SSL tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile,</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) ))</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) ))</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) )</li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLEnableStrength() (see SSLEnableStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslciphersuitecommand-function","title":"SSLCipherSuiteCommand() (function)","text":"<p>Description</p> <p>Set the SSL configuration environment before running a test script.</p> <p>Note: This property can only be inserted manually.</p> <p>Parameters</p> Parameter  Name Description SSLCipherCommand One of the following commands, used to set  the SSL configuration environment before running a test script.<p></p>- EnableAll \u2013  Enable all SSL protocols (default)  <p></p>- DisableAll \u2013  Disable all SSL protocols  <p></p>- ShowAll \u2013  List all SSL protocols (provides internal information for RadView Support Diagnostics)  <p></p>- ShowEnabled \u2013  List currently enabled SSL protocols (provides internal information for  RadView Support Diagnostics)  Note that the command name should appear in  quotes. <p>Syntax</p> <p><code>SSLCipherSuiteCommand(\u201cSSLCipherCommand\u201d)</code></p> <p>Example</p> <p>You may wish to test your application with only a single SSL protocol enabled. The easiest way to do that would be to disable all protocols, and then enable the selected protocol in the<code>InitClient()</code> function.</p> <pre><code>InitClient()\n\n{\n\n\u2026 SSLCipherSuiteCommand(\u201cDisableAll\u201d) SSLEnableCipherName(\u201cEXP-RC4-MD5\u201d)\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslclientcertificatefile-sslclientcertificatepassword-properties","title":"SSLClientCertificateFile, SSLClientCertificatePassword (properties)","text":"<p>Properties of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>SSL Client certificates offer a more secure method of authenticating users in an Internet commerce scenario then traditional username and password solutions. For servers that support client authentication, the server will request an identification certificate that contains information to identify the client and is signed by a recognized certificate authority. WebLOAD supports use of SSL client certificates by supplying the certificate filename and password to the SSL server. SSLClientCertificateFile and SSLClientCertificatePassword are the filename (optionally including a directory path) and password of a certificate, which WebLOAD makes available to SSL</p> <p>servers. When the script issues an HTTPS Get, Post, or Head command, the server can request the certificate as part of the handshake procedure. In that case, WebLOAD sends the certificate to the server, and the server can use it to authenticate the client transmission.</p> <p>You may set client certificate values using the wlGlobals properties.</p> <p>Note: You can obtain a certificate file by exporting an X.509 certificate from Microsoft Internet Explorer or Netscape Navigator. Then use the WebLOAD Certificate Wizard to convert the certificate to an ASCII (*.pem) format.</p> <p>Syntax</p> <p><code>wlGlobals.*SSLProperty* = \u201cTextString\u201d</code></p> <p>Example</p> <p><code>wlGlobals.SSLClientCertificateFile = \u201cc:\\\\certs\\\\cert1.pem\u201d</code></p> <p><code>wlGlobals.SSLClientCertificatePassword = \u201ctopsecret\u201d</code></p> <p>GUI mode</p> <p>WebLOAD by default senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console. Enter user authentication information through the Authentication tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslcryptostrength-property","title":"SSLCryptoStrength (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> </ul> <p>Description</p> <p>Used to define the cryptographic categories to be used in the current test session. The following categories are available:</p> <ul> <li>\u201cSSL_AllCrypto\u201d \u2013 Enable cryptography of all strengths (default).</li> <li>\u201cSSL_StrongCryptoOnly\u201d \u2013 Enable only ciphers with strong cryptography (RSA keys greater than 512-bit and DES/EC keys greater than 40-bit).</li> <li>\u201cSSL_ExportCryptoOnly\u201d \u2013 Enable only ciphers available for export, including only RSA keys 512-bit or weaker and DES/EC keys 40-bit or weaker.</li> <li>\u201cSSL_ServerGatedCrypto\u201d \u2013 Verify that the communicating server is legally authorized to use strong cryptography before using stronger ciphers. Otherwise use export ciphers only.</li> </ul> <p>These definitions work with your script\u2019s current set of enabled ciphers. If you have enabled only certain ciphers, then setting SSLCryptoStrength would affect only the subset of enabled ciphers.</p> <p>Example</p> <p>Assume you have enabled the following ciphers:</p> <ul> <li>DHE_DSS_ RC4_SHA</li> <li>DES_CBC_MD5</li> <li>AECDH_NULL_SHA</li> <li>EXP_RC4_MD5</li> </ul> <p>If you then set SSLCryptoStrength to SSL_ExportCryptoOnly, then only the last two ciphers, AECDH_NULL_SHA, and EXP_RC4_MD5, will be enabled.</p> <pre><code>InitClient()\n\n{\n\n?\n\nSSLEnableCipherName(\u201cDHE_DSS_RC4_SHA\u201d) SSLEnableCipherName(\u201cDES_CBC_MD5\u201d) SSLEnableCipherName(\u201cAECDH_NULL_SHA\u201d) SSLEnableCipherName(\u201cEXP_RC4_MD5\u201d) wlGlobals.SSLCryptoStrength=\u201cSSL_ExportCryptoOnly\u201d\n\n?\n\n}\n</code></pre> <p>Comment</p> <p>Defining a global, categorical value for SSLCryptoStrength is a high-level approach to cryptographic strength definition. This \u2018smarter\u2019 approach of selecting appropriate categories is usually preferable to the low-level approach of enabling or disabling individual protocols or defining specific SSL bit limits with the SSLBitLimit and SSLVersion properties. However, ideally SSL configuration values should be set through the WebLOAD GUI.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#ssldisablecipherid-function","title":"SSLDisableCipherID() (function)","text":"<p>Description</p> <p>Disables the specified SSL cipher for the current session.</p> <p>Syntax</p> <p>SSLDisableCipherID(CipherID)</p> <p>Parameters</p> Parameter  Name Description CipherID The SSL cipher to disable for the current  session. <p>Example</p> <p>You may wish to test your application with all but one SSL protocol enabled. The easiest way to do that would be to disable the selected protocol in the<code>InitClient()</code> function.</p> <pre><code>Initclient()\n\n{\n\n\u2026\n\nSSLDisableCipherID(45)\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#ssldisableciphername-function","title":"SSLDisableCipherName() (function)","text":"<p>Description</p> <p>Disables the specified SSL cipher for the current session.</p> <p>Syntax</p> <p>SSLDisableCipherName(CipherName)</p> <p>Parameters</p> Parameter  Name Description CipherName Any of the SSL protocol  names. SeeWebLOAD-supported SSL Protocol Versions  for a complete list of  protocol names. <p>Example</p> <p>You may wish to test your application with all but one SSL protocol enabled. The easiest way to do that would be to disable the selected protocol in the<code>InitClient()</code> function.</p> <pre><code>InitClient()\n\n{\n\n\u2026\n\nSSLDisableCipherName(\"EXP-RC4-MD5\")\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>Browser Configuration Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslenablestrength-function","title":"SSLEnableStrength() (function)","text":"<p>Description</p> <p>Enables all ciphers which have encryption strength not greater than specified by the parameter. Function allows you to limit SSL key length without iterating over the whole ciphers list.</p> <p>Syntax</p> <p>SSLEnableStrength(MaxStrength)</p> <p>Parameters</p> Parameter  Name Description MaxStrength The maximum encryption  strength allowed. Strength must be specified in bits (typical values are 40,  56, 96, 128, 168, 196, 256,  512, 1024, etc.). <p>Example</p> <p>Your test session may include a variety of function calls related to specific set of SSL ciphers. For example, you may wish to test your application with weak ciphers only.</p> <p>The following InitAgenda() function fragment enables all protocols with encryption strength less or equal to 128 bits.</p> <pre><code>InitAgenda()\n\n{\n\n\u2026\n\nSSLEnableStrength(128)\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>SSLBitLimit (see \"SSLBitLimit (property)\" ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see \"SSLCipherSuiteCommand() (function)\" )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see \"SSLClientCertificateFile, SSLClientCertificatePassword (properties)\" )</li> <li>SSLCryptoStrength (see \"SSLCryptoStrength (property)\" ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see \"SSLDisableCipherID() (function)\" )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherName() (see \"SSLEnableCipherName() (function)\" )</li> <li>SSLGetCipherCount() (see \"SSLGetCipherCount() (function)\" )</li> <li>SSLGetCipherID() (see \"SSLGetCipherID() (function)\" )</li> <li>SSLGetCipherInfo() (see \"SSLGetCipherInfo() (function)\" </li> <li>SSLGetCipherName() (see \"SSLGetCipherName() (function)\" )</li> <li>SSLGetCipherStrength() (see \"SSLGetCipherStrength() (function)\" )</li> <li>SSLUseCache (see \"SSLUseCache (property)\" )</li> <li>SSLVersion (see \"SSLVersion (property)\" )</li> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslenablecipherid-function","title":"SSLEnableCipherID() (function)","text":"<p>**</p> <p>Syntax SSLEnableCipherID(CipherID)</p> <p>Parameters</p> <p>Example</p> <p>Your test session may include a variety of function calls related to specific protocols. For example, you may wish to test your application with only a single SSL protocol enabled. Unfortunately, protocol names can be long and awkward. To simplify your script code, you could get the ID number of a selected protocol and refer to the selected protocol by ID number for the remainder of the script. The following<code>InitClient()</code> function fragment disables all protocols, gets a protocol ID number, and enables the selected protocol in the<code>InitClient()</code> function.</p> <pre><code>InitClient()\n\n{\n\n\u2026\n\nSSLCipherSuiteCommand(DisableAll) MyCipherID = SSLGetCipherID(\"EXP-RC4-MD5\") SSLEnableCipherID(MyCipherID)\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>Browser Configuration Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslenableciphername-function","title":"SSLEnableCipherName() (function)","text":"<p>Description</p> <p>Enables the specified SSL cipher for the current session.</p> <p>Syntax SSLEnableCipherName(CipherName)</p> <p>Parameters</p> <p>Example</p> <p>You may wish to test your application with only a single SSL protocol enabled. The easiest way to do that would be to disable all protocols, and then enable the selected protocol in the InitAgenda() function:</p> <p>InitAgenda()</p> <pre><code>{\n\n\u2026\n\nSSLCipherSuiteCommand(DisableAll)\n\nSSLEnableCipherName(\"EXP-RC4-MD5\")\n\n\u2026\n\n}\n</code></pre> <p>See also</p> <ul> <li>[Browser Configuration Components ]</li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals</li> </ul> <p>only)</p> <ul> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslgetciphercount-function","title":"SSLGetCipherCount() (function)","text":"<p>Description</p> <p>Returns an integer, the number of ciphers enabled for the current test session. While that may seem obvious if your script explicitly enables two or three ciphers, it may be necessary if, for example, you have set a cipher strength limit of 40 and then wish to know how many ciphers are currently available at that limit.</p> <p>Syntax</p> <p><code>SSLGetCipherCount()</code></p> <p>Return Value</p> <p>Returns an integer representing the number of ciphers enabled for the current test session.</p> <p>Example</p> <p><code>CurrentCipherCount = SSLGetCipherCount()</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslgetcipherid-function","title":"SSLGetCipherID() (function)","text":"<p>Description</p> <p>Returns the ID number associated with the specified cipher.</p> <p>Syntax</p> <p>SSLGetCipherID(CipherName)</p> <p>Parameters</p> Parameter  Name Description CipherName Any of the SSL protocol  names. SeeWebLOAD-supported SSL Protocol Versions  for a complete list of  protocol names. <p>Return Value</p> <p>Returns the ID number associated with the specified cipher.</p> <p>Example</p> <p><code>MyCipherID = SSLGetCipherID(\u201cEXP-RC4-MD5\u201d)</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslgetcipherinfo-function","title":"SSLGetCipherInfo() (function)","text":"<p>Description</p> <p>Prints a message on the WebLOAD Console with information about the specified SSL protocol.</p> <p>Syntax</p> <p>SSLGetCipherInfo(CipherName \u0086 CipherID)</p> <p>Parameters</p> <p>Accepts either one of the following parameters:</p> Parameter  Name Description CipherName The name of the SSL cipher. CipherID The identification number of the SSL  cipher. <p>Example</p> <p>You may specify an SSL protocol using either the protocol name or the ID number. The function accepts either a string or an integer parameter, as illustrated here:</p> <p><code>SSLGetCipherInfo(\u201cEXP-RC4-MD5\u201d)</code></p> <p>-Or-</p> <p><code>SSLGetCipherInfo(2)</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslgetciphername-function","title":"SSLGetCipherName() (function)","text":"<p>Description</p> <p>Returns the name of the cipher associated with the specified ID number.</p> <p>Syntax SSLGetCipherName(CipherID)</p> <p>Parameters</p> Parameter  Name Description CipherID Any of the SSL protocol ID numbers. <p>Return Value</p> <p>Returns the name of the cipher associated with the specified ID number.</p> <p>Example</p> <p><code>MyCipherName = SSLGetCipherName(16)</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslgetcipherstrength-function","title":"SSLGetCipherStrength() (function)","text":"<p>Description</p> <p>Returns an integer, the maximum cipher strength (SSL bit limit) available for the current test session. For example, if all ciphers are enabled, then the maximum cipher strength is 128.</p> <p>Syntax</p> <p>SSLGetCipherStrength()</p> <p>Return Value</p> <p>Returns an integer representing the maximum available cipher strength for the current session.</p> <p>Example</p> <p><code>CurrentCipherStrength = SSLGetCipherStrength()</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> <li>SSLVersion (see SSLVersion (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslusecache-property","title":"SSLUseCache (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Enable caching of SSL decoding keys received from an SSL (HTTPS) server. The value of SSLUseCache may be:</p> <ul> <li>false \u2013 Disable caching.</li> <li>true \u2013 Enable caching. (default)</li> </ul> <p>A true value means that WebLOAD receives the key only on the first SSL connection in each round. In subsequent connections, WebLOAD retrieves the key from the cache.</p> <p>Assign a true value to reduce transmission time during SSL communication. Assign a false value if you want to measure the transmission time of the decoding key in the WebLOAD performance statistics for each SSL connection.</p> <p>If you enable caching, you can clear the cache at any time by calling the wlHttp.ClearSSLCache() method. The cache is automatically cleared at the end of each round.</p> <p>GUI mode</p> <p>WebLOAD recommends enabling or disabling the SSL cache through the WebLOAD Console. Enable caching for the Load Generator or for the Probing Client during a test session by checking the appropriate box in the Browser Parameters tab of the Default Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Comment</p> <p>To clear the SSL cache, set the ClearSSLCache() (see ClearSSLCache() (method) ) property.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLVersion (see SSLVersion (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#sslversion-property","title":"SSLVersion (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The SSL version that WebLOAD should use for the current test session. The possible values of wlGlobals.SSLVersion are:</p> <ul> <li> <p>SSL_Version_Undetermined \u2013 (Default) WebLOAD can use any SSL protocol version, allowing the broadest interoperability with other SSL installations. Note: WebLOAD does not recommend changing the default value.</p> </li> <li> <p>TLS_Version_1_0_Only</p> </li> <li>TLS_Version_1_0</li> <li>TLS_Version_1_1_Only</li> <li>TLS_Version_1_1</li> <li>TLS_Version_1_2_Only</li> <li>TLS_Version_1_2</li> <li>TLS_Version_1_3_Only</li> <li>TLS_Version_1_3</li> </ul> <p>Deprecated versions not supported anymore:</p> <ul> <li>SSL_Version_3_0_With_2_0_Hello</li> <li>SSL_Version_2_0</li> <li>SSL_Version_3_0</li> <li>SSL_Version_3_0_Only</li> <li>TLS_Version_1.0_With_2_0_Hello</li> </ul> <p>To connect to a server using any of the SSL options, include https:// in the URL.</p> <p>Example</p> <pre><code>wlGlobals.SSLVersion = \u201cSSL_Version_3_0_Only\u201d\n\nwlHttp.Get(\"https://www.ABCDEF.com\")\n</code></pre> <p>See WebLOAD-supported SSL Protocol Versions  for a table illustrating all the Client/Server SSL version handshake combination possibilities and a complete list of SSL/TLS protocol names.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</li> <li>SSL Cipher Command Suite </li> <li>SSL Ciphers \u2013 Complete List </li> <li>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</li> <li>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</li> <li>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</li> <li>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</li> <li>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</li> <li>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</li> <li>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</li> <li>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</li> <li>SSLGetCipherID() (see SSLGetCipherID() (function) )</li> <li>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) </li> <li>SSLGetCipherName() (see SSLGetCipherName() (function) )</li> <li>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</li> <li>SSLUseCache (see SSLUseCache (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#stopclient-function","title":"StopClient () (function)","text":"<p>Description</p> <p>Stops the execution of the Virtual Client running the script from which StopClient() was called. After StopClient() is called, this client cannot be resumed.</p> <p>Syntax</p> <p>StopClient ([SeverityLevel], [Reason])</p> <p>Parameters</p> Parameter Name Description SeverityLevel Optionally, specify the  severity level of the error that occurred. The possible values are:<p></p>- WLMinorError. The message is displayed  as a warning message.  <p></p>- WLError. The  message is displayed as an error message. If no severity level is specified, WLMinorError is assumed.  Note: Error levels are used for display  in the log window and do not define any logical behavior. Reason An optional string containing the reason  for stopping the virtual client running the script.  If no reason is specified, a default message is  displayed. SeeDefault   Message below. Default Message <p>The following default message is displayed when no reason is specified:</p> <p>StopClient(WLError, \u201cClient\u201d+%d+\u201dwas terminated by a user command in</p> <p>the script\u201d)</p> <p>where %d is a parameter that takes the number of the client that was terminated. For example, \u201cClient 38 was terminated by a user command in the script\u201d.</p> <p>Examples</p> <p><code>StopClient(WLError, \u201cError occurred when running script, client terminated\u201d)</code></p> <p><code>StopClient(, \u201cError occurred when running script, client terminated\u201d)</code></p> <p><code>StopClient(WLError)</code></p>"},{"location":"javascript/actions_objects_functions/#stopgenerator-function","title":"StopGenerator () (function)","text":"<p>Description</p> <p>Stop the script from within the script. The string passed as a parameter is the message that appears when the script is stopped.</p> <p>Syntax</p> <p>StopGenerator(string)</p> <p>Parameters</p> Parameter Name Description String The message to be displayed when the script is  stopped. <p>Example</p> <p><code>StopGenerator(\u201cThe script was terminated from within the script\u201d)</code></p>"},{"location":"javascript/actions_objects_functions/#string-property","title":"string (property)","text":"<p>Property of Object</p> <ul> <li>title (see title (property) )</li> </ul> <p>Description</p> <p>Stores the document title in a text string.</p>"},{"location":"javascript/actions_objects_functions/#synchronizationpoint-function","title":"SynchronizationPoint() (function)","text":"<p>Description</p> <p>WebLOAD provides Synchronization Points to coordinate the actions of multiple Virtual Clients. A Synchronization Point is a meeting place where Virtual Clients wait before continuing with a script. When one Virtual Client arrives at a Synchronization Point, WebLOAD holds the Client at the point until all the other Virtual Clients arrive. When all the Virtual Clients have arrived, they are all released at once to perform the next action in the script simultaneously. For more information on Synchronization Points, see Working with Synchronization Points in the WebLOAD Scripting Guide.</p> <p>Syntax</p> <p>SynchronizationPoint([timeout])</p> <p>Parameters</p> <p>Return Value</p> <p>SynchronizationPoint() functions return one of the following values. These values may be checked during the script runtime.</p> <ul> <li>WLSuccess \u2013 Synchronization succeeded. All Virtual Clients arrived at the Synchronization Point and were released together.</li> <li>WLLoadChanged \u2013 Synchronization failed. A change in the Load Size was detected while Virtual Clients were being held at the Synchronization Point. All Virtual clients were released.</li> <li>WLTimeout \u2013 Synchronization failed. The timeout expired before all Virtual Clients arrived at the Synchronization Point. All Virtual Clients were released.</li> <li>WLError \u2013 Synchronization failed. Invalid timeout value. All Virtual Clients were released.</li> </ul> <p>Example</p> <p>The following script fragment illustrates a typical use of synchronization points. To test a Web application with all the Virtual Clients performing a particular Post operation simultaneously, add a Synchronization Point as follows. The various return values are highlighted:</p> <pre><code>wlHttp.Get(\u201curl\u201d)\n\n\u2026\n\nSP = SynchronizationPoint(10000) if (SP == **WLLoadChanged**)\n\n{\n\nInfoMessage(\u201cSyncronization failed, Load Size changed\u201d) InfoMessage(\u201cSP = \u201c + SP.toString() + \u201c \u201c + ClientNum)\n\n}\n\nif (SP == **WLTimeout**)\n\n{\n\nInfoMessage(\u201cSyncronization failed, Timeout expired\u201d) InfoMessage(\u201cSP = \u201c + SP.toString() + \u201c \u201c + ClientNum)\n\n}\n\nif (SP == **WLError**)\n\n{\n\nInfoMessage(\u201cSyncronization failed\u201d)\n\nInfoMessage(\u201cSP = \u201c + SP.toString() + \u201c \u201c + ClientNum)\n\n}\n\nif (SP == **WLSuccess**)\n\n{\n\nInfoMessage(\u201cSynchronization succeeded\u201d) InfoMessage(\u201cSP = \u201c + SP.toString() + \u201c \u201c+ ClientNum)\n\n}\n\nwlHttp.Post(url)\n</code></pre> <p>GUI mode</p> <p>WebLOAD recommends setting synchronization functions within script files directly through the WebLOAD Recorder. Drag the Synchronization Point  icon from the Load toolbox into the Script Tree directly before the action you want all Virtual Clients to perform simultaneously. The Synchronization Point dialog box opens. Enter or select a timeout value for the Synchronization Point and click OK. The Synchronization Point item appears in the Script Tree and the JavaScript code is added to the script. The JavaScript code line that corresponds to the Synchronization Point in the Script Tree appears in the JavaScript View.</p> <p>Comment</p> <p>If there is a change in the Load Size (scheduled or unscheduled) or if any WebLOAD component is paused or stopped during the test session, all Synchronization Points are disabled.</p> <p>Only client threads running within a single spawned process, on the same Load Generator, are able to share user-defined global variables and synchronization points. So if, for example, you have spawning set to 100 and you are running a total of 300 threads, realize that you are actually running three spawned processes on three separate Load Generators. You will therefore only be able to synchronize 100 client threads at a time, and not all 300.</p> <p>See also</p> <ul> <li>SendCounter() (see SendCounter() (function) )</li> <li>SendMeasurement() (see SendMeasurement() (function) )</li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> <li>Sleep() (see Sleep() (function) )</li> <li>SynchronizationPoint() (see SynchronizationPoint() (function) )</li> <li>Timing Functions </li> </ul>"},{"location":"javascript/actions_objects_functions/#tagname-property","title":"tagName (property)","text":"<p>Property of Object</p> <ul> <li>cell (see cell (object) )</li> </ul> <p>Description</p> <p>A string containing the cell type, either <code>&lt;TD&gt;</code> or <code>&lt;TH&gt;</code>.</p> <p>Syntax</p> <p>Use the following syntax to check a particular table cell type:</p> <p>document.wlTables.myTable.cells[index#].tagName</p> <p>Comment</p> <p>The tagName property is a member of the wlTables family of table, row, and cell objects.</p> <p>See also</p> <ul> <li>cell</li> <li>cellIndex</li> <li>Collections </li> <li> <p>cols (see cols (property) ) (wlTables property) *</p> </li> <li></li> <li> <p>InnerHTML (see InnerHTML (property) ) (cell property)</p> </li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li></li> <li> <p>row (see row (object) ) (wlTables property)</p> </li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>wlTables (see wlTables (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#target-property","title":"target (property)","text":"<p>Property of Object</p> <ul> <li>form (see form (object) )</li> <li>link (see link (object) )</li> </ul> <p>Description</p> <p>The name of the window or frame into which the form or link should be downloaded (read-only string).</p> <p>Example</p> <p>In the following code fragment:</p> <p><code>&lt;A HREF=\u201cnewpage.htm\u201d TARGET=\u201c_top\u201d&gt; Go to New Page.</code></p> <p><code>&lt;/A&gt;</code></p> <p>The target property would equal \u201c_top\u201d and the link will load the page into the top frame of the current frameset.</p> <p>Comment</p> <p>While link and location objects share most of their properties, the target</p> <p>property is used by the link object only and is not accessed by the location object.</p> <p>The form.target and link.target properties identify the most recent, immediate location of the target frame using the name string or keyword that was assigned to that frame. Compare this to the <code>wlHttp.wlTarget</code> property of a transaction, which uses the WebLOAD shorthand notation, described in the WebLOAD Scripting Guide, to store the complete path of the frame, from the root window of the Web page. The last field of the <code>wlHttp.wlTarget</code> string is the target name stored in the form.target and link.target properties.</p> <p>See also</p> <ul> <li>wlTarget (see wlTarget (property) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#text-function","title":"Text (function)","text":"<p>Description</p> <p>Verify the absence or presence of a specified text expression within the Web server response.</p> <p>Syntax</p> <p>wlVerification.Text(searchOption, text, severity)</p> <p>Parameters</p> Parameter  Name Description searchOption Possible values are: WLFind or WLNotFind. text String text to find in the  document.wlSource. severity Possible values of this parameter are:<p></p>- WLSuccess. The transaction  terminated successfully.  <p></p>- WLMinorError. This specific  transaction failed, but the test session may continue as usual. The script  displays a warning message in the Log window and continues execution from the next statement.  <p></p>- WLError. This specific  transaction failed and the current test  round was aborted. The script displays an error message in the Log window and  begins a new round.  <p></p>- WLSevereError. This specific  transaction failed and the test  session must be stopped completely. The script displays an error message in  the Log window and the Load Generator on  which the  error occurred is stopped. <p>Example</p> <p>The following code verifies that the server response does not contain the word \"error\". In case of failure, WebLOAD displays the error message and stops the execution.</p> <p><code>wlVerification.Text(WLNotFind, \"error\", WLError);</code></p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#threadnum-property","title":"ThreadNum() (property)","text":"<p>Description</p> <p>Assigns a unique number to a process based on the client/Load Generator/script. This number is unique across the script\u2019s slave processes and is saved in the <code>ClientNum</code> property. Each client in a Load Generator is assigned a unique number. However, two clients in two different Load Generators may have the same number.</p> <p>Note: While <code>ClientNum</code> is unique within a single Load Generator, it is not unique system wide. Use VCUniqueID() (see VCUniqueID() (function) ) to obtain an ID number which is unique system-wide.</p> <p>If there are N clients in a Load Generator, the clients are numbered 0, 1, 2, ..., N-1. You can access <code>ClientNum</code> anywhere in the local context of the script</p> <p>(InitClient(), main script, TerminateClient(), etc.). <code>ClientNum</code> does not exist in the global context (InitAgenda(), TerminateAgenda(), etc.).</p> <p>If you mix scripts within a single Load Generator, instances of two or more scripts may run simultaneously on each client. Instances on the same client have the same <code>ClientNum</code> value.</p> <p><code>ClientNum</code> reports only the main client number. It does not report any extra threads spawned by a client to download nested images and frames (see LoadGeneratorThreads (property) ).</p> <p>Comment</p> <p>Earlier versions of WebLOAD referred to this value as ThreadNum. The variable name</p> <p>ThreadNum will still be recognized for backward compatibility.</p> <p>Example</p> <p>InfoMessage(\u201cThreadNum: \u201c + ThreadNum())</p> <p>See also</p> <ul> <li>VCUniqueID (see VCUniqueID() (function) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#timeoutseverity-property","title":"TimeoutSeverity (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>When conducting Page Verification tests, TimeoutSeverity stores the error level to be triggered if the full set of verification tests requested for the current page are not completed within the specified time limit.</p> <p>GUI mode</p> <p>WebLOAD recommends setting page verification severity levels through the WebLOAD Console. Check Verification in the Page Time area and select an error severity level from the drop-down box in the Functional Testing tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also assign a severity level using the TimeoutSeverity property.</p> <p>wlGlobals.TimeoutSeverity = ErrorFlag</p> <p>The following error codes are available:</p> <ul> <li>WLSuccess \u2013 The transaction terminated successfully.</li> <li>WLMinorError \u2013 This specific transaction failed, but the test session may continue as usual. The script displays a warning message in the Log window and continues execution from the next statement.</li> <li>WLError \u2013 This specific transaction failed and the current test round was aborted. The script displays an error message in the Log window and begins a new round.</li> <li>WLSevereError \u2013 This specific transaction failed and the test session must be stopped completely. The script displays an error message in the Log window and the Load Generator on which the error occurred is stopped.</li> </ul> <p>Example</p> <p>wlGlobals.TimeoutSeverity = WLError.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>Transaction Verification Components </li> <li>TransactionTime (see TransactionTime (property) )</li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#title-property","title":"title (property)","text":"<p>Property of Objects</p> <ul> <li>document (see document (object) )</li> <li>element (see element (object) )</li> <li>frames (see frames (object) )</li> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>script (see script (object) )</li> </ul> <p>Description</p> <p>Stores the title value associated with the parent object.</p> <p>When working with document objects, a title property is an object that contains the document title, stored as a text string. When working with window objects, the title is extracted from the document inside the window. title objects are local to a single thread. You cannot create new title objects using the JavaScript new operator, but you can access a document title through the properties and methods of the standard DOM objects. The properties of title are read-only.</p> <p>When working with element, link, or location objects, a title property contains the title of the parent Button, Checkbox, Reset, or Submit element or link object. May be used as a tooltip string. When working with document objects, a title property is an object that contains the document title, stored as a text string. When working with window objects, the title is extracted from the document inside the window.</p> <p>Syntax</p> <p>Document object:</p> <p>Access the title\u2019s properties directly using the following syntax:</p> <p>document.title.<code>&lt;titleproperty&gt;</code></p> <p>Example</p> <p>Document object:</p> <p>CurrentDocumentTitle = document.title.string</p> <p>Properties</p> <p>Document object:</p> <ul> <li>string (see string (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>form (see form (object) )</li> <li>Select </li> </ul>"},{"location":"javascript/actions_objects_functions/#title-function","title":"Title (function)","text":"<p>Method of Object</p> <ul> <li>wlVerification (see wlVerification (object) )</li> </ul> <p>Description</p> <p>This function enables you to validate a HTML Web page\u2019s title.</p> <p>Syntax</p> <p>wlVerification.Title(<code>&lt;ExpectedTitle&gt;</code>, <code>&lt;Severity&gt;</code>`<code>[,</code><code>\\</code>`]) <p>Parameters</p> Parameter  Name Description ExpectedTitle A user-supplied string  that identifies the expected title of the HTML Web page. If the string you  enter in this parameter appears in the HTML Web page\u2019s title, the validation  is successful. Severity Possible values of this parameter are:<p></p>- WLSuccess. The transaction  terminated successfully.  <p></p>- WLMinorError. This specific  transaction failed, but the test session may continue as usual. The script  displays a warning message in the Log window and continues execution from the next statement.  <p></p>- WLError. This specific  transaction failed and the current test  round was aborted. The script displays an error message in the Log window and  begins a new round.  <p></p>- WLSevereError. This specific  transaction failed and the test  session must be stopped completely. The script displays an error message in  the Log window and the Load Generator on  which the  error occurred is stopped. FunctionName A pre-defined Javascript  function that is called if the verification fails. [ErrorMessage] string [FunctionArguments] The arguments for the  function that is called if the verification fails. <p>Example</p> <p>For example: when validation fails, an email is sent with a message (errorMessage).</p> <p>The function sendEmailOnError has the arguments emailAddress and</p> <p>errorMessage.</p> <pre><code>function sendEmailOnError(emailAddress, errorMessage)\n\n{\n\nsendEmailTo(emailAddress, errorMessage)\n\n}\n</code></pre> <p>When Title validation fails. The following function is called:</p> <p>sendEmailOnError(VP@rrrr.com, ;</p> <p>So the Title function syntax is as follows:</p> <p>wlVerification.Title(\"compare title\", sendEmailOnError, VP@rrrr.com, \"Title validation failed\");</p> <p>See also</p> <ul> <li>wlVerification (see wlVerification (object) )</li> <li>PageContentLength (see PageContentLength (property) )</li> <li>PageTime (see PageTime (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#transactiontime-property","title":"TransactionTime (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul> <p>Description</p> <p>Assign a timeout value using the TransactionTime property. Use the TransactionTime property to set a timeout limit for verification on the maximum transaction time.</p> <p>GUI mode</p> <p>WebLOAD recommends setting page verification timeout values through the WebLOAD Console. Check Page Verification and enter a maximum number of seconds in the Functional Testing tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also assign a timeout value using the TransactionTime property.</p> <p><code>wlGlobals.TransactionTime = TimeValue</code></p> <p>Example</p> <p>The value assigned to TransactionTime may be written in either string or integer format, where the integer represents the number of milliseconds to wait and the string represents the decimal fraction of a whole second. Therefore, the following two lines are equivalent, both setting TransactionTime to one millisecond:</p> <p>wlGlobals.TransactionTime = 1</p> <p>-Or-</p> <p>wlGlobals.TransactionTime = \u201c0.001\u201d</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>Transaction Verification Components </li> <li>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#type-property","title":"type (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>form (see form (object) )</li> <li>wlHttp</li> <li>wlHttp.Data (see Data (property) )</li> <li>wlHttp.DataFile (see DataFile (property) )</li> </ul> <p>Description</p> <p>This property is a string that holds the \u2018type\u2019 of the parent object.</p> <p>If the parent is a form element object, then type holds the HTML type attribute of the form element. For example, an <code>&lt;INPUT&gt;</code> element can have a type of \u201cTEXT\u201d, \u201cCHECKBOX\u201d, or \u201cRADIO\u201d. Certain HTML form elements, such as <code>&lt;SELECT&gt;</code> do not have a type attribute. In that case, element.type is the element tag itself, for example \u201cSELECT\u201d.</p> <p>Note: The Type value does not change. Even when working with dynamic HTML, the type of a specific object remains the same through all subsequent transactions with that object.</p> <p>If the parent is a wlHttp.Data or wlHttp.DataFile object, then Type holds the MIME type of the string or form data being submitted through an HTTP Post command.</p> <p>Syntax</p> <p>element:</p> <p>When working with element objects, use the lowercase form:</p> <p><code>&lt;NA&gt;</code></p> <p>wlHttp.Data:</p> <p>When working with wlHttp.Data objects, use the uppercase form:</p> <p>wlHttp.Data.Type = \u201capplication/x-www-form-urlencoded\u201d</p> <p>Comment</p> <p>The Type property for wlHttp.Data and wlHttp.DataFile objects is written in uppercase.</p> <p>See also</p> <ul> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Post() (see Post() (method) ))</li> <li>value (see value (property) )</li> <li>wlClear() (see wlClear() (method) )</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#url-property","title":"Url (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>form (see form (object) )</li> <li>frames (see frames (object) )</li> <li>Image (see Image (object) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>wlHttp</li> </ul> <p>Description</p> <p>Sets or retrieves the URL of the parent object on the Web page (read-only). If the parent object is of type <code>&lt;IMG&gt;</code>, then this property holds the URL of the image element.</p> <p>If the parent object is wlGlobals, this property holds the URL address to which the</p> <p>wlGlobals object connects.</p> <p>If the parent object is wlMetas, then if httpEquiv=\u201cREFRESH\u201d and the content property holds a URL, then the URL is extracted and stored in a link object (read- only).</p> <p>Example</p> <p>Area, element, form, frame, image, link, location:</p> <p><code>&lt;NA&gt;</code></p> <p>wlGlobals:</p> <p>wlGlobals.Url = \u201chttp://www.ABCDEF.com\u201d</p> <p>wlMetas:</p> <p>When working with wlMetas objects, use the all-uppercase caps form:</p> <p>CurrentLink = document.wlMetas[0].URL</p> <p>Comment</p> <p>The URL property for area, element, form, frame, image, link, location, and</p> <p>wlMetas objects is written in all-uppercase caps.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>content (see content (property) )</li> <li>httpEquiv (see httpEquiv (property) )</li> <li>Name (see Name (property) )</li> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> <li>wlMetas (see wlMetas (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#useragent-property","title":"UserAgent (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>A user agent is the client application used with a particular network protocol. The phrase, \u201cuser agent\u201d is most commonly used in reference to applications that access the World Wide Web. Web user agents range from web browsers to search engine crawlers (\u201cspiders\u201d), as well as mobile phones, etc. The user agent string can be sent as part of the HTTP request, prefixed with User-agent: or User-Agent:. This string typically includes information such as the application name, version, host, host operating system, and language. Some examples of user agent strings can be found at:</p> <p>http://en.wikipedia.org/wiki/User_agent#Example_user-agent_strings</p> <p>The UserAgent property is used to define the user agent string for the scope of the WebLOAD object with which it is associated.</p> <p>GUI mode</p> <p>WebLOAD recommends setting user agent values through the WebLOAD Console. Select a browser type and user agent through the Browser Parameters tab of the Default or Current Project Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#username-property","title":"UserName (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The user name that the script uses to log onto a restricted HTTP site. WebLOAD automatically uses the appropriate access protocol. For example, if a site expects clients</p> <p>to use the NT Authentication protocol, the appropriate user name and password will be stored and sent accordingly.</p> <p>GUI mode</p> <p>WebLOAD by default senses the appropriate authentication configuration settings for the current test session.</p> <p>If you prefer to explicitly set authentication values, WebLOAD recommends setting user authentication values through the WebLOAD Console. Enter user authentication information through the Authentication tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>Syntax</p> <p>You may also set user values using the wlGlobals properties. WebLOAD automatically sends the user name and password when a wlHttp object connects to an HTTP site. For example:</p> <p><code>wlGlobals.UserName = \u201cBill\u201d</code></p> <p><code>wlGlobals.PassWord = \u201cTopSecret\u201d</code></p> <p>Comments</p> <p>A user is only authenticated once during a round with a set of credentials. Each subsequent request will use these credentials regardless of what is contained in the script. If the value of these credentials are changed after authentication, they will only be used during the next round, not during the current round.</p> <p>For example, if you are trying to send a request to a URL with a group of users (user1, user2, and user3), but user1 has already been authenticated, the login is always performed for user1 until the round is complete.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li>NTUserName, NTPassWord (see NTUserName, NTPassWord (properties) ))</li> </ul>"},{"location":"javascript/actions_objects_functions/#usesameproxyforssl-property","title":"UseSameProxyForSSL (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>The UseSameProxyForSSL property can have one of the following values:</p> <ul> <li>false (default value) \u2013 The engine uses the Proxy, ProxyUserName, ProxyPassWord, ProxyNTUserName, and ProxyNTPassWord properties for both SSL and non-SSL traffic.</li> <li>true \u2013 The engine uses the Proxy, ProxyUserName, ProxyPassWord, ProxyNTUserName, and ProxyNTPassWord properties for non-SSL traffic and the HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord, HttpsProxyNTUserName, and HttpsNTPassWord properties for SSL traffic.</li> </ul> <p>This property is used when you are working with a separate SSL proxy.</p> <p>Note: This property can only be inserted manually.</p> <p>Example <code>wlGlobals.UseSameProxyForSSL = false</code></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>Security in the WebLOAD Scripting Guide</li> <li>HttpsProxy, HttpsProxyUserName, HttpsProxyPassWord (see HttpsProxy,)</li> <li>HttpsProxyNTUserName, HttpsProxyNTPassWord (see HttpsProxyNTUserName, HttpsProxyNTPassWord (properties))</li> </ul>"},{"location":"javascript/actions_objects_functions/#usingtimer-property","title":"UsingTimer (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp</li> </ul> <p>Description</p> <p>The name of a timer to use for the <code>Get()</code> or <code>Post()</code> method.</p> <p>Example</p> <p>WebLOAD zeros the timer immediately before a <code>Get()</code> or <code>Post()</code> call and sends the timer value to the WebLOAD Console immediately after the call. This is equivalent to calling the <code>SetTimer()</code> and <code>SendTimer()</code> functions. Thus the following two code examples are equivalent:</p> <p>//Version 1</p> <p><pre><code>wlHttp.UsingTimer = \u201cTimer1\u201d`\nwlHttp.Get(\u201chttp://www.ABCDEF.com\u201d)\n</code></pre> //Version 2 <pre><code>SetTimer(\u201cTimer1\u201d) \nwlHttp.Get(\u201chttp://www.ABCDEF.com\u201d)\nSendTimer(\u201cTimer1\u201d)`\n</code></pre></p> <p>See also</p> <ul> <li>HTTP Components </li> <li>SendTimer() (see SendTimer() (function) )</li> <li>SetTimer() (see SetTimer() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#value-property","title":"value (property)","text":"<p>Property of Objects</p> <ul> <li>element (see element (object) )</li> <li>option (see option (object) ))</li> <li>wlHeaders (see wlHeaders (object) )</li> <li>wlHttp.Data (see Data (property) )</li> <li>wlHttp.Header (see Header (property) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul> <p>Description</p> <p>Sets and retrieves the value associated with the parent object.</p> <p>When working with <code>elements</code> or <code>options</code>, this property holds the text associated with this object. This is the value that is returned to the server when a FORM control of type Button, Checkbox, Radiobutton, Reset, or Submit is submitted. Thus the <code>value</code> property holds the HTML value attribute of the object (the <code>&lt;OPTION&gt;</code> element). If the element does not have a value attribute, WebLOAD sets the <code>value</code> property equal to the <code>text</code> property.</p> <p>When working with <code>wlHeaders</code> or <code>wlSearchPairs</code> objects, this property holds the value of the search key.</p> <p>When working with <code>wlHttp.Data</code> or <code>wlHttp.Header</code> objects, this property holds the value of the data string being submitted through an HTTP Post command.</p> <p>Syntax</p> <p>For elements and options:</p> <p><code>&lt;NA&gt;</code></p> <p>For wlHeaders:</p> <p><code>document.wlHeaders[index#].value = \u201cTextString\u201d</code></p> <p>For example:</p> <p><code>document.wlHeaders[0].value = \u201cNetscape-Enterprise/3.0F\u201d</code></p> <p>For wlSearchPairs:</p> <p><code>document.links[1].wlSearchPairs[index#].value = \u201cTextString\u201d</code></p> <p>For example:</p> <p><code>document.links[1].wlSearchPairs[0].value = \u201cOpticsResearch\u201d</code></p> <p>For wlHttp.Header:</p> <p><code>wlHttp.Header[\u201cvalue\u201d] = \u201cTextString\u201d</code></p> <p>For wlHttp.Data:</p> <p>When working with wlHttp.Data objects, use the uppercase form:</p> <p><code>wlHttp.Data.Value = \u201cSearchFor=icebergs&amp;SearchType=ExactTerm\u201d</code></p> <p>Comment</p> <p>The <code>Value</code> property for element and <code>wlHttp.Data</code> objects is written in uppercase.</p> <p>See also</p> <ul> <li>Collections </li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>element (see element (object) )</li> <li>Erase (see Erase (property) )</li> <li>FileName (see FileName (property) )</li> <li>form (see form (object) )</li> <li>FormData (see FormData (property) )</li> <li>Get() (see Get() (transaction method) )</li> <li>Header (see Header (property) )</li> <li>Image (see Image (object) )</li> <li>key (see key (property) ))</li> <li>option (see option (object) )</li> <li>Post() (see Post() (method) )</li> <li>Select </li> <li>type (see type (property) )</li> <li>value (see value (property) )</li> <li>wlClear() (see wlClear() (method) )</li> <li>wlHeaders (see wlHeaders (object) )</li> <li>wlHttp (see wlHttp (object) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#vcuniqueid-function","title":"VCUniqueID() (function)","text":"<p>Description</p> <p><code>VCUniqueID()</code> provides a unique identification for the current Virtual Client instance which is unique system-wide, across multiple Load Generators, even with multiple spawned processes running simultaneously. Compare this to <code>ClientNum</code>. which provides an identification number that is only unique within a single Load Generator. The identification string is composed of a concatenation of the script name, Load Generator name, current thread number, and round number.</p> <p>Syntax </p> <p><code>VCUniqueID()</code></p> <p>Return Value</p> <p>Returns a unique identification string for the current Virtual Client instance.</p> <p>Example</p> <p><code>InfoMessage(VCUniqueID())</code></p> <p>The results are</p> <p>j@chaimsh.0.1</p> <p>where:</p> <ul> <li><code>j</code> is the name of the script.</li> <li><code>chaimsh</code> is the name of the Load Generator.</li> <li><code>0</code> is the client number.</li> <li><code>1</code> is the round number.</li> </ul> <p>See also</p> <ul> <li>GeneratorName() (see GeneratorName() (function) )</li> <li>GetOperatingSystem() (see GetOperatingSystem() (function) )</li> <li>Identification Variables and Functions </li> <li>RoundNum (see RoundNum (variable) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#verificationfunction-user-defined-function","title":"VerificationFunction() (user-defined) (function)","text":"<p>Description</p> <p>User-defined verification function to be used with a \u2018named\u2019 transaction. A function written by the user, tailored to the specific testing and verification needs of the application being tested.</p> <p>Syntax <pre><code>UserDefinedVerificationFunction(specified by user)\n{\n  \u2026\n  &lt;any valid JavaScript code&gt; return value\n}\n</code></pre></p> <p>Parameters</p> <p>Specified by user.</p> <p>Return Value</p> <p>The user-defined <code>Verification()</code> function returns a value based on user-specified criterion. You define the success and failure criterion for user-defined transactions. You also determine the severity level of any failures. The severity level determines the execution path when the main script resumes control. Less severe failures may be noted and ignored. More severe failures may cause the whole test to be aborted.</p> <p>Set the severity level in the verification function return statement. All failures are logged and displayed in the Log Window, similar to any other WebLOAD test failure. Refer to the WebLOAD Console User\u2019s Guide for more information on return values and error codes. Transactions may be assigned one of the following return values:</p> <ul> <li><code>WLSuccess</code> \u2013 The transaction terminated successfully.</li> <li><code>WLMinorError</code> \u2013 This specific transaction failed, but the test session may continue as usual. The script displays a warning message in the Log window and continues execution from the next statement.</li> <li><code>WLError</code> \u2013 This specific transaction failed and the current test round was aborted. The script displays an error message in the Log window. If you are working with WebLOAD, a new round is begun only if WebLOAD is configured for multiple iterations.</li> <li><code>WLSevereError</code> \u2013 This specific transaction failed and the test session must be stopped completely. The script displays an error message in the Log window. If you are working with WebLOAD Recorder, the test session is stopped. If you are working with WebLOAD, the Load Generator on which the error occurred is stopped.</li> </ul> <p>The default return value is WLSuccess. If no other return value is specified for the transaction, the default assumption is that the transaction terminated successfully.</p> <p>Example</p> <p>The following sample verification function checks if the current title of the Web page matches the page title expected at this point. (In this case, the function looks for a match with a Google page.)</p> <pre><code>function Transaction1_VerificationFunction()\n{\n  InfoMessage(document.title) \n  if(document.title.indexOf(\u201cGoogle\u201d)&gt;0)\n    return WLSuccess else\n  else\n    return WLMinorError\n}\n</code></pre> <p>Comment</p> <p>All functions must be declared in the script before they can be called.</p> <p>For a more complete explanation and examples of functional testing and transaction verification, see the WebLOAD Scripting Guide.</p> <p>See also</p> <ul> <li>BeginTransaction() (see BeginTransaction() (function) )</li> <li>CreateDOM() (see CreateDOM() (function) )</li> <li>CreateTable() (see CreateTable() (function) )</li> <li>EndTransaction() (see EndTransaction() (function) )</li> <li>ReportEvent() (see ReportEvent() (function) )</li> <li>SetFailureReason() (see SetFailureReason() (function) )</li> <li>TimeoutSeverity (see TimeoutSeverity (property) )</li> <li>TransactionTime (see TransactionTime (property) )</li> <li>Transaction Verification Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#version-property","title":"Version (property)","text":"<p>Property of Objects</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> <li>wlLocals</li> </ul> <p>Description</p> <p>Sets the HTTP version number for the current test session.  Current supported versions:</p> <ul> <li><code>1.0</code> (<code>1</code>) </li> <li><code>1.1</code></li> <li><code>2.0</code> (<code>2</code>, <code>2TLS</code>)</li> <li><code>3.0</code> (<code>3</code>)</li> </ul> <p>Advanced:</p> <ul> <li><code>2HTTP</code> - Attempt HTTP/2 over HTTPS, but do not insist on TLS 1.2 or higher even though that is required by the specification.</li> <li><code>2PRIOR</code> Issue non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior knowledge that the server supports HTTP/2 straight away. HTTPS requests still do HTTP/2 the standard way with negotiated protocol version in the TLS handshake.</li> <li><code>3ONLY</code> - Attempt to use HTTP/3 directly to server given in the URL and does not downgrade to earlier HTTP version if the server does not support HTTP/3</li> </ul> <p>GUI mode</p> <p>WebLOAD recommends selecting an HTTP version through the WebLOAD Console. Click the appropriate version number radio button in the HTTP Parameters tab of the Default or Current Session Options dialog box, accessed from the Tools tab of the ribbon.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#warningmessage-function","title":"WarningMessage() (function)","text":"<p>Description</p> <p>Use this function to display a warning message in the Log window.</p> <p>Syntax </p> <p><code>WarningMessage(msg)</code></p> <p>Parameters</p> Parameter Name Description msg A string with a warning message to be sent to the Log window. <p>Comment</p> <p>If you call <code>WarningMessage()</code> in the main script, WebLOAD sends a warning message to the Log window and continues with script execution as usual. The message has no impact on the continued execution of the test session.</p> <p>GUI mode</p> <p>WebLOAD recommends adding message functions to your script files directly through the WebLOAD Recorder. Drag the Message icon from the WebLOAD Recorder toolbox</p> <p>into the script. The Message dialog box opens. Enter the message text, select the WLMinorError severity level for the message, and click OK.</p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlException (see wlException (object) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#window-object","title":"window (object)","text":"<p>Property of Object</p> <ul> <li>frames (see frames (object) )</li> </ul> <p>Description</p> <p>The <code>window</code> object represents an open browser window. <code>window</code> objects store the complete parse results for downloaded HTML pages. Use the <code>window</code> object to gain access to the document in the window. From the <code>window</code> properties you can retrieve the document itself, check the location, and access other subframes that are nested within that window. Typically, the browser creates a single <code>window</code> object when it opens an HTML document. However, if a document defines one or more frames the browser creates one <code>window</code> object for the original document and one additional <code>window</code> object (a child window) for each frame. The child window may be affected by actions that occur in the parent. For example, closing the parent window causes all child windows to close.</p> <p>Note: The 'parent' window item is usually implicitly understood when accessing the HTML document information.</p> <p><code>window</code> objects are also accessed through nested frames, where the<code>frame</code> object's</p> <p><code>window</code> property points to a child window nested within the given frame (read-only).</p> <p>Example</p> <p>When working with multiple child windows of a <code>frames</code> collection, access the first child window using the following expressions:</p> <p><code>frames[0]</code></p> <p>-Or-</p> <p><code>document.</code>frames[0]``</p> <p>Access the properties (document, location, or frames) of the first child window with the following expressions:</p> <p><code>frames[0]</code>.<code>&lt;child-property&gt;</code></p> <p>-Or-</p> <p><code>document.</code>frames[0]<code>`.</code>&lt;child-property&gt;`</p> <p>For example:</p> <p><code>frames[0]</code>.location</p> <p>-Or-</p> <p><code>document.</code>frames[0]``.location</p> <p>Properties</p> <ul> <li>document (see document (object) )</li> <li>location (see location (object) )</li> <li>Name (see Name (property) )</li> <li>title (see title (property) )</li> <li>Url (see Url (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlclear-method","title":"wlClear() (method)","text":"<p>Method of Objects</p> <p>The <code>wlHttp</code> object includes the following collections for storing data. These data storage collections each include the method <code>wlClear()</code>.</p> <ul> <li>wlHttp.Data (see Data (property) )</li> <li>wlHttp.DataFile (see DataFile (property) )</li> <li>wlHttp.FormData (see FormData (property) )</li> <li>wlHttp.Header (see Header (property) )</li> </ul> <p>Description</p> <p>w<code>lClear()</code> is used to clear property values from the specified <code>wlHttp</code> data collection.</p> <p>Syntax</p> <p><code>wlHttp.DataCollection.wlClear([FieldName])</code></p> <p>Parameters</p> <p>[<code>FieldName</code>]-An optional user-supplied string with the name of the field to be cleared.</p> <p>Example</p> <p>If called with no parameters, then all values set for the collection are cleared:</p> <p><pre><code>wlHttp.FormData[\u201ca\u201d] = \u201cDDD\u201d \nwlHttp.FormData[\u201cB\u201d] = \u201cFFF\u201d \nwlHttp.FormData.wlClear()\n// Clear all value from all fields in FormData \nInfoMessage (wlHttp.FormData[\u201ca\u201d])\n// This statement has no meaning, since there\n// is currently no value assigned to \u201ca\u201d\n</code></pre> If <code>wlClear()</code> is passed a <code>FieldName</code> parameter, then only the value of the specified field is cleared:</p> <pre><code>wlHttp.FormData.wlClear(\u201cFirstName\u201d)\n// Clears only value assigned to \u201cFirstName\u201d\n</code></pre> <p>See also</p> <ul> <li>Collections </li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>FormData (see FormData (property) )</li> <li>Header (see Header (property) )</li> <li>wlHttp (see wlHttp (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlcookie-object","title":"wlCookie (object)","text":"<p>Description</p> <p>The <code>wlCookie</code> object gets, sets and deletes cookies. These activities may be required by an HTTP server.</p> <p>Note: Cookie management is usually handled automatically through the standard DOM document.cookie property.</p> <p>WebLOAD supports the <code>wlCookie</code> object as an alternate approach to cookie management. You may use the methods of <code>wlCookie</code> to create as many cookies as needed. For example, each WebLOAD client running a script can set its own cookie identified by a unique name. <code>wlCookie</code> is a local object. WebLOAD automatically creates an independent <code>wlCookie</code> object for each thread of a script. You cannot manually declare <code>wlCookie</code> objects yourself.</p> <p>By default, WebLOAD always accepts cookies that are sent from a server. When WebLOAD connects to a server, it automatically submits any cookies in the server\u2019s domain that it has stored. The <code>wlCookie</code> object lets you supplement or override this behavior in the following ways:</p> <ul> <li>A thread can create its own cookies.</li> <li>A thread can delete cookies that it created.</li> <li>A thread can get the value of a cookie that is created.</li> </ul> <p>Aside from these two abilities, WebLOAD does not distinguish in any way between cookies that it receives from a server and those that you create yourself. For example, if a thread creates a cookie in a particular domain, it automatically submits the cookie when it connects to any server in the domain.</p> <p>Note: This property can only be inserted manually.</p> <p>Syntax </p> <p><code>wlCookie.*method()</code></p> <p>Example</p> <pre><code>//Set a cookie\nwlCookie.Set(\u201cCUSTOMER\u201d, \u201cJOHN_SMITH\u201d, \u201cwww.ABCDEF.com\u201d, \n            \u201c/\u201d, \u201cWed, 08-Apr-98 17:29:00 GMT\u201d)\n//WebLOAD submits the cookie \nwlHttp.Get(\u201cwww.ABCDEF.com/products/OrderForm.cgi\u201d)\n//Get the value of a cookie\nretValue = wlCookie.Get(\u201cCUSTOMER\u201d, \u201cwww.ABCDEF.com\u201d, \u201c/\u201d )\n//Delete the cookie \nwlCookie.ClearAll()\n</code></pre> <p>Methods</p> <ul> <li>ClearAll() (see ClearAll() (method) ))</li> <li>Delete() (see Delete() (cookie method) )</li> <li>Set() (see Set() (cookie method) )</li> <li>Get() (see Get() (cookie method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wldatafilefield-method","title":"wlDataFileField (method)","text":"<p>Description</p> <p><code>WLDataFileField</code> creates the data file field parameter.</p> <p>Syntax</p> <p><code>fileFieldParam = WLDataFileField(paramName, ColumnNumber);</code></p> <p>Parameters</p> Parameter  Name Description paramName File parameter ID, returned by WLDataFileParam. ColumnNumber File column number."},{"location":"javascript/actions_objects_functions/#wldatafileparam-parameterization","title":"wlDataFileParam() (parameterization)","text":"<p>Description</p> <p>Define a data file parameter.</p> <p>Syntax</p> <pre><code>&lt;paramName&gt; = wlDataFileParam(FileID, CopyFileId, HeaderLines, \nDelimiter, AccessMethod, Scope, UsageMethod, EndOfFileBehavior);\n</code></pre> <p>Parameters</p> Parameter  Name Description FileID A string which is a unique parameter  identifier. CopyFileId An identifier which refers  to the local file. This value is returned by the CopyFile command. HeaderLines A parameter that defines  the number of header lines the file contains. All values are enumerated  numeric values. Possible values are:<p></p>- 0. The file does not contain any header  lines. This is the default value. <p></p>- <code>&lt;X&gt;</code>. Where <code>&lt;X&gt;</code> is any  number above zero. The file contains  <code>&lt;X&gt;</code> header lines at  the beginning of the file. The values contained in these header lines are not  used as parameters but  as variable  names in the JavaScript code. Delimiter Character used to separate  fields in one line of the input file. The default delimiter character is a  comma. AccessMethod Defines the method for reading the next row  from the file. All values are enumerated numeric values. Possible values are:<p></p>- <code>WLParamRandom</code>. Gets a random row from  the file.  <p></p>- <code>WLParamOrdered</code>. Every client gets the  next row from the file (order is important).  <p></p>- <code>WLParamNotOrdered</code>. Every client gets the  next row from the file (order is not important). Scope Defines the scope (sharing  policy) of the parameter. Possible values are:<p></p>- <code>WLParamGlobal</code>. All virtual clients read  rows from the shared (global ) pool.  <p></p>- <code>WLParamLocal</code>. Each virtual client  reads rows from its own copy of the pool.  <p></p>- <code>WLParamGlobalLocked</code>. All virtual clients read  a unique row from the global pool, which is shared by all virtual clients  on all load  generators. UsageMethod Defines when the parameter  is updated, meaning when a new  value will be read. Possible values are:<p></p>- <code>WLParamUpdateRound</code>. The script reads a new  row from the file one time for  each round. Using the same parameter again in the same round will result in  the same value.  <p></p>- <code>WLParamUpdateOnce</code>. The script reads a new  row from the file once at the beginning of the test (in InitClient). Every usage of the  parameter by that Virtual Client will always result in the same value.  <p></p>- <code>WLParamUpdateUse</code>. The parameter\u2019s value  will be read each time it is used. EndOfFileBehavior Defines how WebLOAD  behaves when it reaches the end of the file. All values are enumerated  numeric values.<p></p>- <code>WLParamKeepLast</code>. Keep the last value.  <p></p>- <code>WLParamCycle</code>. Start from the beginning  of the file. Each row can be used any number of times.  <p></p>-<code>WLParamStopVC</code>. Abort the specific  Virtual Client that tried to read past the end of the file. An error message  is written to the log file. <p>Example</p> <pre><code>function InitAgenda()\n{\nmyFileParam_File = CopyFile(\"C:\\\\My \nDocuments\\\\WebLOAD\\\\Sessions\\\\param1.txt\")\n}\nfunction InitClient()\n{\nmyFileParam_DataFileParam = wlDataFileParam ( \n\"myFileParam\",myFileParam_File, \n1,\",\",wlParamRandom,WLParamGlobalLocked,\nwlParamUpdateRound,wlParamCycle);\nmyFileParam_col1 = wlDataFileField( myFileParam_DataFileParam, 1);\n\nmyFileParam_col2 = wlDataFileField( myFileParam_DataFileParam, 2);\n\n}\n/***** WLIDE - Message - ID:4 *****/ \nInfoMessage(myFileParam_col1.getValue())\n\n// END WLIDE\n\n/***** WLIDE - Message - ID:5 *****/ \nInfoMessage(myFileParam_col2.getValue())\n</code></pre> <p>Methods</p> <ul> <li>wlDataFileField() (see wlDataFileField (method)))</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlexception-object","title":"wlException (object)","text":"<p>Description</p> <p>script scripts that encounter an error during runtime do not simply fail and die. This would not be helpful to testers who are trying to analyze when, where, and why an error in their application occurs. WebLOAD scripts incorporate a set of error management routines to provide a robust error logging and recovery mechanism whenever possible. The <code>wlException</code> object is part of the WebLOAD error management protocol.</p> <p>WebLOAD users have a variety of options for error recovery during a test session. The built-in error flags provide the simplest set of options; an informative message, a simple warning, stop the current round and skip to the beginning of the next round, or stop the test session completely. Users may also use <code>try()/catch()</code> commands to enclose logical blocks of code within a round. This provides the option of catching any minor errors that occur within the enclosed block and continuing with the next logical block of code within the current round, rather than skipping the rest of the round completely.</p> <p>Users may add their own <code>try()/catch()</code> pairs to a script, delimiting their own logical code blocks and defining their own alternate set of activities to be executed in case an error occurs within that block. If an error is caught while the script is in the middle of executing the code within a protected logical code block (by <code>try()</code>), WebLOAD will detour to a user-defined error function (the <code>catch(</code>) block) and then continue execution with the next navigation block in the script.</p> <p><code>wlException</code> objects store information about errors that have occurred, including informative message strings and error severity levels. Users writing error recovery functions to handle the errors caught within a <code>try()/catch()</code> pair may utilize the <code>wlException</code> object. Use the <code>wlException</code> methods to perhaps send error messages to the Log Window or trigger a system error of the specified severity level.</p> <p>Example</p> <p>The following code fragment illustrates a typical error-handling routine:</p> <pre><code>try{\n  ...\n  //do a lot of things\n  // ...\n  //error occurs here\n  ...\n}\n\ncatch(e){\n  myException = new wlException(e,\u201cwe have a problem\u201d)\n  //things to do in case of error\n  if (myException.GetSeverity() == WLError) {\n    // Do one set of Error activities \n    myException.ReportLog()\n    throw myException\n  }\n  else {\n  // Do a different set of Severe Error activities \n  throw myException\n  }\n}\n</code></pre> <p>Methods</p> <ul> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>ReportLog() (see ReportLog() (method) )</li> <li>wlException() (see wlException() (constructor) )</li> </ul> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlexception-constructor","title":"wlException() (constructor)","text":"<p>Method of Object</p> <ul> <li>wlException (see wlException (object) )</li> </ul> <p>Description</p> <p>Creates a new <code>wlException</code> object.</p> <p>Syntax</p> <p><code>NewExceptionObject = new wlException(severity, message)</code></p> <p>Parameters</p> Parameter Name Description severity One of the following integer constants:<p></p>- <code>WLError</code>. This specific  transaction failed and the current test  round was aborted. The script displays an error message in the Log window and  begins a new round.  <p></p>- <code>WLSevereError</code>. This specific  transaction failed and the test  session must be stopped completely. The script displays an error message in  the Log window and the Load Generator on  which the  error occurred is stopped. message The exception message stored as a text  string. <p>Return Value</p> <p>Returns a new <code>wlException</code> object.</p> <p>Example</p> <p><code>myUserException=new wlException(WLError, \u201cInvalid date\u201d)</code></p> <p>See also</p> <ul> <li>ErrorMessage() (see ErrorMessage() (function) )</li> <li>GetMessage() (see GetMessage() (method) )</li> <li>GetSeverity() (see GetSeverity() (method) )</li> <li>InfoMessage() (see InfoMessage() (function) )</li> <li>Message Functions </li> <li>ReportLog() (see ReportLog() (method) )</li> <li>SevereErrorMessage() (see SevereErrorMessage() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>WarningMessage() (see WarningMessage() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlgeneratorglobal-object","title":"wlGeneratorGlobal (object)","text":"<p>Description</p> <p>WebLOAD provides a global object called <code>wlGeneratorGlobal</code>. The <code>wlGeneratorGlobal</code> object enables sharing of global variables and values between all threads of a single Load Generator, even when running multiple scripts. (Compare to the <code>wlSystemGlobal</code> (see wlSystemGlobal (object) )object, which enables sharing of global variables and values system-wide, between all threads of all Load Generators participating in a test session, and to the wlGlobals object, which enables sharing of global variables and values between threads of a single script, running on a single Load Generator.)</p> <p>Globally shared variables are useful when tracking a value or maintaining a count across multiple threads or platforms. For example, you may include these shared values in the messages sent to the Log window during a test session.</p> <p>WebLOAD creates exactly one <code>wlGeneratorGlobal</code> object for each Load Generator participating in a test session. Use the <code>wlGeneratorGlobal</code> methods to create and access variable values that you wish to share between threads of a Load Generator.</p> <p>Edit <code>wlGeneratorGlobal</code> properties and methods through the IntelliSense editor, described in Using the IntelliSense JavaScript Editor . While global variables may be accessed anywhere in your script, be sure to initially declare <code>wlGeneratorGlobal</code> values in the <code>InitAgenda()</code> function only. Do not define new values within the main body of a Script, for they will not be shared correctly by all threads.</p> <p>Methods</p> <p>The <code>wlGeneratorGlobal</code> object includes the following methods:</p> <ul> <li>Add() (see Add() (method) )</li> <li>Get() (see Get() (addition method) )</li> <li>Set() (see Set() (addition method) ))</li> </ul> <p>Properties</p> <p><code>wlGeneratorGlobal</code> incorporates a dynamic property set that consists of whatever global variables have been defined, set, and accessed by the user through the <code>wlGeneratorGlobal</code> method set only.</p> <p>See also</p> <ul> <li>wlSystemGlobal (see wlSystemGlobal (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlget-method","title":"wlGet() (method)","text":"<p>Method of Object</p> <p>Each of the different types of collections of elements found in the parsed DOM tree includes the method <code>wlGet()</code>.</p> <p>Description</p> <p><code>wlGet()</code> is used when getting data from a property in the collection to distinguish between keywords and user-defined variables that share the same names. The need for this care is explained in this section.</p> <p>Syntax </p> <p><code>Collection.wlGet(PropertyName)</code></p> <p>Return Value</p> <p>The value of the specified property</p> <p>Example </p> <p><code>document.forms[0].elements.wlGet(\u201cFirstName\u201d)</code> </p> <p>Comment</p> <p>In JavaScript, users may work interchangeably with either an <code>array[index]</code> or <code>array.index</code> notation. For example, the following two references are interchangeable:</p> <p><code>wlHttp.FormData[\u201cSunday\u201d]</code></p> <p>-Or-</p> <p><code>wlHttp.FormData.Sunday</code> This flexibility is convenient for programmers, who are able to select the syntax that is most appropriate for the context. However, it could potentially lead to ambiguity. For example, assume a website included a form with a field called <code>length</code>. This could lead to a confusing situation, where the word <code>length</code> appearing in a script could represent either the number of elements in a <code>FormData</code> array, as explained in length, or the value of the <code>length</code> field in the form. Errors would arise from a reasonable assignment statement such as:</p> <p><code>wlHttp.FormData[\u201clength\u201d] = 7</code></p> <p>This is equivalent to the illegal assignment statement:</p> <p><code>wlHttp.FormData.length = 7</code></p> <p>WebLOAD therefore uses <code>wlGet()</code> to retrieve field data whenever the name could lead to potential ambiguity. When recording scripts with WebLOAD Recorder, WebLOAD recognizes potential ambiguities and inserts the appropriate <code>wlGet()</code> statements automatically.</p> <p>See also</p> <ul> <li>Collections </li> <li>wlHttp (see wlHttp (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlgetallforms-method","title":"wlGetAllForms() (method)","text":"<p>Method of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Retrieve a collection of all forms (<code>&lt;FORM&gt;</code> elements) in an HTML page and its nested frames.</p> <p>Syntax </p> <p><code>wlGetAllForms()</code> </p> <p>Return Value</p> <p>A collection that includes the forms in the top-level frame (from which you called the method) and all its subframes at any level of nesting.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlgetallframes-method","title":"wlGetAllFrames() (method)","text":"<p>Method of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Retrieve a collection of all frames in an HTML page, at any level of nesting.</p> <p>Syntax <code>wlGetAllFrames()</code></p> <p>Return Value</p> <p>A collection that includes the top-level frame (from which you called the method) and</p> <p>all its subframes.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlgetalllinks-method","title":"wlGetAllLinks() (method)","text":"<p>Method of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Retrieve a collection of all links (<code>&lt;A&gt;</code> elements) in an HTML page and its nested frames.</p> <p>Syntax <code>wlGetAllLinks()</code></p> <p>Return Value</p> <p>A collection that includes links in the top-level frame (from which you called the method) and all its subframes at any level of nesting.</p> <p>See also</p> <ul> <li>HTTP Components </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlglobals-object","title":"wlGlobals (object)","text":"<p>Description</p> <p>The <code>wlGlobals</code> object stores the default global configuration properties set by the user through the WebLOAD Recorder or Console, including properties defining expected dialog boxes, verification test selections, and dynamic state management.</p> <p><code>wlGlobals</code> is a global object, whose property values are shared by all threads of a script running on a single Load Generator. The <code>wlGlobals</code> object enables sharing of user-defined global variables and values between threads of a single script, running on a single Load Generator. (Compare to the wlGeneratorGlobal (see wGeneratorGlobal (object) ) object, which enables sharing of global variables and values between all threads of a single Load Generator, and the <code>wlSystemGlobal</code> (see wlSystemGlobal (object) ) object, which enables sharing of global variables and values system-wide, between all threads of all Load Generators participating in a test session.)</p> <p>Note: Most global configuration property values and user-defined variables should be set through the WebLOAD Recorder or Console. The property descriptions here are intended mainly to explain the lines of code seen in the JavaScript View of the WebLOAD Recorder desktop. Syntax details are also provided for the benefit of users who prefer to manually edit the JavaScript code of their scripts through the IntelliSense editor, described in Using the IntelliSense JavaScript Editor . If you do decide to edit the global variable values in your script, set <code>wlGlobals</code> properties in the <code>InitAgenda()</code> function only. Do not define new values within the main body of a script. The values will not be shared correctly by all script threads.</p> <p>The configuration properties of the <code>wlGlobals</code> object are almost all duplicated in the wlLocals (see wlLocals (object) ), which contains the local configuration settings for browser actions, and in the wlHttp (see wlHttp (object) ), which contains configuration settings that are limited to a single specific browser action. To understand how there could potentially be three different settings for a single configuration property, see the WebLOAD Scripting Guide.</p> <p>Properties</p> <p>The <code>wlGlobals</code> object includes the following property classes:</p> <ul> <li>Automatic State Management for HTTP Protocol Mode </li> <li>HTTP Components </li> <li>Transaction Verification Components </li> </ul> <p>Syntax</p> <p>Each individual property class includes the syntax specifications that apply to that class.</p> <p>GUI mode</p> <p>The <code>wlGLobals</code>, property and method descriptions explain how to explicitly set values for these session configuration properties within your JavaScript script files.</p> <p>The recommended way to set configuration values is through the WebLOAD Recorder, using the Default, Current, and Global Options dialog boxes accessed from the Tools tab in the Console desktop ribbon. The dialog boxes provide a means of defining and setting configuration values with ease, simplicity, and clarity.</p> <p>See also</p> <ul> <li>wlHttp (see wlHttp (object) )</li> <li>wlGeneratorGlobal (see wlGeneratorGlobal (object) )</li> <li>wlLocals (see wlLocals (object) )</li> <li>wlSystemGlobal (see wlSystemGlobal (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlheaders-object","title":"wlHeaders (object)","text":"<p>Property of Objects</p> <p>Headers on a Web page are accessed through <code>wlHeaders</code> objects that are grouped into collections of <code>wlHeaders</code>. The <code>wlHeaders</code> collection is a property of the following objects:</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Each <code>wlHeaders</code> object contains a key-value pair. <code>wlHeaders</code> objects provide access to the key/value pairs in the HTTP response headers. (Information found in request headers is available through the <code>wlHttp.Header</code> property. For key-value pairs found in URL search strings, see wlSearchPairs (object) .)</p> <p><code>wlHeaders</code> objects are local to a single thread. You cannot create new <code>wlHeaders</code> objects using the JavaScript new operator, but you can access them through the properties and methods of the standard DOM objects. <code>wlHeaders</code> properties are read only.</p> <p>Syntax</p> <p><code>wlHeaders</code> objects are grouped together within collections of <code>wlHeaders</code>. To access an individual <code>wlHeaders</code>\u2019s properties, check the length property of the <code>wlHeaders</code> collection and use an index number to access the individual <code>wlHeaders</code> object, with the following syntax:</p> <p><code>NumberofHeaderObjects = document.wlHeaders.length</code></p> <p><code>document.wlHeaders[index#].&lt;wlHeaders-property&gt;</code></p> <p>Example</p> <p>WebLOAD stores the header pairs from the response to the most recent Get, Post, or Head command in the document.wlHeaders collection. The following statement would retrieve an HTTP header:</p> <p><code>wlHttp.Head(\u201chttp://www.ABCDEF.com\u201d)</code></p> <p>For a header that looks something like this:</p> <pre><code>HTTP/1.1 200 OK\nServer: Netscape-Enterprise/3.0F \nDate: Sun, 11 Jan 1998 08:25:20 GMT\nContent-type: text/html \nConnection: close\nHost: Server2.MyCompany.com\n</code></pre> <p>WebLOAD parses the header pairs as follows:</p> <p><pre><code>document.wlHeaders[0].key = \u201cServer\u201d \ndocument.wlHeaders[0].value = \u201cNetscape-Enterprise/3.0F\u201d \ndocument.wlHeaders[1].key = \u201cDate\u201d \ndocument.wlHeaders[1].value = \u201cSun, 11 Jan 1998 08:25:20 GMT\u201d\n\n...\n</code></pre> Properties</p> <p>The <code>wlHeaders</code> object includes the following properties:</p> <ul> <li>key (see key (property) )</li> <li>value (see value (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>Header (see Header (property) )</li> <li>wlSearchPairs (see wlSearchPairs (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlhtml-object","title":"wlHtml (object)","text":"<p>Description</p> <p>If your script downloads HTML code, you can use the <code>wlHtml</code> object to retrieve parsed elements of the code. The <code>wlHtml</code> object also lets you retrieve the HTTP header fields and status and parse URL addresses into their host, port, and URI components.</p> <p><code>wlHtml</code> is a local object. WebLOAD automatically creates an independent <code>wlHtml</code> object for each thread of a script. You cannot manually declare <code>wlHtml</code> objects yourself.</p> <p>Methods</p> <ul> <li>GetFieldValue() (see GetFieldValue() (method) )</li> <li>GetFieldValueInForm() (see GetFieldValueInForm() (method) )</li> <li>GetFormAction() (see GetFormAction() (method) )</li> <li>GetFrameByUrl() (see GetFrameByUrl() (method) )</li> <li>GetFrameUrl() (see GetFrameUrl() (method) )</li> <li>GetHeaderValue() (see GetHeaderValue() (method) )</li> <li>GetHost() (see GetHost() (method) )</li> <li>GetHostName() (see GetHostName() (method) )</li> <li>GetLinkByName() (see GetLinkByName() (method) )</li> <li>GetLinkByUrl() (see GetLinkByUrl() (method) )</li> <li>GetPortNum() (see GetPortNum() (method) )</li> <li>GetQSFieldValue() (see GetQSFieldValue() (method) )</li> <li>GetStatusLine() (see GetStatusLine() (method) )</li> <li>GetStatusNumber() (see GetStatusNumber() (method) )</li> <li>GetUri() (see GetUri() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlhttp-object","title":"wlHttp (object)","text":"<p>Description</p> <p>The <code>wlHttp</code> object stores configuration information for immediate user activities, including properties defining expected dialog boxes, verification test selections, and dynamic state management. Many of these properties are duplicated in the wlGlobals (see wlGlobals (object) ), which contains the default global configuration settings for browser actions, and in the wlLocals (see wlLocals (object)), which contains the local configuration settings for browser actions. To understand how there could potentially be three different settings for a single configuration property, see the WebLOAD Scripting Guide. The <code>wlHttp</code> object also contains the methods that implement the user activities saved during the WebLOAD Recorder recording session. User activities may be recreated through one of two approaches: the high-level User Action mode or the low-level HTTP Protocol mode. Methods for each of these testing modes are included in the <code>wlHttp</code> object.</p> <p>Properties and Methods</p> <p>The <code>wlHttp</code> object includes the following property and method classes:</p> <ul> <li>Automatic State Management for HTTP Protocol Mode </li> <li>HTTP Components </li> <li>Transaction Verification Components </li> </ul> <p>Syntax</p> <p>Each individual function class includes the syntax specifications that apply to that class.</p> <p>GUI mode</p> <p>The <code>wlHttp</code> property and method descriptions explain how to explicitly set values for these session configuration properties within your JavaScript script files.</p> <p>Note: The recommended way to set configuration values is through the WebLOAD Recorder, using the Default, Current, and Global Options dialog boxes accessed from the Tools tab in the Console desktop ribbon. The dialog boxes provide a means of defining and setting configuration values with ease, simplicity, and clarity.</p> <p>See also</p> <ul> <li>wlGlobals</li> <li>wlLocals</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlinputfile-object","title":"wlInputFile (object)","text":"<p>Description</p> <p>The <code>wlInputFile</code> object supports reading values from an external text file. This is useful when you need to parameterize your script. The input file supports the following access methods:</p> <ul> <li>Unique access to a parameters file\u2019s record. This ensures that a value that was read by VC1 will not be read by any other VC as long as VC1 is using this value.</li> <li>Shared access for a parameters file among Load Generators and Load Machines and among different scripts.</li> <li>Sequential and random access to a parameters file.</li> </ul> <p>The <code>wlInputFile</code> object enables Load Generators running on more than one load machine to access a single parameters file in a way that enables unique reading of the parameters from the file. In addition, a single parameters file can be accessed by more</p> <p>than one script in a way that enables unique reading of parameters from the file by all of the scripts.</p> <p>Create <code>wlInputFile</code> objects and manage your files using the constructor and methods described in this section.</p> <p>Syntax</p> <p><code>MyFileObj = new wlInputFile(fileID)</code></p> <p>Parameters</p> Parameter Name Description fileID An identifier which refers  to the local file. This value is returned by the CopyFile command. <p>Example</p> <pre><code>fileID = CopyFile(&lt;full path&gt;)\n\u2026\nMyFileObj = new wlInputFile(fileID)\n\u2026\nMyFileObj.Open([AccessMethod], [ShareMethod], [UsageMethod], \n[EndOfFileBehavior], [HeaderLines])\n</code></pre> <p>Methods</p> <ul> <li>Open() (see Open() (method) )</li> <li>GetLine() (see GetLine() (function) )</li> </ul> <p>See also</p> <ul> <li>Using the IntelliSense JavaScript Editor </li> <li>CopyFile() (see CopyFile() (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlinputfile-constructor","title":"wlInputFile() (constructor)","text":"<p>Method of Object</p> <ul> <li>wlInputFile (see wlInputFile (object) )</li> </ul> <p>Description</p> <p>Creates a new <code>wlInputFile</code> object. For optimal performance, construct a new file object in the <code>InitClient</code> section of your script. The file is copied from the Console to the Load Generator. The input file specified in the <code>wlInputFile</code> object is opened.</p> <p>Syntax</p> <p><code>myFileObj = new wlInputFile(fileID)</code></p> <p>Parameters</p> Parameter Name Description fileID An identifier which refers  to the local file. This value is returned by the CopyFile command. <p>Return Value</p> <p>A pointer to a new wlInputFile object.</p> <p>Example</p> <pre><code>fileID = CopyFile(&lt;full path&gt;)\n\u2026\nMyFileObj = new wlInputFile(fileID)\n\u2026\nMyFileObj.Open([AccessMethod], [ShareMethod], [UsageMethod], \n[EndOfFileBehavior], [HeaderLines])\n</code></pre>"},{"location":"javascript/actions_objects_functions/#wllocals-object","title":"wlLocals (object)","text":"<p>Description</p> <p>The <code>wlLocals</code> object stores the local default configuration information for user activities, such as the URL, user name and password, proxy server, and dialog box management. <code>wlLocals</code> is a local object. WebLOAD creates an independent <code>wlLocals</code> object for each thread of a script. You cannot declare <code>wlLocals</code> objects yourself.</p> <p>The properties of the <code>wlLocals</code> object are all duplicated in the wlGlobals, which contains the default global settings, and in the  wlHttp, which contains the settings for an immediate action. To understand how there could potentially be three different settings for a single configuration property, see the WebLOAD Scripting Guide.</p> <p>Properties</p> <p>The <code>wlLocals</code> object includes the following property classes:</p> <ul> <li>Automatic State Management for HTTP Protocol Mode </li> <li>HTTP Components </li> <li>Transaction Verification Components </li> </ul> <p>Syntax</p> <p>Each individual function class includes the syntax specifications that apply to that class.</p> <p>GUI mode</p> <p>The <code>wlLocals</code> property and method descriptions explain how to explicitly set values for these session configuration properties within your JavaScript script files.</p> <p>Note: The recommended way to set configuration values is through the WebLOAD Recorder, using the Default, Current, and Global Options dialog boxes accessed from the Tools tab in the Console desktop ribbon. The dialog boxes provide a means of defining and setting configuration values with ease, simplicity, and clarity.</p> <p>See also</p> <ul> <li>wlGlobals</li> <li>wlHttp</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlmetas-object","title":"wlMetas (object)","text":"<p>Property of Objects</p> <p>META objects on a Web page are accessed through <code>wlMetas</code> objects that are grouped into collections of <code>wlMetas</code>. The <code>wlMetas</code> collection is a property of the following objects:</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Each <code>wlMetas</code> object stores the parsed data for an HTML meta object (<code>&lt;META&gt;</code> tag). <code>wlMetas</code> objects are local to a single thread. You cannot create new <code>wlMetas</code> objects using the JavaScript new operator, but you can access them through the properties and methods of the standard DOM objects. <code>wlMetas</code> properties are read only.</p> <p>Syntax</p> <p><code>wlMetas</code> objects are grouped together within collections of <code>wlMetas</code>. To access an individual <code>wlMetas</code>\u2019s properties, check the length property of the <code>wlMetas</code> collection and use an index number to access the individual <code>wlMetas</code> object, with the following syntax:</p> <pre><code>NumberofMetaObjects = document.wlMetas.length \ndocument.wlMetas[#].&lt;wlMetas-property&gt;\n</code></pre> <p>Example</p> <p>To find out how many <code>wlMetas</code> objects are contained within a document header, check the value of:</p> <p><code>document.wlMetas.length</code></p> <p>Access each <code>wlMetas</code>\u2019s properties directly using the preceding syntax. For example:</p> <p><code>document.wlMetas[0].key</code></p> <p>Properties</p> <p>The <code>wlMetas</code> object includes the following properties:</p> <ul> <li>content (see content (property) )</li> <li>httpEquiv (see httpEquiv (property) )</li> <li>Name (see Name (property) ))</li> <li>Url (see Url (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlnumberparam-parameterization","title":"wlNumberParam() (parameterization)","text":"<p>Description</p> <p>Define a number parameter.</p> <p>Syntax</p> <pre><code>paramName = wlNumberParam (ParamID, MinValue, MaxValue,Step, \nAccessMethod, Scope, UsageMethod, OutOfValuesBehavior);\n</code></pre> <p>Parameters</p> Parameter Name Description ParamID A string that is a unique parameter identifier. MinValue The minimum value of the number range. MaxValue The maximum value of the number range. Step The increment between numbers. AccessMethod Defines the method for  calculating the next value from the range. All values are enumerated numeric  values. Possible values are:<p></p>- <code>wlParamRandom</code>. Gets a random value from  the range.  <p></p>- <code>wlParamOrdered.</code> Every client gets the  next value from the range (order  is important).  <p></p>- <code>wlParamNotOrdered.</code> Every client gets the  next value from the range (order is not important). Scope Defines the scope (  sharing policy) of the parameter. Possible values are:<p></p>-<code>wlParamGlobal.</code> All virtual clients read  values from the shared (global )  pool.  <p></p>- <code>wlParamLocal.</code> Each virtual client  reads values from its own pool.  <p></p>- <code>wlParamGlobalLocked.</code> All virtual clients read unique values from the shared (global  ) pool. Usage Method Defines when the parameter  is updated, meaning when a new value will be read. Possible values are:<p></p>- <code>WLParamUpdateRound.</code> The script reads a new  value from the file once for each round. Using the same parameter again in the same round will result in  the same value.  <p></p>- <code>WLParamUpdateOnce.</code> The script reads a new  value from the file once at the  beginning of the test (in InitClient). All usage of the  parameter by that Virtual Client will always result in the same value.  <p></p>- <code>WLParamUpdateUse.</code> The parameter\u2019s value  will be read each time it is used. OutOfValuesBehavior Defines how WebLOAD  behaves when it reaches the end of the range. All values are enumerated  numeric values. Possible values are:<p></p>- <code>WLParamKeepLast.</code> Keep the last value.  <p></p>- <code>WLParamCycle.</code> Start from the beginning  of the range.  <p></p>- <code>WLParamStopVC.</code> Abort the specific  Virtual Client that tried to read past the end of the range. An error message  is written  to the log  file. <p>Example</p> <pre><code>function InitClient()\n\n{\nNewParam1 = wlNumberParam(\"NewParam1\",1, 100, 1, wlParamRandom, \nwlParamLocal, wlParamUpdateRound, wlParamCycle);\n}\n/***** WLIDE - Message - ID:3 *****/ \nInfoMessage(NewParam1.getValue())\n\n// END WLIDE\n</code></pre>"},{"location":"javascript/actions_objects_functions/#wloutputfile-object","title":"wlOutputFile (object)","text":"<p>Description</p> <p>The <code>wlOutputFile</code> object writes script output messages to a global output file. Create <code>wlOutputFile</code> objects and manage your files using the constructor and methods described in this section.</p> <p>Syntax</p> <pre><code>MyFileObj = new wlOutputFile(\u201cfilename\u201d)\n\u2026\nMyFileObj.Write(\u201cHappy Birthday\u201d)\ndelete MyFileObj\n</code></pre> <p>Example</p> <p>Each individual property includes examples of the syntax for that property.</p> <p>Methods</p> <ul> <li>Close() (see Close() (function) )</li> <li>remove() (see remove() (method) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) ))</li> <li>wlOutputFile() (see wlOutputFile() (constructor) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul> <p>Comment</p> <p>You may also use the WebLOAD functions listed here to open and close output files.</p> <ul> <li> <p>To open an output file:         <code>Open(filename)</code></p> </li> <li> <p>To close an output file:      <code>Close(filename)</code></p> </li> </ul> <p>When you use the <code>Close()</code> function to close a file data will be flashed to the disk.</p> <p>Note: Declaring a new <code>wlOutputFile</code> object creates a new, empty output file. If a file of that name already exists, the file will be completely overwritten. Information will not be appended to the end of an existing file. Be sure to choose a unique filename for the new output file if you do not want to overwrite previous script data.</p> <p>If you declare a new <code>wlOutputFile</code> object in the <code>InitAgenda()</code> function of a script, the output file will be shared by all the script threads. There is no way to specify a specific thread writing sequence-each thread will write to the output file in real time as it reaches that line in the script execution.</p> <p>If you declare a new <code>wlOutputFile</code> object in the <code>InitClient()</code> function or main body of a script, use the thread number variable as part of the new filename to be sure that each thread will create a unique output file.</p> <p>If you declare a new <code>wlOutputFile</code> object in the main body of a script, and then run your script for multiple iterations, use the <code>RoundNum</code> variable as part of the new filename to be sure that each new round will create a unique output file.</p> <p>Generally, you should only create new <code>wlOutputFile</code> objects in the <code>InitAgenda()</code> or <code>InitClient()</code> functions of a script, not in the main script. If a statement in the main script creates an object, a new object is created each time the statement is executed. If WebLOAD repeats the main script many times, a large number of objects may be created and the system may run out of memory.</p> <p>See also</p> <ul> <li>CopyFile() (see CopyFile() (function) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Using the IntelliSense JavaScript Editor </li> </ul>"},{"location":"javascript/actions_objects_functions/#wloutputfile-constructor","title":"wlOutputFile() (constructor)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul> <p>Description</p> <p>To create a new <code>wlOutputFile</code> object, use the <code>wlOutputFile()</code> constructor.</p> <p>Syntax</p> <p><code>new wlOutputFile(filename)</code></p> <p>Parameters</p> Parameter Name Description <code>filename</code> Name of the new output file to be created. <p>Return Value</p> <p>A pointer to a new <code>wlOutputFile</code> object.</p> <p>Example</p> <p><code>MyFileObj = new wlOutputFile(\u201cFileName\u201d)</code></p> <p>Declaring a new <code>wlOutputFile</code> object creates a new, empty output file. If a file of that name already exists, the file will be completely overwritten. Information will not be appended to the end of an existing file. Be sure to choose a unique filename for the new output file if you do not want to overwrite previous script data.</p> <p>If you declare a new <code>wlOutputFile</code> object in the InitAgenda() function of a script, the output file will be shared by all the script threads. There is no way to specify a specific thread writing sequence-each thread will write to the output file in real time as it reaches that line in the script execution.</p> <p>If you declare a new <code>wlOutputFile</code> object in the<code>InitClient()</code> function or main body of a script, use the thread number variable as part of the new filename to be sure that each thread will create a unique output file.</p> <p>If you declare a new <code>wlOutputFile</code> object in the main body of a script, and then run your script for multiple iterations, use the RoundNum variable as part of the new filename to be sure that each new round will create a unique output file.</p> <p>Ideally, create new <code>wlOutputFile</code> objects only in the <code>InitAgenda()</code> function of a script, not in the main script. If a statement in the main script creates an object, a new object is created each time the statement is executed. If WebLOAD repeats the main script many times, a large number of objects may be created and the system may run out of memory.</p> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile (see wlOutputFile (object) )</li> <li>Write() (see Write() (method) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlrand-object","title":"wlRand (object)","text":"<p>Description</p> <p>The <code>wlRand</code> object is a random number generator.</p> <p><code>wlRand</code> is a local object. WebLOAD automatically creates an independent <code>wlRand</code> object for the test session script. You cannot declare <code>wlRand</code> objects yourself.</p> <p>Syntax <code>wlRand.Method()</code></p> <p>Example</p> <p>The following example generates three random numbers having the following possible</p> <p>values:</p> <ul> <li>Any integer.</li> <li>An integer from 1 to 9.</li> <li>One of the three numbers 0, 1, or 1.5.</li> </ul> <pre><code>function InitAgenda() { \n    wlRand.Seed(23)\n}\n\n\nAnyInteger = wlRand.Num() \nOneToNine = wlRand.Range(1, 9)\nOneOfThreeNumbers = wlRand.Select(0, 1, 1.5)\n</code></pre> <p>Methods</p> <ul> <li> <p>Num() (see Num() (method) )</p> </li> <li> <p>Range() (see Range() (method) )</p> </li> <li> <p>Seed() (see Seed() (method) )</p> </li> <li> <p>Select() (see Select() (method) )</p> </li> </ul>"},{"location":"javascript/actions_objects_functions/#wlsearchpairs-object","title":"wlSearchPairs (object)","text":"<p>Method of Object</p> <ul> <li>link (see link (object) )</li> <li>location (see location (object) )</li> </ul> <p>Description</p> <p>Each <code>wlSearchPairs</code> object contains a parsed version of the search attribute string, storing the key/value pairs found in a document\u2019s URL search strings. (For key-value pairs found in HTTP response headers, see wlHeaders (see wlHeaders (object) ). Information found in request headers is available through the <code>wlHttp.Header</code> (see Header (property) ) property.)</p> <p><code>wlSearchPairs</code> objects are grouped into <code>wlSearchPairs</code> collections, where the collections are themselves properties of the link and location objects.</p> <p><code>wlSearchPairs</code> objects are local to a single thread. You cannot create new <code>wlSearchPairs</code> objects using the JavaScript new operator, but you can access them through the properties and methods of the standard DOM objects. <code>wlSearchPairs</code> properties are read only.</p> <p>Syntax</p> <p><code>wlSearchPairs</code> objects are grouped together within collections of <code>wlSearchPairs</code>. To access an individual <code>wlSearchPairs</code>\u2019s properties, check the length property of the <code>wlSearchPairs</code> collection and use an index number to access the individual <code>wlSearchPairs</code> object, with the following syntax:</p> <p><code>NumberofSearchPairObjects = document.links[1].wlSearchPairs.length</code> </p> <p><code>document.links[1].wlSearchPairs[index#].&lt;wlSearchPairs-property&gt;</code></p> <p>Example</p> <p>To find out how many <code>wlSearchPairs</code> objects are contained within a document\u2019s link, check the value of:</p> <p><code>document.links[1].wlSearchPairs.length</code></p> <p>Access each <code>wlSearchPairs</code>\u2019s properties directly through the index number of that item. For example:</p> <p><code>document.links[1].wlSearchPairs[0].key</code></p> <p>Suppose that the third link on a Web page has the following HTML code:</p> <p><pre><code>&lt;A href=\u201chttp://www.ABCDEF.com/ProductFind.exe?\n         Product=modems&amp;Type=ISDN\u201d&gt; ISDN Modems `&lt;/A&gt;`\n</code></pre> You can download the page and parse the links using the following script:</p> <pre><code>function InitAgenda() {\n  wlGlobals.Url = \"http://www.ABCDEF.com\"\n  //Enable link parsing \n  wlGlobals.ParseLinks = true\n}\nwlHttp.Get()\n</code></pre> <p>For the link in question, WebLOAD stores the attribute pairs in the <code>document.links[2].wlSearchPairs  property. This property is actually a collection containing two</code> wlSearchPairs` objects. The following is a complete listing of the collection.</p> <pre><code>document.links[2].wlSearchPairs[0].key = \u201cProduct\u201d \ndocument.links[2].wlSearchPairs[0].value = \u201cmodems\u201d \ndocument.links[2].wlSearchPairs[1].key = \u201cType\u201d \ndocument.links[2].wlSearchPairs[1].value = \u201cISDN\u201d\n</code></pre> <p>Properties</p> <p>The <code>wlSearchPairs</code> object includes the following properties:</p> <ul> <li>key (see key (property) )</li> <li>value (see value (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>Header (see Header (property) )</li> <li>link (see link (object) )</li> <li>location (see location (object) )</li> <li>wlHeaders (see wlHeaders (object) )</li> <li>wlHttp (see wlHttp (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlset-method","title":"wlSet() (method)","text":"<p>Method of Objects</p> <p>The <code>wlHttp</code> object includes the following collections for storing data. These data storage collections each include the method <code>wlSet()</code>.</p> <ul> <li>wlHttp.Data (see Data (property) )</li> <li>wlHttp.DataFile (see DataFile (property) )</li> <li>wlHttp.FormData (see FormData (property) )</li> <li>wlHttp.Header (see Header (property) )</li> </ul> <p>Description</p> <p><code>wlSet()</code> is used when assigning a value to an element in the collection, to distinguish between keywords and user-defined variables that share the same names. The need for this care is explained in this section.</p> <p>Syntax</p> <p><code>wlHttp.Collection.wlSet(FieldName, Value)</code></p> <p>Parameters</p> Parameter Name Description <code>FieldName</code> A string with the name of the field whose value is  to be set. <code>Value</code> The value to be assigned to the specified  field. <p>Return Value</p> <p>The value of the specified property.</p> <p>Example </p> <p><code>wlHttp.FormData.wlSet(\u201cFirstName\u201d, \u201cBill\u201d)</code></p> <p>Comment</p> <p>In JavaScript, users may work interchangeably with either an <code>array[index]</code> or <code>array.index</code> notation. For example, the following two references are interchangeable:</p> <p><code>wlHttp.FormData[\u201cSunday\u201d]</code></p> <p>-Or-</p> <p><code>wlHttp.FormData.Sunday</code></p> <p>This flexibility is convenient for programmers, who are able to select the syntax that is most appropriate for the context. However, it could potentially lead to ambiguity. For example, assume a website included a form with a field called <code>length</code>. This could lead to a confusing situation, where the word <code>length</code> appearing in a script could represent either the number of elements in a <code>FormData</code> array, as explained in length, or the value of the <code>length</code> field in the form. Errors would arise from a reasonable assignment statement such as:</p> <p><code>wlHttp.FormData[\u201clength\u201d] = 7</code></p> <p>This is equivalent to the illegal assignment statement:</p> <p><code>wlHttp.FormData.length = 7</code></p> <p>WebLOAD therefore uses <code>wlSet()</code> to set field data whenever the name could lead to potential ambiguity. When recording scripts with the AAT, WebLOAD recognizes potential ambiguities and inserts the appropriate <code>wlSet()</code> statements automatically. In this case:</p> <p><code>wlHttp.FormData.wlSet(\u201clength\u201d, 7)</code></p> <p>See also</p> <ul> <li>Collections </li> <li>Data (see Data (property) )</li> <li>DataFile (see DataFile (property) )</li> <li>FormData (see FormData (property) )</li> <li>Header (see Header (property) )</li> <li>wlHttp (see wlHttp (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlsource-property","title":"wlSource (property)","text":"<p>Property of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>The complete HTML source code of the frame (read-only string).</p> <p>You can use the HTML source to search for any desired information in an HTML page. For information on JavaScript searching capabilities, see Regular Expressions in the Netscape JavaScript Guide, which is supplied with the WebLOAD software.</p> <p>Syntax </p> <p><code>document.wlSource</code></p> <p>Comment</p> <p>To use the HTML source, you must enable the SaveSource (see SaveSource (property) ) property of the <code>wlGlobals</code>, <code>wlLocals</code>, or <code>wlHttp</code> object. To save the source in a file, use the Outfile property (see Outfile (property) ).</p> <p>See also</p> <ul> <li>Outfile (see Outfile (property) )</li> <li>SaveSource (see SaveSource (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlstatusline-property","title":"wlStatusLine (property)","text":"<p>Property of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>The status line of the HTTP header (read-only string, for example \u201cOK\u201d).</p> <p>Syntax</p> <p><code>document.wlHeaders[\u201cstatus line\u201d]</code></p>"},{"location":"javascript/actions_objects_functions/#wlstatusnumber-property","title":"wlStatusNumber (property)","text":"<p>Property of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>The HTTP status value, which WebLOAD retrieves from the HTTP header (read-only integer, for example 200).</p> <p>Syntax</p> <p><code>document.wlStatusNumber</code></p>"},{"location":"javascript/actions_objects_functions/#wlstringparam-parameterization","title":"wlStringParam() (parameterization)","text":"<p>Description</p> <p>Define a random string parameter.</p> <p>Syntax</p> <p><code>&lt;varName&gt; = wlStringParam(minLength, maxLength, usage)</code></p> <p>Parameters</p> Parameter Name Description minLength The minimum string length (number of characters), maxLength The maximum string length (number of  characters). usage Defines when the parameter  is updated, meaning when a new value will be calculated. Possible values are:<p></p>- <code>wlParamUpdateRound</code>. The parameters value  will be calculated once for each round. Using the same parameter again in the same round will result with the same value.  <p></p>- <code>wlParamUpdateOnce</code>. The parameter\u2019s value  will be calculated once per each Virtual Client (in its InitClient function). All usage of  the parameter by that Virtual Client will always result in the same value.  <p></p>- <code>wlParamUpdateUse</code>. The parameter\u2019s value  will be calculated each time it is used. <p>Example</p> <pre><code>function InitClient()\n{\nNewParam1 = wlStringParam(2, 7, wlParamUpdateUse);\n}\n\n/***** WLIDE - Message - ID:3 *****/ \nInfoMessage(NewParam1.getValue())\n\n// END WLIDE\n</code></pre>"},{"location":"javascript/actions_objects_functions/#wlsystemglobal-object","title":"wlSystemGlobal (object)","text":"<p>Description</p> <p>WebLOAD provides a global object called <code>wlSystemGlobal</code>. The <code>wlSystemGlobal</code> object enables sharing of global variables and values between all elements of a test session, across multiple scripts running on multiple Load Generators. (Compare to the wlGeneratorGlobal (see wlGeneratorGlobal (object) ), which enables sharing of global variables and values between all threads of a single Load Generator, and to the wlGlobals (see wlGlobals (object) ), which enables sharing of global variables and values between all threads of a single script, running on a single Load Generator.)</p> <p>Globally shared variables are useful when tracking a value or maintaining a count across multiple threads or platforms. For example, you may include these shared values in the messages sent to the Log window during a test session.</p> <p>WebLOAD creates exactly one <code>wlSystemGlobal</code> object per a test session. Use the <code>wlSystemGlobal</code> object methods to create and access variable values that you wish to share system-wide. Edit <code>wlSystemGlobal</code> object properties and methods through the IntelliSense editor, described in Using the IntelliSense JavaScript Editor . While global variables may be accessed anywhere in your script, be sure to initially declare <code>wlSystemGlobal</code> values in the <code>InitAgenda()</code> function only. Do not define new values within the main body of a script, for they will not be shared correctly by all threads.</p> <p>Methods</p> <ul> <li>Add() (see Add() (method) )</li> <li>Get() (see Get() (addition method) )</li> <li>Set() (see Set() (addition method) )</li> </ul> <p>Properties</p> <p><code>wlSystemGlobal</code> incorporates a dynamic property set that consists of whatever global variables have been defined, set, and accessed by the user through the <code>wlSystemGlobal</code> method set only.</p> <p>See also</p> <ul> <li>wlGeneratorGlobal (see wlGeneratorGlobal (object) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wltables-object","title":"wlTables (object)","text":"<p>Property of Object</p> <p>TABLE objects on a Web page are accessed through <code>wlTables</code> objects that are grouped into collections of <code>wlTables</code>. The <code>wlTables</code> collection is a property of the following object:</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>Each <code>wlTables</code> object contains the parsed data for an HTML table (<code>&lt;TABLE&gt;</code> tag), and serves as a means of providing access to the cells of the HTML table. Because table data is organized into rows and cells, the <code>wlTables</code> object is also linked to row and <code>cell</code> objects and their properties.</p> <p><code>wlTables</code> objects are grouped together within collections of <code>wlTables</code>. The tables are arranged in the order in which they appear on the HTML page.</p> <p>Syntax</p> <p>To access an individual <code>wlTables</code>\u2019s properties, check the length property of the <code>wlTables</code> collection and use an index number to access the individual <code>wlTables</code> object, with the following syntax:</p> <pre><code>NumberofTableObjects = document.wlTables.length \ndocument.wlTables[index#].&lt;wlTables-property&gt;\n</code></pre> <p>Example</p> <p>Access each <code>wlTables</code>\u2019s properties directly through the index number of that item. For example:</p> <p><code>document.wlTables[0].cols</code></p> <p><code>wlTables</code> objects may also be accessed directly using the table ID. This is illustrated in the id property description.</p> <p>Properties</p> <p>Each <code>wlTables</code> object contains information about the data found in the whole table, organized by rows, columns, and cells. The <code>wlTables</code> object includes the following properties:</p> <ul> <li>cell</li> <li> <p>cols (see cols (property) ) (wlTables property)</p> </li> <li> <p>row (see row (object) ) (wlTables property)</p> </li> </ul> <p>See also</p> <ul> <li>cellIndex</li> <li>Collections </li> <li>InnerHTML (see InnerHTML (property) ) (cell property)</li> <li>InnerText (see InnerText (property) ) (cell property)</li> <li>rowIndex (see rowIndex (property)  (row property)</li> <li>tagName (see tagName (property) ) (cell property)</li> </ul>"},{"location":"javascript/actions_objects_functions/#wltarget-property","title":"wlTarget (property)","text":"<p>Property of Object</p> <ul> <li>wlHttp (see wlHttp (object) )</li> </ul> <p>Description</p> <p>The exact location within the Web page of the frame into which the transaction should be downloaded.</p> <p>Syntax</p> <p><code>wlHttp.wlTarget = \u201cLocationString\u201d</code></p> <p>Comment</p> <p><code>wlTarget</code> uses the WebLOAD shorthand notation, described in the WebLOAD Scripting Guide. For example, assume the expected location is set to #1.#1. Since frame numbering begins with 0, this refers to the second subframe located within the second frame on the Web page. Neither frame has been assigned an optional name value.</p> <p>The <code>wlHttp.wlTarget</code> property of a transaction stores the complete path of the frame, from the root window of the Web page. Compare this to the <code>form.target</code> and <code>link.target</code> properties, which identify the most recent, immediate location of the target frame using the name string or keyword that was assigned to that frame. The last field of the <code>wlHttp.wlTarget</code> string is the target name stored in the <code>form.target</code> and <code>link.target</code> properties.</p>"},{"location":"javascript/actions_objects_functions/#wltimeparam-parameterization","title":"wlTimeParam() (parameterization)","text":"<p>Description</p> <p>Return the current date and/or time according to the format specified in the parameter\u2019s properties</p> <p>Syntax</p> <p><code>&lt;varName&gt; = wlTimeParam(format, offset, usage)</code></p> <p>Parameters</p> Parameter Name Description <code>format</code> Formats are comprised from symbols, prefixed with  the \u2018%\u2019 sign and from textual characters.  The following are the  symbols used to create the date/time formats:<p></p>- c \u2013 complete date time as number  <p></p>- H \u2013 Hours (24 hour clock)  <p></p>- I \u2013 Hours (12 hour clock)  <p></p>- M \u2013 minutes  <p></p>- S \u2013 seconds (S.000 \u2013  seconds with milliseconds)  <p></p>- p \u2013 AM or PM  <p></p>- d \u2013 day in month (number)  <p></p>- m \u2013 month (number)  <p></p>- y \u2013 year (2 digits)  <p></p>- Y \u2013 year (4 digits)  <p></p>- b \u2013 month name (3 letter)  <p></p>- B \u2013 month name (full)<p></p>  The following are the formats available to the  user:  <p></p>- %c  <p></p>- %H:%M:%S  <p></p>- %I:%M:%S %p  <p></p>- %d-%b-%Y  <p></p>- %d/%m/%y  <p></p>- %m/%d/%y  <p></p>- %d/%m/%Y  <p></p>- %m/%d/%Y  <p></p>- %Y-%m-%d %H:%M:%S  <p></p>- %Y-%m-%d %H:%M:%S.000 <code>offset</code> The offset in days and  time. The offset can be used so the parameter will not consider the current  date but another date in the future or in the past.<p></p> A negative value indicates a date/time prior to  current date/time. <code>usage</code> Defines when the parameter  is updated, i.e., when a new value will be calculated.  Possible values are:<p></p>- <code>wlParamUpdateRound</code>. The parameters value  will be calculated once for each round. Using the same parameter again in the  same round will result in the same value.  <p></p>- <code>wlParamUpdateOnce</code>. The parameter\u2019s value  will be calculated once per each Virtual Client (in its InitClient function). Every usage of  the parameter by that Virtual Client  will always result in the same value.  <p></p>- <code>wlParamUpdateUse</code>. The parameter\u2019s value  will be calculated each time it is used. <p>Example</p> <pre><code>function InitClient()\n{\nNewParam1 = wlTimeParam(\"%Y-%m-%d %H:%M:%S\", 1200, \nwlParamUpdateRound);\n}\n/***** WLIDE - Message - ID:3 *****/ \nInfoMessage(NewParam1.getValue())\n\n// END WLIDE\n</code></pre>"},{"location":"javascript/actions_objects_functions/#wlverification-object","title":"wlVerification (object)","text":"<p>Description</p> <p>The <code>wlverification</code> object stores the response validation properties set by the user through the WebLOAD Recorder, including HTML Web page title, text within a Web page, time taken to load a Web page, and size of a Web page (in bytes).</p> <p>Note: Most global configuration property values and user-defined variables should be set through the WebLOAD Recorder. The property descriptions here are intended mainly to explain the lines of code seen in the JavaScript View of the WebLOAD Recorder desktop. Syntax details are also provided for the benefit of users who prefer to manually edit the JavaScript code of their scripts through the IntelliSense editor, described in Using the IntelliSense JavaScript Editor .</p> <p>Properties</p> <p>The <code>wlVerification</code> object includes the following property classes:</p> <ul> <li>Page Time</li> <li>Page Content Length</li> <li>Severity</li> <li>Function</li> <li>Error Message</li> </ul> <p>Methods</p> <ul> <li>Title (function)</li> <li>ContentLength (function)</li> <li>MaxPageTime (function)</li> <li>Text (function)</li> </ul> <p>Syntax</p> <p>Each individual property class includes the syntax specifications that apply to that class.</p> <p>GUI mode</p> <p>The <code>wlVerification</code> property and method descriptions explain how to explicitly set values for these response validations within your JavaScript script files.</p> <p>The recommended way to set response validation values is through the WebLOAD Recorder, using the Response Validation dialog box accessed from the Home tab in the WebLOAD Recorder desktop ribbon. The dialog box provide a means of defining and setting response validation values with ease, simplicity, and clarity.</p> <p>See also</p> <ul> <li>PageContentLength (see PageContentLength (property) )</li> <li>PageTime (see PageTime (property) )</li> <li>Severity (see Severity (property) )</li> <li>Function (see Function (property) )</li> <li>ErrorMessage (see ErrorMessage (property) )</li> <li>Title (see Title (function) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlversion-property","title":"wlVersion (property)","text":"<p>Property of Objects</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>The HTTP protocol version, which WebLOAD retrieves from the HTTP header (read- only string, for example \u201c1.1\u201d).</p> <p>Example</p> <p><code>currentVersionNumber = document.wlVersion</code></p>"},{"location":"javascript/actions_objects_functions/#wlxmldocument-constructor","title":"WLXmlDocument() (constructor)","text":"<p>Method of Object</p> <ul> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>Call <code>WLXmlDocument()</code> without any parameters to create a new, blank XML DOM object. The new object may be filled later with any new data you prefer. If the DTD section of your XML document includes any external references, use this form of the <code>WLXmlDocument()</code> constructor to create new XML DOM objects. You may add nodes and post the new XML data to a website as described in the WebLOAD Scripting Guide.</p> <p>Call <code>WLXmlDocument()</code> with a string parameter to create new XML DOM objects from an XML string that includes a completely self-contained DTD section with no external references.</p> <p>Syntax</p> <p><code>new WLXmlDocument([xmlString])</code></p> <p>Parameters</p> Parameter Name Description <code>[xmlString]</code> Optional string parameter that contains a complete  set of XML document data. <p>Return Value</p> <p>Returns a new XML DOM object. If the constructor was called with no parameters, the new object will be empty. If the constructor was called with an XML string, the new object will contain an XML DOM hierarchy based on the XML data found in the parameter string.</p> <p>Example</p> <p><code>NewBlankXMLObj = new WLXmlDocument()</code></p> <p>-Or-</p> <p><code>NewXMLObj = new WLXmlDocument(xmlStr)</code></p> <p>Comment</p> <p>Objects created by the <code>WLXmlDocument()</code> constructor provide access to the XML DOM Document Interface. They do not expose the HTML property set, (<code>id</code>, <code>innerHTML</code>, and <code>src</code>), as those properties have no meaning for XML DOM objects created this way.</p> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) )</li> <li>load() and loadXML() Method Comparison </li> <li>loadXML() (see loadXML() (method) )</li> <li>src (see src (property) )</li> <li>XMLDocument (see XMLDocument (property) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#wlxmls-object","title":"wlXmls (object)","text":"<p>Property of Object</p> <ul> <li>document (see document (object) )</li> </ul> <p>Description</p> <p>WebLOAD has extended the standard IE Browser DOM <code>document</code> object with the <code>wlXmls</code> collection of XML DOM objects, providing full access to XML structures. Using XML DOM objects, WebLOAD scripts are able to both access XML site information, and generate new XML data to send back to the server for processing, taking advantage of all the additional benefits that XML provides.</p> <p>Both WebLOAD and the IE Browser use the MSXML parser to create XML DOM objects. Since WebLOAD XML DOM objects and Browser XML DOM objects are created by the same MSXML parser, the XML DOM objects that are produced for both WebLOAD and the IE Browser are identical.</p> <p>When working through the IE Browser, XML DOM objects are found in the all collection. When working through WebLOAD, XML DOM objects are found in the <code>wlXmls</code> collection. Since a WebLOAD XML DOM object is identical to an IE Browser XML DOM object, the WebLOAD XML DOM uses the same Document Interface (programming methods and properties) found in the IE Browser XML DOM.</p> <p>This section describes the <code>wlXmls</code> collection and the properties and methods used most often when working with WebLOAD XML DOM objects. For an explanation of the XML DOM, see the WebLOAD Scripting Guide. For a complete list of the XML DOM properties and methods supported by WebLOAD, see WebLOAD-supported XML DOM Interfaces .</p> <p>Note: WebLOAD supports a new method for parsing and manipulating XML data. For more information see XML Parser Object </p> <p>Syntax</p> <p>XML DOM objects are grouped together within <code>wlXmls</code> collections. The XML DOM objects are arranged in the order in which they appear on the HTML page.</p> <p>To access an individual XML DOM object\u2019s data and Document Interface, check the length property of the <code>wlXmls</code> collection and use an index number to access the individual XML DOM object.</p> <p>Access the HTML properties for each XML DOM object directly using the following syntax:</p> <p><code>document.wlXmls[#].&lt;html-DOM property&gt;</code></p> <p>Access the XML DOM Document Interface for each document element directly using the following syntax:</p> <p><code>document.wlXmls[#].XMLDocument.documentElement.&lt;property&gt;</code></p> <p>Example</p> <p>To find out how many XML DOM objects are contained within a document, check the value of:</p> <p><code>document.wlXmls.length</code> Access the HTML property src as follows:</p> <p><code>document.wlXmls[0].src</code></p> <p>Access the XML DOM document interface as follows:</p> <p><code>document.wlXmls[0].XMLDocument.documentElement.nodeName</code></p> <p>XML DOM objects may also be accessed directly using the XML ID. For example, if the first XML object on a page is assigned the ID tag myXmlDoc, you could access the object using any of the following:</p> <p><code>MyBookstore = document.wlXmls[0]</code></p> <p>-Or-</p> <p><code>MyBookstore = document.wlXmls.myXmlDoc</code></p> <p>-Or-</p> <p><code>MyBookstore = document.wlXmls[\u201cmyXmlDoc\u201d]</code></p> <p>The following example illustrates HTML property usage. Assume you are working with a Web Bookstore site that includes the following inventory database code fragment:</p> <pre><code>&lt;xml ID=\"xmlBookSite\"&gt;\n&lt;?xml version=\"1.0\u201d?&gt;\n&lt;!-- Bookstore inventory database --&gt;\n  &lt;bookstore&gt;\n    JavaScript Reference Guide\n    &lt;author&gt;Mark Twain&lt;/author&gt;\n    &lt;title&gt;Tom Sawyer&lt;/title&gt;\n    &lt;price&gt;$11.00 &lt;/price&gt;\n  &lt;/book&gt;\n  JavaScript Reference Guide\n    &lt;author&gt;Oscar Wilde &lt;/author&gt;\n    &lt;title&gt;The Giant And His Garden&lt;/title&gt;\n    &lt;price&gt;$8.00 &lt;/price&gt;\n  &lt;/book&gt;\n &lt;/bookstore&gt;\n&lt;/xml&gt;\n</code></pre> <p>When accessing this website, your script may use the standard HTML properties id and innerHTML to print out text strings showing the information found within the XML tags, as follows:</p> <pre><code>var XMLBookstoreDoc = document.wlXmls[0] \nInfoMessage(\u201cID = \u201c + XMLBookstoreDoc.id) \nInfoMessage(\u201cHTML text = \u201c + XMLBookstoreDoc.innerHTML)\n</code></pre> <p>Running this script produces the following output:</p> <pre><code>ID = xmlBookSite`\nHTML text = &lt;?xml version=\"1.0\u201d?&gt;`\n\u2026etc.\n</code></pre> <p>Methods and Properties</p> <p>WebLOAD supports all standard W3C XML DOM properties and methods, listed in WebLOAD-supported XML DOM Interfaces . These HTML properties and methods are accessed via the XMLDocument (see XMLDocument (property) ) property. In addition, if the object is constructed from a Data Island, the id (see id (property) ), InnerHTML (see InnerHTML (property) ), and src (see src (property) ) HTML properties are exposed. Each property is described in its own section.</p> <ul> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) </li> <li>loadXML() (see loadXML() (method) </li> <li>src (see src (property) </li> <li>WLXmlDocument() (see WLXmlDocument() (constructor) ))</li> <li>XMLDocument (see XMLDocument (property) )</li> </ul> <p>See also</p> <ul> <li>Collections </li> <li>load() and loadXML() Method Comparison </li> <li>XML Parser Object </li> </ul>"},{"location":"javascript/actions_objects_functions/#write-method","title":"Write() (method)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile (see wlOutputFile (object) ))</li> </ul> <p>Description</p> <p>This method writes a string to the output file.</p> <p>Parameters</p> Parameter Name Description string The text string you wish added to the  output. <p>Syntax </p> <p><code>Write(string)</code> </p> <p>Example</p> <pre><code>MyFileObj = new wlOutputFile(filename)\n\u2026\nMyFileObj.Write(\u201cHappy Birthday\u201d)\n</code></pre> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile() (see wlOutputFile() (constructor) )</li> <li>Writeln() (see Writeln() (method) )</li> </ul>"},{"location":"javascript/actions_objects_functions/#writeln-method","title":"Writeln() (method)","text":"<p>Method of Object</p> <ul> <li>wlOutputFile (see wlOutputFile (object) )</li> </ul> <p>Description</p> <p>This method writes a string followed by a newline character to the output file.</p> <p>Syntax </p> <p><code>Writeln(string)</code> </p> <p>Parameters</p> Parameter Name Description string The text string you wish added to the  output. <p>Example</p> <pre><code>MyFileObj = new wlOutputFile(filename)\n\u2026\nMyFileObj.Writeln(\u201cHappy Birthday\u201d)\n</code></pre> <p>See also</p> <ul> <li>Close() (see Close() (function) )</li> <li>CopyFile() (see CopyFile() (function) )</li> <li>Delete() (see Delete() (cookie method) )</li> <li>File Management Functions </li> <li>GetLine() (see GetLine() (function) )</li> <li>IncludeFile() (see IncludeFile() (function) )</li> <li>Open() (see Open() (function) )</li> <li>Reset() (see Reset() (method) )</li> <li>Using the IntelliSense JavaScript Editor </li> <li>wlOutputFile() (see wlOutputFile() (constructor) )</li> <li>Write() (see Write() (method) )</li> <li></li> </ul>"},{"location":"javascript/actions_objects_functions/#xmldocument-property","title":"XMLDocument (property)","text":"<p>Method of Object</p> <ul> <li>wlXmls (see wlXmls (object) )</li> </ul> <p>Description</p> <p>The <code>XMLDocument</code> property represents the actual XML DOM object. Through <code>XMLDocument</code> you are able to access all the standard XML DOM properties and methods listed in WebLOAD-Supported XML DOM Interfaces .</p> <p>Note: WebLOAD supports a new method for parsing and manipulating XML data. For more information see XML Parser Object </p> <p>Syntax</p> <p>Use the following syntax:</p> <p><code>document.wlXmls[#].XMLDocument.documentElement.&lt;property&gt;</code> <code>XMLDocument</code> is also understood by default. You may access the XML DOM properties and methods without including XMLDocument in the object reference. For example:</p> <p><code>document.wlXmls[0].documentElement.&lt;property&gt;</code></p> <p>However, including <code>XMLDocument</code> is a good programming practice, to emphasize the fact that you are dealing directly with an XML DOM object and not a Data Island.</p> <p>Example </p> <p><code>document.wlXmls[0].XMLDocument.documentElement.nodeName</code></p> <p>See also</p> <ul> <li>Collections </li> <li>id (see id (property) )</li> <li>InnerHTML (see InnerHTML (property) )</li> <li>load() (see load() (method) )</li> <li>load() and loadXML() Method Comparison </li> <li>loadXML() (see loadXML() (method) )</li> <li>src (see src (property) )</li> <li>XML Parser Object </li> </ul>"},{"location":"javascript/actions_objects_functions/#xmlparserobject-object","title":"XMLParserObject (object)","text":"<p>Description</p> <p>WebLOAD provides an embedded, third-party XML parser object to improve the multi-platform support for XML parsing within the WebLOAD environment. The XML parser object can be used instead of MSXML and Java XML parsing, resulting in lower memory consumption and increased performance during load testing.</p> <p>The XML parser object can be used to reference any element in an XML document. For example, you can use the XML parser object to generate an Excel file containing the desired details of a specified element.</p> <p>WebLOAD uses the Open Source Xerces XML parser (see http://xml.apache.org/xerces-c/).</p> <p>The <code>parse()</code> method, not exposed by the original XML parser, is exposed by WebLOAD. This method is identical to the<code>parseURI()</code> method, except that it receives an XML string instead of a URI.</p> <p>For more information on the XMLParserObject see XML Parser Object .</p> <p>Syntax</p> <p>The XML parser object is instanced as follows:</p> <p><code>xmlObject = new XMLParserObject();</code></p> <p>Example</p> <p>For a detailed example of the implementation of the XML parser object, refer to Example </p> <p>Methods and Properties</p> <ul> <li>For a list of the XMLParserObject\u2019s methods, see Methods .</li> <li>For a list of the XMLParserObject\u2019s properties, see Properties .</li> </ul>"},{"location":"javascript/appendix_a/","title":"Appendix A:","text":""},{"location":"javascript/appendix_a/#webload-supported-ssl-protocol-versions","title":"WebLOAD-supported SSL Protocol Versions","text":""},{"location":"javascript/appendix_a/#ssl-handshake-combinations","title":"SSL Handshake Combinations","text":"<p>WebLOAD supports a variety of SSL versions, ranging from the earlier SSL versions and up to the most current TLS versions. The following table illustrates the results of different handshake combinations, depending on the Client and Server SSL version:</p> Client  setting Server  Setting Undetermined 3.0W/2.0Hello 3.0 Only 2.0 Only Undetermined 3.0 3.0 (a) 2.0 3.0W/2.0Hello 3.0 3.0 (a) (b) 3.0 Only 3.0 3.0 3.0 (c) 2.0 Only 3.0 3.0 3.0 2.0 <p>Each entry specifies the negotiated protocol version. In the noted instances, negotiation is impossible for the following reasons:</p> <p>(a)  These protocols all support SSL 3.0, but the SSL 3.0 Only setting on the server prevents the SSL 2.0 Hello message sent by the client from being recognized.</p> <p>(b)  The SSL 2.0 Hello message sent by the client is recognized, but the SSL 2.0 Only setting on the server sends a 2.0 response. The client rejects this response as it is set to communicate using only SSL 3.0.</p> <p>(c)  The SSL 3.0 Hello message sent by the client will not be understood by the SSL 2.0 only server.</p> <p>Commercial browsers and servers generally act as if they are set for SSL_Version_Undetermined, unless SSL 2.0 is disabled, in which case they act as if they are set for SSL_Version_3_0_With_2_0_Hello.</p>"},{"location":"javascript/appendix_a/#ssl-ciphers-complete-list","title":"SSL Ciphers \u2013 Complete List","text":"<p>WebLOAD\u2019s SSL support is based on the OpenSSL open source project (http://www.openssl.org/).The Table contains a complete list of ciphers supported by WebLOAD using OpenSSL. Abbreviations used in this list are explained in the Table.</p> <p>For information on how WebLOAD provides full SSL/TLS 1.0/TLS 1.2 protocol support through the Cipher Command Suite, see SSL Cipher Command Suite </p> <p>The following table lists all ciphers supported by WebLOAD.</p> Name Mode Key  Ex. Auth. Encryption method (key length) Message digest algorithm Export TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA TLS1.2 SRP SHA AES(256)-CBC SHA TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA TLS1.2 SRP SHA AES(256)-CBC SHA TLS1_CK_RSA_WITH_AES_128_SHA256 TLS1.2 RSA RSA AES(128) SHA256 TLS1_CK_RSA_WITH_AES_256_SHA256 TLS1.2 RSA RSA AES(256) SHA256 TLS1_CK_DH_DSS_WITH_AES_128_SHA256 TLS1.2 DH DDS AES(128) SHA256 TLS1_CK_DH_RSA_WITH_AES_128_SHA256 TLS1.2 DH RSA AES(128) SHA256 TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 TLS1.2 DHE DDS AES(128) SHA256 TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 TLS1.2 DHE RSA AES(128) SHA256 TLS1_CK_DH_DSS_WITH_AES_256_SHA256 TLS1.2 DH DDS AES(256) SHA256 TLS1_CK_DH_RSA_WITH_AES_256_SHA256 TLS1.2 DH RSA AES(256) SHA256 TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 TLS1.2 DHE DDS AES(256) SHA256 TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 TLS1.2 DHE RSA AES(256) SHA256 TLS1_CK_ADH_WITH_AES_128_SHA256 TLS1.2 ADH None AES(128) SHA256 TLS1_CK_ADH_WITH_AES_256_SHA256 TLS1.2 ADH None AES(256) SHA256 TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 TLS1.2 RSA RSA AES(128)-GCM SHA256 TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 TLS1.2 RSA RSA AES(256) -GCM SHA384 TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS1.2 DH RSA AES(128) -GCM SHA256 TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 TLS1.2 DH RSA AES(256) -GCM SHA384 TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 TLS1.2 DH RSA AES(128) -GCM SHA256 TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 TLS1.2 DH RSA AES(256-GCM SHA384 TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 TLS1.2 DHE DDS AES(128) -GCM SHA256 TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 TLS1.2 DHE DDS AES(256) -GCM SHA384 TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 TLS1.2 DH DDS AES(128) -GCM SHA256 TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 TLS1.2 DH DDS AES(256) -GCM SHA384 TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 TLS1.2 ADH None AES(128) -GCM SHA256 TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 TLS1.2 ADH None AES(256) -GCM SHA384 AECDH-DES-CBC3-SHA TLS1 ECDH None 3DES(168) SHA1 ECDHE-RSA-DES-CBC3-SHA TLS1 ECDH RSA 3DES(168) SHA1 ECDH-RSA-DES-CBC3-SHA TLS1 ECDH RSA 3DES(168) SHA1 ECDHE-ECDSA-DES-CBC3-SHA TLS1 ECDH ECDSA 3DES(168) SHA1 ECDH-ECDSA-DES-CBC3-SHA TLS1 ECDH ECDSA 3DES(168) SHA1 ADH-DES-CBC3-SHA SSLv3 DH None 3DES(168) SHA1 EDH-RSA-DES-CBC3-SHA SSLv3 DH RSA 3DES(168) SHA1 EDH-DSS-DES-CBC3-SHA SSLv3 DH DSS 3DES(168) SHA1 DH-RSA-DES-CBC3-SHA SSLv3 DH/RSA DH 3DES(168) SHA1 DH-DSS-DES-CBC3-SHA SSLv3 DH/DSS DH 3DES(168) SHA1 DES-CBC3-SHA\u2013SSL3 SSLv3 RSA RSA 3DES(168) SHA1 DES-CBC3-MD5 SSLv2 RSA RSA 3DES(168) MD5 DES-CBC3-SHA\u2013SSL2 SSLv2 RSA RSA 3DES(192) SHA1 AECDH-AES128-SHA TLS1 ECDH None AES(128) SHA1 ECDHE-RSA-AES128-SHA TLS1 ECDH RSA AES(128) SHA1 ECDH-RSA-AES128-SHA TLS1 ECDH RSA AES(128) SHA1 ECDHE-ECDSA-AES128-SHA TLS1 ECDH ECDSA AES(128) SHA1 ECDH-ECDSA-AES128-SHA TLS1 ECDH ECDSA AES(128) SHA1 ADH-AES128-SHA TLS1 DH None AES(128) SHA1 DHE-RSA-AES128-SHA TLS1 DH RSA AES(128) SHA1 DHE-DSS-AES128-SHA TLS1 DH DSS AES(128) SHA1 DH-RSA-AES128-SHA TLS1 DH/RSA DH AES(128) SHA1 DH-DSS-AES128-SHA TLS1 DH/DSS DH AES(128) SHA1 AES128-SHA TLS1 RSA RSA AES(128) SHA1 AECDH-AES256-SHA TLS1 ECDH None AES(256) SHA1 ECDHE-RSA-AES256-SHA TLS1 ECDH RSA AES(256) SHA1 ECDH-RSA-AES256-SHA TLS1 ECDH RSA AES(256) SHA1 ECDHE-ECDSA-AES256-SHA TLS1 ECDH ECDSA AES(256) SHA1 ECDH-ECDSA-AES256-SHA TLS1 ECDH ECDSA AES(256) SHA1 ADH-AES256-SHA TLS1 DH None AES(256) SHA1 DHE-RSA-AES256-SHA TLS1 DH RSA AES(256) SHA1 DHE-DSS-AES256-SHA TLS1 DH DSS AES(256) SHA1 DH-RSA-AES256-SHA TLS1 DH/RSA DH AES(256) SHA1 DH-DSS-AES256-SHA TLS1 DH/DSS DH AES(256) SHA1 AES256-SHA TLS1 RSA RSA AES(256) SHA1 EXP-ADH-DES-CBC-SHA SSLv3 DH(512) None DES(40) SHA1 \u00fe EXP-EDH-RSA-DES-CBC-SHA SSLv3 DH(512) RSA DES(40) SHA1 \u00fe EXP-EDH-DSS-DES-CBC-SHA SSLv3 DH(512) DSS DES(40) SHA1 \u00fe EXP-DH-RSA-DES-CBC-SHA SSLv3 DH/RSA DH DES(40) SHA1 \u00fe EXP-DH-DSS-DES-CBC-SHA SSLv3 DH/DSS DH DES(40) SHA1 \u00fe EXP-DES-CBC-SHA SSLv3 RSA(512) RSA DES(40) SHA1 \u00fe EXP1024-DHE-DSS-DES-CBC-SHA TLS1 DH(1024) DSS DES(56) SHA1 \u00fe EXP1024-DES-CBC-SHA TLS1 RSA(1024) RSA DES(56) SHA1 \u00fe ADH-DES-CBC-SHA SSLv3 DH None DES(56) SHA1 EDH-RSA-DES-CBC-SHA SSLv3 DH RSA DES(56) SHA1 EDH-DSS-DES-CBC-SHA SSLv3 DH DSS DES(56) SHA1 DH-RSA-DES-CBC-SHA SSLv3 DH/RSA DH DES(56) SHA1 DH-DSS-DES-CBC-SHA SSLv3 DH/DSS DH DES(56) SHA1 DES-CBC-SHA\u2013SSL3 SSLv3 RSA RSA DES(56) SHA1 DES-CBC-SHA\u2013SSL2 SSLv2 RSA RSA DES(64) SHA1 DES-CBC-MD5 SSLv2 RSA RSA DES(56) MD5 IDEA-CBC-SHA SSLv3 RSA RSA IDEA(128) SHA1 IDEA-CBC-MD5 SSLv2 RSA RSA IDEA(128) MD5 NULL-MD5\u2013SSL3 SSLv3 RSA RSA None MD5 NULL-MD5\u2013SSL2 SSLv2 RSA RSA None MD5 RC2-CBC-MD5 SSLv2 RSA RSA RC2(128) MD5 EXP-RC2-CBC-MD5 SSLv3 RSA(512) RSA RC2(40) MD5 \u00fe EXP-RC2-CBC-MD5 SSLv2 RSA(512) RSA RC2(40) MD5 \u00fe EXP1024-RC2-CBC-MD5 TLS1 RSA(1024) RSA RC2(56) MD5 \u00fe AECDH-RC4-SHA TLS1 ECDH None RC4(128) SHA1 ECDHE-RSA-RC4-SHA TLS1 ECDH RSA RC4(128) SHA1 ECDH-RSA-RC4-SHA TLS1 ECDH RSA RC4(128) SHA1 ECDHE-ECDSA-RC4-SHA TLS1 ECDH ECDSA RC4(128) SHA1 ECDH-ECDSA-RC4-SHA TLS1 ECDH ECDSA RC4(128) SHA1 DHE-DSS-RC4-SHA TLS1 DH DSS RC4(128) SHA1 ADH-RC4-MD5 SSLv3 DH None RC4(128) MD5 RC4-SHA SSLv3 RSA RSA RC4(128) SHA1 RC4-MD5\u2013SSL3 SSLv3 RSA RSA RC4(128) MD5 RC4-MD5\u2013SSL2 SSLv2 RSA RSA RC4(128) MD5 RC4-MD5 SSLv2 RSA RSA RC4(128) MD5 EXP-ADH-RC4-MD5 SSLv3 DH(512) None RC4(40) MD5 \u00fe EXP-RC4-MD5 SSLv3 RSA(512) RSA RC4(40) MD5 \u00fe EXP-RC4-MD5 SSLv2 RSA(512) RSA RC4(40) MD5 \u00fe EXP1024-DHE-DSS-RC4-SHA TLS1 DH(1024) DSS RC4(56) SHA1 \u00fe EXP1024-RC4-SHA TLS1 RSA(1024) RSA RC4(56) SHA1 \u00fe EXP1024-RC4-MD5 TLS1 RSA(1024) RSA RC4(56) MD5 \u00fe RC4-64-MD5 SSLv2 RSA RSA RC4(64) MD5 KRB5\u2013DES\u2013CBC\u2013SHA SSLv3 KRB5 KRB5 DES(64) SHA1 KRB5-DES-CBC3-SHA SSLv3 KRB5 KRB5 DES(192) SHA1 KRB5-RC4-SHA SSLv3 KRB5 KRB5 RC4(128) SHA1 KRB5-IDEA-CBC-SHA SSLv3 KRB5 KRB5 IDEA(128) SHA1 KRB5-DES-CBC-MD5 SSLv3 KRB5 KRB5 DES(64) MD5 KRB5-DES-CBC3-MD5 SSLv3 KRB5 KRB5 DES(192) MD5 KRB5-RC4-MD5 SSLv3 KRB5 KRB5 RC4(128) MD5 KRB5-IDEA-CBC-MD5 SSLv3 KRB5 KRB5 IDEA(128) MD5 EXP-KRB5-DES-CBC-SHA SSLv3 KRB5 KRB5 DES(40) SHA1 \u00fe EXP-KRB5-RC2-CBC-SHA SSLv3 KRB5 KRB5 RC2(40) SHA1 \u00fe EXP-KRB5-RC4-SHA SSLv3 KRB5 KRB5 RC4(40) SHA1 \u00fe EXP-KRB5-DES-CBC-MD5 SSLv3 KRB5 KRB5 DES(40) MD5 \u00fe EXP-KRB5-RC2-CBC-MD5 SSLv3 KRB5 KRB5 RC2(40) MD5 \u00fe EXP-KRB5-RC4-MD5 SSLv3 KRB5 KRB5 RC4(40) MD5 <p> </p> <p>The following table contains cipher abbreviations.</p> Abbreviation Description 3DES Triple Data Encryption  Standard. 3DES is a mode of the DES encryption algorithm that encrypts data  three times. ADH Anonymous Diffie Hellman:  The base Diffie-Hellman algorithm is used, but with no authentication. AES Advanced Encryption Standard. CBC Cipher Block Chaining encryption mode. DES Data Encryption Standard (DES) is a cipher (a  method for encrypting information). DH Diffie-Hellman key  exchange is a cryptographic protocol that enables two parties that have no  prior knowledge of each other to jointly establish a shared secret key over  an insecure communications channel. This key can then be used to encrypt  subsequent communications using a symmetric key cipher. DHE Ephemeral Diffie-Hellman  key exchange that creates ephemeral (one- time) secret keys. This is possibly  the most secure of the three Diffie- Hellman options because it results in a  temporary, authenticated key. DSS Digital Signature Standard. DSS is a United States  Federal Government standard for digital signatures. ECDH Elliptic Curve  Diffie-Hellman is a key agreement protocol that enables two parties to  establish a shared secret key over an insecure channel. This key can then be  used to encrypt subsequent communications using a symmetric key cipher. ECDH  is a variant of the Diffie-Hellman protocol using elliptic curve  cryptography. ECDSA Elliptic Curve Digital Signature Algorithm. Fortezza Fortezza is an information security system  developed by the United States Federal Government. Fortezza PC Card security  tokens contain an NSA- approved security microprocessor called Capstone  (MYK-80) that implements the Skipjack encryption algorithm. GCM Galois/Counter Mode for  symmetric key cryptographic block ciphers. It combines the well-known counter  mode of encryption with the new Galois mode of authentication. IDEA International Data Encryption Algorithm  (IDEA). IDEA is a block cipher. MD5 Message-Digest algorithm 5. RC2 Block cipher with a variable size key. RC4 Software stream cipher (also known as ARC4  or ARCFOUR). RSA An algorithm for public-key encryption. SHA1 Secure Hash Algorithm 1. SRP Secure Remote Password, a  cryptographically strong network authentication mechanism"},{"location":"javascript/appendix_b/","title":"WebLOAD-supported XML DOM Interfaces","text":"<p>WebLOAD supports the following XML DOM Document Interfaces:</p> <ul> <li> <p>XML Document Interface</p> </li> <li> <p>Node Interface</p> </li> <li> <p>Node List Interface</p> </li> <li> <p>NamedNodeMap Interface</p> </li> <li> <p>ParseError Interface</p> </li> <li> <p>Implementation Interface</p> </li> <li> <p>XML Parser Interface</p> </li> </ul> <p>The tables in this appendix list the properties and methods of the interfaces supported by WebLOAD.</p>"},{"location":"javascript/appendix_b/#xml-document-interface-properties","title":"XML Document Interface Properties","text":"Property Description doctype A read-only property that  gets the node for the DTD specified for the document. If no DTD was  specified, null is returned. documentElement A read/write property that  gets/sets the root node of the document. implementation A read-only property that  returns the implementation interface for this document. parseError A read-only property that  provides an object that summarizes the last parsing error encountered. preserveWhitespace A read-write property that informs the  parser whether the default mode of processing is to preserve whitespace or  not. The default value of this property is false. readyState A read-only property  indicating the status of instantiating the XML processor and document  download. The value of the  readyState property is summarized in the table. resolveExternals A read-write property that informs the parser that  resolvable namespaces (a namespaces URI that begin with an \u201cx- schema:\u201d prefix), DTD external  subsets, and external entity references should be resolved at parse time. url A read-only property that returns the  canonicalized URL for the XML document specified in the last call to load(). validateOnParse A read/write property that  turns validation on at parse time if the value of bool is true, off if validate is false."},{"location":"javascript/appendix_b/#xml-document-interface-methods","title":"XML Document Interface Methods","text":"Method Description abort() Aborts an asynchronous download in  progress. createAttribute(name) Creates a node of type ATTRIBUTE with the  name supplied. CreateCDATASection  (data) Creates a node of type CDATA_SECTION with  nodeValue set to data. createComment(data) Creates a node of type  COMMENT with nodeValue set to data. createDocumentFragment Creates a node of type  DOCUMENT_FRAGMENT in the context of the current document. createElement(tagName) Creates a node of type ELEMENT with the  nodeName of tagName. createEntityReference(name) Creates a node of type  ENTITY_REFERENCE where name is the name of the entity referenced. CreateNode(type, name, namespaceURI) Creates a node of the type  specified in the context of the current document. Allows nodes to be created  as a specified namespace. CreateProcessing  Instruction (target, data) Creates a node of type  PROCESSING_INSTRUCTION with the target specified and nodeValue set to data. createTextNode(data) Creates a node of type TEXT with nodeValue  set to data. GetElementsByTagName  (tagname) Returns a collection of  all descendent Element nodes with a given tagName. load(url) Loads an XML document from  the location specified by the url. If the url cannot be resolved or accessed or does not  reference an XML document, the documentElement is set to null and an error is  returned. Returns a Boolean. loadXML(xmlstring) Loads an XML document using the supplied string.  xmlstring can be an entire XML document or a  well-formed fragment. If the XML within xmlstring  cannot be loaded, the documentElement is set to null and an error is  returned. NodeFromID(idstring) Returns the node that has an ID attribute  with the value corresponding to idString. Save() Serialize the XML. The  parameter can be a filename, an ASP response, an XML Document, or any other  COM object that supports Istream, IpersistStream, or IpersistStreamInit."},{"location":"javascript/appendix_b/#node-interface-properties","title":"Node Interface Properties","text":"Property Description attributes A read-only property that returns a  NamedNodeMap containing attributes for this node. BaseName A read-only property that  returns the right-hand side of a namespace qualified name. For example, yyy for the element <code>&lt;xxx:yyy&gt;</code>. BaseName must always return a non-empty string. childNode A read-only property that returns a NodeList  containing all children of the node. DataType A read-write property that indicates the node  type. Definition A read-only property whose value is the  node that contains the definition for this node. FirstChild A read-only property that  returns the first child node. If the node has no children, firstChild  returns null. LastChild A read-only property that  returns the last child node. If the node has no children, lastChild  returns null. NextSibling A read-only property that  returns the node immediately following this node in the children of this  node\u2019s parent. Returns null if no such node exists. NamespaceURI A read-only property that  returns the URI for the namespace (the uuu portion of the namespace declaration xmlns:nnn=\u201cuuu\u201d). If there is no namespace on the node that is  defined within the context of the document, \u201c\u201c is returned. NodeName A read-only property indicating the name of  the node. NodeType A read-only property indicating the type of  node. NodeTypeString Returns the node type in string form. NodeTypedValue A read/write property for the typed value of the  node. NodeValue A read/write property for the value of the node. OwnerDocument A property that indicates  the document to which the node belongs or when the node is removed from a  document. parentNode A read-only property that provides a  pointer to the parent. parsed A read-only property that  indicates that this node and all of its descendants have been parsed and  instantiated. This is used in conjunction with asynchronous access to the  document. prefix A read-only property that  returns the prefix specified on the element, attribute of entity reference.  For example, xxx for  the element  <code>&lt;xxx:yyy&gt;</code>. If there is no  prefix specified, \u201c\u201c is returned. previousSibling A read-only property that  returns the node immediately preceding this node in the children of this  node\u2019s parent. Returns null if no such node exists. specified A read-only property  indicating the node was specified directly in the XML source and not implied  by the DTD schema. text A string representing the  content of the element and all descendents. For example \u201ccontent of tag\u201d in  <code>&lt;sometag size=34&gt;</code> content of  tag  <code>&lt;/sometag&gt;</code>. xml A read-only property that  returns the XML representation of the node and all its descendants as a  string."},{"location":"javascript/appendix_b/#node-interface-methods","title":"Node Interface Methods","text":"Method Description appendChild(newChild) A method to append newChild as the last child of this node. cloneNode(deep) A method to create a new  node that is an exact clone (same name, same attributes) as this node. When  deep is false, only the node and attributes without its children are cloned.  When deep is true, the node and all its descendants are cloned. hasChildNodes() A method that indicates  whether the node has children. InsertBefore  (newChild, oldChild) A method to insert newChild  as a child of  this node. oldChild is returned. oldNode must  be a child node of the element, otherwise an error is returned. If newChild  is null, the oldChild  is removed. removeChild(child) A method to remove a childNode from a node. If childNode is not a child of the  node, an error is returned. ReplaceChild  (newChild, oldChild) A method to replace oldChild with newChild as a child of this node. selectNodes(query) Returns a NodeList containing the results of  the query indicated by query, using the current node as the query context. If  no nodes match the query, an empty NodeList is returned. If there is an error in the query  string, the DOM error reporting is used. SelectSingleNode  (query) Returns a single node that  is the first node in the NodeList returned from the query,  using the current node as the query context. If no nodes match the query,  null is returned. If there is an error in the query string, an error is  returned. TransformNode (stylesheetDOMNode) Returns the results of  processing the source DOMNode and its children with the  stylesheet indicated by stylesheetDOMNode. The source defines the  entire context on which the stylesheet operates, so ancestor or id navigation  outside of the scope is not allowed. The stylesheet parameter must be either  a DOM Document node, in which case the document is assumed to be an ASL stylesheet,  or a DOM Node in the xsl namespace, in which case this node is treated as a standalone. TransformNodeToObject  (stylesheet, Object) Sends the results of the transform to the  requested object, either in IStream or a DOM Document."},{"location":"javascript/appendix_b/#node-list-interface","title":"Node List Interface","text":"Property Description length The number of nodes in the  NodeList. The length of the list will change dynamically as children or  attributes are added/deleted from the element. nextNode Returns the next node in  the NodeList based  on the current node. item(index) Returns the node in the NodeList with the specified index. reset() Returns the iterator to the uninstantiated  state; that is, before the first node in the NodeList."},{"location":"javascript/appendix_b/#namednodemap-interface","title":"NamedNodeMap Interface","text":"Property Description length The number of nodes in the  NamedNodeMap. The length of the list will change dynamically  as children or attributes are added/deleted from the element. getNamedItem(name) Returns the node  corresponding to the attribute with name. If name is not an attribute, null  is returned. GetQualifiedItem  (baseName, namespaceURI) Allows the specification  of a qualifying namespaceURI to access a namespace  qualified attribute. It returns the node corresponding to the attribute with baseName  in the  namespace specified by nameSpaceURI. If the qualified name (baseName+nameSpaceURI) is not an attribute,  null is returned. item(index) Returns the node in the NameNodeMap  with the  specified index. If the index is greater than the total number of nodes, null  is returned. If the index is less than zero, null is returned. nextnode() Returns the next node in  the NodeList based  on the current node. RemovedNamedItem (name) Removes the attribute node  corresponding to name and returns the node. If name is not an attribute, null  is returned. RemoveQualifiedItem (basename,  namespaceURI) Removes the nameSpaceURI  qualified  attribute node corresponding to baseName and returns the node. If the qualified name is not  an attribute, null is returned. reset() Returns the iterator to  the uninstantiated state; that is before the first node in the NodeList. SetNamedItem (namedItem) Adds the attribute Node  to the list.  If an attribute already exists with the same name as that specified by nodeName of DOMNode, the attribute is  replaced and the node is returned. Otherwise, Node is returned."},{"location":"javascript/appendix_b/#parseerror-interface","title":"ParseError Interface","text":"Item Description errorcode Returns the error code number in decimal. filepos Returns the absolute file  position where the error occurred. line Returns number of the line containing the  error. linepos Returns the character  position where the error occurred. reason Returns the reason for the error. srcText Returns the full text of the line  containing the error. url Returns the URL of the XML  file containing the error."},{"location":"javascript/appendix_b/#implementation-interface","title":"Implementation Interface","text":"Item Description HasFeature  (feature, version) The method returns true if the specified  version of the parser supports the specified feature. In Level 1, \u201c1.0\u201d is  the only valid version value."},{"location":"javascript/appendix_c/","title":"Appendix C: HTTP Protocol Status Messages","text":"<p>This appendix documents the HTTP protocol status messages that you may see over the course of a typical test session. The status-code definitions provided in this appendix include a list of method(s) that the status code may follow and any meta information required in the response. The material included here is part of the HTTP protocol standard provided by the IETF.</p> <p>The HTTP protocol status messages fall into the following categories:</p> <ul> <li>Informational (1XX)</li> <li>Success (2XX)</li> <li>Redirection (3XX)</li> <li>Client Error (4XX)</li> <li>Server Error (5XX)</li> </ul>"},{"location":"javascript/appendix_c/#informational-1xx","title":"Informational 1XX","text":"<p>The 1XX class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. There are no required headers for this class of status code. Since HTTP/1.0 did not define any 1XX status codes, servers must not send a 1XX response to an HTTP/1.0 client except under experimental conditions.</p> <p>A client must be prepared to accept one or more 1XX status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message. Unexpected 1XX status responses may be ignored by a user agent.</p> <p>Proxies must forward 1XX responses, unless the connection between the proxy and its client has been closed, or unless the proxy itself requested the generation of the 1XX response. (For example, if a proxy adds an \u201cExpect: 100-continue\u201d field when it forwards a request, then it need not forward the corresponding 100 (Continue) response(s).)</p> Message Description 100  Continue The client should continue  with request. This interim response is used to inform the client that the  initial part of the request has been received and has not yet been rejected  by the server. The client should continue by sending the remainder of the request  or, if the request has already been completed, ignore this response. The  server must send a final response after the request has been completed. 101  Switching Protocols The client has requested,  via the Upgrade message header field, a  change in the application protocol being used on this connection. This  response indicates that the server understands and is willing to comply with  the client\u2019s request. The server will switch protocols to those defined by  the response\u2019s Upgrade header field immediately  after the empty line which terminates this 101 response.  The protocol should be  switched only when it is advantageous to do so. For example, switching to a  newer version of HTTP is advantageous over older versions, and switching to a  real-time, synchronous protocol might be advantageous when delivering  resources that use such features."},{"location":"javascript/appendix_c/#success-2xx","title":"Success 2XX","text":"<p>The 2XX class of status code indicates that the client\u2019s request was successfully received, understood, and accepted.</p> Message Description 200  OK The request has succeeded.  The information returned with a 200 response is dependent on  the method used in the request. For example:  GET-an entity corresponding  to the requested resource is sent in the  response  HEAD-the entity-header fields  corresponding to the requested resource are sent in the response without any  message-body  POST-an entity describing or  containing the result of the action  TRACE-an entity containing the  request message as received by the end server 201  _Created The request has been  fulfilled and resulted in a new resource being created. The newly created  resource can be referenced by the URI(s) returned in the entity of the  response, with the most specific URI for the resource identified by the Location header field.  A 201 response should include an entity containing a list of resource  characteristics and location(s) from which the user or user agent can choose  the one most appropriate. The entity format is specified by the media type  identified in the Content-Type header field. The origin  server must create the resource before returning a 201 status code. If the  action cannot be carried out immediately, the server should respond with 202 (Accepted) response instead.  A 201 response may contain an ETag  response  header field indicating the current value of the entity tag for the requested  variant just created. 202  Accepted The request has been accepted for  processing, but the processing has not been completed. The request may or may  not eventually be acted upon, depending on whether or not it is authorized or  disallowed when processing actually takes place. There is no facility for re-  sending a status code from an asynchronous operation such as this.  The 202 response is intentionally non-committal.  Its purpose is to allow a server to accept a request for some other process  (perhaps a batch-oriented process that is only run once per day) without  requiring that the user agent\u2019s connection to the server persist until the  process is completed. The entity returned with this response should include  an indication of the request\u2019s current status and either a pointer to a  status monitor or some estimate of when the user can expect the request to be  fulfilled. 203  Non-Authoritative Information The metainformation being  returned in the entity-header is not the definitive set that is usually  obtained from the origin server. This information has been gathered from a  local or a third-party copy. The set presented may be a subset or superset of  the original version. For example, including local annotation information  about the resource might result in a superset of the metainformation known by  the origin server. Use of this response code is not required and is only  appropriate when the response would otherwise be a generic (perhaps  non-informative) 200 (OK). 204  No Content The server has fulfilled  the request, does not need to return an entity- body, and might want to  return updated metainformation. The response may include new or updated  metainformation in the form of entity-headers, which if present should be  associated with the requested variant.  If the client is a user  agent, it should not change its  document view from that which caused the request to be sent. This  response is primarily intended to allow input for actions to take place  without causing a change to the user agent\u2019s active document view, although  any new or updated metainformation should be applied to the document  currently in the user agent\u2019s active view.  The 204 response must not include a message-body, and thus  is always terminated by the first empty line after the header fields. 205  Reset Content The server has fulfilled the request and the user  agent should reset the document view which  caused the request to be sent. This response is primarily intended to allow  input for actions to take place via user input, followed by a clearing of the  form in which the input is entered so that the user can easily initiate  another input action. The response must not include an entity. 206  Partial Content The server has fulfilled the partial GET request for the resource. The request must have  included a Range header field indicating  the desired range. The request may have also included an If-  Range header field to make the  request conditional.  The response must include one of the following  header fields:   Content-Range header field indicating the range included with  this response.   A multipart/byteranges Content-Type field including  Content-Range fields for each part.  If a Content-Length  header field  is present in the response, its value must match the actual number of OCTETs  transmitted in the message-body.   Date   ETag and/or Content-Location, if the header would have  been sent in a 200 response to the same request   Expires, Cache-Control, and/or Vary, if the field-value might differ from that  sent in any previous response for the same  variant.  If the 206 response is the result of an If-Range request that used a strong cache validator, the  response should not include other entity- headers. If the response is the  result of an If-Range request that used a weak  validator, the response must not include other entity- headers; this prevents  inconsistencies between cached entity-bodies and updated headers. Otherwise,  the response must include all of the entity-headers that would have been  returned with a 200 (OK) response to the same  request.  A cache must not combine a  206 response with other previously cached content if the ETag or Last-Modified headers do not match exactly.  A cache that does not  support Range and  Content-Range headers must not cache 206 (Partial) responses."},{"location":"javascript/appendix_c/#redirection-3xx","title":"Redirection 3XX","text":"<p>The 3XX class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. The action required may be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD. A client should detect infinite redirection loops, since such loops generate network traffic for each redirection.</p> <p>Note: Previous versions of this specification recommended a maximum of five redirections. Content developers should be aware that there might be clients that implement such a fixed limitation.</p> Message Description 300  Multiple Choices The requested resource corresponds to any  one of a set of representations, each with its own specific location.  Agent-driven negotiation information is being provided so that the user (or  user agent) can select a preferred representation and redirect its request to  that location.  Unless it was a HEAD  request, the  response should include an entity containing a list of resource  characteristics and location(s) from which the user or user agent can choose  the one most appropriate. The entity format is specified by the media type  identified in the Content-Type header field. Depending  upon the format and the capabilities of the user agent, the most appropriate  choice may be selected automatically. However, this specification does not  define any standard for such automatic selection.  If the server has a  preferred choice of representation, it should include the specific URI for  that representation in the  Location field. User agents may use the Location field value for automatic redirection. This  response is cacheable unless otherwise indicated. 301  Moved Permanently The requested resource has  been assigned a new permanent URI and any future references to this resource  should use one of the returned URIs. Clients with link editing capabilities  ought to automatically re- link references to the Request-URI  to one or  more of the new references returned by the server, where possible. This  response is cacheable unless otherwise indicated.  The new permanent URI  should be identified by the Location field  in the response. Unless the request method was HEAD, the entity of the  response should contain a short hypertext note with a hyperlink to the new  URI(s).  If the 301 status code is received in response to a request  other than GET or HEAD, the user agent must not  automatically redirect the request unless it can be confirmed by the user,  since this might change the conditions under which the request was issued.  Note: When automatically  redirecting a POST request after receiving a 301 status code, some existing HTTP/1.0 user agents  will erroneously change it into a GET request. 302  Found The requested resource temporarily resides under a different  URI. Since the redirection might be altered on occasion, the client should  continue to use the Request-URI for  future requests. This response is only cacheable if indicated by a Cache-Control or  Expires header field.  The temporary URI should  be identified by the Location field in the response. Unless the request method was HEAD, the entity of the  response should contain a short hypertext note with a hyperlink to the new  URI(s).  If the 302 status code is received in response to a request  other than GET or HEAD, the user agent must not  automatically redirect the request unless it can be confirmed by the user,  since this might change the conditions under which the request was issued.  Note: RFC 1945 and RFC 2068 specify that the client is not allowed to  change the method on the redirected request. However, most existing user  agent implementations treat 302 as if it were a 303 response,  performing a GET on the  Location field-value regardless of the original request  method. The status codes 303 and 307 have  been added for servers that wish to make unambiguously clear which kind of  reaction is expected of the client. 303  See Other The response to the  request can be found under a different URI and should be retrieved using a GET  method on  that resource. This method exists primarily to allow the output of a POST-activated script to  redirect the user agent to a selected resource. The new URI is not a substitute reference for the  originally requested resource. The 303 response must not be  cached, but the response to the second (redirected) request might be cacheable.  The different URI should  be identified by the Location field in the response. Unless the request method was HEAD, the entity of the  response should contain a short hypertext note with a hyperlink to the new  URI(s).  Note: Many pre-HTTP/1.1 user agents do not understand the 303 status. When interoperability with such clients is  a concern, the 302 status code may be used instead, since most user agents react to a 302 response as described here for 303. 304  Not Modified If the client has  performed a conditional GET request and access is allowed, but the  document has not been modified, the server should respond with this status  code. The 304 response  must not contain a message-body, and thus is always terminated by the first  empty line after the header fields.  The response must include the following header  fields:   Date, unless its omission is required. f a  clockless origin server obeys these rules, and proxies and clients add their  own Date to any response received without one, (as already  specified by [RFC 2068]), caches  will operate correctly.   ETag and/or  Content-Location, if the header would have  been sent in a 200 response to the same request.   Expires, Cache-Control, and/or Vary, if the field-value might differ from that  sent in any previous response for the same  variant.  If the conditional GET  used a strong  cache validator, the response should not include other entity-headers. If the  conditional GET used  a weak validator, the response must not  include other entity-headers.  This prevents  inconsistencies between cached entity-bodies and updated headers.  If a 304 response indicates an  entity not currently cached, then the cache must disregard the response and  repeat the request without the conditional.  If a cache uses a received  304 response to update a cache  entry, the cache must update the entry to reflect any new field values given in the  response. 305  Use Proxy The requested resource  must be accessed through the proxy identified by the Location field. The Location field gives the URI  of the proxy. The recipient is expected to repeat this single request via the proxy. 305 responses must only be generated by origin  servers.  Note: RFC 2068 did not clearly state that 305 was intended to redirect a single request, and to  be generated by origin servers only. Nevertheless, not observing these  limitations has significant security consequences. 306  (Unused) The 306 status code was used in a  previous version of the specification. This code is currently not in use.  However, the code is reserved for future application. 307  Temporary Redirect The requested resource  resides temporarily under a different URI. Since the redirection may be  altered on occasion, the client should continue to use the Request-URI for future requests. This response is only  cacheable if indicated by a Cache-Control or  Expires header field.  The temporary URI should  be identified by the Location field in the response. Unless the request method was HEAD, the entity of the  response should contain a short hypertext note with a hyperlink to the new  URI(s), since many pre-HTTP/1.1 user agents do not understand the 307  status.  Therefore, the note should contain the information necessary for a user to  repeat the original request on the new URI.  If the 307 status code is received in response to a request  other than GET or HEAD, the user agent must not  automatically redirect the request unless it can be confirmed by the user,  since this might change the conditions under which the request was issued."},{"location":"javascript/appendix_c/#client-error-4xx","title":"Client Error 4XX","text":"<p>The 4XX class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server should include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents should display any included entity to the user.</p> <p>If the client is sending data, a server implementation using TCP should be careful to ensure that the client acknowledges receipt of the packet(s) containing the response, before the server closes the input connection. If the client continues sending data to the server after the close, the server\u2019s TCP stack will send a reset packet to the client, which may erase the client\u2019s unacknowledged input buffers before they can be read and interpreted by the HTTP application.</p> Message Description 400  Bad Request The request could not be  understood by the server due to malformed syntax. The client should not  repeat the request without modifications. 401  Unauthorized The request requires user  authentication. The response must include a WWW-Authenticate  header field  containing a challenge applicable to the  requested resource. The client may repeat the request with a suitable Authorization  header field.  If the request already included Authorization credentials, then the 401  response  indicates that authorization has been refused for those credentials. If the 401  response  contains the same challenge as the prior response, and the user agent has  already attempted authentication at least  once, then the user should be presented the entity that was identified  in the response, since that entity might include relevant diagnostic  information. 402  Payment Required This code is reserved for future use. 403  Forbidden The server understood the  request, but is refusing to fulfill it. Authorization will not help and the  request should not be repeated. If  the request method was not HEAD and the server wishes to make public why  the request has not been fulfilled, it should describe the reason for the  refusal in the entity. If the server does not wish to make this information  available to the client, the status code  404 (Not Found) can be used instead. 404  Not Found The server has not found anything matching  the Request-URI. No indication is given  of whether the condition is temporary or permanent. The 410  (Gone) status code should be  used if the server knows, through some internally configurable mechanism,  that an old resource is permanently unavailable and has no forwarding  address. This status code is essentially a generic, neutral response,  commonly used when the server does not wish to reveal exactly why the request  has been refused, or when no other response is applicable. 405  Method Not Allowed The method specified in  the Request-Line is not allowed for the  resource identified by the Request-URI. The response must  include an Allow header  containing a list of valid methods for the requested resource. 406  Not Acceptable The resource identified by  the request is only capable of generating  response entities which have content characteristics not acceptable according  to the accept headers sent in the request.  Unless it was a HEAD request, the response should include an entity  containing a list of available entity characteristics and location(s) from  which the user or user agent can choose the one most appropriate. The entity  format is specified by the media type identified in the Content-Type header field. Depending upon the format and the  capabilities of the user agent, selection of the most appropriate choice may  be performed automatically. However, this specification does not define any  standard for such automatic selection.  Note: HTTP/1.1 servers are allowed to return responses which are not  acceptable according to the Accept Headers sent in the request. In some  cases, this may even be preferable to sending a 406  response.  User agents are encouraged to inspect the headers of an incoming response to  determine if it is acceptable. If the response could be unacceptable, a user  agent should temporarily stop receipt of more data and query the user for a  decision on further actions. 407  Proxy Authentication  Required This code is similar to 401  (Unauthorized), but indicates that the  client must first authenticate itself with the proxy. The proxy must return a  Proxy-Authenticate header field containing a  challenge applicable to the proxy for the requested resource. The client may  repeat the request with a suitable Proxy-Authorization  header field. 408  Request Timeout The client did not produce  a request within the time that the server was prepared to wait. The client  may repeat the request without modifications at any later time. 409  Conflict The request could not be  completed due to a conflict with the current state of the resource. This code  is only allowed in situations where it is expected that the user might be  able to resolve the conflict and resubmit the request. The response body should  include enough information for the user to recognize the source of the  conflict.  Ideally, the response entity would include enough  information for the user or user agent to fix the problem; however, that  might not be possible and is not required.  Conflicts are most likely to occur in response to  a PUT request. For example, if  versioning were being used and the entity being PUT included changes to a resource which  conflict with those made by an earlier (third-party) request, the server  might use the 409 response to indicate that it can\u2019t complete the  request. In this case, the response entity would likely contain a list of the  differences between the two versions in a format defined by the response Content-Type. 410  Gone The requested resource is  no longer available at the server and no forwarding address is known. This  condition should be considered permanent. Clients with link editing  capabilities should delete references to the Request-URI after user approval. If the server does not know,  or has no facility to determine, whether or not the condition is permanent,  the status code 404 (Not Found) should be used instead.  This response is cacheable unless indicated otherwise.  The 410 response is primarily intended to assist  the task of web maintenance by notifying the recipient that the resource is  intentionally unavailable and that the server owners desire that remote links  to that resource be removed. Such an event is common for limited-time,  promotional services and for resources belonging to individuals no longer  working at the server\u2019s site. It is not necessary to mark all permanently  unavailable resources as \u201cgone\u201d or to keep the mark for any length of  time-that is left to the discretion of the server owner. 411  Length Required The server refuses to  accept the request without a defined Content-Length. The client may repeat  the request if it adds a valid Content-Length header field containing the length of the  message-body in the request message. 412  Precondition Failed The precondition given in  one or more of the request-header fields evaluated to false  when it was  tested on the server. This response code allows the client to place  preconditions on the current resource metainformation (header field data) and  thus prevent the requested method from being applied to a resource other than  the one intended. 413  Request Entity Too Large The server is refusing to  process a request because the request entity is larger than the server is  willing or able to process. The server may close the connection to prevent  the client from continuing the request.  If the condition is  temporary, the server should include a Retry- After header field to indicate that it is temporary and  after what time period has elapsed may the client try again. 414  Request-URI Too Long The server is refusing to  service the request because the Request- URI is longer than the server is willing to interpret.  This rare condition is only likely to occur when a client has improperly  converted a POST request to a GET request with long query information, when  the client has descended into a URI \u201cblack hole\u201d of redirection (for example,  a redirected URI prefix that points to a suffix of itself), or when the  server is under attack by a client attempting to exploit security holes  present in some servers using fixed-length buffers for reading or  manipulating the Request-URI. 415  Unsupported Media Type The server is refusing to service the request  because the entity of the request is in a format not supported by the  requested resource for the requested method. 416  Requested Range Not  Satisfiable A server should return a response with this  status code if:   A request included a Range request-header field.   None of the  range-specifier values in this field overlap the current extent of the selected resource.   The  request did not include an If-Range request-header field. For  byte-ranges, this means that the first-byte-pos of all of the  byte-range-spec values were greater than  the current length of  the selected resource.  When this status code is  returned for a byte-range request, the response should include a Content-Range  entity-header  field specifying the current length of the selected resource. This response  must not use the multipart/byteranges content-type. 417  Expectation Failed The expectation identified  in an Expect request-header field could  not be met by this server, or, if the server is a proxy, the server has  unambiguous evidence that the request could not be met by the next- hop  server."},{"location":"javascript/appendix_c/#server-error-5xx","title":"Server Error 5XX","text":"<p>The 5XX class of status code is intended for cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server should include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. User agents should display any included entity to the user. These response codes are applicable to any request method.</p> Message Description 500  Internal Server Error The server encountered an  unexpected condition which prevented it from fulfilling the request. 501  Not Implemented The server does not  support the functionality required to fulfill the request. This is the  appropriate response when the server does not recognize the request method  and is not capable of supporting it for any resource. 502  Bad Gateway The server, while acting as a gateway or  proxy, received an invalid response from the upstream server it accessed in  attempting to fulfill the request. 503  Service Unavailable The server is currently  unable to handle the request due to a temporary overloading or maintenance of  the server. The implication is that this is a temporary condition which will  be alleviated after some delay. If known, the length of the delay may be indicated  in a Retry-After header. If no Retry-After is given, the client should handle the response as it would for a 500 response.Note: The existence of the 503 status code does not imply that a server must use it  when becoming overloaded. Some servers may wish to simply refuse the  connection. 504  Gateway Timeout The server, while acting  as a gateway or proxy, did not receive a timely response from the upstream  server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary  server (e.g. DNS) it needed to access in attempting to complete the request.  Note: Implementers should note that  some deployed proxies are known to return 400 or 500 when DNS lookups time out. 505  HTTP Version Not Supported The server does not  support, or refuses to support, the HTTP protocol version that was used in  the request message. The server is indicating that it is unable or unwilling  to complete the request using the same major version as the client. The  response should contain an entity describing why that version is not  supported and what other protocols are supported by that server."},{"location":"javascript/appendix_d/","title":"WebLOAD\u2013supported Character Sets","text":"<p>WebLOAD supports the following character sets for use with character encoding functions. </p> Character Set Value Default 0 Arabic (864) 864 Arabic (ASMO 708) 708 Arabic (DOS) 720 Arabic (ISO 8859-6) 28596 Arabic (Mac) 10004 Arabic (Windows) 1256 Baltic (ISO 8859-4) 28594 Baltic (Windows) 1257 Baltic / Estonian (ISO 8859-13) 28603 Celtic (ISO 8859-14) 28604 Central European (DOS) 852 Central European (ISO 8859-2) 28592 Central European (Mac) 10029 Central European (Windows) 1250 Chinese Simplified (GB18030) 54936 Chinese Simplified (GB2312) 936 Chinese Simplified (GB2312-80) 20936 Chinese Simplified (HZ) 52936 Chinese Simplified (ISO 2022) 50227 Chinese Simplified (Mac) 10008 Chinese Traditional (Big5) 950 Chinese Traditional (EUC) 51950 Croatian (Mac) 10082 Cyrillic (DOS) 866 Cyrillic (ISO 8859-5) 28595 Cyrillic (KOI8-R) 20866 Cyrillic (KOI8-U) 21866 Cyrillic (Mac) 10007 Cyrillic (primarily Russian) 855 Cyrillic (Windows) 1251 Greek (ISO 8859-7) 28597 Greek (Mac) 10006 Greek (Windows) 1253 Hebrew (DOS) 862 Hebrew (ISO-Logical) 38598 Hebrew (ISO-Visual) 28598 Hebrew (Mac) 10005 Hebrew (Windows) 1255 Icelandic (Mac) 10079 Japanese (EUC) 51932 Japanese (JIS) 50220 Japanese (Shift-JIS) 932 Korean (EUC) 51949 Korean (ISO 2022) 50225 Korean (Johab) 1361 Korean (Unified Hangul Code) 949 Nordic (ISO 8859-10) 28600 Romanian (ISO 8859-16) 28606 Romanian (Mac) 10010 South European (ISO 8859-3) 28593 Tahi (ISO 8859-11) 28601 Thai (Windows) 874 Turkish (DOS) 857 Turkish (ISO 8859-9) 28599 Turkish (Mac) 10081 Turkish (Windows) 1254 Ukrainian (Mac) 10017 Unicode (UTF-7) 65000 Unicode (UTF-8) 65001 Unicode UTF-16, big endian 1201 Unicode UTF-16, little endian 1200 Unicode UTF-32, big endian 12001 Unicode UTF-32, little endian 12000 Vietnamese (Windows) 1258 Western (ISO-8859-15) 28605 Western European (DOS) 850 Western European (ISO 8859-1) 28591 Western European (Mac) 10000 Western European (Windows) 1252"},{"location":"javascript/appendix_e/","title":"Appendix E: Glossary","text":"Glossary Term Description AAT An older, obsolete WebLOAD  utility that was used for recording web session activities as a JavaScript  file. It is replaced by WebLOAD Recorder. Aborted  Rounds The number of times the  Virtual Clients started to run a script but did not complete the script,  during the last reporting interval. This might be due to a session being  stopped either automatically or manually by the user. script Specification of the sequence of HTTP  protocol calls sent by Virtual Clients to the SUT (System Under Test).  Scripts are written in JavaScript. You can either  write scripts as a text file or generate them automatically using the WebLOAD  Recorder. Application Being Tested  (ABT) See SUT. Attempted  Connections The total number of times  the Virtual Clients attempted to connect to the SUT during the last reporting  interval. Automatic Transaction  counters If you have Automatic  Transactions enabled, WebLOAD creates three counters for each GET and POST  statement in the script:    The total number of times  it occurred   The number of times it succeeded   The number of times it  failed during the last reporting interval. Average For timers, average is the  total amount of time counted by the timer (not the elapsed time) divided by  the Count (that is, the total number of readings). For example, the average  for Transaction Time is the amount of time it took to complete all the  successful transactions, divided by the number of successful transactions  (the Count). Built-in  Timer A timer measures the time  required to perform a given task. WebLOAD supports both programmed timers and  built-in timers. ROUND TIME is a built-in timer. The ROUND TIME is the time  needed for one complete execution of a script. Connect Time The time it takes for a  Virtual Client to connect to the System Under Test (the SUT), in seconds. In  other words, the time it takes from the beginning of the HTTP request to the  TCP/IP connection.  The value posted in the  Current Value column is the average time it took a Virtual Client to connect  to the SUT during the last reporting interval.  If the Persistent  Connection option is enabled, there may not be a value for Connect Time  because the HTTP connection remains open between successive HTTP requests. Connection Speed (Bits Per  Second) The number of bits  transmitted back and forth between the Virtual Clients and the System Under  Test (SUT), divided by the time it took to transmit those bits, in seconds.  You can set the Virtual  Clients to emulate a particular connection speed during the test, either by  using the Variable Connection Speed settings, or by coding the connection  speed in the script.  If a connection speed is specified for the test,  WebLOAD reports it in the Statistics Report.  The value posted in the Current Value column is  the number (sum) of bits passed per second during the last reporting  interval. It should match, very closely, the connection speed you specified  for the test. Console The  WebLOAD component that manages the test session. The Console performs the  following:   Configures Load Session  hosts and scripts   Schedules Load Session scripts   Configures Goal\u2013Oriented  test sessions   Monitors the application's  performance under the generated  load   Manages the Load Session  as it is running, allowing you to pause, stop, and continue Load Session  components as needed   Displays the current  performance of the SUT   Provides a final  performance reports for Probing Clients and Virtual Clients   Manages exporting of  performance reports Count (For timers only.) The  total number of readings (the number of times the item being timed has  occurred) for the timed statistic since the beginning of the test. For  example, for Transaction Time, Count shows the number of transactions that  have been completed. Current  Slice The value posted for this  reporting interval in the Statistics Report main window. Current  Slice Average For per time unit statistics and counters,  average is the total of all of the current values for the last reporting  interval, divided by the number of readings.  For timers, average is the  total amount of time counted by the timer (not the elapsed time), divided by  the Count (that is, the total number of readings for the last reporting  interval). For example, the average for Transaction Time is the amount of  time it took to complete all the successful transactions in the last  reporting interval, divided by the number of successful transactions (the  Current Slice Count). Current  Slice Count (For timers only.) The  total number of readings (the number of times the item being timed has  occurred) for the timed statistic for the last reporting interval. For  example, for Transaction Time, Current Slice Count shows the number of  transactions that have been completed over the last reporting interval. Current  Slice Max The highest value reported for this  statistic over the last reporting interval. Current  Slice Min The lowest value reported for this  statistic over the last reporting interval. Current Slice Standard Deviation The average amount the  measurement for this statistic varies from the average over the last  reporting interval. Current  Slice Sum The aggregate or total  value for this statistic in this script over the last reporting interval. DNS Lookup Time The time it takes to  resolve the host name and convert it to an IP address by calling the DNS  server. Failed Connections The total number of times  the Virtual Clients tried to connect to the SUT but were unsuccessful, during  the last reporting interval.  This number is always less  than or equal to the number of failed hits because hits can fail for reasons  other than a failed connection. Failed Hits The total number of times  the Virtual Clients made an HTTP request but did not receive the correct HTTP  response from the SUT during the last reporting interval. Note that each  request for each gif, jpeg, html  file, etc.,  is a single hit. Failed Hits  Per Second The number of times the  Virtual Clients did not obtain the correct HTTP response, divided by the  elapsed time, in seconds.  The value posted in the Current Value column is  the number (sum) of unsuccessful HTTP requests per second during the last  reporting interval. Failed Pages Per Second The number of times the  Virtual Clients did not obtain the correct response to an upper level  request, divided by the elapsed time, in seconds.  The value posted in the  Current Value column is the number (sum) of unsuccessful requests per second  during the last reporting interval. Failed Rounds The total number of times  the Virtual Clients started but did not complete the script during the last  reporting interval. Failed  Rounds Per Second The number of times the  Virtual Clients started but did not complete an iteration of the script,  divided by the elapsed time, in seconds. The value posted in the Current  Value column is the number (sum) of failed iterations of the script per  second during the last reporting interval. First Byte The time it takes a  Virtual Client to receive the first byte of data. Goal\u2013Oriented Test A WebLOAD component  enabling you to define the performance goals required, and view the status of  your application when it is operating under this performance goal. WebLOAD  provides a Goal\u2013Oriented Test Wizard for configuring these performance goals.  WebLOAD automatically accelerates the number of Virtual Clients accessing  your website until you meet your performance goal.  Note: The Goal-Oriented Test Wizard was previously called the Cruise  Control Wizard. Goal\u2013Oriented  Test Wizard See Goal\u2013Oriented Test. Hit Time The time it takes to  complete a successful HTTP request, in seconds. Each request for each gif, jpeg, html  file, etc.,  is a single hit. The time of a hit is the sum of the Connect Time, Send Time,  Response Time, and Process Time.  The value posted in the Current  Value column is the average time it took to make an HTTP request and process  its response during the last reporting interval. Hits The total number of times the Virtual Clients made HTTP requests to the System Under Test  (SUT) during the last reporting interval.  For example, a Get  statement for a URL retrieves a page. The page can include any number of  graphics and contents files. Each request for each gif, jpeg, html file, etc., is a single hit. Hits Per  Second The number of times the Virtual Clients  made an HTTP request, divided by the elapsed time, in seconds. Each request  for each gif, jpeg, html file, etc. is a single hit.  The value posted in the  Current Value column is the number (sum) of HTTP requests per second during  the last reporting interval. Host A computer connected via a  network, participating in a test session. Each Host in a test session has  assigned tasks. A host can act as either a Load Machine or a Probing Client  Machine. All hosts participating in a test session must be accessible to the Console  over a network. Therefore they must run TestTalk, the network agent. HTTP  Response Status WebLOAD creates a row in  the Statistics Report for each kind of HTTP status code it receives as an  HTTP response from the SUT (redirection codes, success codes, server error  codes, or client error codes).  The value posted is the  number of times the Virtual Clients received that status code during the last  reporting interval. Integrated Report A single configurable  report that can integrate both standard performance data, and data from the  NT Performance Monitor. This report gives you a more complete picture of the  performance of your application. The data to be monitored and the data to be  displayed in the report are both configurable in the Console. Internet  Productivity Pack (IPP) Provides a set of protocol  implementations enabling you to load-test your application using these  protocols. Java and ActiveX counters You can add function calls  to your scripts that enable you to instantiate and call methods and  properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function  calls in the script that you are running, WebLOAD reports three counters for  them in the Statistics Report:   The total number of times  it occurred   The number of times it succeeded   The number of times it  failed during the last reporting interval.  The row heading in the  Statistics Report is the name of the function call. Java and  ActiveX timers You can add function calls  to your scripts that enable you to instantiate and call methods and  properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function  calls in the script you are running, WebLOAD reports timers for them in the  Statistics Report.  The timer value is the average amount of time it  took to complete the function call, in seconds, during the last reporting  interval.  The row heading in the  Statistics Report is the name of the function call. Load  Generator The component of the Load  Machine that generates Virtual Clients. Load Generators have the task of  bombarding the System Under Test with HTTP protocol call requests as defined  in the script. WebLOAD assesses the application's performance by measuring  the response time experienced by  the Virtual Clients. The number of Virtual Clients at any given moment is  determined by the user. Load  Generator Machine See Load  Machine. Load Machine A host that runs Load Generators. Load Generators  bombard the application under test with a large load, to enable complete  scalability and integrity testing. Load Session A Load Session includes  both the complete Load Template and the results obtained while running that  Load Session. A Load Template consists of information about the hosts and  scripts participating in the current Load Session. The Load Template will  also include scheduling information. The complete Load Template is  illustrated in the Session Tree. Storing a Load Template saves you time when  repeatedly running WebLOAD with the same, or even a similar network  configuration, since you don't have to recreate your Load Template from  scratch each time you want to start working.  Storing Load Session  results can be useful when you want to examine results from multiple test  sessions or for analyzing test session results. Load Size The number of Virtual  Clients running during the last reporting interval. Load  Template A Load Template contains  the complete Load Session definition, without the test results. A Load  Template includes information about the participating hosts and the scripts  used in the current Load Session. The definition also includes scheduling  information and the configuration of the Server Monitor and Integrated  Reports. The complete Load Template is illustrated in the Session Tree.  Storing a Load Template saves you time when repeatedly running WebLOAD with  the same, or even a similar network configuration, since you do not have to  recreate your Load Template from scratch each time you rerun a test. Page Time The time it takes to  complete a successful upper level request, in seconds. The Page Time is the  sum of the Connection Time, Send Time, Response Time, and Process Time for  all the hits on a page.  The value posted in the Current Value column is  the average time it took the Virtual Clients to make an upper level request  and process its response during the last reporting interval. Pages The total number of times the Virtual  Client made upper level requests, both successful and unsuccessful, during  the last reporting interval. Pages Per Second The number of times the  Virtual Clients made upper level requests divided by the elapsed time, in  seconds.  The value posted in the  Current Value column is the number  (sum) of requests per second during the last  reporting interval. Per Time  Unit statistics Ratios that calculate an  average value for an action or process. For example: Transactions Per Second,  Rounds Per Second. Portfolio A Portfolio of reports enables you to  generate a single, inclusive report that contains all the charts generated by  the templates included in the portfolio. Probing Client A software program which  \"bombards\" the SUT as a single Virtual Client, to further measure  the performance of the SUT. WebLOAD generates exact values for Probing Client  performance. Probing  Client Machines Hosts running Probing Client software  simulating one Virtual Client, and running at the same time as Load Machines. Probing  Client software See Probing   Client. Process Time The time it takes WebLOAD to parse an HTTP  response from the SUT and then populate the document-object model (DOM), in  seconds.  The value posted in the  Current Value column is the average time it took WebLOAD to parse an HTTP  response during the last reporting interval. Receive Time The elapsed time between receiving the  first byte and the last byte. Report  Portfolio See Portfolio. Resource Manager Distributes and circulates  WebLOAD testing resources (Virtual Clients and Probing Clients) amongst users  on a \"need to use\" basis. The Resource Manager is packaged with a  maximum number of Virtual Clients, Probing Clients and Connected Workstation  ports, as defined by the WebLOAD package.  With the Resource Manager,  every WebLOAD Console can operate in Standalone Workstation mode or Connected  Workstation mode. Response  Data Size The size, in bytes, of all  the HTTP responses sent by the SUT during the last reporting interval.  WebLOAD uses this value to  calculate Throughput (bytes per second). Response  Time The time it takes the SUT  to send the object of an HTTP request back to a Virtual Client, in seconds.  In other words, the time from the end of the HTTP request until the Virtual  Client has received the complete item it requested.  The value posted in the Current  Value column is the average time  it took the SUT to respond to an HTTP request during the last reporting interval. Responses The number of times the  SUT responded to an HTTP request during the last reporting interval.  This number should match the number of successful  hits. Round Time The time it takes one  Virtual Client to finish one complete iteration of a script, in seconds.  The value posted in the  Current Value column is the average time it took the Virtual Clients to  finish one complete iteration of the script during the last reporting  interval. Rounds The total number of times  the Virtual Clients attempted to run the script during the last reporting  interval. Rounds Per Second The number of times the  Virtual Clients attempted to run the script, divided by the elapsed time, in  seconds.  The value posted in the  Current Value column is the number (sum) of attempts (both successful and  unsuccessful) per second during the last reporting interval. Send Time The time it takes the Virtual Client to  write an HTTP request to the SUT, in seconds.  The value posted in the  Current Value column is the average time it took the Virtual Clients to write  a request to the SUT during the last reporting interval. Server  Performance Measurements If you selected  Performance Monitor statistics for the report, WebLOAD creates a row for them  and reports their values in the  Statistics Report.  For definitions of the  statistics, see the Server Monitor  Definition dialog box.  Be selective when choosing  server performance measurements , otherwise the system resources required to  manage the data might affect the Console. Session Tree A graphic representation  of a Load Template and status. It illustrates the different components of a  test session, including Load Machines and Probing Clients, the scripts that  they execute, and their status. Single  Client See Probing   Client. Standard  Deviation The average amount the measurement varies  from the average since the beginning of the test. Successful  Connections The total number of times the Virtual  Clients were able to successfully  connect to the SUT during the last reporting interval.  This number is always less  than or equal to the number of successful hits because several hits might use  the same HTTP connection if the  Persistent Connection option is enabled. Successful  Hits The total number of times the Virtual  Clients made an HTTP request and received the correct HTTP response from the  SUT during the last reporting interval. Each request for each gif, jpeg, html file, etc., is a single hit. Successful  Hits Per Second The number of times the  Virtual Clients obtained the correct HTTP response to their HTTP requests  divided by the elapsed time, in seconds.  The value posted in the  Current Value column is the number (sum) of successful HTTP requests per  second during the last reporting interval. Successful  Pages Per Second The value posted in the  Current Value column is the number (sum) of successful requests per second  during the last reporting interval. Successful  Rounds The total number of times  the Virtual Clients completed one iteration of the script during the last  reporting interval. Successful  Rounds Per Second The number of times the  Virtual Clients completed an entire iteration of the script, divided by the  elapsed time, in seconds.  The value posted in the  Current Value column is the number (sum) of successful iterations of the  script per second during the last reporting interval. SUT The system running the Web  application currently under test. The SUT (System Under Test) is accessed by  clients through its URL address. The SUT can reside on any machine or on  multiple machines, anywhere on the global Internet or your local intranet. Template See Load   Template. Templates Gallery The Templates Gallery is a single entity  that contains predefined templates, user-defined templates, and portfolios. Test Program See Test Script. Test Script The script. This defines  the test scenario used in your Load Session. Scripts are written in  JavaScript. Test  Template See Load   Template. TestTalk The network agent. This  program enables communication between the Console and the host computers  participating in the test. Throttle  Control A WebLOAD component that  enables you to dynamically change the Load Size while a test session is in  progress. Throughput  (Bytes Per Second) The average number of  bytes per second transmitted from the SUT to the Virtual Clients running the  script during the last reporting interval. In other words, this is the amount  of the Response Data Size, divided by the number of seconds in the reporting interval. Time to  First Byte The time that elapsed  since a request was sent until the Virtual Client received the first byte of  data. User-defined Automatic Data Collection If you have Automatic Data  Collection enabled, WebLOAD creates three counters for each GET and POST  statement in the script:   The total number of times  the Get and Post statements occurred   The number of times the  statements succeeded   The number of times the  statements failed during the last  reporting interval. User-defined  counters Your own counters that you  can add to scripts using the SendCounter() and the SendMeasurement()  functions  (see the WebLOAD Scripting Guide).  If there is a user-defined counter in the script that you are running,  WebLOAD reports the counter\u2019s values in the Statistics Report.  The row heading is the  name (argument) of the counter. That is, the row heading is the string in  parenthesis in the SendCounter() or SendMeasurement() function call.  The value reported is the  number of times the counter was incremented during the last reporting  interval. User-defined  timer Timers that you can add to  scripts to keep track of the amount of time it takes to complete specific  actions (see the WebLOAD Scripting  Guide). If there are any timers in the scripts that you are running,  WebLOAD reports their values in the Statistics Report.  The row heading is the  name (argument) of the timer. That is, the row heading is the string in  parenthesis in the SetTimer() function call. The timer represents the time it takes to complete all  the actions between the SetTimer() call and its corresponding  SendTimer() call, in seconds.  The value posted is the average time it took a  Virtual Client to complete the actions between the pair of timer calls, in  seconds, during the last reporting interval. User-defined Transaction counters Transaction functions that  you can add to scripts for functional tests (see the WebLOAD Scripting Guide). If there is a user-defined transaction  function in the script that you are running, WebLOAD reports three counters  for it in the Statistics Report:   The total number of times  the transaction occurred   The number of times a  transaction succeeded   The number of times a  transaction failed during the  last reporting interval.  The row heading is the  name (argument) of the transaction. That is, the row heading is the string in  parenthesis in the BeginTransaction() function call. User-defined Transactions timers A timer for user-defined  transaction functions. If there is a user-defined transaction function in the  script that you are running, WebLOAD reports a timer for it in the Statistics  Report.  The row heading is the  name (argument) of the user- defined transaction. That is, the row heading is  the string in parenthesis in the BeginTransaction()  function  call.  The timer represents the average time it took to  complete all the actions between the BeginTransaction()  call and its  corresponding EndTransaction() call, in seconds, during  the last reporting interval. Virtual Client Artificial entities run by  Load Generators. Each such entity is a perfect simulation of a real client  accessing the System Under Test  (SUT) through a Web browser.  Virtual Clients generate  HTTP calls that access the SUT. The Load Generators that run Virtual Clients  can reside anywhere on the Internet or on your local intranet.  Scripts are executed by all the Virtual Clients in  parallel, achieving simultaneous access to the SUT. The size of the load on  your SUT is determined by the number of Virtual  Clients being generated. You may define as many Virtual Clients as needed, up  to the maximum supported by your WebLOAD \u201cpackage.\u201d WebLOAD  Analytics WebLOAD Analytics enables  you to analyze data, and create custom, informative reports after running a  WebLOAD test session. WebLOAD Console See Console. WebLOAD Integrated Development Environment (IDE) An easy-to-use tool for  recording, creating, and authoring protocol scripts for the WebLOAD  environment. WebLOAD Wizard A WebLOAD Wizard that  steps you through the configuration process. Each screen of the WebLOAD  Wizard contains text explaining the configuration process. The WebLOAD Wizard  enables you to create a basic Load Template. After using the demo, you can  use the Console menus to add functionality not available through the WebLOAD  Wizard. WebLOAD Load  Template See Load   Template. WebLoad  Session See Load   Session. WebRM See Resource   Manager."},{"location":"javascript/internet_protocol/","title":"WebLOAD Internet Protocols Reference","text":"<p>This chapter provides detailed reference information on WebLOAD support for the following Internet protocols</p> <ul> <li> <p>FTP, through the wlFTP Object and wlFTPs Object(for secure SSL connections)</p> </li> <li> <p>IMAP, through the wlIMAP Object</p> </li> <li> <p>NNTP, through the wlNNTP Object</p> </li> <li> <p>POP, through the wlPOP Object and wlPOPs Object (for secure SSL connections)</p> </li> <li> <p>SMTP, through the wlSMTP Object and wlSMTPs Object (for secure SSL connections)</p> </li> <li> <p>TCP, through the wlTCP Object</p> </li> <li> <p>Telnet, through the wlTelnet Object</p> </li> <li> <p>UDP, through the wlUDP Object</p> </li> </ul>"},{"location":"javascript/internet_protocol/#wlftp-object","title":"wlFTP Object","text":"<p>The <code>wlFTP</code> object provides support for FTP (File Transfer Protocol) load and functional testing within WebLOAD. Support for standard FTP operation is included. FTP over secure connections (SSL) is supported through the wlFTPs Object.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate <code>Logon()</code> method; otherwise an exception is thrown.</p> <p>To access the <code>wlFTP</code> object, you must include the <code>wlFtp.js</code> file in your <code>InitAgenda()</code> function.</p> <p>FTP/FTPS code can be generated using FTP Buildng block</p> <p>SFTP code can be generated using SFTP Buildng block</p>"},{"location":"javascript/internet_protocol/#wlftp-properties","title":"wlFTP Properties","text":""},{"location":"javascript/internet_protocol/#data","title":"Data","text":"<p>The Data property lets you specify the local data stream to upload to the host. You use this property to upload data. For example:</p> <p><code>ftp.Data =</code><code>datastream</code></p>"},{"location":"javascript/internet_protocol/#datafile","title":"DataFile","text":"<p>The DataFile property lets you specify the local file to upload to the host. For example:</p> <p><code>ftp.DataFile =</code><code>filename</code></p>"},{"location":"javascript/internet_protocol/#document","title":"document","text":"<p>The document property is an array containing the files downloaded and uploaded in the current FTP session. For example:</p> <p><code>var recentdownload =</code><code>ftp.document[1]</code></p>"},{"location":"javascript/internet_protocol/#outfile","title":"Outfile","text":"<p>The <code>Outfile</code> property lets you specify the name of a downloaded file. You use this property to rename a downloaded file as it is transferred to your computer. This property must be an explicit file name, not a pattern. If you specify the <code>Outfile</code> property, the document property remains empty. If you are downloading a series of files, only the last file downloaded is stored in the <code>Outfile</code>.</p> <p>If you want to store all of the files downloaded, either delete the <code>Outfile</code> property or specify an empty value. The downloaded files are then stored in the document property. For example:</p> <p><code>ftp.Outfile =</code><code>filename</code></p>"},{"location":"javascript/internet_protocol/#passivemode","title":"PassiveMode","text":"<p>The <code>PassiveMode</code> property lets you use FTP through firewalls. Valid values are:</p> <ul> <li> <p>true - passive mode is set, and you may FTP through firewalls.</p> </li> <li> <p>false - active mode is set, and you may not FTP through firewalls. </p> </li> </ul> <p>For example:</p> <ul> <li><code>ftp.PassiveMode =</code><code>modesetting</code></li> </ul>"},{"location":"javascript/internet_protocol/#password","title":"PassWord","text":"<p>The <code>PassWord</code> property lets you specify a password when logging on to a host. You use this property to log onto a restricted FTP host. WebLOAD automatically sends the password to the FTP host when a <code>wlFTP</code> object connects to an FTP host.</p> <p><code>ftp.PassWord =</code><code>password</code></p> <p>Caution: The password appears in plain text in the script. The password is visible to any user who has access to the script.</p>"},{"location":"javascript/internet_protocol/#size","title":"Size","text":"<p>The <code>Size</code> property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption.</p> <p><code>var filesize =</code><code>ftp.Size</code></p>"},{"location":"javascript/internet_protocol/#startbyte","title":"StartByte","text":"<p>The <code>StartByte</code> property lets you specify the byte offset to start transferring from. The default value is 0. This property automatically resets to zero after each transfer. You use this property to specify a starting point when resuming interrupted transfers.</p> <p><code>ftp.StartByte =</code><code>byteoffset</code></p>"},{"location":"javascript/internet_protocol/#transfermode","title":"TransferMode","text":"<p>The <code>TransferMode</code> property lets you specify the transfer mode for uploaded and downloaded files. You must specify the transfer mode before each transfer. If you do not specify a transfer mode, auto, the default mode, is used. Valid values are:</p> <ul> <li>auto - 0</li> <li>text - 1</li> <li>binary - 2</li> </ul> <p>You may also specify the transfer mode using the following constants:</p> <ul> <li> <p>WLFtp.TMODE_ASCII - text</p> </li> <li> <p>WLFtp.TMODE_BINARY - binary</p> </li> <li> <p>WLFtp.TMODE_DEFAULT - auto</p> </li> </ul> <p>For example:</p> <p><code>ftp.TransferMode =</code><code>transfermode</code></p>"},{"location":"javascript/internet_protocol/#username","title":"UserName","text":"<p>The <code>UserName</code> property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted FTP host. WebLOAD automatically sends the user name to the FTP host when a wlFTP object connects to an FTP host.</p> <p><code>ftp.UserName =</code><code>username</code></p>"},{"location":"javascript/internet_protocol/#wlftp-methods","title":"wlFTP Methods","text":""},{"location":"javascript/internet_protocol/#append","title":"Append()","text":"Syntax Append(pattern) Parameters pattern The file to which you are appending. This may be a  specific file name, or it may contain wildcards. Return Value Null if successful, an exception if  unsuccessful. Comments Similar to the Upload() method, Append()  adds the data to the target file instead of overwriting it. If the target  file does not exist, Append() creates it."},{"location":"javascript/internet_protocol/#appendfile","title":"AppendFile()","text":"Syntax AppendFile(filename) Parameters filename The remote file to which you want to append data. Return Value Null if successful, an exception if  unsuccessful. Comments Uploads a local file and  appends it to the specified file on the host. The local file is specified by  the DataFile property. The destination file is specified by the <code>filename</code>parameter. If  the DataFile property is not specified, then the contents of the Data  property are sent as a datastream to be appended to the file specified by the  <code>filename</code> parameter. If the target  file does not exist, AppendFile() creates it."},{"location":"javascript/internet_protocol/#changedir","title":"ChangeDir()","text":"Syntax ChangeDir(name) Parameters name The name of the directory to which you want  to move. Return Value Null if successful, an exception if  unsuccessful. Comments Changes the current working directory on the host  to the one specified by the name parameter."},{"location":"javascript/internet_protocol/#chfilemod","title":"ChFileMod()","text":"Syntax ChFileMod(filename,  attributes) Parameters filename The name of the file you want to alter. This  parameter may be a specific file name, or it may contain wildcards. attributes The new attributes assigned to the file. Values  are specified in the three digit 0-7 format. Return Value Null if successful, an exception if  unsuccessful. Comments Changes attributes of the specified file according  to the values specified in the <code>attribute</code> parameter."},{"location":"javascript/internet_protocol/#chmod","title":"ChMod()","text":"Syntax ChMod(pattern,  attributes) Parameters pattern The name of the files and  directories you want to alter. This parameter may be a specific file name, or  it may contain wildcards. attributes The new attributes assigned to the file.  Values are specified in the three digit 0-7 format. Return Value Null if successful, an exception if  unsuccessful. Comments Uses a loop to changes attributes of the specified  files and directories according to the values specified in the attribute  parameter. If  an iteration of the loop fails, the loop is cancelled, potentially leaving  some files unchanged. To avoid this risk you must write your own loop with  error handling capability."},{"location":"javascript/internet_protocol/#delete","title":"Delete()","text":"Syntax Delete(pattern) Parameters pattern The file you are deleting.  This may be a specific file name, or it may contain wildcards. Return Value Null if successful, an exception if unsuccessful. Comments Deletes the specified  files from the FTP host. This function calls the DeleteFile() method in a  loop to delete all the specified files. If an iteration of the loop fails,  the loop is cancelled, potentially leaving some files undeleted."},{"location":"javascript/internet_protocol/#deletefile","title":"DeleteFile()","text":"Syntax Delete(filename) Parameters filename The file you are deleting. This must be a  specific file name. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the specified file from the FTP  host."},{"location":"javascript/internet_protocol/#dir","title":"Dir()","text":"Syntax Dir(pattern) Parameters pattern The name of the file or directory for which  you are searching. This may be a specific file name, or it may contain  wildcards. Return Value Returns a JavaScript array with the  following members if successful, an exception if unsuccessful.  a[].fileName                // name of file  a[].fileAttributes   //attribute  string  a[].fileTime      //date and time of last modification  a[].fileSize         //size of file in bytes  a[].isDir            //1 if the entry represents a  directory, 0 for a file  - Note: If the host supports only basic information, only the  fileName property of the array is defined. Comments Lists files and directories that match the pattern  parameter in the current directory of the host. This method returns detailed  information if the server supports it."},{"location":"javascript/internet_protocol/#download","title":"Download()","text":"Syntax Download(pattern) Parameters pattern The file you are  downloading. This may be a specific file name, or it may contain wildcards. Return Value Null if successful, an exception if  unsuccessful. Comments Uses a loop to download  the specified files to the local computer. If the property has been set, the  data is saved to the specified file. If the Outfile property has not been  set, the file is saved with its current name. If an iteration of the loop  fails, the loop is cancelled, potentially leaving some files not downloaded."},{"location":"javascript/internet_protocol/#downloadfile","title":"DownloadFile()","text":"Syntax Download(filename) Parameters filename The file you are downloading. This must be  a specific file name. Return Value Null if successful, an exception if unsuccessful. Comments Downloads a file to the  local computer. If the property has been set, the data is saved to the  specified file. If the Outfile property has not been set, the file is saved  with its current name."},{"location":"javascript/internet_protocol/#getcurrentpath","title":"GetCurrentPath()","text":"Syntax GetCurrentPath() Return Value A string containing the current path if  successful, an exception if unsuccessful. Comments Returns the current path on the host."},{"location":"javascript/internet_protocol/#getstatusline","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the current path if  successful, an exception if unsuccessful. Comments A string containing the latest response  string if successful, an exception if unsuccessful."},{"location":"javascript/internet_protocol/#listlocalfiles","title":"ListLocalFiles()","text":"Syntax ListLocalFiles(filter) Parameters <code>filter</code> The files you want to  list. The filter may be a patter or a specific file name. Return Value An array of matching objects with following  properties if successful, an exception if unsuccessful.  a[].fileName    //A string containing name of the file  a[].isDir    // A Boolean, true if the entry  represents a directory Comments Lists files matching the filter parameter in the  current directory of the local computer."},{"location":"javascript/internet_protocol/#logoff","title":"Logoff()","text":"Syntax Logoff() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the FTP host."},{"location":"javascript/internet_protocol/#logon","title":"Logon()","text":"Syntax Logon(host,  [port]) Parameters <code>host</code> The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. <code>port</code> The port to which you are  connecting. If you do not specify a port, the default FTP port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts a conversation with the FTP host. If you  are logging on to a restricted site, you must have specified the UserName and  PassWord properties before using this method."},{"location":"javascript/internet_protocol/#makedir","title":"MakeDir()","text":"Syntax MakeDir(name) Parameters name The name of the new directory that you are  creating. Return Value Null if successful, an exception if  unsuccessful. Comments Creates a new directory beneath the current  directory on the host."},{"location":"javascript/internet_protocol/#removedir","title":"RemoveDir()","text":"Syntax RemoveDir(name) Parameters name The name of the directory that you are  deleting. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the named directory from the host.  Note: You may not delete a directory until that directory is empty. Remove  all files from the directory before using the <code>RemoveDir()</code> method. You may use the <code>Delete()</code> method to delete files on the host."},{"location":"javascript/internet_protocol/#rename","title":"Rename()","text":"Syntax Rename(from,  to) Parameters from The file that you want to rename. to The new file name for the  file. If this file already exists, it is overwritten. Return Value Null if successful, an exception if unsuccessful. Comments Renames the files in the current directory  described by the <code>from</code>  parameter to the name described in the <code>to</code> parameter."},{"location":"javascript/internet_protocol/#sendcommand","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without modification.  This method is useful for interacting directly with the host using  non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#upload","title":"Upload()","text":"Syntax Upload(pattern) Parameters pattern The file you are uploading. This may be a specific  file name, or it may contain wildcards. Return Value Null if successful, an exception if unsuccessful. Comments Uses a loop to upload the  local files specified by the <code>pattern</code> parameter to the host. The  file is not renamed, and values specified by the <code>DataFile</code> and <code>Data</code> property are ignored. If an iteration of the loop  fails, the loop is cancelled, potentially leaving some files not transported."},{"location":"javascript/internet_protocol/#uploadfile","title":"UploadFile()","text":"Syntax UploadFile(filename) Parameters filename The destination name of  the local file. This parameter may be the same name as the local file name,  or it may be used to rename the file once it arrives at the host. Return Value Null if successful, an exception if  unsuccessful. Comments Uploads a local file to  the host. The local file is specified by the <code>DataFile</code> property. The  destination file name is specified by the <code>filename</code>parameter. If the <code>DataFile</code>property is not specified, then the contents of  the <code>Data</code> property are sent as a datastream to be  saved under the name specified by the <code>filename</code> parameter."},{"location":"javascript/internet_protocol/#uploadunique","title":"UploadUnique()","text":"Syntax UploadUnique() Return Value A string containing the  name of the newly created file if successful, an exception if unsuccessful. Comments Uploads data or a file to  a newly created, unique file on the host. The file name is created by the  host, and returned as a string value. The local file is specified by the  DataFile property. If the DataFile property is not specified, then the  contents of the Data property are sent as a datastream."},{"location":"javascript/internet_protocol/#wlftp","title":"WLFtp()","text":"Syntax new WLFtp() Return Value A new wlFTP object. Comments Creates a new wlFTP object, used to  interact with the server. Example <pre><code>function InitClient() { myNewFtpObject = new WLFtp() }</code></pre>"},{"location":"javascript/internet_protocol/#ftp-sample-code","title":"FTP Sample Code","text":"<pre><code>// script Initialization\nfunction InitAgenda() {\n    // include the file that enables FTP \n    IncludeFile(\"wlFtp.js\",WLExecuteScript)\n}\nfunction InitClient() {\n    // Create the FTP object we need to interact with the server\n    ftp=new WLFtp()\n}\nfunction TerminateClient() {\n    // Delete the FTP object we used \n    delete ftp\n}\n\n//===================================================\n\n//Body Of script. Give user name and password and login \nftp.UserName=\"UserID\" // Set the user name \nftp.PassWord=\"TopSecret\"  // Set the password\n//this.PassiveMode=true;  // Enable this if firewall is in the way \nftp.Logon(\"localhost\") // Login to the server\n\n//===================================================\n\n//Test Download\nftp.TransferMode = ftp.TMODE_ASCII; // Force all downloads ASCII \nftp.Outfile=\"c:\\\\downloaded.txt\";\n            // Define a local file to save the downloaded file \nftp.Download(\"file.txt\");  // Grab the remote file\n// The remote file may be a wildcard, so for each file\n// downloaded an entry is made in the document array.\n// With this approach an Outfile is not required. Instead the\n// document object holds the downloaded files for this client.\n// The loop below loops through each entry in the document\n// array and writes the file contents out to the log \nfor (var i = 0; i &lt; ftp.document.length; i++)\n{\n    InfoMessage(ftp.document[i]);\n}\n//============================================================\n\n//Test Upload\nftp.TransferMode = ftp.TMODE_ASCII;\nftp.DataFile=\"c:\\\\upload.txt\";\n                // define local file to upload \nftp.UploadFile(\"hello.txt\");\n                // upload it to the remote host as \"hello.txt\" \nftp.Data=\"hello world\";\n                // define a string to send to the remote host \nftp.UploadFile(\"hello.txt\");\n                // upload the string and save it as \"hello.txt\"\n//=======================================================\n\n//Test Append\nftp.TransferMode = ftp.TMODE_ASCII; \nftp.DataFile=\"c:\\\\append.txt\";\n                // identify a local file to upload \nftp.AppendFile(\"hello.txt\");\n                // add it to the existing contents of \"hello.txt\"\n//========================================================\n\n\n//Test Delete\nftp.Delete(\"hello.txt\");\n                // delete \"hello.txt\" from the remote server\n//===========================================================\n\n\n//Test Directory Functions\nftp.MakeDir(\"DirectoryName\");   // make a new directory \nftp.ChangeDir(\"DirectoryName\");  // change to that directory \nftp.DataFile=\"c:\\\\file1.txt\"; // select a local file \nftp.Upload(\"file1.txt\");   // upload it to the new directory \nvar files = ftp.Dir(\"*.*\");\n                // Generate a list of the files in that directory \nfor (var i = 0 ; i &lt; files.length; i++)\n{\n    InfoMessage(\"the file name is:\" + files[i].fileName);\n                // Print each file's name to the log\n}\nftp.Delete(\"*.*\");     // delete the files on the directory \nftp.ChangeDir(\"..\");  // go up a level in the tree \nftp.RemoveDir(\"DirectoryName\");  // delete the directory itself\n//=========================================================\n\n\n//Test Advanced Directory Handling\nvar files = ftp.Dir(\"*.txt\"); // show all the text files\nif (files.length &gt; 0)    // IF there are any entries to go through\n{          // THEN print their detailed attributes to the log \n    for (var i = 0 ; i &lt; files.length; i++)\n    {             // Print each file's details to the log \n        InfoMessage(files[0].fileName);   // name \n        InfoMessage(files[0].fileAttributes);  // attributes \n        InfoMessage(files[0].fileTime);     // timestamp \n        InfoMessage(files[0].fileSize);     // size in bytes \n        InfoMessage(files[0].dirFlag);\n                // set when the object is a directory\n    }\n}\n//==========================================================\n\n\n//Test General Functions\nstatus = ftp.GetStatusLine();\n            // what was the last response from the server?\nInfoMessage(\"status= \"+ status);  // print it \npath = ftp.GetCurrentPath();    // where am I? \nInfoMessage(\"path=\"+ path);   // right here\n//==============================================================\n\ncatch (e)\n{\n    InfoMessage (\"Error\" + e)\n}\nftp.Logoff()       // do not forget to log out of the session \nInfoMessage(\"done\") // this is the end of the FTP sample script\n</code></pre>"},{"location":"javascript/internet_protocol/#wlftps-object","title":"wlFTPs Object","text":"<p>The <code>wlFTPs</code> object provides support for FTP (File Transfer Protocol) load and functional testing over secure connections (SSL).</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate <code>Logon()</code> method; otherwise an exception is thrown.</p> <p>To access the <code>wlFTPs</code> object, you must include the <code>wlFtps.js</code> file in your <code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlftps-properties","title":"wlFTPs Properties","text":""},{"location":"javascript/internet_protocol/#data_1","title":"Data","text":"<p>The <code>Data</code> property lets you specify the local data stream to upload to the host. You use this property to upload data. For example:</p> <p><code>ftp.Data =</code><code>datastream</code></p>"},{"location":"javascript/internet_protocol/#datafile_1","title":"DataFile","text":"<p>The <code>DataFile</code> property lets you specify the local file to upload to the host. For example:</p> <p><code>ftp.DataFile = filename</code></p>"},{"location":"javascript/internet_protocol/#document_1","title":"document","text":"<p>The <code>document</code> property is an array containing the files downloaded and uploaded in the current FTP session. For example:</p> <p><code>var recentdownload =</code><code>ftp.document[1]</code></p>"},{"location":"javascript/internet_protocol/#outfile_1","title":"Outfile","text":"<p>The <code>Outfile</code> property lets you specify the name of a downloaded file. You use this property to rename a downloaded file as it is transferred to your computer. This property must be an explicit file name, not a pattern. If you specify the <code>Outfile</code> property, the document property remains empty. If you are downloading a series of files, only the last file downloaded is stored in the <code>Outfile</code>.</p> <p>If you want to store all of the files downloaded, either delete the <code>Outfile</code> property or specify an empty value. The downloaded files are then stored in the document property. For example:</p> <p><code>ftp.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#passivemode_1","title":"PassiveMode","text":"<p>The <code>PassiveMode</code> property lets you use FTP through firewalls. Valid values are:</p> <ul> <li>true \u2013 Passive mode is set, and you may FTP through firewalls.</li> <li>false \u2013 Active mode is set, and you may not FTP through firewalls. </li> </ul> <p>For example:</p> <p><code>ftp.PassiveMode = modesetting</code></p>"},{"location":"javascript/internet_protocol/#password_1","title":"PassWord","text":"<p>The <code>PassWord</code> property lets you specify a password when logging on to a host. You use this property to log onto a restricted FTP host. WebLOAD automatically sends the password to the FTP host when a <code>wlFTP</code> object connects to an FTP host.</p> <p><code>ftp.PassWord =</code><code>password</code></p> <p>Caution: The password appears in plain text in the script. The password is visible to any user who has access to the script.</p>"},{"location":"javascript/internet_protocol/#size_1","title":"Size","text":"<p>The <code>Size</code> property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption.</p> <p><code>var filesize =</code><code>ftp.Size</code></p>"},{"location":"javascript/internet_protocol/#startbyte_1","title":"StartByte","text":"<p>The StartByte property lets you specify the byte offset to start transferring from. The default value is 0. This property automatically resets to zero after each transfer. You use this property to specify a starting point when resuming interrupted transfers.</p> <p><code>ftp.StartByte =</code><code>byteoffset</code></p>"},{"location":"javascript/internet_protocol/#transfermode_1","title":"TransferMode","text":"<p>The <code>TransferMode</code> property lets you specify the transfer mode for uploaded and downloaded files. You must specify the transfer mode before each transfer. </p> <p>If you do not specify a transfer mode, auto, the default mode, is used. Valid values are:</p> <ul> <li>auto \u2013 0</li> <li>text \u2013 1</li> <li>binary \u2013 2</li> </ul> <p>You may also specify the transfer mode using the following constants: </p> <ul> <li> <p>WLFtp.TMODE_ASCII \u2013 text</p> </li> <li> <p>WLFtp.TMODE_BINARY \u2013 binary</p> </li> <li> <p>WLFtp.TMODE_DEFAULT \u2013 auto </p> </li> </ul> <p>For example:</p> <p><code>ftp.TransferMode =</code><code>transfermode</code></p>"},{"location":"javascript/internet_protocol/#username_1","title":"UserName","text":"<p>The <code>UserName</code> property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted FTP host. WebLOAD automatically sends the user name to the FTP host when a <code>wlFTP</code> object connects to an FTP host.</p> <p><code>ftp.UserName =</code><code>username</code></p>"},{"location":"javascript/internet_protocol/#wlftps-methods","title":"wlFTPs Methods","text":""},{"location":"javascript/internet_protocol/#append_1","title":"Append()","text":"Syntax Append(pattern) Parameters pattern The file to which you are appending. This may be a  specific file name, or it may contain wildcards. Return Value Null if successful, an exception if  unsuccessful. Comments Similar to the Upload() method, Append()  adds the data to the target file instead of overwriting it. If the target  file does not exist, Append() creates it."},{"location":"javascript/internet_protocol/#appendfile_1","title":"AppendFile()","text":"Syntax AppendFile(filename) Parameters filename The remote file to which you want to append data. Return Value Null if successful, an exception if  unsuccessful. Comments Uploads a local file and  appends it to the specified file on the host. The local file is specified by  the DataFile property. The destination file is specified by the <code>filename</code>parameter. If  the DataFile property is not specified, then the contents of the Data  property are sent as a datastream to be appended to the file specified by the  <code>filename</code> parameter. If the target  file does not exist, AppendFile() creates it."},{"location":"javascript/internet_protocol/#changedir_1","title":"ChangeDir()","text":"Syntax ChangeDir(name) Parameters name The name of the directory to which you want  to move. Return Value Null if successful, an exception if  unsuccessful. Comments Changes the current working directory on the host  to the one specified by the name parameter."},{"location":"javascript/internet_protocol/#chfilemod_1","title":"ChFileMod()","text":"Syntax ChFileMod(filename,  attributes) Parameters filename The name of the file you want to alter. This  parameter may be a specific file name, or it may contain wildcards. attributes The new attributes assigned to the file. Values  are specified in the three digit 0-7 format. Return Value Null if successful, an exception if  unsuccessful. Comments Changes attributes of the specified file according  to the values specified in the <code>attribute</code> parameter."},{"location":"javascript/internet_protocol/#chmod_1","title":"ChMod()","text":"Syntax ChMod(pattern,  attributes) Parameters pattern The name of the files and  directories you want to alter. This parameter may be a specific file name, or  it may contain wildcards. attributes The new attributes assigned to the file.  Values are specified in the three digit 0-7 format. Return Value Null if successful, an exception if  unsuccessful. Comments Uses a loop to changes attributes of the specified  files and directories according to the values specified in the attribute  parameter. If  an iteration of the loop fails, the loop is cancelled, potentially leaving  some files unchanged. To avoid this risk you must write your own loop with  error handling capability."},{"location":"javascript/internet_protocol/#delete_1","title":"Delete()","text":"Syntax Delete(pattern) Parameters pattern The file you are deleting.  This may be a specific file name, or it may contain wildcards. Return Value Null if successful, an exception if unsuccessful. Comments Deletes the specified  files from the FTP host. This function calls the DeleteFile() method in a  loop to delete all the specified files. If an iteration of the loop fails,  the loop is cancelled, potentially leaving some files undeleted."},{"location":"javascript/internet_protocol/#deletefile_1","title":"DeleteFile()","text":"Syntax Delete(filename) Parameters filename The file you are deleting. This must be a  specific file name. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the specified file from the FTP  host."},{"location":"javascript/internet_protocol/#dir_1","title":"Dir()","text":"Syntax Dir(pattern) Parameters pattern The name of the file or directory for which  you are searching. This may be a specific file name, or it may contain  wildcards. Return Value Returns a JavaScript array with the  following members if successful, an exception if unsuccessful.  a[].fileName                // name of file  a[].fileAttributes   //attribute  string  a[].fileTime      //date and time of last modification  a[].fileSize         //size of file in bytes  a[].isDir            //1 if the entry represents a  directory, 0 for a file  - Note: If the host supports only basic information, only the  fileName property of the array is defined. Comments Lists files and directories that match the pattern  parameter in the current directory of the host. This method returns detailed  information if the server supports it."},{"location":"javascript/internet_protocol/#download_1","title":"Download()","text":"Syntax Download(pattern) Parameters pattern The file you are  downloading. This may be a specific file name, or it may contain wildcards. Return Value Null if successful, an exception if  unsuccessful. Comments Uses a loop to download  the specified files to the local computer. If the property has been set, the  data is saved to the specified file. If the Outfile property has not been  set, the file is saved with its current name. If an iteration of the loop  fails, the loop is cancelled, potentially leaving some files not downloaded."},{"location":"javascript/internet_protocol/#downloadfile_1","title":"DownloadFile()","text":"Syntax Download(filename) Parameters filename The file you are downloading. This must be  a specific file name. Return Value Null if successful, an exception if unsuccessful. Comments Downloads a file to the  local computer. If the property has been set, the data is saved to the  specified file. If the Outfile property has not been set, the file is saved  with its current name."},{"location":"javascript/internet_protocol/#getcurrentpath_1","title":"GetCurrentPath()","text":"Syntax GetCurrentPath() Return Value A string containing the current path if  successful, an exception if unsuccessful. Comments Returns the current path on the host."},{"location":"javascript/internet_protocol/#getstatusline_1","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the current path if  successful, an exception if unsuccessful. Comments A string containing the latest response  string if successful, an exception if unsuccessful."},{"location":"javascript/internet_protocol/#listlocalfiles_1","title":"ListLocalFiles()","text":"Syntax ListLocalFiles(filter) Parameters <code>filter</code> The files you want to  list. The filter may be a patter or a specific file name. Return Value An array of matching objects with following  properties if successful, an exception if unsuccessful.  a[].fileName    //A string containing name of the file  a[].isDir    // A Boolean, true if the entry  represents a directory Comments Lists files matching the filter parameter in the  current directory of the local computer."},{"location":"javascript/internet_protocol/#logoff_1","title":"Logoff()","text":"Syntax Logoff() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the FTP host."},{"location":"javascript/internet_protocol/#logon_1","title":"Logon()","text":"Syntax Logon(host,  [port]) Parameters <code>host</code> The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. <code>port</code> The port to which you are  connecting. If you do not specify a port, the default FTP port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts a conversation with the FTP host. If you  are logging on to a restricted site, you must have specified the UserName and  PassWord properties before using this method."},{"location":"javascript/internet_protocol/#makedir_1","title":"MakeDir()","text":"Syntax MakeDir(name) Parameters name The name of the new directory that you are  creating. Return Value Null if successful, an exception if  unsuccessful. Comments Creates a new directory beneath the current  directory on the host."},{"location":"javascript/internet_protocol/#removedir_1","title":"RemoveDir()","text":"Syntax RemoveDir(name) Parameters name The name of the directory that you are  deleting. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the named directory from the host.  Note: You may not delete a directory until that directory is empty. Remove  all files from the directory before using the <code>RemoveDir()</code> method. You may use the <code>Delete()</code> method to delete files on the host."},{"location":"javascript/internet_protocol/#rename_1","title":"Rename()","text":"Syntax Rename(from,  to) Parameters from The file that you want to rename. to The new file name for the  file. If this file already exists, it is overwritten. Return Value Null if successful, an exception if unsuccessful. Comments Renames the files in the current directory  described by the <code>from</code>  parameter to the name described in the <code>to</code> parameter."},{"location":"javascript/internet_protocol/#sendcommand_1","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without modification.  This method is useful for interacting directly with the host using  non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#upload_1","title":"Upload()","text":"Syntax Upload(pattern) Parameters pattern The file you are uploading. This may be a specific  file name, or it may contain wildcards. Return Value Null if successful, an exception if unsuccessful. Comments Uses a loop to upload the  local files specified by the <code>pattern</code> parameter to the host. The  file is not renamed, and values specified by the <code>DataFile</code> and <code>Data</code> property are ignored. If an iteration of the loop  fails, the loop is cancelled, potentially leaving some files not transported."},{"location":"javascript/internet_protocol/#uploadfile_1","title":"UploadFile()","text":"Syntax UploadFile(filename) Parameters filename The destination name of  the local file. This parameter may be the same name as the local file name,  or it may be used to rename the file once it arrives at the host. Return Value Null if successful, an exception if  unsuccessful. Comments Uploads a local file to  the host. The local file is specified by the <code>DataFile</code> property. The  destination file name is specified by the <code>filename</code>parameter. If the <code>DataFile</code>property is not specified, then the contents of  the <code>Data</code> property are sent as a datastream to be  saved under the name specified by the <code>filename</code> parameter."},{"location":"javascript/internet_protocol/#uploadunique_1","title":"UploadUnique()","text":"Syntax UploadUnique() Return Value A string containing the  name of the newly created file if successful, an exception if unsuccessful. Comments Uploads data or a file to  a newly created, unique file on the host. The file name is created by the  host, and returned as a string value. The local file is specified by the  DataFile property. If the DataFile property is not specified, then the  contents of the Data property are sent as a datastream."},{"location":"javascript/internet_protocol/#wlftp_1","title":"WLFtp()","text":"Syntax new WLFtp() Return Value A new wlFTP object. Comments Creates a new wlFTP object, used to  interact with the server. Example <pre><code>function InitClient() { myNewFtpObject = new WLFtp() }</code></pre>"},{"location":"javascript/internet_protocol/#wlhtmmailer-object","title":"wlHtmMailer Object","text":"<p>The <code>wlHtmMailer</code> object provides support for HTM Mail load and functional testing within WebLOAD. Support for standard HTM Mail operation is included. HTM Mail over secure connections (SSL) is not currently supported.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate <code>Connect()</code> method; otherwise an exception is thrown.</p> <p>You must include <code>catch</code> and <code>try</code> functions in your script to handle exceptions when using the <code>wlHtmMailer</code> object. If you do not, the object may cause your script to freeze. A sample catch appears in the `wlHtmMailer code sample at the end of this section.</p> <p>To access the <code>wlHtmMailer object, you must include the</code>wlHtmMailer.js<code>file in your</code>InitAgenda()` function.</p>"},{"location":"javascript/internet_protocol/#wlhtmmailer-properties","title":"wlHtmMailer Properties","text":""},{"location":"javascript/internet_protocol/#attachmentsarr","title":"AttachmentsArr","text":"<p>The <code>AttachmentsArr</code> property lets you specify one or more attachments for an email. The <code>filename</code> variable should contain the name of the local file or datastream that you want to attach to the posting. </p> <p>For example:</p> <p><code>wlHtmMailer.Attachments[0] =</code><code>filename</code></p>"},{"location":"javascript/internet_protocol/#bcc","title":"Bcc","text":"<p>The <code>Bcc</code> property lets you specify the email addresses of additional recipients to be blind copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of <code>\"Me@MyCompany.com\"</code> or as<code>\"My Name &lt;Me@MyCompany.com&gt;\"</code>. For example:</p> <p><code>wlHtmMailer.Bcc =</code><code>blindcopyaddresses</code></p>"},{"location":"javascript/internet_protocol/#cc","title":"Cc","text":"<p>The <code>Cc</code> property lets you specify the email addresses of additional recipients to be copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of <code>\"Me@MyCompany.com\"</code> or as <code>\"My Name &lt;Me@MyCompany.com&gt;\"</code> For example:</p> <p><code>wlHtmMailer.Cc = copyaddress;</code><code>copyaddress</code></p>"},{"location":"javascript/internet_protocol/#from","title":"From","text":"<p>The <code>From</code> property lets you describe the Reply To in plain language. You may use this property to identify your Reply To email address in a plain language format. For example:</p> <p><code>wlHtmlMailer.From =</code><code>replyname</code></p>"},{"location":"javascript/internet_protocol/#host","title":"Host","text":"<p>The <code>Host</code> property lets you specify a host for use in sending HTML email messages.</p>"},{"location":"javascript/internet_protocol/#htmlfilepath","title":"HtmlFilePath","text":"<p>The <code>HtmlFilePath</code> property specifies the full path directory location of the files associated with the email message.</p>"},{"location":"javascript/internet_protocol/#htmltext","title":"HtmlText","text":"<p>The <code>HtmlText</code> property contains the HTML-formatted version of the email message, for example, potentially including embedded images. The corresponding plain text version of the email message is provided in the <code>Message</code> property.</p>"},{"location":"javascript/internet_protocol/#message","title":"Message","text":"<p>The <code>Message</code> property contains the plain text version of the email message. If there is a corresponding HTML-formatted version, for example, including embedded images, this version is provided in the `HtmlText property.</p>"},{"location":"javascript/internet_protocol/#messagedate","title":"MessageDate","text":"<p>The <code>MessageDate</code> property contains the date of the email message.</p>"},{"location":"javascript/internet_protocol/#replyto","title":"ReplyTo","text":"<p>The <code>ReplyTo</code> property lets you specify the return address of your email. You may specify multiple addresses in a semicolon-separated list. Addresses may be specified in the format of <code>\"Me@MyCompany.com\"</code> or as <code>\"My Name &lt;Me@MyCompany.com&gt;\"</code>. For example:</p> <p><code>wlHtmMailer.ReplyTo =</code><code>replyaddress</code></p>"},{"location":"javascript/internet_protocol/#size_2","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. For example:</p> <p><code>var filesize =</code><code>wlHtmMailer.Size</code></p>"},{"location":"javascript/internet_protocol/#subject","title":"Subject","text":"<p>The <code>Subject</code> property lets you specify the text appearing the subject field of your email. You use this property to provide a brief description of the contents of your email. For example:</p> <p><code>wlHtmMailer.Subject =</code><code>subjectheader</code></p>"},{"location":"javascript/internet_protocol/#to","title":"To","text":"<p>The <code>To</code> property lets you specify a recipient's email address. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of <code>\"Me@MyCompany.com\"</code> or as <code>\"My Name &lt;Me@MyCompany.com&gt;\"</code> For example:</p> <p><code>wlHtmMailer.To =</code><code>recipientaddress; recipientaddress</code></p>"},{"location":"javascript/internet_protocol/#wlhtmmailer-methods","title":"wlHtmMailer Methods","text":""},{"location":"javascript/internet_protocol/#addattachment","title":"AddAttachment()","text":"Syntax AddAttachment(string,  type, [encoding]) Parameters string The string you are sending  to the host. If you are sending a file, the string is the location and name  of the file. If you are sending a data attachment, the string is the data to  be attached. type The type of attachment you are sending.  Valid values are:   <code>File</code> (default)  <code>Data</code> [encoding] The type of encoding to apply to the file. Valid  values are:  <code>7Bit</code> (default)  <code>Quoted</code> <code>Base64</code> <code>8Bit</code> <code>8BitBinary</code> Return Value Returns an integer value  Attachment ID if successful, an exception if unsuccessful. Comments Adds an attachment to the message."},{"location":"javascript/internet_protocol/#connect","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You may  describe the host using its DNS number, or by giving its name. [port] The port to which you are  connecting. If you do not specify a port, the default session port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts a new session with the host."},{"location":"javascript/internet_protocol/#deleteattachment","title":"DeleteAttachment()","text":"Syntax DeleteAttachment(string) Parameters string The ID of the attachment you are deleting. Return Value Null if successful, an exception if  unsuccessful. Comments Removes an attachment from the article."},{"location":"javascript/internet_protocol/#disconnect","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the host."},{"location":"javascript/internet_protocol/#displaymetrics","title":"DisplayMetrics()","text":"Syntax DisplayMetrics() Return Value A string with the current metrics values. Comments Displays all the information gathered from  the last command or data transfer."},{"location":"javascript/internet_protocol/#getlocalhost","title":"GetLocalHost()","text":"Syntax GetLocalHost() Return Value Identification information for the  currently active local host. Comments Returns identification information for the  current local host."},{"location":"javascript/internet_protocol/#getstatusline_2","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the latest response  string if successful, an exception if unsuccessful. Comments Returns the latest response string from the  host."},{"location":"javascript/internet_protocol/#send","title":"Send()","text":"Syntax Send() Return Value Null if successful, an exception if unsuccessful. Comments Sends mail to recipients, attaching files using  MIME as necessary. After sending the attachments, data is deleted."},{"location":"javascript/internet_protocol/#sendcommand_2","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without  modification. This method is useful for interacting directly with the host  using non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#setlocalhost","title":"SetLocalHost()","text":"Syntax SetLocalHost(hostname) Parameters hostname Identification information for the new  local host. Return Value Assigns a new value for the local host. Comments Defines the local host from which the  emails are being sent."},{"location":"javascript/internet_protocol/#verify","title":"Verify()","text":"Syntax Verify() Return Value Returns a 1 if the address  is valid, a 0 if the address is invalid. If the method is unable to verify  the address due to authentication or other reasons, it returns an exception. Comments Checks that the address in the <code>To</code> property is valid. To use this method, include  only one address in the <code>To</code> property."},{"location":"javascript/internet_protocol/#wlhtmmailer","title":"WLHtmMailer()","text":"Syntax new WLHtmMailer() Return Value A new wlHtmMailer object. Comments Creates a new wlHtmMailer  object, used to interact with the server. Example <pre><code>function InitClient() { myNewFtpObject = new WLHtmMailer(); }</code></pre>"},{"location":"javascript/internet_protocol/#wlimap-object","title":"wlIMAP Object","text":"<p>The <code>wlIMAP</code> object provides support for IMAP4 (Internet Message Access Protocol) load and functional testing within WebLOAD. Support for standard IMAP operation is included. IMAP over secure connections (SSL) is not currently supported.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate <code>Connect()</code> method; otherwise an exception is thrown.</p> <p>To access the <code>wlIMAP</code> object, you must include the <code>wlImap.js</code> file in your <code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlimap-properties","title":"wlIMAP Properties","text":""},{"location":"javascript/internet_protocol/#currentmessage","title":"CurrentMessage","text":"<p>The <code>CurrentMessage</code> property returns the number of the current message. You use this property to track the current message in relation to other messages on the host. </p> <p>For example:</p> <p><code>var currentmessagenumber =</code><code>imap.CurrentMessage</code></p>"},{"location":"javascript/internet_protocol/#currentmessageid","title":"CurrentMessageID","text":"<p>The <code>CurrentMessageID</code> property returns the ID of the current message. You use this property to track the current message in relation to other messages on the host. For example:</p> <p><code>var messagenumber =</code><code>imap.CurrentMessageID</code></p>"},{"location":"javascript/internet_protocol/#document_2","title":"document","text":"<p>The <code>document</code> property is an object with four properties:</p> <ul> <li><code>Headers</code> \u2013 A string containing the header of the message</li> <li><code>MessageText</code> \u2013 A string containing the text of the message</li> <li><code>Size</code> \u2013 An integer describing the size of the message in bytes</li> <li><code>Attachments</code> \u2013 An array of objects, with each attachment existing as an object with the following properties:    <ul> <li><code>contentencoding</code> \u2013 The encoding of the attachment</li> <li><code>contenttype</code> \u2013 The content type of the attachment</li> <li><code>filename</code> \u2013 The file name of the attachment</li> <li><code>messagetext</code> \u2013 The text of the attachment</li> <li><code>partname</code> \u2013 The part name of the message</li> <li><code>size</code> \u2013 The size of the attachment in bytes</li> </ul> </li> </ul> <p>For example: <pre><code>var recentdocument = imap.document\nvar messageheaders = recentdocument.MessageHeaders\nvar messagetext = recentdocument.MessageText\nvar messagesize = recentdocument.MessageSize\nvar messageattachments = recentdocument.attachments\n</code></pre></p>"},{"location":"javascript/internet_protocol/#mailbox","title":"Mailbox","text":"<p>The Mailbox property specifies the name of the mailbox with which you want to interact. You use this property to create, edit, and delete mailboxes. </p> <p>For example: </p> <p><code>imap.Mailbox =</code><code>mailboxname</code></p>"},{"location":"javascript/internet_protocol/#maxlines","title":"MaxLines","text":"<p>The <code>MaxLines</code> property lets you specify the maximum number of lines per email to retrieve from an IMAP host. You use this property to specify the number of lines to retrieve from each email. </p> <p>For example: </p> <p><code>imap.Maxlines =</code><code>numberoflines</code></p>"},{"location":"javascript/internet_protocol/#outfile_2","title":"Outfile","text":"<p>The <code>Outfile</code> property lets you specify the name of an output file. You use this property to save a file or message locally on your computer. When you write to the <code>Outfile</code>, you overwrite the existing content. To avoid overwriting the existing content, you must specify a new <code>Outfile</code> each time you write.</p> <p>For example: </p> <p><code>imap.Outfile =</code>*<code>filename*</code></p>"},{"location":"javascript/internet_protocol/#password_2","title":"PassWord","text":"<p>The <code>PassWord</code> property lets you specify a password when logging on to a host. You use this property to log onto a restricted IMAP host. WebLOAD automatically sends the password to the IMAP host when a wlIMAP object connects to an IMAP host. </p> <p>For example: </p> <p><code>imap.PassWord =</code><code>password</code></p>"},{"location":"javascript/internet_protocol/#size_3","title":"Size","text":"<p>The <code>Size</code> property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. </p> <p>For example: </p> <p><code>var filesize =</code><code>imap.Size</code></p>"},{"location":"javascript/internet_protocol/#username_2","title":"UserName","text":"<p>The <code>UserName</code> property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted IMAP host. WebLOAD automatically sends the user name to the IMAP host when a wlIMAP object connects to an IMAP host.</p> <p>For example: </p> <p><code>imap.UserName =</code><code>username</code></p>"},{"location":"javascript/internet_protocol/#wlimap-methods","title":"wlIMAP Methods","text":""},{"location":"javascript/internet_protocol/#connect_1","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You may  describe the host using its DNS number, or by giving its name. port The port to which you are  connecting. If you do not specify a port, the default IMAP port (port 143) is  used. Return Value Null if successful, an exception if unsuccessful. Comments Starts an IMAP session  with the host. When you connect, you are connecting to a specific mailbox  within the host, as specified by your User ID."},{"location":"javascript/internet_protocol/#createmailbox","title":"CreateMailbox()","text":"Syntax CreateMailbox() Return Value Null if successful, an exception if  unsuccessful. Comments Creates the mailbox  specified in the Mailbox property. The created mailboxes continue to exist  after the end of the script. To remove a mailbox, use the <code>DeleteMailbox()</code>  method."},{"location":"javascript/internet_protocol/#delete_2","title":"Delete()","text":"Syntax Delete([MessageSet]) Parameters MessageSet The identifier of the  message you want to delete. You may specify a single message number, or you  may specify a range, separated by a colon. For example, 1:10 deletes messages  one through ten. If you do not specify a message ID, the current message is  deleted. Return Value Null if successful, an exception if unsuccessful. Comments Deletes the message with  the corresponding ID. If no ID is specified, then the current message is  deleted."},{"location":"javascript/internet_protocol/#deletemailbox","title":"DeleteMailbox()","text":"Syntax DeleteMailbox() Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the mailbox specified in the Mailbox property."},{"location":"javascript/internet_protocol/#disconnect_1","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if unsuccessful. Comments Terminates a connection to the IMAP host."},{"location":"javascript/internet_protocol/#getmessagecount","title":"GetMessageCount()","text":"Syntax GetMessageCount() Return Value A string containing the number of messages on the  host if successful, an exception if unsuccessful. Comments Returns the number of messages waiting on  the host."},{"location":"javascript/internet_protocol/#getstatusline_3","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the latest response  string if successful, an exception if unsuccessful. Comments Returns the latest response string from the  host."},{"location":"javascript/internet_protocol/#listmailboxes","title":"ListMailboxes()","text":"Syntax ListMailboxes(pattern) Parameters pattern The mailbox that you want to appear in the list.  This may be a specific name, or it may contain wildcards. Return Value A string listing the  matching mailboxes if successful, an exception if unsuccessful. Comments Lists mailboxes matching the <code>pattern</code> parameter."},{"location":"javascript/internet_protocol/#recentmessagecount","title":"RecentMessageCount()","text":"Syntax RecentMessageCount() Return Value A string containing the  number of new messages on the host if successful, an exception if  unsuccessful. Comments Returns the number of new messages waiting on the  host."},{"location":"javascript/internet_protocol/#renamemailbox","title":"RenameMailbox()","text":"Syntax RenameMailbox(string) Parameters string The new name for the mailbox. Return Value Null if successful, an exception if  unsuccessful. Comments Renames the mailbox specified in the  Mailbox property."},{"location":"javascript/internet_protocol/#retrieve","title":"Retrieve()","text":"Syntax Retrieve([MessageSet]) Parameters MessageSet The identifier of the  message you want to retrieve. You may specify a single message number, or you  may specify a range, separated by a colon. For example, 1:10 returns messages  one through ten. If you do not specify a message ID, the next message is returned. Return Value A document for each  message specified if successful, an exception if unsuccessful. Comments Returns the message with the corresponding  ID. If no ID is specified, then the next message is returned."},{"location":"javascript/internet_protocol/#search","title":"Search()","text":"Syntax Search(string) Parameters string The criteria for your search. Valid values are:  ALL \u2013 All messages in the mailbox -  this is the default initial key for AND-ing.  ANSWERED \u2013 Messages with the  \\Answered flag set.  BCC \u2013 Messages that contain the  specified string in the envelope structure's BCC field.  BEFORE \u2013 Messages whose internal date is  earlier than the specified date.  BODY \u2013 Messages that contain the  specified string in the body of the message.  CC \u2013 Messages that contain  the specified string in the envelope structure's CC field.  DELETED \u2013 Messages with the  \\Deleted flag set.  DRAFT \u2013 Messages with the  \\Draft flag set.  FLAGGED \u2013 Messages with the  \\Flagged flag set.  FROM \u2013 Messages that contain the  specified string in the envelope structure's FROM field.  HEADER \u2013 Messages that have a header with the specified field- name (as  defined in ) and that contains the specified string in the field-body.  KEYWORD \u2013 Messages with the specified keyword set.  LARGER \u2013 Messages with an size larger than the specified number of octets.NEW  Messages that have the \\Recent flag set but not the  \\Seen flag. This is functionally equivalent to  \"(RECENT UNSEEN)\".   NOT \u2013 Messages that do not  match the specified search key.   OLD \u2013  Messages that do not have the \\Recent flag set. This is functionally  equivalent to \"NOT RECENT\" (as opposed to \"NOT NEW\").  ON \u2013 Messages whose internal  date is within the specified date.   OR \u2013 Messages that match either  search key.  RECENT \u2013 Messages that  have the \\Recent flag set.  SEEN \u2013  Messages that have the \\Seen flag set.   SENTBEFORE \u2013 Messages whose Date:  header is earlier than the specified date.   SENTON \u2013 Messages whose Date: header is  within the specified date.   SENTSINCE \u2013 Messages whose Date: header is  within or later than the specified date.  SINCE \u2013 Messages whose internal date is  within or later than the specified date.   SMALLER \u2013 Messages with an  RFC822.SIZE smaller than the specified number of octets.  SUBJECT \u2013 Messages that contain  the specified string in the envelope structure's SUBJECT field.  TEXT \u2013 Messages that contain the specified string in the header or body of  the message.   TO \u2013 Messages that contain  the specified string in the envelope structure's TO field.  UID \u2013 Messages with unique  identifiers corresponding to the specified unique identifier set.   UNANSWERED \u2013 Messages that do not have the  \\Answered flag set.  UNDELETED \u2013 Messages that do not  have the \\Deleted flag set.   UNDRAFT \u2013 Messages that do not  have the \\Draft flag set.   UNFLAGGED \u2013 Messages that do not have the \\Flagged flag set.   UNKEYWORD \u2013 Messages that do not have the specified keyword set.   UNSEEN \u2013 Messages that do not  have the \\Seen flag set. Return Value A string containing the  IDs of messages that meet the search criteria if successful, an exception if  unsuccessful. Comments Searches the current  mailbox for messages meeting the specified search criteria."},{"location":"javascript/internet_protocol/#sendcommand_3","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without  modification. This method is useful for interacting directly with the host  using non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#subscribemailbox","title":"SubscribeMailbox()","text":"Syntax SubscribeMailbox() Return Value Null if successful, an exception if  unsuccessful. Comments Subscribes to the mailbox specified in the Mailbox property."},{"location":"javascript/internet_protocol/#unsubscribemailbox","title":"UnsubscribeMailbox()","text":"Syntax UnsubscribeMailbox() Return Value Null if successful, an exception if unsuccessful. Comments Unsubscribes from the mailbox specified in  the Mailbox  property."},{"location":"javascript/internet_protocol/#wlimap","title":"WLImap()","text":"Syntax new WLImap() Return Value A new wlIMAP object. Comments Creates a new wlIMAP object, used to  interact with the server. Example <pre><code>function InitClient() {</code></pre> <pre><code> myNewImapObject = new WLImap() </code></pre><pre><code>myNewImapObject.Connect(\"HostName\") }</code></pre>"},{"location":"javascript/internet_protocol/#imap-sample-code","title":"IMAP Sample Code","text":"<pre><code>// **script Initialization**\nfunction ** `InitAgenda()` ** {\n    IncludeFile(\"wlImap.js\", WLExecuteScript)\n}\n\nfunction ** InitClient() ** {\n    imap = new WLImap() // create the new IMAP object\n    // imap.Connect(\"HostName\"); // connect to the server\n}\n\nfunction ** TerminateClient() ** {\n    imap.Disconnect(); // logout from the server delete imap     // delete the IMAP object\n}\n//===================================================\n// **Body Of script**\nInfoMessage(\"Speed: \" + wlGlobals.ConnectionSpeed) wlGlobals.Debug = 1;\nimap.UserName = \"UserID\";\nimap.PassWord = \"TopSecret\";\nimap.Mailbox = \"Inbox\";\nimap.Connect(\"00.0.0.00\");\n//==================================================\n//**Test Retrieve**\n/*imap.Retrieve(\"100\");\n\nfor (var i = 0; i &lt; imap.wlSource.length; i++)\n\n{\n\nInfoMessage(imap.wlSource[i]); InfoMessage(imap.document.length); InfoMessage(imap.document[i].headers); InfoMessage(imap.document[i].messageText); InfoMessage(imap.document[i].size); InfoMessage(imap.document[i].attachments.length);\n\nfor (var j = 0; j &lt; imap.document[i].attachments.length; j++)\n\n{\n\nInfoMessage(imap.document[i].attachments[j].contentEncoding); InfoMessage(imap.document[i].attachments[j].contentType); InfoMessage(imap.document[i].attachments[j].filename); InfoMessage(imap.document[i].attachments[j].messageText); InfoMessage(imap.document[i].attachments[j].partName); InfoMessage(imap.document[i].attachments[j].size);\n\n}\n\n\n\n\n\n\n\n}*/\n//===========================================================\n//**Test Delete**\nimap.Mailbox = \"Inbox\";\nInfoMessage(imap.GetMessageCount());\nimap.Mailbox = \"Inbox\";\nimap.Delete(\"2\");\nimap.Mailbox = \"Inbox\";\nInfoMessage(imap.GetMessageCount());\n//==========================================================\n//**Test Mailbox Functions:**\n//      list mailboxes, create mailbox, and then list again\n/*InfoMessage(\"mailboxes are:\") var v1 = imap.ListMailboxes(); for(var i=0; i &lt; v1.length; i++)\n\nInfoMessage(v1[i]); imap.Mailbox=\"mailboxname\"; imap.CreateMailbox(); InfoMessage(\"mailboxes are:\") var v1 = imap.ListMailboxes(); for(var i=0; i &lt; v1.length; i++)\n\nInfoMessage(v1[i]);\n\n*/\n//=======================================================\n//      subscribe mailbox, list all subscribed mailboxes\n//imap.Mailbox=\"mailboxname\";\n//imap.SubscribeMailbox();\n/*InfoMessage(\"subscribed mailboxes are:\") var v2 = imap.ListSubscribedMailboxes(); for(var j=0; j &lt; v2.length; j++)\n\n{\n\nInfoMessage(v2[j]); imap.Mailbox=v2[j];\n\n}*/\n//=======================================================\n//         list subscribed mailboxes,unsubscribe mailbox,\n//           and then list all subscribed mailboxes again\n/*InfoMessage(\"subscribed mailboxes are:\") var v2 = imap.ListSubscribedMailboxes(); for(var j=0; j &lt; v2.length; j++)\n\n{\n\nInfoMessage(v2[j]);\n\n\n\n\n\n\n\nimap.Mailbox=v2[j];\n\n}\n\nimap.Mailbox=\"mailboxname\"; imap.UnsubscribeMailbox(); InfoMessage(\"subscribed mailboxes are:\") var v2 = imap.ListSubscribedMailboxes(); for(var j=0; j &lt; v2.length; j++)\n\n{\n\nInfoMessage(v2[j]); imap.Mailbox=v2[j];\n\n}\n\n*/\n//====================================================\n//            list mailboxes, rename mailbox,\n//            and then list mailboxes again\n/*InfoMessage(\"mailboxes are:\") var v1 = imap.ListMailboxes(); for(var i=0; i &lt; v1.length; i++)\n\nInfoMessage(v1[i]); imap.Mailbox=\"boxname\"; imap.RenameMailbox(\"newName\"); InfoMessage(\"mailboxes are:\") var v1 = imap.ListMailboxes(); for(var i=0; i &lt; v1.length; i++)\n\nInfoMessage(v1[i]);\n\n*/\n//======================================================\n//            get number of messages from a mailbox\n/*imap.Mailbox=\"main\"; InfoMessage(imap.GetMessageCount()); imap.Mailbox=\"Inbox\"; InfoMessage(imap.GetRecentMessageCount());\n\n*/\n//====================================================\n//            delete mailbox and list all the mailboxes\n/*imap.Mailbox=\"mailboxname\"; \n\nimap.DeleteMailbox(); InfoMessage(\"subscribed mailboxes are:\") var v2 = imap.ListSubscribedMailboxes(); for(var j=0; j &lt; v2.length; j++)\n\n{\n\nInfoMessage(v2[j]); \n\nimap.Mailbox=v2[j];\n\n}\n\n\n\n\n\n\n\n*/\n//=========================================================\n//            search\n/*imap.Mailbox=\"Inbox\";\n\nvar found = imap.Search(\"CC [user@address.com\");](mailto:user@address.com) InfoMessage(\"found:\")\n\nfor(var j=0; j &lt; found.length; j++)\n\n{\n\nInfoMessage(found[j]);\n\n}\n\ncatch (e)\n\n{\n\nInfoMessage (\"Error\" + e)\n\n}\n\n*/\n//===========================================================\nimap.Disconnect();\ndelete imap\nInfoMessage(\"done\")\n</code></pre>"},{"location":"javascript/internet_protocol/#wlnntp-object","title":"wlNNTP Object","text":"<p>The wlNNTP (Network News Transfer Protocol) object provides support for NNTP load and functional testing within WebLOAD. Support for standard NNTP operation is included. NNTP over secure connections (SSL) is not currently supported.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception is thrown.</p> <p>You must include catch and try functions in your script to handle exceptions when using the wlNNTP object. If you do not, the object may cause your script to freeze. A sample catch appears in the NNTP code sample at the end of this section.</p> <p>To access the wlNNTP object, you must include the wlNntp.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlnntp-properties","title":"wlNNTP Properties","text":""},{"location":"javascript/internet_protocol/#articletext","title":"ArticleText","text":"<p>The ArticleText property lets you specify the text appearing in the body of your article. You use this property to write the text of the article itself. </p> <p>For example:</p> <p><code>nntp.ArticleText = *articlecontent*</code></p>"},{"location":"javascript/internet_protocol/#attachments","title":"Attachments","text":"<p>The Attachments property lets you specify an attachment to a posting. The filename variable should contain the name of the local file or datastream that you want to attach to the posting. For example:</p> <p><code>nntp.Attachments = filename</code></p>"},{"location":"javascript/internet_protocol/#attachmentsencoding","title":"AttachmentsEncoding","text":"<p>The AttachmentsEncoding property lets you specify the type of encoding you are applying to a message attachment. This property must be specified for each attachment. </p> <p>Valid values are:</p> <ul> <li>7Bit</li> <li> <p>Quoted</p> </li> <li> <p>Base64</p> </li> <li> <p>8Bit</p> </li> <li> <p>8BitBinary</p> </li> </ul> <p>You may also specify the encoding using the following constants: </p> <ul> <li> <p>WLNntp.ENC_7BIT \u2013 7bit encoding</p> </li> <li> <p>WLNntp.ENC_QUOTED \u2013 Quoted Printable encoding</p> </li> <li> <p>WLNntp.ENC_BASE64 \u2013 Base64 encoding</p> </li> <li> <p>WLNntp.ENC_8BIT \u2013 8Bit encoding</p> </li> <li> <p>WLNntp.ENC_8BITBINARY \u2013 Binary encoding For example:</p> </li> <li> <p>nntp.AttachmentsEncoding = encodingtype</p> </li> </ul>"},{"location":"javascript/internet_protocol/#attachmentstypes","title":"AttachmentsTypes","text":"<p>The AttachmentsTypes property lets you specify the type of attachment you are including in a posting. This property must be specified for each attachment. </p> <p>Valid values are: </p> <ul> <li>true \u2013 Specifies a type of file</li> <li>false \u2013 Specifies a type of data </li> </ul> <p>For example:</p> <p><code>nntp.AttachmentsTypes = typeofattachment</code></p>"},{"location":"javascript/internet_protocol/#document_3","title":"Document","text":"<p>The Document property is an object with two properties. One is a string, MessageText containing the text of the article, and the other is an array containing the article attachments and headers. </p> <p>For example:</p> <p>var recentdocument = nntp.document</p> <p>var messagetext = recentdocument.MessageText</p> <p>var messageattachments = recentdocument.attachments</p> <p>var firstattachment = messageattachments[0]</p> <p>var secondattachment = messageattachments[1]</p>"},{"location":"javascript/internet_protocol/#from_1","title":"From","text":"<p>The From property lets you describe the Reply To in plain language. You may use this property to identify your Reply To email address in a plain language format. </p> <p>For example: </p> <p><code>nntp.From = replyname</code></p>"},{"location":"javascript/internet_protocol/#group","title":"Group","text":"<p>The Group property specifies the article group with which you are interacting. You use this to limit searches, posts, and other activities to a specific group. For example:</p> <p><code>nntp.Group = groupname</code></p>"},{"location":"javascript/internet_protocol/#maxheaderslength","title":"MaxHeadersLength","text":"<p>The MaxHeadersLength property lets you specify the maximum length for headers in an article. You use this property to prevent line folding. For example:</p> <p><code>nntp.MaxHeadersLength = headersize</code></p>"},{"location":"javascript/internet_protocol/#organization","title":"Organization","text":"<p>The Organization property identifies the affiliation of the author. You use this property to identify your professional or personal affiliation. For example:</p> <p><code>nntp.Organization = organizationname</code></p>"},{"location":"javascript/internet_protocol/#outfile_3","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save a file or article locally on your computer. For example:</p> <p><code>nntp.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#password_3","title":"PassWord","text":"<p>The PassWord property lets you specify a password when logging on to a host. You use this property to log onto a restricted NNTP host. WebLOAD automatically sends the password to the NNTP host when a wlNNTP object connects to an NNTP host. For example:</p> <p><code>nntp.PassWord = *password*</code></p> <p>Caution: The password appears in plain text in the script. The password is visible to any user who has access to the script.</p>"},{"location":"javascript/internet_protocol/#references","title":"References","text":"<p>The References property lets you specify articles that the posted article follows. You use this property to create a thread of related articles. If the resulting reference header is longer than the limit specified in the MaxHeadersLength property, it is folded.</p> <p>References must be separated by commas with no spaces in between. For example:</p> <p><code>nntp.References = article1,article2</code></p>"},{"location":"javascript/internet_protocol/#replyto_1","title":"ReplyTo","text":"<p>The ReplyTo property lets you specify the reply address for additional postings. For example:</p> <p><code>nntp.ReplyTo = replyaddress</code></p>"},{"location":"javascript/internet_protocol/#size_4","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. For example:</p> <p><code>var filesize = nntp.Size</code></p>"},{"location":"javascript/internet_protocol/#subject_1","title":"Subject","text":"<p>The Subject property lets you specify the text appearing the subject field of your email. You use this property to provide a brief description of the contents of your article. For example:</p> <p><code>nntp.Subject = subjectheader</code></p>"},{"location":"javascript/internet_protocol/#to_1","title":"To","text":"<p>The To property lets you specify the newsgroup to receive your posting. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every article. For example:</p> <p><code>nntp.To = alt.newsgroup.name; rec.newsgroup.name</code></p>"},{"location":"javascript/internet_protocol/#username_3","title":"UserName","text":"<p>The UserName property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted NNTP host. WebLOAD automatically sends the user name to the NNTP host when a wlNNTP object connects to an NNTP host. For example:</p> <p><code>nntp.UserName = username</code></p>"},{"location":"javascript/internet_protocol/#wlnntp-methods","title":"wlNNTP Methods","text":""},{"location":"javascript/internet_protocol/#addattachment_1","title":"AddAttachment()","text":"Syntax AddAttachment(string,  type, [encoding]) Parameters string The string you are sending  to the host. If you are sending a file, the string is the location and name  of the file. If you are sending a data attachment, the string is the data to  be attached. type The type of attachment you are sending.  Valid values are:  File (default)  Data [encoding] The type of encoding to apply to the file.  Valid values are:  7Bit (default) Quoted Base64 8Bit  8BitBinary Return Value Returns an integer value  Attachment ID if successful, an exception if unsuccessful. Comments Adds an attachment to the message."},{"location":"javascript/internet_protocol/#connect_2","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You  may describe the host using its DNS number, or by giving its name. [port] The port to which you are  connecting. If you do not specify a port, the default session port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts a new session with the host."},{"location":"javascript/internet_protocol/#deleteattachment_1","title":"DeleteAttachment()","text":"Syntax DeleteAttachment(string) Parameters string The ID of the attachment you are deleting. Return Value Null if successful, an exception if  unsuccessful. Comments Removes an attachment from the article."},{"location":"javascript/internet_protocol/#disconnect_2","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the host."},{"location":"javascript/internet_protocol/#getarticle","title":"GetArticle()","text":"Syntax GetArticle(messageNumber) Parameters message  Number The number of the message that you want to  retrieve. Return Value Null if successful. The article is stored  in the document property. An exception if unsuccessful. Comments Gets the headers and body  of the article specified in the messageNumber parameter for the group specified in the Group  property. If  the Outfile property is specified, the  returned article is stored in the output file as well as in the document  property."},{"location":"javascript/internet_protocol/#getarticlecount","title":"GetArticleCount()","text":"Syntax GetArticleCount() Return Value An integer count of the  number of articles in the group if successful, an exception if unsuccessful. Comments Returns the number of articles in the group  specified by the  Group property."},{"location":"javascript/internet_protocol/#getstatusline_4","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the  latest response string if successful, an exception if unsuccessful. Comments Returns the latest response string from the host."},{"location":"javascript/internet_protocol/#groupoverview","title":"GroupOverview()","text":"Syntax GroupOverview([range]) Parameters [range] The range for articles you  want to view. The format for range is first-last, where first is \"\" (an empty string) or  positive number, and last is \"\", a positive number, or the token end. Return Value An array of objects if  successful. Each object contains one article, and the properties articleDate, articleLines, articleNumber, from, messageID, otherHeaders, references, and subject. The method returns an  exception if unsuccessful. Comments Returns an overview for  the articles in range for the group specified in the Group property."},{"location":"javascript/internet_protocol/#listgroups","title":"ListGroups()","text":"Syntax ListGroups([startDate]) Parameters [startDate] The earliest creation date  to search. Groups created before this date are not listed. If you do not  specify a start date, all groups are listed.  The format for startDate is YYMMDD HHMMSS. Return Value An array of objects if  successful. Each object contains the following properties, Canpost, lastArticle, firstArticle, and group. The method returns an  exception if unsuccessful. Comments Lists the newsgroups available on the host."},{"location":"javascript/internet_protocol/#postarticle","title":"PostArticle()","text":"Syntax PostArticle() Return Value Null if successful. The article is stored  in the document property. An exception if unsuccessful. Comments Posts the article to the  host, attaching files using MIME as necessary. The article is constructed  using the following properties and methods:  Header  Properties  From Subject  Organization To  ReplyTo References MaxHeadersLength  Body Properties/Methods ArticleText() AddAttachment()  DeleteAttachment()"},{"location":"javascript/internet_protocol/#sendcommand_4","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without  modification. This method is useful for interacting directly with the host  using non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#wlnntp","title":"WLNntp()","text":"Syntax new WLNntp() Return Value A new wlNNTP object. Comments Creates a new wlNNTP object, used to interact with  the server. Example myNewNntpObject  = new WLNntp()"},{"location":"javascript/internet_protocol/#nntp-sample-code","title":"NNTP Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction **`InitAgenda()`** { IncludeFile(\"wlNntp.js\",WLExecuteScript)\n\n}\n\n//===================================================\n\n\n\n//**Body Of script**\n\nInfoMessage(\"Speed: \"+wlGlobals.ConnectionSpeed) nntp=new WLNntp()\n\nwlGlobals.Debug=1; InfoMessage(\"before login\") nntp.UserName=\"UserID\" nntp.PassWord=\"TopSecret\" nntp.Connect(\"hostname\")\n\n//=========================================================\n\n\n\n//**Test ListGoups**\n\n/*v = nntp.ListGroups(); InfoMessage(v.length);\n\nfor (var i = 0; i &lt; v.length; i++)\n\n{\n\nInfoMessage(\"canPost = \"+v[i].canPost); InfoMessage(\"first article = \"+v[i].firstArticle); InfoMessage(\"group = \"+v[i].group); InfoMessage(\"last article = \"+v[i].lastArticle);\n\n}\n\n*/\n\n//===========================================================\n\n\n\n//**Test GroupOverview**\n\n/*nntp.Group=\"alt.groupname\"; v = nntp.GroupOverview(); InfoMessage(v.length);\n\nfor (var i = 0; i &lt; v.length; i++)\n\n\n\n\n\n\n\n{\n\nInfoMessage(\"article date = \"+v[i].articleDate); InfoMessage(\"article lines = \"+v[i].articleLines); InfoMessage(\"article number = \"+v[i].articleNumber); InfoMessage(\"article size = \"+v[i].articleSize); InfoMessage(\"from = \"+v[i].from); InfoMessage(\"messageId = \"+v[i].messageId); InfoMessage(\"other headers = \"+v[i].otherHeaders); InfoMessage(\"references = \"+v[i].references); InfoMessage(\"subject = \"+v[i].subject);\n\n}\n\n*/\n\n//=========================================================\n\n\n\n//**Test GetArticleCount**\n\n//nntp.Group=\"alt.groupname\";\n\n//InfoMessage(nntp.GetArticleCount()); nntp.Group=\"alt.groupname\"; InfoMessage(nntp.GetArticleCount());\n\n//=========================================================\n\n\n\n//**Test GetArticle**\n\n/*nntp.Group=\"alt.groupname\"; nntp.Outfile=\"c:\\\\temp\\\\article.txt\"; nntp.GetArticle(1); InfoMessage(nntp.document);\n\n*/\n\n//==========================================================\n\n\n\n//**Test post article** nntp.From=\"poster name\"; nntp.Subject=\"nntp test posting\"; nntp.Organization=\"OrgName\";\n\nnntp.To=\"control.cancel, alt.groupname\"; [nntp.ReplyTo=\"poster@organization.org\";](mailto:poster@organization.org) [nntp.References=\"anization.org&gt;\"; nntp.MaxHeadersLength=100;\n\nnntp.ArticleText=\"hello world\";\n\n//id1 = nntp.AddAttachment\n\n//        (\"c:\\\\temp\\\\file1.txt\", \"file\", WLNntp.ENC_7BIT);\n\n//id2 = nntp.AddAttachment\n\n//        (\"c:\\\\temp\\\\file2.txt\", \"file\", WLNntp.ENC_7BIT);\n\n//id5 = nntp.AddAttachment\n\n//        (\"c:\\\\downloded.gif\", \"file\", WLNntp.ENC_BASE64);\n\n\n\n\n\n\n\n//id3 = nntp.AddAttachment\n\n//        (\"c:\\\\temp\\\\file3.txt\", \"file\", WLNntp.ENC_7BIT);\n\n//id4 = nntp.AddAttachment\n\n//        (\"c:\\\\temp\\\\file4.txt\", \"file\", WLNntp.ENC_7BIT);\n\n//nntp.DeleteAttachment(id3);\n\n//nntp.DeleteAttachment(id1);\n\n//nntp.DeleteAttachment(id4);\n\ntry      //catch to handle exceptions\n\n{\n\nnntp.PostArticle();\n\n}\n\ncatch (e)\n\n{\n\nInfoMessage (\"Error\" + e)\n\n}\n\n//==========================================================\n\n//InfoMessage(nntp.GetStatusLine()); nntp.Disconnect()\n\ndelete nntp InfoMessage(\"done\")\n</code></pre>"},{"location":"javascript/internet_protocol/#wlpop-object","title":"wlPOP Object","text":"<p>The wlPOP object provides support for POP3 (Post Office Protocol) load and functional testing within WebLOAD. Support for standard POP operation is included. POP over secure connections (SSL) is supported through the wlPOPs Object</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception is thrown.</p> <p>To access the wlPOP object, you must include the wlPop.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlpop-properties","title":"wlPOP Properties","text":""},{"location":"javascript/internet_protocol/#autodelete","title":"AutoDelete","text":"<p>The AutoDelete property lets you specify whether or not to automatically delete an email once it has been read. You use this property to save or remove messages from your host. For example:</p> <p><code>pop.AutoDelete = status</code></p>"},{"location":"javascript/internet_protocol/#document_4","title":"document","text":"<p>The document property is an object with four properties:</p> <ul> <li> <p>Headers \u2013 A string containing the header of the message</p> </li> <li> <p>MessageText \u2013 A string containing the text of the message</p> </li> <li> <p>Size \u2013 An integer describing the size of the message in bytes</p> </li> <li> <p>Attachments \u2013 An array of objects, with each attachment existing as an object with the following properties:</p> </li> <li> <p>contentencoding \u2013 The encoding of the attachment</p> </li> <li> <p>contenttype \u2013 The content type of the attachment</p> </li> <li> <p>filename \u2013 The file name of the attachment</p> </li> <li> <p>messagetext \u2013 The text of the attachment</p> </li> <li> <p>partname \u2013 The part name of the message</p> </li> <li> <p>size \u2013 The size of the attachment in bytes For example:</p> </li> <li> <p>var recentdocument = pop.document</p> </li> <li> <p>var messageheaders = recentdocument.MessageHeaders</p> </li> <li> <p>var messagetext = recentdocument.MessageText</p> </li> <li> <p>var messagesize = recentdocument.MessageSize</p> </li> <li> <p>var messageattachments = recentdocument.attachments</p> </li> </ul>"},{"location":"javascript/internet_protocol/#headers","title":"Headers[]","text":"<p>The Headers property is an array of objects containing header information from the host. Each object contains a key and an array of headers. For example:</p> <p><code>var headersvalue = *pop.Headers[0]*</code></p> <p><code>var headerskey=*headersvalue.key*</code></p> <p><code>var headerstringvalues=*headersvalue.values[0]</code>*</p>"},{"location":"javascript/internet_protocol/#maxlines_1","title":"MaxLines","text":"<p>The MaxLines property lets you specify the maximum number of lines per email to retrieve from a POP host. You use this property to specify the number of lines to retrieve from each email. For example:</p> <p><code>pop.Maxlines = numberoflines</code></p>"},{"location":"javascript/internet_protocol/#outfile_4","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save a file or message locally on your computer. When you write to the Outfile, you overwrite the existing content. To avoid overwriting the existing content, you must specify a new Outfile each time you write. For example:</p> <p><code>pop.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#password_4","title":"PassWord","text":"<p>The PassWord property lets you specify a password when logging on to a host. You use this property to log onto a restricted POP host. WebLOAD automatically sends the password to the POP host when a wlPOP object connects to a POP host. For example:</p> <p><code>pop.PassWord = password</code></p> <p>Caution: The password appears in plain text in the script. The password is visible to any user who has access to the script.</p>"},{"location":"javascript/internet_protocol/#size_5","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption For example:</p> <p><code>var filesize = pop.Size</code></p>"},{"location":"javascript/internet_protocol/#username_4","title":"UserName","text":"<p>The UserName property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted POP host. WebLOAD automatically sends the user name to the POP host when a wlPOP object connects to a POP host. For example:</p> <p><code>pop.UserName = username</code></p>"},{"location":"javascript/internet_protocol/#wlsource","title":"wlSource","text":"<p>The wlSource property contains the encoded multipart source of the message. This is the format in which the message is stored in the Outfile property. For example:</p> <p><code>var messagesource = pop.wlSource</code></p>"},{"location":"javascript/internet_protocol/#wlpop-methods","title":"wlPOP Methods","text":""},{"location":"javascript/internet_protocol/#connect_3","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You  may describe the host using its DNS number, or by giving its name. [port] The port to which you are  connecting. If you do not specify a port, the default POP port is used. Return Value An exception if  unsuccessful. On success the return value is undefined. Comments Starts a POP session with the host. When you  connect, you are connecting to a specific mailbox within the host, as  specified by your UserID."},{"location":"javascript/internet_protocol/#delete_3","title":"Delete()","text":"Syntax Delete([MessageID]) Parameters messageID The identifier of the message you want to delete.  If you do not specify a message ID, the current message is deleted. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the message with  the corresponding ID. If no ID is specified, then the current message is  deleted."},{"location":"javascript/internet_protocol/#disconnect_3","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the POP server."},{"location":"javascript/internet_protocol/#getcurrentmessageid","title":"GetCurrentMessageID()","text":"Syntax GetCurrentMessageID() Return Value The ID of the current  message if successful, an exception if unsuccessful. Comments Returns the ID of the current message."},{"location":"javascript/internet_protocol/#getmailboxsize","title":"GetMailboxSize()","text":"Syntax GetMailboxSize() Return Value A string describing the size of the mailbox  in bytes if successful. Comments Returns the total size of the mailbox in bytes."},{"location":"javascript/internet_protocol/#getmessagecount_1","title":"GetMessageCount()","text":"Syntax GetMessageCount() Return Value A string containing the number of messages  on the host if successful. Comments Returns the number of messages waiting on  the host."},{"location":"javascript/internet_protocol/#getstatusline_5","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the  latest response string if successful, an exception if unsuccessful. Comments Returns the latest response string from the  host."},{"location":"javascript/internet_protocol/#reset","title":"Reset()","text":"Syntax Reset() Return Value Null if successful, an exception if  unsuccessful. Comments Undoes all actions,  including deletions, returning the host to its state at the start of the  session. If this call is not made, disconnecting from the POP host applies  all actions."},{"location":"javascript/internet_protocol/#retrieve_1","title":"Retrieve()","text":"Syntax Retrieve([MessageID]) Parameters MessageID The identifier of the  message you want to retrieve. If you do not specify a message ID, the next  message is returned. Return Value Returns the message and populates the  document property. Comments Returns the message with the corresponding  ID. If no ID is specified, then the next message is returned"},{"location":"javascript/internet_protocol/#sendcommand_5","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without  modification. This method is useful for interacting directly with the host  using non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#wlpop","title":"WLPop()","text":"Syntax new WLPop() Return Value A new wlPOP object. Comments Creates a new wlPOP object, used to  interact with the server. Example var  myNewPopObject = new WLPop();"},{"location":"javascript/internet_protocol/#pop-sample-code","title":"POP Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction **`InitAgenda()`** { IncludeFile(\"wlPop.js\",WLExecuteScript)\n\n}\n\n/*function **InitClient()** {\n\n\n\n}*/\n\n/*function **TerminateClient()** { delete pop;\n\n}*/\n\n//===================================================\n\n\n\n//**Body Of script**.\n\n//InfoMessage(\"Speed: \"+wlGlobals.ConnectionSpeed) wlGlobals.Debug=1\n\nvar pop=new WLPop(); pop.UserName=\"UserID\" pop.PassWord=\"TopSecret\" pop.Connect(\"00.0.0.00\");\n\n//======================================================\n\n\n\n//**Test General Functions**\n\n/*count = pop.GetMessageCount();\n\n\n\n\n\n\n\nInfoMessage(\"number of messages= \"+ count); count = pop.GetMailboxSize(); InfoMessage(\"size= \"+ count);\n\nstatus = pop.GetStatusLine(); InfoMessage(\"status= \"+ status); pop.SendCommand(\"hello\"); status = pop.GetStatusLine(); InfoMessage(\"status= \"+ status);\n\n*/\n\n//=======================================================\n\n\n\n//**Test Delete And Reset**\n\n//two tests:\n\n//1. if run as is, # of msgs should remain the same\n\n//2. if run with pop.Reset commented out, # of   msgs should be smaller\n\nInfoMessage(\"number of messages= \"+ pop.GetMessageCount());\n\n//InfoMessage(pop.GetCurrentMessageID);\n\n//pop.MaxLines=0; pop.Delete(15);\n\nInfoMessage(\"number of messages= \"+ pop.GetMessageCount());\n\n//InfoMessage(pop.GetCurrentMessageID);\n\n//pop.Reset(); pop.Disconnect(); pop.Connect(\"00.0.0.00\")\n\nInfoMessage(pop.GetStatusLine());\n\n//InfoMessage(pop.GetCurrentMessageID); InfoMessage(\"number of messages= \"+ pop.GetMessageCount());\n\n//==========================================================\n\n\n\n//**Test Retrieve**\n\n//InfoMessage(\"number of messages= \"+ pop.GetMessageCount());\n\n//InfoMessage(pop.GetCurrentMessageID);\n\n//pop.AutoDelete=true\n\n/*pop.Outfile=\"*.xyz\";\n\n//pop.MaxLines=0;\n\nvar count = pop.GetMessageCount(); InfoMessage(count);\n\nfor(var w = 1; w &lt;= count; w++)\n\n{\n\npop.Retrieve(w); InfoMessage(pop.document.headers); InfoMessage(pop.document.messageText); InfoMessage(pop.document.size);\n\n\n\n\n\n\n\nInfoMessage(pop.document.attachments.length);\n\nfor (var j = 0; j &lt; pop.document.attachments.length; j++)\n\n{\n\nInfoMessage(pop.document.attachments[j].contentEncoding); InfoMessage(pop.document.attachments[j].contentType); InfoMessage(pop.document.attachments[j].filename); InfoMessage(pop.document.attachments[j].messageText); InfoMessage(pop.document.attachments[j].partName); InfoMessage(pop.document.attachments[j].size);\n\n}\n\nInfoMessage(\"Headers:\");\n\nfor (var i = 0; i &lt; pop.Headers.length; i++)\n\n{\n\nfor (var j = 0; j &lt; pop.Headers[i].values.length; j++)\n\n{\n\nInfoMessage(pop.Headers[i].key + \" = \" +\n\npop.Headers[i].values[j]);\n\n}\n\n}\n\nInfoMessage(\"body\"+pop.wlSource);\n\n}*/\n\ncatch (e)\n\n{\n\nInfoMessage (\"Error\" + e)\n\n}\n\npop.Disconnect();\n\n//==========================================================\n</code></pre>"},{"location":"javascript/internet_protocol/#wlpops-object","title":"wlPOPs Object","text":"<p>The wlPOPs object provides support for POP3 (Post Office Protocol) load and functional testing over secure connections (SSL).</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception is thrown.</p> <p>To access the wlPOPs object, you must include the wlPops.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlpops-properties","title":"wlPOPs Properties","text":""},{"location":"javascript/internet_protocol/#autodelete_1","title":"AutoDelete","text":"<p>The AutoDelete property lets you specify whether or not to automatically delete an email once it has been read. You use this property to save or remove messages from your host. For example:</p> <p><code>pop.AutoDelete = status</code></p>"},{"location":"javascript/internet_protocol/#document_5","title":"document","text":"<p>The document property is an object with four properties:</p> <ul> <li> <p>Headers \u2013 A string containing the header of the message</p> </li> <li> <p>MessageText \u2013 A string containing the text of the message</p> </li> <li> <p>Size \u2013 An integer describing the size of the message in bytes</p> </li> <li> <p>Attachments \u2013 An array of objects, with each attachment existing as an object with the following properties:</p> </li> <li> <p>contentencoding \u2013 The encoding of the attachment</p> </li> <li> <p>contenttype \u2013 The content type of the attachment</p> </li> <li> <p>filename \u2013 The file name of the attachment</p> </li> <li> <p>messagetext \u2013 The text of the attachment</p> </li> <li> <p>partname \u2013 The part name of the message</p> </li> <li> <p>size \u2013 The size of the attachment in bytes For example:</p> </li> <li> <p>var recentdocument = pop.document</p> </li> <li> <p>var messageheaders = recentdocument.MessageHeaders</p> </li> <li> <p>var messagetext = recentdocument.MessageText</p> </li> <li> <p>var messagesize = recentdocument.MessageSize</p> </li> <li> <p>var messageattachments = recentdocument.attachments</p> </li> </ul>"},{"location":"javascript/internet_protocol/#headers_1","title":"Headers[]","text":"<p>The Headers property is an array of objects containing header information from the host. Each object contains a key and an array of headers. For example:</p> <ul> <li> <p>var headersvalue = pop.Headers[0]</p> </li> <li> <p>var headerskey=headersvalue.key</p> </li> <li> <p>var headerstringvalues=headersvalue.values[0]</p> </li> </ul>"},{"location":"javascript/internet_protocol/#maxlines_2","title":"MaxLines","text":"<p>The MaxLines property lets you specify the maximum number of lines per email to retrieve from a POP host. You use this property to specify the number of lines to retrieve from each email. For example:</p> <p><code>pop.Maxlines = numberoflines</code></p>"},{"location":"javascript/internet_protocol/#outfile_5","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save a file or message locally on your computer. When you write to the Outfile, you overwrite the existing content. To avoid overwriting the existing content, you must specify a new Outfile each time you write. For example:</p> <p><code>pop.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#password_5","title":"PassWord","text":"<p>The PassWord property lets you specify a password when logging on to a host. You use this property to log onto a restricted POP host. WebLOAD automatically sends the password to the POP host when a wlPOP object connects to a POP host. For example:</p> <p><code>pop.PassWord = password</code></p> <p>Caution: The password appears in plain text in the script. The password is visible to any user who has access to the script.</p>"},{"location":"javascript/internet_protocol/#size_6","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption For example:</p> <p><code>var filesize = pop.Size</code></p>"},{"location":"javascript/internet_protocol/#username_5","title":"UserName","text":"<p>The UserName property lets you specify a User ID when logging on to a host. You use this property to log onto a restricted POP host. WebLOAD automatically sends the user name to the POP host when a wlPOP object connects to a POP host. For example:</p> <p><code>pop.UserName = username</code></p>"},{"location":"javascript/internet_protocol/#wlsource_1","title":"wlSource","text":"<p>The wlSource property contains the encoded multipart source of the message. This is the format in which the message is stored in the Outfile property. For example:</p> <p><code>var messagesource = pop.wlSource</code></p>"},{"location":"javascript/internet_protocol/#wlpops-methods","title":"wlPOPs Methods","text":""},{"location":"javascript/internet_protocol/#connect_4","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You  may describe the host using its DNS number, or by giving its name. [port] The port to which you are  connecting. If you do not specify a port, the default POP port is used. Return Value An exception if  unsuccessful. On success the return value is undefined. Comments Starts a POP session with the host. When  you connect, you are connecting to a specific mailbox within the host, as  specified by your UserID."},{"location":"javascript/internet_protocol/#delete_4","title":"Delete()","text":"Syntax Delete([MessageID]) Parameters messageID The identifier of the message you want to  delete. If you do not specify a message ID, the current message is deleted. Return Value Null if successful, an exception if  unsuccessful. Comments Deletes the message with  the corresponding ID. If no ID is specified, then the current message is  deleted."},{"location":"javascript/internet_protocol/#disconnect_4","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the POP server."},{"location":"javascript/internet_protocol/#getcurrentmessageid_1","title":"GetCurrentMessageID()","text":"Syntax GetCurrentMessageID() Return Value The ID of the current  message if successful, an exception if unsuccessful. Comments Returns the ID of the current message."},{"location":"javascript/internet_protocol/#getmailboxsize_1","title":"GetMailboxSize()","text":"Syntax GetMailboxSize() Return Value A string describing the size of the mailbox in  bytes if successful. Comments Returns the total size of the mailbox in  bytes."},{"location":"javascript/internet_protocol/#getmessagecount_2","title":"GetMessageCount()","text":"Syntax GetMessageCount() Return Value A string containing the  number of messages on the host if successful. Comments Returns the number of messages waiting on  the host."},{"location":"javascript/internet_protocol/#getstatusline_6","title":"GetStatusLine()","text":"Syntax GetStatusLine() Return Value A string containing the latest response  string if successful, an exception if unsuccessful. Comments Returns the latest response string from the  host."},{"location":"javascript/internet_protocol/#reset_1","title":"Reset()","text":"Syntax Reset() Return Value Null if successful, an exception if  unsuccessful. Comments Undoes all actions,  including deletions, returning the host to its state at the start of the  session. If this call is not made, disconnecting from the POP host applies  all actions."},{"location":"javascript/internet_protocol/#retrieve_2","title":"Retrieve()","text":"Syntax Retrieve([MessageID]) Parameters MessageID The identifier of the  message you want to retrieve. If you do not specify a message ID, the next  message is returned. Return Value Returns the message and populates the  document property. Comments Returns the message with the corresponding ID. If  no ID is specified, then the next message is returned"},{"location":"javascript/internet_protocol/#sendcommand_6","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without  modification. This method is useful for interacting directly with the host  using non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#wlpops","title":"WLPops()","text":"Syntax new WLPops() Return Value A new wlPOPs object. Comments Creates a new wlPOPs object, used to  interact with the server. Example var  myNewPopObject = new WLPops();"},{"location":"javascript/internet_protocol/#wlsmtp-object","title":"wlSMTP Object","text":"<p>The wlSMTP object provides support for Simple Mail Transfer Protocol (SMTP) load and functional testing within WebLOAD. Support for standard SMTP operation is included. SMTP over secure connections (SSL) is supported through the wlSMTPs Object .</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception should be thrown.</p> <p>To access the wlSMTP object, you must include the wlSmtp.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlsmtp-properties","title":"wlSMTP Properties","text":""},{"location":"javascript/internet_protocol/#attachments_1","title":"Attachments","text":"<p>The Attachments property lets you specify an attachment to an email message. The filename parameter is the name of the local file or datastream that you want to attach to the email message. For example:</p> <p><code>smtp.Attachments = filename</code></p>"},{"location":"javascript/internet_protocol/#attachmentsencoding_1","title":"AttachmentsEncoding","text":"<p>The AttachmentsEncoding property lets you specify the type of encoding you are applying to an email attachment. This property must be specified for each attachment. </p> <p>Valid values are: </p> <ul> <li>7Bit</li> <li> <p>Quoted</p> </li> <li> <p>Base64</p> </li> <li> <p>8Bit</p> </li> <li> <p>8BitBinary</p> </li> </ul> <p>You may also specify the encoding using the following constants: </p> <ul> <li> <p>WLSmtp.ENC_7BIT \u2013 7bit encoding</p> </li> <li> <p>WLSmtp.ENC_QUOTED \u2013 Quoted Printable encoding</p> </li> <li> <p>WLSmtp.ENC_BASE64 \u2013 Base64 encoding</p> </li> <li> <p>WLSmtp.ENC_8BIT \u2013 8Bit encoding</p> </li> <li> <p>WLSmtp.ENC_8BITBINARY \u2013 Binary encoding For example:</p> </li> <li> <p>smtp.AttachmentsEncoding = encodingtype</p> </li> </ul>"},{"location":"javascript/internet_protocol/#attachmentstypes_1","title":"AttachmentsTypes","text":"<p>The AttachmentsTypes property lets you specify the type of attachment you are including in an email message. This property must be specified for each attachment. </p> <p>Valid values are: </p> <ul> <li>true \u2013 Specifies a type of file</li> <li>false \u2013 Specifies a type of data</li> </ul> <p>For example:</p> <p><code>smtp.AttachmentsTypes = typeofattachment</code></p>"},{"location":"javascript/internet_protocol/#bcc_1","title":"Bcc","text":"<p>The Bcc property lets you specify the email addresses of additional recipients to be blind copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name [m&gt;\". </p> <p>For example:</p> <p><code>smtp.Bcc = blindcopyaddresses</code></p>"},{"location":"javascript/internet_protocol/#cc_1","title":"Cc","text":"<p>The Cc property lets you specify the email addresses of additional recipients to be copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name [m&gt;\". For example:</p> <p><code>smtp.Cc = copyaddress; copyaddress</code></p>"},{"location":"javascript/internet_protocol/#from_2","title":"From","text":"<p>The From property lets you describe the Reply To in plain language. You may use this property to identify your Reply To email address in a plain language format. For example:</p> <p><code>smtp.From = replyname</code></p>"},{"location":"javascript/internet_protocol/#message_1","title":"Message","text":"<p>The Message property lets you specify the text appearing in the body of your email. You use this property to write the text of the email message itself.</p>"},{"location":"javascript/internet_protocol/#replyto_2","title":"ReplyTo","text":"<p>The ReplyTo property lets you specify the return address of your email. You may specify multiple addresses in a semicolon-separated list. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name \". </p> <p>For example:</p> <p><code>smtp.ReplyTo = replyaddress</code></p>"},{"location":"javascript/internet_protocol/#size_7","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. </p> <p>For example: </p> <p><code>var filesize = smtp.Size</code></p>"},{"location":"javascript/internet_protocol/#subject_2","title":"Subject","text":"<p>The Subject property lets you specify the text appearing the subject field of your email. You use this property to provide a brief description of the contents of your email. </p> <p>For example: </p> <p><code>smtp.Subject = subjectheader</code></p>"},{"location":"javascript/internet_protocol/#to_2","title":"To","text":"<p>The To property lets you specify a recipient\u2019s email address. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name \". For example:</p> <p><code>smtp.To = recipientaddress; recipientaddress</code></p>"},{"location":"javascript/internet_protocol/#type","title":"Type","text":"<p>The Type property lets you specify the type of server with which you are working. The default value for this property is SMTP. </p> <p>Valid values are:</p> <ul> <li> <p>SMTP \u2013 A standard STMP server</p> </li> <li> <p>ESMTP \u2013 An extended SMTP server </p> </li> </ul> <p>For example:</p> <p><code>smtp.Type = servertype</code></p>"},{"location":"javascript/internet_protocol/#wlsmtp-methods","title":"wlSMTP Methods","text":""},{"location":"javascript/internet_protocol/#addattachment_2","title":"AddAttachment()","text":"Syntax AddAttachment(string,  type, [encoding]) Parameters String The string you are sending  to the host. If you are sending a file, the string is the location and name  of the file. If you are sending a data attachment, the string is the data to  be attached. Type The type of  attachment you are sending. The default value is  File. Valid values are:  \u009f File  \u009f Data encoding The type of encoding to apply to the file. The default value is  7Bit. Valid values are:  \u009f 7Bit  \u009f Quoted  \u009f Base64  \u009f 8Bit  \u009f 8BitBinary Return Value Returns an integer value  Attachment ID if successful, an exception if unsuccessful. Comments Adds an attachment to the email message."},{"location":"javascript/internet_protocol/#connect_5","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You  may express the host using either the DNS number or the full name of the  host. port The port to which you are  connecting. If you do not specify a port, the default SMTP port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts an SMTP session with the host."},{"location":"javascript/internet_protocol/#deleteattachment_2","title":"DeleteAttachment()","text":"Syntax DeleteAttachment(ID) Parameters ID The ID of the attachment you are deleting. Return Value Null if successful, an exception if  unsuccessful. Comments Removes an attachment from the email  message."},{"location":"javascript/internet_protocol/#disconnect_5","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the SMTP host."},{"location":"javascript/internet_protocol/#send_1","title":"Send()","text":"Syntax Send() Return Value Null if successful, an exception if  unsuccessful. Comments Sends mail to recipients, attaching files  using MIME as necessary. After sending the attachments, data is deleted."},{"location":"javascript/internet_protocol/#sendcommand_7","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host  without modification. This method is useful for interacting directly with the  host using non-standard or unsupported extensions. SendCommand automatically  appends \u201c\\r\\n\u201d at the end of the string. You can add additional instances of  \u201c\\r\\n\u201d within the string, however do not add \u201c\\r\\n\u201d at the end of the string.  For example, SendCommand(\u201cLine1\\r\\n Line2\\r\\n Line3\u201d)"},{"location":"javascript/internet_protocol/#verify_1","title":"Verify()","text":"Syntax Verify() Return Value Returns a 1 if the address  is valid, a 0 if the address is invalid. If the method is unable to verify  the address due to authentication  or other reasons, it returns an exception. Comments Checks that the address in the To property is valid. To use this method, include  only one address in the To  property."},{"location":"javascript/internet_protocol/#wlsmtp","title":"WLSmtp()","text":"Syntax new WLSmtp() Return Value A new wlSMTP object. Comments Creates a new wlSMTP object, used to  interact with the server. Example function InitClient() { myNewSmtpObject = new WLSmtp()  }"},{"location":"javascript/internet_protocol/#smtp-sample-code","title":"SMTP Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction **`InitAgenda()`** { IncludeFile(\"wlSmtp.js\",WLExecuteScript)\n\n// include the file that enables SMTP\n\n}\n\nfunction **InitClient()** {\n\nSmtp=new WLSmtp()     // create the new SMTP object Smtp.Connect(\"HostName\"); // connect to the server\n\n}\n\nfunction **TerminateClient()** {\n\nSmtp.Disconnect();    // logout from the server delete Smtp    // delete the SMTP object\n\n}\n\n//================================================\n\n\n\n// **Body Of script**\n\n//**Test Send Attachments**\n\nSmtp.To=\" \\\"Recipient Name\\\" [\";](mailto:Recipient@recipient.com) Smtp.From= [\"Sender@sender.com\";](mailto:Sender@sender.com) [Smtp.Cc=\"Copy1@copy.here.org, ](mailto:Copy1@copy.here.org)[Copy2@copy.there.org\";](mailto:Copy2@copy.there.org)\n\n// multiple CC's [Smtp.ReplyTo=\"Sender@sender.com\";](mailto:Sender@sender.com)\n\n// optional different reply to address Smtp.Subject=\"Message Subject \";  // Text string Smtp.Message=\"Greetings from the wlSMTP class\"; // Message text\n\n// Add attachments from local file using different\n\n// encoding techniques\n\n// 7BIT are text files, the BASE64 is for a binary file\n\n// (in this case an image) id1 = Smtp.AddAttachment\n\n\n\n\n\nid2 = Smtp.AddAttachment id3 = Smtp.AddAttachment id4 = Smtp.AddAttachment\n\nid5 = Smtp.AddAttachment\n\n\n\n(\"c:\\\\file1.txt\",\"file\",WLSmtp.ENC_7BIT); (\"c:\\\\file2.txt\",\"file\",WLSmtp.ENC_7BIT); (\"c:\\\\file3.txt\",\"file\",WLSmtp.ENC_7BIT); (\"c:\\\\file4.txt\",\"file\",WLSmtp.ENC_7BIT);\n\n\n\n(\"c:\\\\downloded.gif\",\"file\",WLSmtp.ENC_BASE64);\n\n// You may delete attachments prior to sending the mail message Smtp.DeleteAttachment(id3);\n\nSmtp.DeleteAttachment(id1);\n\n\n\n\n\n\n\nSmtp.DeleteAttachment(id4); Smtp.Send();      // and send it! InfoMessage(Smtp.GetStatusLine());\n\n// print out the last response from the server\n\ncatch (e)\n\n{\n\nInfoMessage (\"Error\" + e)\n\n}\n\n//=======================================================\n\nInfoMessage(\"done\")   // End of SMTP sample script\n</code></pre>"},{"location":"javascript/internet_protocol/#wlsmtps-object","title":"wlSMTPs Object","text":"<p>The wlSMTP object provides support for SMTP (Mail Transfer Protocol) load and functional testing over secure connections (SSL).</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception should be thrown.</p> <p>To access the wlSMTPs object, you must include the wlSMTPs.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wlsmtps-properties","title":"wlSMTPs Properties","text":""},{"location":"javascript/internet_protocol/#attachments_2","title":"Attachments","text":"<p>The Attachments property lets you specify an attachment to an email message. The filename parameter is the name of the local file or datastream that you want to attach to the email message. </p> <p>For example:</p> <p><code>smtp.Attachments = filename</code></p>"},{"location":"javascript/internet_protocol/#attachmentsencoding_2","title":"AttachmentsEncoding","text":"<p>The AttachmentsEncoding property lets you specify the type of encoding you are applying to an email attachment. This property must be specified for each attachment. </p> <p>The AttachmentsEncoding property lets you specify the type of encoding you are applying to an email attachment. This property must be specified for each attachment. </p> <p>Valid values are: </p> <ul> <li>7Bit</li> <li>Quoted</li> <li>Base64</li> <li>8Bit</li> <li>8BitBinary</li> </ul> <p>You may also specify the encoding using the following constants: </p> <ul> <li>WLSmtp.ENC_7BIT \u2013 7bit encoding</li> <li>WLSmtp.ENC_QUOTED \u2013 Quoted Printable encoding</li> <li>WLSmtp.ENC_BASE64 \u2013 Base64 encoding</li> <li>WLSmtp.ENC_8BIT \u2013 8Bit encoding</li> <li>WLSmtp.ENC_8BITBINARY \u2013 Binary encoding For example:</li> <li>smtp.AttachmentsEncoding = encodingtype</li> </ul>"},{"location":"javascript/internet_protocol/#attachmentstypes_2","title":"AttachmentsTypes","text":"<p>The AttachmentsTypes property lets you specify the type of attachment you are including in an email message. This property must be specified for each attachment. </p> <p>Valid values are:</p> <ul> <li> <p>true \u2013 Specifies a type of file</p> </li> <li> <p>false \u2013 Specifies a type of data </p> </li> </ul> <p>For example:</p> <p><code>smtp.AttachmentsTypes = typeofattachment</code></p>"},{"location":"javascript/internet_protocol/#bcc_2","title":"Bcc","text":"<p>The Bcc property lets you specify the email addresses of additional recipients to be blind copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name [m&gt;\". </p> <p>For example:</p> <p><code>smtp.Bcc = blindcopyaddresses</code></p>"},{"location":"javascript/internet_protocol/#cc_2","title":"Cc","text":"<p>The Cc property lets you specify the email addresses of additional recipients to be copied in an email. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name [m&gt;\".</p> <p>For example: </p> <p><code>smtp.Cc = copyaddress; copyaddress</code></p>"},{"location":"javascript/internet_protocol/#from_3","title":"From","text":"<p>The From property lets you describe the Reply To in plain language. You may use this property to identify your Reply To email address in a plain language format. </p> <p>For example:</p> <p><code>smtp.From = replyname</code></p>"},{"location":"javascript/internet_protocol/#message_2","title":"Message","text":"<p>The Message property lets you specify the text appearing in the body of your email. You use this property to write the text of the email message itself.</p>"},{"location":"javascript/internet_protocol/#replyto_3","title":"ReplyTo","text":"<p>The ReplyTo property lets you specify the return address of your email. You may specify multiple addresses in a semicolon-separated list. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name [m&gt;\". </p> <p>For example:</p> <p><code>smtp.ReplyTo = replyaddress</code></p>"},{"location":"javascript/internet_protocol/#size_8","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. </p> <p>For example:</p> <p><code>var filesize = smtp.Size</code></p>"},{"location":"javascript/internet_protocol/#subject_3","title":"Subject","text":"<p>The Subject property lets you specify the text appearing the subject field of your email. You use this property to provide a brief description of the contents of your email.</p> <p>For example: </p> <p><code>smtp.Subject = subjectheader</code></p>"},{"location":"javascript/internet_protocol/#to_3","title":"To","text":"<p>The To property lets you specify a recipient\u2019s email address. You may specify multiple addresses in a semicolon-separated list. You must specify this property with every email. Addresses may be specified in the format of \"Me@MyCompany.com\" or as \"My Name \". For example:</p> <p><code>smtp.To = recipientaddress; recipientaddress</code></p>"},{"location":"javascript/internet_protocol/#type_1","title":"Type","text":"<p>The Type property lets you specify the type of server with which you are working. The default value for this property is SMTP. </p> <p>Valid values are:</p> <ul> <li>SMTP \u2013 A standard STMP server</li> <li>ESMTP \u2013 An extended SMTP server </li> </ul> <p>For example:</p> <p><code>smtp.Type = servertype</code></p>"},{"location":"javascript/internet_protocol/#wlsmtps-methods","title":"wlSMTPs Methods","text":""},{"location":"javascript/internet_protocol/#addattachment_3","title":"AddAttachment()","text":"Syntax AddAttachment(string,  type, [encoding]) Parameters String The string you are sending  to the host. If you are sending a file, the string is the location and name  of the file. If you are sending a data attachment, the string is the data to  be attached. Type The type of attachment you are sending. The  default value is  File. Valid values are:  \u009f File  \u009f Data encoding The type of encoding to apply to the file.  The default value is  7Bit. Valid values are:  \u009f 7Bit  \u009f Quoted  \u009f Base64  \u009f 8Bit  \u009f 8BitBinary Return Value Returns an integer value  Attachment ID if successful, an exception if unsuccessful. Comments Adds an attachment to the email message."},{"location":"javascript/internet_protocol/#connect_6","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. port The port to which you are  connecting. If you do not specify a port, the default SMTP port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts an SMTP session with the host."},{"location":"javascript/internet_protocol/#deleteattachment_3","title":"DeleteAttachment()","text":"Syntax DeleteAttachment(ID) Parameters ID The ID of the attachment you are deleting. Return Value Null if successful, an exception if unsuccessful. Comments Removes an attachment from the email  message."},{"location":"javascript/internet_protocol/#disconnect_6","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the SMTP host."},{"location":"javascript/internet_protocol/#send_2","title":"Send()","text":"Syntax Send() Return Value Null if successful, an exception if  unsuccessful. Comments Sends mail to recipients, attaching files using  MIME as necessary. After sending the attachments, data is deleted."},{"location":"javascript/internet_protocol/#sendcommand_8","title":"SendCommand()","text":"Syntax SendCommand(string) Parameters string The string you are sending to the host. Return Value Null if successful, an exception if  unsuccessful. Comments Sends a string to the host without modification.  This method is useful for interacting directly with the host using  non-standard or unsupported extensions."},{"location":"javascript/internet_protocol/#verify_2","title":"Verify()","text":"Syntax Verify() Return Value Returns a 1 if the address  is valid, a 0 if the address is invalid. If the method is unable to verify  the address due to authentication  or other reasons, it returns an exception. Comments Checks that the address in the To property is valid. To use this method, include  only one address in the To  property."},{"location":"javascript/internet_protocol/#wlsmtps","title":"WLSmtps()","text":"Syntax new WLSmtps() Return Value A new wlSMTPs object. Comments Creates a new wlSMTPs object, used to  interact with the server. Example function InitClient() { myNewSmtpObject = new WLSmtps()  }"},{"location":"javascript/internet_protocol/#wltcp-object","title":"wlTCP Object","text":"<p>The wlTCP object provides support for TCP (Transfer Control Protocol) load and functional testing within WebLOAD. Support for standard TCP operation is included. </p> <p>TCP over secure connections (SSL) is also supported. See <code>wlGlobals.tcpssl = \"Yes\"</code> for secure connection.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method; otherwise an exception is thrown.</p> <p>To access the wlTCP object, you must include the wltcpj.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wltcp-properties","title":"wlTCP Properties","text":""},{"location":"javascript/internet_protocol/#document_6","title":"document","text":"<p>The document property contains all responses from the host since the last time the <code>Send()</code> method was used. Each time a message is returned, it is concatenated to the document object. The document may be cleared manually using the <code>Erase()</code> method. </p> <p>For example:</p> <p><code>var recentdocument = tcp.document</code></p>"},{"location":"javascript/internet_protocol/#inbuffersize","title":"InBufferSize","text":"<p>The InBufferSize property specifies the size, in bytes, of the incoming data buffer. To remove this setting, either delete the property, or set it to a negative value. </p> <p>For example:</p> <p>tcp.InBufferSize = maximuminsize</p>"},{"location":"javascript/internet_protocol/#localport","title":"LocalPort","text":"<p>The LocalPort property specifies the TCP port to which you are connecting. If you do not specify the LocalPort property, you connect to a randomly selected port.</p> <p>For example:</p> <p><code>tcp.LocalPort = portnumber</code></p>"},{"location":"javascript/internet_protocol/#nextprompt","title":"NextPrompt","text":"<p>The NextPrompt property specifies the text for the script to look for in the next prompt from the host. A <code>Receive()</code> call is viewed as successful if the prompt contains the text string specified by the NextPrompt variable. To specify a prompt with no message, specify a NextPrompt with an empty value, or delete the NextPrompt property. Once this property is specified, it limits all subsequent instances of the <code>Receive()</code> method. Either delete the property or set it to zero to remove the limitation. </p> <p>For example: </p> <p><code>tcp.NextPrompt = promptmessage</code></p>"},{"location":"javascript/internet_protocol/#nextsize","title":"NextSize","text":"<p>The NextSize property specifies the size, in bytes, of the expected data. If you specify a NextSize of 100 bytes, for example, the <code>Receive()</code> method returns to the script when the document object contains 100 bytes of data. Once this property is specified, it limits all subsequent instances of the <code>Receive()</code> method. Either delete the property or set it to zero to remove the limitation. For example:</p> <p><code>tcp.NextSize = expectedsize</code></p>"},{"location":"javascript/internet_protocol/#outbuffersize","title":"OutBufferSize","text":"<p>The OutBufferSize property specifies the size, in bytes, of the outgoing data buffer. To remove this setting, either delete the property, or set it to a negative value. For example:</p> <p><code>tcp.OutBufferSize = maximumoutsize</code></p>"},{"location":"javascript/internet_protocol/#outfile_6","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save the responses from the host locally on your computer. You must specify the output file before calling the <code>Receive()</code> method to save the responses to that file.</p> <p>You write to the output file each time you use the <code>Receive()</code> method. If you call the <code>Receive()</code> method more than once, you must specify a different output file each time, or you overwrite the previous output file. </p> <p>For example:</p> <p><code>tcp.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#receivemessagetext","title":"ReceiveMessageText","text":"<p>The ReceiveMessageText property returns the reason why the host stopped responding. You use this property to determine the state of the host. </p> <p>Possible values are: </p> <ul> <li>Prompt was found \u2013 The host returned the prompt specified in the NextPrompt property.</li> <li>Timeout \u2013 The last command exceeded the time limit specified by the Timeout property.</li> <li>Byte length reached \u2013 The host received the amount of data specified in the NextSize property.</li> </ul> <p>For example: </p> <p><code>InfoMessage(TCP.ReceiveMessageText);</code></p>"},{"location":"javascript/internet_protocol/#size_9","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. </p> <p>For example:</p> <p><code>var filesize = tcp.Size</code></p>"},{"location":"javascript/internet_protocol/#timeout","title":"Timeout","text":"<p>The Timeout property lets you specify the length of the delay, in milliseconds, before the script breaks its connection with the host. If you do not specify the timeout property, the script may freeze if the host does not respond as you expect it to. To set an unlimited timeout, specify a value of zero, or a negative value. </p> <p>For example:</p> <p><code>tcp.Timeout = timedelay</code></p> <p>Note: It is recommended that you include a Timeout property in all scripts that use the wlTCP object. If you do not, and the script fails to return a prompt, your session may freeze.</p>"},{"location":"javascript/internet_protocol/#wltcp-methods","title":"wlTCP Methods","text":""},{"location":"javascript/internet_protocol/#connect_7","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. port The port to which you are  connecting. If you do not specify a port, the default TCP port is used. Return Value Null if successful, an exception if  unsuccessful. Comments Starts a TCP session with the host."},{"location":"javascript/internet_protocol/#disconnect_7","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful. Comments Terminates a connection to the TCP host."},{"location":"javascript/internet_protocol/#erase","title":"Erase()","text":"Syntax Erase() Return Value Null if successful, an exception if  unsuccessful. Comments Clears the contents of the document object."},{"location":"javascript/internet_protocol/#receive","title":"Receive()","text":"Syntax <code>Receive()</code> Return Value Null if successful, an exception if  unsuccessful. Comments Returns all responses from  the host since the last time the <code>Send()</code> method was used. A <code>Receive()</code>  method  returns to the script when the NextPrompt, NextSize, or Timeout  properties  are met. If more than one of these properties is specified, the method  returns to the script when the first one is met. Subsequent uses of <code>Receive()</code>  find the next  instance of the limiting property, returning additional information from the  buffer. The content returned depends upon which of the three limiting  properties triggered the return."},{"location":"javascript/internet_protocol/#send_3","title":"Send()","text":"Syntax Send(data_to_send) Parameters data_to_send The data that you want to send to the host. Return Value A string containing the response from the host if  successful, an exception if unsuccessful. Comments Sends data to the host via TCP and clears the  document object."},{"location":"javascript/internet_protocol/#wltcp","title":"WLTcp()","text":"Syntax new WLTcp() Return Value A new wlTCP object. Comments Creates a new wlTCP object, used to  interact with the server. Example function InitClient() { myNewTcpObject = new WLTcp();  }"},{"location":"javascript/internet_protocol/#tcp-sample-code","title":"TCP Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction InitAgenda() { \n    IncludeFile(\"wltcpj.js\",WLExecuteScript)\n}\n\nfunction InitClient() { \n    tcp=new WLTcp();\n}\n\nfunction TerminateClient() {\n    delete tcp;\n}\n//**Body Of script**.\n\n\ntcp.Outfile = \"c:\\\\tcp.txt\"; \ntcp.Timeout = 2000; \ntcp.NextPrompt = \"\\r\\n\\r\\n\";\n\n//tcp.NextSize=1900;\n\ntcp.Connect(\"www.sitename.com\", 80);\ntcp.Send(\"GET /products/index.htm HTTP/1.0\\r\\n\\r\\n\");\n\n//Sleep(3000); \ntcp.Receive(); \nInfoMessage(tcp.document);\nInfoMessage(tcp.ReceiveMessageText); \n\ntcp.NextSize=10091; \ntcp.NextPrompt=\"\";\ntcp.Erase(); \ntcp.Receive(); \nInfoMessage(tcp.document);\n\nInfoMessage(tcp.ReceiveMessageText);\n</code></pre>"},{"location":"javascript/internet_protocol/#wltelnet-object","title":"wlTelnet Object","text":"<p>The wlTelnet object provides support for Telnet load and functional testing within WebLOAD. Support for standard Telnet operation is included. Telnet over secure connections (SSL) is not currently supported.</p> <p>If a connection is required but has expired or has not yet been established, the underlying code attempts to login. Logging in requires you to call the appropriate Connect() method otherwise an exception is thrown.</p> <p>To access the wlTelnet object, you must include the wlTelnet.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wltelnet-properties","title":"wlTelnet Properties","text":""},{"location":"javascript/internet_protocol/#document_7","title":"document","text":"<p>The document property contains all responses from the host since the last time the <code>Send()</code> method was used. Each time a message is returned, it is concatenated to the document object. The document may be cleared manually using the <code>Erase()</code> method. For example:</p> <p>var recentdocument = telnet.document</p>"},{"location":"javascript/internet_protocol/#nextprompt_1","title":"NextPrompt","text":"<p>The NextPrompt property specifies the text for the Agenda to look for in the next prompt from the host. A <code>Receive()</code> call is viewed as successful if the prompt contains the text string specified by the NextPrompt variable. To specify a prompt with no message, specify a NextPrompt with an empty value, or delete the NextPrompt property. Once this property is specified, it limits all subsequent instances of the <code>Receive()</code> method. Either delete the property or set it to zero to remove the limitation. </p> <p>For example:</p> <p><code>telnet.NextPrompt = promptmessage</code></p>"},{"location":"javascript/internet_protocol/#outfile_7","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save the responses from the host locally on your computer. You must specify the output file before calling the <code>Receive()</code> method to save the responses to that file.</p> <p>You write to the output file each time you use the <code>Receive()</code> method. If you call the <code>Receive()</code> method more than once, you must specify a different output file each time, or you overwrite the previous output file. For example:</p> <p><code>telnet.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#receivemessagetext_1","title":"ReceiveMessageText","text":"<p>The ReceiveMessageText property returns the reason why the host stopped responding. You use this property to determine the state of the host. </p> <p>Possible values are:</p> <ul> <li>Prompt was found \u2013 The host returned the prompt specified in the NextPrompt property.</li> <li>Timeout \u2013 The last command exceeded the time limit specified by the Timeout property</li> <li>Byte length reached \u2013 The host received the amount of data specified in the NextSize property.</li> </ul> <p>For example: </p> <p><code>InfoMessage(Telnet.ReceiveMessageText);</code></p>"},{"location":"javascript/internet_protocol/#size_10","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption.</p> <p>For example:</p> <p><code>var filesize = telnet.Size</code></p>"},{"location":"javascript/internet_protocol/#timeout_1","title":"Timeout","text":"<p>The Timeout property lets you specify the length of the delay, in milliseconds, before the script breaks its connection with the host. If you do not specify the timeout property, the script may freeze if the host does not respond as you expect it to. To set an unlimited timeout, specify a value of zero, or a negative value. </p> <p>For example: </p> <p><code>telnet.Timeout = timedelay</code></p> <p>Note: It is recommended that you include a Timeout property in all scripts that use the wlTelnet object. If you do not, and the script fails to return a prompt, your session may freeze.</p>"},{"location":"javascript/internet_protocol/#wltelnet-methods","title":"wlTelnet Methods","text":""},{"location":"javascript/internet_protocol/#connect_8","title":"Connect()","text":"Syntax Connect(host,  [port]) Parameters host The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. port The port to which you are  connecting. If you do not specify a port, the default Telnet port is used. Return Value Null if successful, an exception if unsuccessful. Comments Starts a Telnet session with the host."},{"location":"javascript/internet_protocol/#disconnect_8","title":"Disconnect()","text":"Syntax Disconnect() Return Value Null if successful, an exception if  unsuccessful Comments Terminates a connection to the Telnet host."},{"location":"javascript/internet_protocol/#erase_1","title":"Erase()","text":"Syntax Erase() Return Value Null if successful, an exception if  unsuccessful. Comments Clears the contents of the document object."},{"location":"javascript/internet_protocol/#receive_1","title":"Receive()","text":"Syntax <code>Receive()</code> Return Value Null if successful, an exception if  unsuccessful. Comments Returns all responses from  the host since the last time the <code>Send()</code> method was used. A <code>Receive()</code>  method  returns to the script when the NextPrompt, NextSize, or Timeout  properties  are met. If more than one of these properties is specified, the method  returns to the script when the first one is met. Subsequent uses of <code>Receive()</code>  find the next  instance of the limiting property, returning additional information from the  buffer. The content returned depends upon which of the three limiting  properties triggered the return."},{"location":"javascript/internet_protocol/#send_4","title":"Send()","text":"Syntax Send(data_to_send) Parameters data_to_send The data that you want to send to the host. Return Value A string containing the response from the host if  successful, an exception if unsuccessful. Comments Sends data to the host via Telnet and  clears the document object."},{"location":"javascript/internet_protocol/#wltelnet","title":"WLTelnet()","text":"Syntax new WLTelnet() Return Value A new wlTelnet object. Comments Creates a new wlTelnet object, used to  interact with the server. Example <code>function **InitClient()** { myNewTelnetObject = new WLTelnet()  }</code>"},{"location":"javascript/internet_protocol/#telnet-sample-code","title":"Telnet Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction **`InitAgenda()`** { IncludeFile(\"wlTelnet.js\",WLExecuteScript)\n\n// include the file that enables Telnet\n\n}\n\nfunction **InitClient()** {\n\nTelnet=new WLTelnet()  // create a new telnet object\n\n}\n\nfunction **TerminateClient()**\n\n{\n\ndelete Telnet      // delete the object we were using\n\n}\n\n//================================================\n\n\n\n// **Body Of script**\n\n// Set timeout and prompt\n\n// IMPORTANT: Set a timeout when setting a prompt. Otherwise,\n\n// If the prompt is unexpected or incorrect the script will\n\n// freeze while waiting for a prompt that will never arrive Telnet.Timeout=1000;   // one second Telnet.NextPrompt=\"User name: \"; // text to look for Telnet.Connect(\"000.0.0.0\");   // connect\n\nTelnet.`Receive()`;        // wait for data from the remote host\n\nTelnet.Send(\"myname\");      // send login name InfoMessage(Telnet.document);  // write out the data received InfoMessage(Telnet.ReceiveMessageText);\n\n// write out why the call returned Telnet.NextPrompt=\"Password: \";   // next prompt to look for Telnet.`Receive()`;    // wait for data Telnet.Outfile=\"c:\\\\filename.txt\";\n\n// save this next response to file as well InfoMessage(Telnet.document);   // what did we get?\n\nInfoMessage(Telnet.ReceiveMessageText);\n\n// write out why the call returned Telnet.Send(\"mypassword\");   // send password Telnet.NextPrompt=\"&gt;\";      // new prompt to wait for Telnet.`Receive()`;        // wait for a response Telnet.Send(\"command\");     // send command text to the host\n\n\n\n\n\n\n\nTelnet.`Receive()`;        // wait for a response InfoMessage(Telnet.document); // what did we get?\n\nInfoMessage(Telnet.ReceiveMessageText);\n\n// write out why the call returned\n\nTelnet.Disconnect();       // finally disconnect\n\n//============================================================\n\n//This is another way to work with telnet. When no prompt\n\n//is set the timeout is ignored. Instead the script writer\n\n//must manually keep receiving the data by calling the receive\n\n//command. `Receive()` returns the response as well as assigning\n\n//the value to the this.document property. It is up to the user\n\n//to perform a delay before he/she receives the data. Telnet.Connect(\"000.0.0.0\"); // log in to a remote host\n\n// In this case we receive three times.\n\n// In your script you may keep calling `Receive()` until the\n\n// telnet object's document property contains the data you are\n\n// looking for, or until you decide to do something else Telnet.`Receive()`;      // fetch the data\n\nTelnet.`Receive()`;        // Wait for more\n\nTelnet.`Receive()`;        // Wait for more InfoMessage(Telnet.document);  // Contains text from ALL receives InfoMessage(Telnet.ReceiveMessageText);  // reason calls returned Telnet.Send(\"Command\");  // clears the document object Telnet.`Receive()`;     // fetch the data\n\nTelnet.`Receive()`;        // Wait for more\n\nTelnet.`Receive()`;        // Wait for more InfoMessage(Telnet.document); InfoMessage(Telnet.ReceiveMessageText); Telnet.Send(\"command\");\n\nTelnet.`Receive()`;\n\nTelnet.`Receive()`;        // Wait for more\n\nTelnet.`Receive()`;        // Wait for more InfoMessage(Telnet.document); InfoMessage(Telnet.ReceiveMessageText); Telnet.Send(\"dir\");\n\nTelnet.`Receive()`;\n\nTelnet.`Receive()`;        // Wait for more\n\nTelnet.`Receive()`;        // Wait for more InfoMessage(Telnet.document); InfoMessage(Telnet.ReceiveMessageText);\n\ncatch (e)\n\n{\n\nInfoMessage (\"Error\" + e)\n\n}\n\n\n\n\n\n\n\nTelnet.Disconnect();       // log out from the remote host\n\nInfoMessage(\"done\")       // End of telnet sample script\n</code></pre>"},{"location":"javascript/internet_protocol/#wludp-object","title":"wlUDP Object","text":"<p>The wlUDP object provides support for UDP (User Datagram Protocol) load and functional testing within WebLOAD. Support for standard UDP operation is included. UDP over secure connections (SSL) is not currently supported.</p> <p>To access the wlUDP object, you must include the wlUdp.js file in your</p> <p><code>InitAgenda()</code> function.</p>"},{"location":"javascript/internet_protocol/#wludp-properties","title":"wlUDP Properties","text":""},{"location":"javascript/internet_protocol/#document_8","title":"document","text":"<p>The document property is an array of objects sent in the current session, with each object containing the following properties:</p> <ul> <li> <p>datagram \u2013 The datagram retrieved from the database</p> </li> <li> <p>address \u2013 The address of the datagram</p> </li> <li> <p>port \u2013 The port used to communicate with the database</p> </li> </ul> <p>The document property contains all responses from the host since the last time the <code>Send()</code> method was used. Each time a message is returned, it is concatenated to the document object. The document may be cleared manually using the <code>Erase()</code> method. </p> <p>For example:</p> <p><code>var recentdocument = udp.document</code></p>"},{"location":"javascript/internet_protocol/#inbuffersize_1","title":"InBufferSize","text":"<p>The InBufferSize property specifies the size, in bytes, of the incoming data buffer. For example:</p> <p><code>udp.InBufferSize = maximuminsize</code></p>"},{"location":"javascript/internet_protocol/#localhost","title":"LocalHost","text":"<p>The LocalHost property lets you specify a local host for use in broadcasting via UDP. For example:</p> <p><code>udp.LocalHost = localhostname</code></p>"},{"location":"javascript/internet_protocol/#localport_1","title":"LocalPort","text":"<p>The LocalPort property specifies the UDP port to which you are connecting. If you do not specify the LocalPort property, you connect to a randomly selected port. </p> <p>For example: </p> <p><code>udp.LocalPort = portnumber</code></p>"},{"location":"javascript/internet_protocol/#maxdatagramsize","title":"MaxDatagramSize","text":"<p>The MaxDatagramSize property specifies the maximum size, in bytes, of datagrams that you may send or receive via UDP. For example:</p> <p><code>udp.MaxDatagramSize = maximumsize</code></p>"},{"location":"javascript/internet_protocol/#numofresponses","title":"NumOfResponses","text":"<p>The NumOfResponses property specifies the number of responses the testing machine waits for before proceeding. You use this property to make sure that all of your hosts have responded. To specify an unlimited number of responses, specify a NumOfResponses value of zero. For example:</p> <p><code>udp.NumOfResponses = numberofhosts</code></p>"},{"location":"javascript/internet_protocol/#outbuffersize_1","title":"OutBufferSize","text":"<p>The OutBufferSize property specifies the size, in bytes, of the outgoing data buffer. For example:</p> <p><code>udp.OutBufferSize = maximumoutsize</code></p>"},{"location":"javascript/internet_protocol/#outfile_8","title":"Outfile","text":"<p>The Outfile property lets you specify the name of an output file. You use this property to save the responses from the host locally on your computer. You must specify the output file before calling the <code>Receive()</code> method to save the responses to that file.</p> <p>You write to the output file each time you use the <code>Receive()</code> method. If you call the <code>Receive()</code> method more than once, you must specify a different output file each time, or you will overwrite the previous output file. </p> <p>For example:</p> <p><code>udp.Outfile = filename</code></p>"},{"location":"javascript/internet_protocol/#receivemessagetext_2","title":"ReceiveMessageText","text":"<p>The ReceiveMessageText property returns the reason why the host stopped responding. You use this property to determine the state of the host. </p> <p>Possible values are:</p> <ul> <li>Prompt was found \u2013 The host returned the prompt specified in the NextPrompt property.</li> <li>Timeout \u2013 The last command exceeded the time limit specified by the Timeout property</li> <li>Byte length reached \u2013 The host received the amount of data specified in the NextSize property.</li> </ul> <p>For example: </p> <p><code>InfoMessage(Telnet.ReceiveMessageText);</code></p>"},{"location":"javascript/internet_protocol/#requestedpackets","title":"RequestedPackets","text":"<p>The RequestedPackets property specifies the number of packets the testing machine waits for before proceeding. To specify an unlimited number of packets, specify a RequestedPackets value of zero. </p> <p>For example:</p> <p><code>udp.RequestedPackets = numberofpackets</code></p>"},{"location":"javascript/internet_protocol/#size_11","title":"Size","text":"<p>The Size property returns the byte length of data transferred to the host. You use this property to compare starting and finishing sizes to verify that files have arrived without corruption. For example:</p> <p><code>var filesize = udp.Size</code></p>"},{"location":"javascript/internet_protocol/#timeout_2","title":"Timeout","text":"<p>The Timeout property lets you specify the length of the delay, in milliseconds, before the script breaks its connection with the host. If you do not specify the timeout property, the script may freeze if the host does not respond as you expect it to. For example:</p> <p><code>udp.Timeout = timedelay</code></p> <p>Note: It is recommended that you include a Timeout property in all scripts that use the wlUDP object. If you do not, and the script fails to return a prompt, your session may freeze.</p>"},{"location":"javascript/internet_protocol/#wludp-methods","title":"wlUDP Methods","text":""},{"location":"javascript/internet_protocol/#bind","title":"Bind()","text":"Syntax Bind() Return Value Null if successful, an exception if unsuccessful. Comments Creates a UDP port and  sets the OutBufferSize, InBufferSize, MaxDatagramSize, LocalHost, and LocalPort  properties.  The value of these properties is fixed when the Bind()  method is  used. To change the value of any of these properties, you must use the UnBind() method, change the value of the property and using  the Bind() method  again."},{"location":"javascript/internet_protocol/#broadcast","title":"Broadcast()","text":"Syntax Broadcast(port,  data_to_send) Parameters Port The port to which you are connecting. data_to_send The data that you want to send to the local  net. Return Value A string containing the response from the host if  successful, an exception if unsuccessful. Comments Broadcasts data to the local net."},{"location":"javascript/internet_protocol/#erase_2","title":"Erase()","text":"Syntax Erase() Return Value Null if successful, an exception if  unsuccessful. Comments Clears the contents of the  document property, setting it to an empty array."},{"location":"javascript/internet_protocol/#receive_2","title":"Receive()","text":"Syntax <code>Receive()</code> Return Value Null if successful, an exception if  unsuccessful. Comments Returns all responses from  the host since the last time the <code>Send()</code> method was used. The <code>Receive()</code>  method  returns to the script when the RequestedPackets or Timeout property is met.  Subsequent uses of <code>Receive()</code> find the next instance of the limiting property,  returning additional information from the  buffer."},{"location":"javascript/internet_protocol/#send_5","title":"Send()","text":"Syntax Send(host,  port, data_to_send) Parameters Host The host to which you are connecting. You may  express the host using either the DNS number or the full name of the host. port The port to which you are connecting. data_to_send The data that you want to send to the host. Return Value A string containing the response from the  host if successful, an exception if unsuccessful. Comments Sends data to the host via UDP."},{"location":"javascript/internet_protocol/#unbind","title":"UnBind()","text":"Syntax UnBind() Return Value Null if successful, an exception if  unsuccessful. Comments Closes a UDP socket. You  must use this command to close an existing UDP socket before you may use the Bind() again."},{"location":"javascript/internet_protocol/#wludp","title":"WLUdp()","text":"Syntax new WLUdp() Return Value A new wlUDP object. Comments Creates a new wlUDP object, used to  interact with the server. Example function InitClient() { myNewUDPObject = new WLUdp()  }"},{"location":"javascript/internet_protocol/#udp-sample-code","title":"UDP Sample Code","text":"<pre><code>// **script Initialization**\n\nfunction **`InitAgenda()`** {\n\nIncludeFile(\u201cwlUdp.js\u201d,WLExecuteScript)\n\n// enable the UDP objects\n\n}\n\nfunction **InitClient()** {\n\nudp=new WLUdp();    // create a new UDP object\n\n}\n\nfunction **TerminateClient()** {\n\ndelete udp       // delete the UDP object\n\n}\n\n\n\n\n\n\n\n//===================================================\n\n\n\n//**Body Of script**.\n\n//**Test Send:** set the buffer sizes appropriately for the data try\n\n{\n\nudp.OutBufferSize=10; udp.InBufferSize=12; udp.MaxDatagramSize=10;\n\nudp.Timeout=10000;    // 10 second timeout\n\nudp.NumOfResponses=1;   // return after one remote machine responds\n\nudp.Outfile=\u201cc:\\\\serialize.txt\u201d;   // file to save responses to\n\nudp.Bind();\n\nudp.Send(\u201c00.0.0.00\u201d, 7, \u201cgood morning\u201d);\n\n// send a datagram to one machine on port\n\n7\n\nudp.`Receive()`;      // wait for a response InfoMessage(udp.ReceiveMessageText); // This is what happened\n\n// show the properties of the response\n\n// note that the udp.document object is an array InfoMessage(udp.document[0].datagram); // get the response InfoMessage(udp.document[0].address);  // which machine responded? InfoMessage(udp.document[0].port);   // the port\n\n// now broadcast to seven machines\n\nudp.NumOfResponses=7;   // we expect seven machines to respond udp.Outfile=\u201cc:\\\\serialize.txt\u201d; // send the responses udp.Broadcast(7, \u201cgood morning\u201d);\n\n// send the message (again on port 7)\n\nudp.`Receive()`;      // wait for the responses InfoMessage(udp.ReceiveMessageText);  // print the return reason\n\n// For each host that responded there will be an entry\n\n// in the array. This loop examines each one for (var i = 0; i &lt; udp.document.length; i++)\n\n{\n\nInfoMessage(\u201cdatagram= \u201c+udp.document[i].datagram); InfoMessage(\u201caddress= \u201c+udp.document[i].address); InfoMessage(\u201cport= \u201c+udp.document[i].port);\n\n}\n\n}\n\ncatch (e)\n\n{\n\nInfoMessage (\u201cError\u201d + e)\n\n}\n\n//============================================================\n\n\n\n\n\n\n\nInfoMessage(\u201cdone\u201d)   // end of the UDP sample script\n</code></pre>"},{"location":"javascript/intro_java_scripts/","title":"Introduction to JavaScript scripts","text":"<p>The WebLOAD JavaScript Reference Guide provides a detailed description of the syntax and usage of the full set of WebLOAD JavaScript features, including the actions, objects, and functions used to create sophisticated test session scripts.</p> <p>Note: Most WebLOAD users do not need this level of detail to create effective testing sessions for their website. Scripts are usually recorded and edited using WebLOAD Recorder, a simple, intuitive interface that provides users with a comprehensive set of testing tools literally at their fingertips, through point-and-click or drag-and-drop convenience. The details in this guide are provided for the convenience of more sophisticated programmers, who may wish to add specific, perhaps complex tailoring to their recorded scripts.</p> <p>This chapter provides a general introduction to JavaScript scripts.</p>"},{"location":"javascript/intro_java_scripts/#what-are-scripts","title":"What are scripts?","text":"<p>WebLOAD runs test sessions that simulate the actions of a real user through the use of script files. Scripts are client programs that access the server you want to test. Users create scripts by recording a series of typical activities with the application being tested using WebLOAD Recorder WebLOAD Recorder automatically converts the user activities into script programs. You do not need to know anything about writing scripts to test an application with WebLOAD. No programming or editing skills are required to create or run a successful test session.</p> <p>Scripts are created using WebLOAD Recorder. WebLOAD Recorder operates in conjunction with a Web browser such as Microsoft\u2019s Internet Explorer. As a user navigates the test application in the browser, (for example, navigating between pages, typing text into a form, or clicking the mouse), WebLOAD Recorder records all user actions in a script. During later website testing sessions, WebLOAD simulates every action of the original user and automatically handles all Web interactions, including parsing dynamic HTML, and full support for all security requirements, such as user authentication or SSL protocol use.</p> <p>A simple recorded script is ideal if your WebLOAD test involves a typical sequence of Web activities. These activities are all recorded in your script, and are represented in</p> <p>the WebLOAD Recorder by a Script Tree, a set of clear, intuitive icons and visual devices arranged into a logical hierarchical sequence. Each of these activity icons actually represents a block of code within the underlying test script. Scripts are constructed automatically out of \u2018building blocks\u2019 of test code, and most users create and run test sessions quite easily, without ever looking into those building blocks to see the actual code inside.</p> <p>Some users prefer to manually edit the code of a recorded script to create more complex, sophisticated test sessions. For example, for a script to work with Java or COM components, a certain degree of programming is required. This guide documents the syntax of the JavaScript objects and functions available to programmers who wish to add more complex functionality to their scripts.</p> <p>Scripts are written in JavaScript. JavaScript is an object-oriented scripting language developed by Netscape Communications Corporation. JavaScript is best known for its use in conjunction with HTML to automate World Wide Web pages. However, JavaScript is actually a full-featured programming language that can be used for many purposes besides Web automation. WebLOAD has chosen JavaScript as the scripting language for test session scripts. WebLOAD JavaScript scripts combine the ease and simplicity of WebLOAD\u2019s visual, intuitive programming environment with the flexibility and power of JavaScript object-oriented programming.</p> <p>For detailed information on using WebLOAD, including creating scripts, running test sessions, and analyzing the results, see the WebLOAD Recorder User\u2019s Guide and the WebLOAD Console User\u2019s Guide.</p>"},{"location":"javascript/intro_java_scripts/#webload-scripts-work-with-an-extended-version-of-the-standard-dom","title":"WebLOAD scripts Work with an Extended Version of the Standard DOM","text":"<p>WebLOAD Recorder operates in conjunction with a Web browser such as Microsoft\u2019s Internet Explorer. As you execute a sequence of HTTP actions in the browser, WebLOAD Recorder records your actions in a JavaScript script. All Web browsers rely on an extended Document Object Model, or DOM, for optimum handling of HTML pages. The standard browser DOM defines both the logical structure of HTML documents and the way a document is accessed and manipulated. WebLOAD scripts use a standard browser DOM to access and navigate Internet Web pages, including Dynamic HTML and nested links and pages. To facilitate website testing, WebLOAD extends the standard browser DOM with many features, objects, and functions that expedite site testing and evaluation.</p> <p>This section provides a brief overview of the standard DOM structure. Most of the information in this overview was provided by the World Wide Web Consortium (W3C), which develops interoperable technologies (specifications, guidelines, software, and tools) to lead the Web to its full potential as a forum for information, commerce,</p> <p>communication, and collective understanding. For more information about the standard DOM structure and components, go to the following websites:</p> <p>http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/introduction.html</p> <p>http://msdn2.microsoft.com/en-us/library/ms533043.aspx</p> <p>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/dhtmlrefs.asp</p>"},{"location":"javascript/intro_java_scripts/#what-is-the-document-object-model","title":"What is the Document Object Model?","text":"<p>The Document Object Model (DOM) is an application programming interface (API) for valid HTML and well-formed XML documents. The DOM defines the logical structure of documents and the way a document is accessed and manipulated. With the Document Object Model, programmers can build documents, navigate their structure, and add, modify, or delete elements and content. Anything found in an HTML or XML document can be accessed, changed, deleted, or added using the Document Object Model, with a few exceptions\u2014in particular, the DOM interfaces for the XML internal and external subsets have not yet been specified.</p> <p>As a W3C specification, one important objective for the Document Object Model is to provide a standard programming interface that can be used in a wide variety of environments and applications. The DOM is designed to be used with any programming language.</p> <p>Essentially, the DOM is a programming API for documents based on an object structure that closely resembles the structure of the documents it models. For instance, consider this table, taken from an HTML document:</p> <pre><code>&lt;TABLE&gt;\n  &lt;TBODY&gt;\n    &lt;TR&gt;\n        &lt;TD&gt;Shady Grove&lt;/TD&gt;\n        &lt;TD&gt;Aeolian&lt;/TD&gt;\n    &lt;/TR&gt;\n    &lt;TR&gt;\n          &lt;TD&gt;Over the River, Charlie&lt;/TD&gt;\n          &lt;TD&gt;Dorian&lt;/TD&gt;\n        &lt;/TR&gt;\n  &lt;/TBODY&gt;\n&lt;/TABLE&gt;\n</code></pre>"},{"location":"javascript/intro_java_scripts/#understanding-the-dom-structure","title":"Understanding the DOM Structure","text":"<p>In the DOM, documents have a logical structure that is very much like a tree; to be more precise, that is like a \u201cforest\u201d or \u201cgrove\u201d, which can contain more than one tree. Each document contains zero or one doctype nodes, one root element node, and zero or more comments or processing instructions; the root element serves as the root of the element tree for the document. However, the DOM does not specify that documents must be implemented as a tree or a grove, nor does it specify how the relationships among objects be implemented. The DOM is a logical model that may be implemented in any convenient manner. In this specification, we use the term structure model to describe the tree-like representation of a document. We also use the term \u201ctree\u201d when referring to the arrangement of those information items which can be reached by using \u201ctree-walking\u201d methods; (this does not include attributes). One important property of DOM structure models is structural isomorphism: if any two Document Object Model implementations are used to create a representation of the same document, they will create the same structure model, in accordance with the XML Information Set [Infoset].</p> <p>Note: There may be some variations depending on the parser being used to build the DOM. For instance, the DOM may not contain white spaces in element content if the parser discards them.</p> <p>The name \u201cDocument Object Model\u201d was chosen because it is an \u201cobject model\u201d in the traditional object oriented design sense. Documents are modeled using objects, and the model encompasses not only the structure of a document, but also the behavior of a document and the objects of which it is composed. In other words, the nodes in the above diagram do not represent a data structure; they represent objects, which have functions and identity. As an object model, the DOM identifies:</p> <ul> <li>The interfaces and objects used to represent and manipulate a document.</li> <li>The semantics of these interfaces and objects - including both behavior and attributes.</li> <li>The relationships and collaborations among these interfaces and objects.</li> </ul> <p>The structure of SGML documents has traditionally been represented by an abstract data model, not by an object model. In an abstract data model, the model is centered around the data. In object oriented programming languages, the data itself is encapsulated in objects that hide the data, protecting it from direct external manipulation. The functions associated with these objects determine how the objects may be manipulated, and they are part of the object model.</p> <p>The information in this section has been excerpted from the World Wide Web Consortium introduction to the DOM. For the complete text of the DOM overview, see http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/introduction.html. The complete document is found at http://www.w3.org/TR/2001/WD-DOM-Level-3-Core- 20010913/.</p> <p>Copyright \u00a9 1994-2001 World Wide Web Consortium (http://www.w3.org/), (Massachusetts Institute of Technology (http://www.lcs.mit.edu/), Institut National de Recherche en Informatique et en Automatique (http://www.inria.fr/), Keio University (http://www.keio.ac.jp/)).</p> <p>All Rights Reserved. http://www.w3.org/Consortium/Legal/ W3C\u00ae DOCUMENT NOTICE AND LICENSE</p> <p>Copyright \u00a9 1994-2001 World Wide Web Consortium (http://www.w3.org/), (Massachusetts Institute of Technology (http://www.lcs.mit.edu/), Institut National de Recherche en Informatique et en Automatique (http://www.inria.fr/), Keio University (http://www.keio.ac.jp/)).</p> <p>All Rights Reserved. http://www.w3.org/Consortium/Legal/</p> <p>Public documents on the W3C site are provided by the copyright holders under the following license. The software or Document Type Definitions (DTDs) associated with W3C specifications are governed by the Software Notice. By using and/or copying this document, or the W3C document from which this statement is linked, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions:</p> <p>Permission to use, copy, and distribute the contents of this document, or the W3C document from which this statement is linked, in any medium for any purpose and without fee or royalty is hereby granted, provided that you include the following on ALL copies of the document, or portions thereof, that you use:</p> <ol> <li>A link or URL to the original W3C document.</li> <li>The pre-existing copyright notice of the original author, or if it doesn\u2019t exist, a notice of the form: \u201cCopyright \u00a9 [$date-of-document] World Wide Web Consortium (http://www.w3.org/), (Massachusetts Institute of Technology (http://www.lcs.mit.edu/), Institut National de Recherche en Informatique et en Automatique (http://www.inria.fr/), Keio University (http://www.keio.ac.jp/)). All Rights Reserved. http://www.w3.org/Consortium/Legal/ (Hypertext is preferred, but a textual representation is permitted.)</li> <li>If it exists, the STATUS of the W3C document.</li> </ol> <p>When space permits, inclusion of the full text of this NOTICE should be provided. We request that authorship attribution be provided in any software, documents, or other items or products that you create pursuant to the implementation of the contents of this document, or any portion thereof.</p> <p>No right to create modifications or derivatives of W3C documents is granted pursuant to this license. However, if additional requirements (documented in the Copyright FAQ) are satisfied, the right to create modifications or derivatives is sometimes granted by the W3C to individuals complying with those requirements.</p> <p>THIS DOCUMENT IS PROVIDED \u201cAS IS,\u201d AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.</p> <p>COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS THEREOF.</p> <p>The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to this document or its contents without specific, written prior permission. Title to copyright in this document will at all times remain with copyright holders.</p> <p>This formulation of W3C\u2019s notice and license became active on April 05 1999 so as to account for the treatment of DTDs, schemas and bindings. See the older formulation for the policy prior to this date. Please see our Copyright FAQ for common questions about using materials from our site, including specific terms and conditions for packages like libwww, Amaya, and Jigsaw. Other questions about this notice can be directed to site-policy@w3.org (mailto:site-policy@w3.org).</p> <p>(Last updated by reagle on 1999/04/99.)</p>"},{"location":"javascript/intro_java_scripts/#dom-objects-commonly-used-in-a-script","title":"DOM Objects Commonly Used in a script","text":"<p>On Internet websites, a simple HTML document may be constructed of a single page, or the document may be constructed of many nested pages, each one including multiple \u2018child\u2019 windows, in a recursive structure. Browser DOMs were designed to reflect this flexible approach.</p> <p>When using the DOM, a single Web page document has a logical structure that resembles a single tree. In nested Web pages, each child window is simply one tree in a recursive forest of trees. The typical DOM is ideal for representing Internet Web page access because it provides a flexible, generic model that encompasses both the attributes of the object itself and its interfaces and behaviors. Typical DOM objects include:</p> <ul> <li>The document itself.</li> <li>The frames nested in an HTML page, together with any additional nested windows.</li> <li>The location information.</li> <li>The links, forms, and images on the page.</li> <li>The tables, scripts, XML Data Islands, and Meta objects on the page.</li> <li>Individual elements of a specific form or frame.</li> </ul> <p>The following table provides a brief overview of the main DOM object components of a typical Web page.</p> <p>DOM objects commonly used in scripts</p> <p>The following table lists the DOM objects commonly used in scripts. A detailed description of each of these objects can be found in the following sections. </p> Object Description window The <code>window</code>  object  represents an open browser <code>window</code>. Typically, the browser creates a single <code>window</code>  object when  it opens an HTML document. However, if a document defines one or more frames  the browser creates one <code>window</code> object for the original  document and one additional <code>window</code> object (a child <code>window</code>) for each frame. The  child <code>window</code> may be affected by actions that occur in the parent. For  example, closing the parent <code>window</code> causes all child windows to close. document The <code>document</code>  object  represents the HTML <code>document</code> in a browser <code>window</code>, storing the HTML data in a  parsed format. Use the <code>document</code> object to retrieve links,  forms, nested frames, images, scripts, and other information about the  <code>document</code>. By default, <code>document</code> used alone represents the  <code>document</code> in the current <code>window</code>. You usually refer directly to the <code>document</code>;  the <code>window</code>  part is  optional and is understood implicitly. frame Each <code>frame</code>  object  represents one of the frames imbedded within a Web page. Frames and windows  are essentially comparable. The recursive aspect of the DOM is implemented at  this level. A <code>window</code> may contain a collection of frames. Each frame may  contain multiple child windows, each of which may contain more frames that  contain more windows, and so on. location The <code>location</code> object contains  information on the current <code>window</code> URL. link A <code>link</code> object contains  information on an external document to which the current document is linked. form, element, and input A <code>form</code>  object  contains the set of elements and input controls (text, radio buttons,  checkboxes, etc.) that are all components of a single form. Each element  object stores the parsed data for a single HTML form element such as <code>&lt;INPUT&gt;</code>, <code>&lt;BUTTON&gt;</code>, or <code>&lt;SELECT&gt;</code>. Each input object  stores the information defining one of the input controls in the form.  Controls are organized by type, for example input type=checkbox.  Forms enable client-side  users to submit data to a server in a standardized format. A form is designed  to collect the required data using a variety of controls, such as INPUT or SELECT. Users viewing the form  fill in the data and then click the SUBMIT button to send it to the server. A script on the server then  processes the data. Notice that the object syntax corresponds to a path  through the DOM hierarchy tree, beginning at the root window and continuing  until the specified item\u2019s properties. image Each <code>image</code>  object  contains one of the embedded images found in a document. script A <code>script</code>  object  defines a script for the current document that will be interpreted by a  script engine. title The <code>title</code>  object  contains the document title, stored as a text string."},{"location":"javascript/intro_java_scripts/#webload-extension-set","title":"WebLOAD Extension Set","text":"<p>WebLOAD has added the following extensions to the standard DOM properties and methods. This guide provides syntax specifications for these objects.</p> <p>WebLOAD DOM extension set highlights</p> WebLOAD  object extensions Description wlCookie Sets and deletes cookies. wlException WebLOAD error management object. wlGeneratorGlobal and wlSystemGlobal objects Handles global values  shared between script threads or Load Generators. wlGlobals Manages global system and configuration  values. wlHeaders Contains the key/value pairs in the HTTP  command headers that brought the document. (Get, Post, etc.) wlHttp Performs HTTP transactions and stores  configuration property values for individual transactions. wlLocals Stores local configuration property values. wlMetas Stores the parsed data for an HTML meta object. wlOutputFile Writes script output messages to a global  output file. wlRand Generates random numbers. wlSearchPairs Contains the key/value  pairs in a document\u2019s URL search strings. wlTables, row, and cell objects Contains the parsed data from an HTML  table. XML DOM  objects XML DOM object set that  generates new XML data to send back to the server for processing. <p>Website testing usually means testing how typical user activities are handled by the application being tested. Are the user actions managed quickly, correctly, appropriately? Is the application responsive to the user\u2019s requests? Will the typical user be happy working with this application? When verifying that an application handles user activities correctly, WebLOAD usually focuses on the user activities, recording user actions through the WebLOAD Recorder when initially creating scripts and recreating those actions during subsequent test sessions. The focus on user activities represents a high-level, conceptual approach to test session design.</p> <p>Sometimes a tester may prefer to use a low-level, \u201cnuts-and-bolts\u201d approach that focuses on specific internal implementation commands, such as HTTP transactions. The WebLOAD DOM extension set includes objects, methods, properties, and functions that support this approach. Items in this guide that are relevant to the HTTP Transaction Mode are noted as such in the entries.</p>"},{"location":"javascript/intro_java_scripts/#when-would-i-edit-the-javascript-in-my-scripts","title":"When Would I Edit the JavaScript in My scripts?","text":"<p>WebLOAD Recorder automatically creates JavaScript scripts for test sessions based on the actions performed by the user during recording. You don\u2019t have to be familiar with the JavaScript language to work with WebLOAD and test Web applications. However, as your testing needs increase, you may want to edit and expand the set of scripts that were already recorded. Many users prefer to design test sessions around a set of basic scripts created through WebLOAD Recorder and then expand or tailor those scripts to meet a particular testing need. Some of the reasons for editing JavaScript scripts include:</p> <ul> <li>Recycling and updating a useful library of test scripts from earlier versions of WebLOAD.</li> <li>Creating advanced, specialized verification functions.</li> <li>Debugging the application being tested.</li> <li>Optimization capabilities, to maximize your application\u2019s functionality at minimal cost.</li> </ul> <p>This guide documents the syntax and usage of the actions, functions, objects, and variables provided by WebLOAD to add advanced functionality and tailoring to the JavaScript scripts created through WebLOAD Recorder. JavaScript is very similar to other object-oriented programming languages such as C++, Java, and Visual Basic. The syntax of JavaScript is also very similar to C. If you know any of these other languages, you will find JavaScript very easy to learn. You can probably learn enough about JavaScript to start programming just by studying the examples in this book.</p> <p>Note: For detailed information about the JavaScript language, please refer to the section entitled The Core JavaScript Language in the Netscape JavaScript Guide, which is supplied in Adobe Acrobat format with the WebLOAD software. You may also learn the elements of JavaScript programming from many books on Web publishing. Keep in mind that some specific JavaScript objects relating to Web publishing do not exist in the WebLOAD test environment.</p>"},{"location":"javascript/intro_java_scripts/#accessing-script-components","title":"Accessing script Components","text":"<p>WebLOAD uses test session scripts to simulate user activities at a website. A script is initially created by WebLOAD Recorder during a recording session. As a user works with a test application in a browser, (for example, navigating between pages, typing text into a form, or clicking the mouse), WebLOAD Recorder stores information about all user actions in a script. Scripts are also edited using WebLOAD Recorder. Users may add functionality or customize their scripts through the objects, functions, and other features described in this guide.</p> <p>Customizing scripts may involve nothing more than dragging an icon from the WebLOAD Recorder toolbar and dropping it into a graphic representation of the script. It may involve entering or changing data through a user-friendly dialog box, or with the help of a Wizard. Some users may even add special features to their scripts by editing the underlying code of the script itself. When working with scripts, users may be working on many different levels. For that reason, the WebLOAD Recorder desktop includes multiple view options, providing information on multiple levels. See the WebLOAD Scripting Guide for a more extensive, illustrated explanation of the WebLOAD Recorder desktop components.</p> <ul> <li> <p>Most users access scripts primarily through a Script Tree, a set of clear, intuitive icons and visual devices representing user activities during a recording session, arranged into a logical structure. Each user activity in the Script Tree is referred to as a node. Nodes are organized in a hierarchical arrangement. The outmost level, or root level, is a single script node. The second level directly under the root script node includes all the Web pages to which the user navigated over the course of the recording session. The third level, organized under each Web page, includes all the user activities that occurred on the parent Web page. These activities are themselves organized into additional levels. For example, all data input on a single form in a Web page is organized into a single sub-tree of user input nodes collected under the node for that form. The Script Tree appears on the left side of the WebLOAD Recorder desktop.</p> </li> <li> <p>Web page nodes are added to the Script Tree in one of two ways. Some Web pages are the result of a user action on the previous page, such as clicking a link and jumping to a new page. Other Web pages are created as a result of direct or indirect navigation, such as entering a URL in the browser window, or pop-up windows triggered by a previous navigation. The sets of user activities contained between two direct-navigation Web pages in a Script Tree parallel the navigation blocks found within the JavaScript script code.</p> <p>During a WebLOAD Recorder recording session, a new navigation block is created each time a user completes a direct navigation, manually entering a new URL into the WebLOAD Recorder address bar. Each navigation block is surrounded by a <code>try{}</code> <code>catch{}</code> statement in the corresponding JavaScript script code. Navigation blocks are useful for error management, especially when running \u201chands-free\u201d test sessions. For example, the user can define the default testing behavior to be that if an error is encountered during a test session, WebLOAD should throw the error, skip to the next navigation block, and continue with the test session. Errors during playback are indicated by a red X appearing beside the problematic action in the Script Tree.</p> </li> <li> <p>The graphic nodes in a Script Tree actually represent blocks of code within the underlying recorded script. The JavaScript code corresponding to a selected node is automatically displayed in the JavaScript View pane. The JavaScript View pane is one of the tabs available in the WebLOAD Recorder desktop.</p> </li> <li> <p>The graphic nodes in a Script Tree represent user actions on a website. An exact replica, or snapshot, of each user activity is stored during recording and available in the Browser View to aid in debugging and help users remember what each action accomplished. The Browser View pane is one of the tabs available in the WebLOAD Recorder desktop.</p> </li> <li> <p>Web pages are created through HTML programs. The HTML code that underlies each stored Web page is also stored during recording sessions. For easy reference, the HTML code of the Web page associated with a selected node is displayed in the HTML View pane. The HTML View pane is one of the tabs available in the WebLOAD Recorder desktop.</p> </li> <li> <p>Web pages have a logical structure that may be represented through a series of DOM object trees. The DOM tree for a selected Web page is essentially a hierarchically structured, more easily understood representation of the DOM objects found in the HTML code for that Web page. The DOM tree of the Web page associated with a selected node is displayed in the DOM View pane. The DOM View pane is one of the tabs available in the WebLOAD Recorder desktop. When working with the DOM View, the center pane is actually split in half, with the upper half displaying the DOM View and the lower half displaying the corresponding Web page, seen in the Browser View.</p> </li> </ul> <p>The following figure illustrates a WebLOAD Recorder desktop displaying the Script Tree and DOM and Browser Views. The Script Tree is on the left. The Browser View pane on the lower right focuses on a piece of the selected form as it appeared on the Web page at the time this script was recorded. The DOM View pane on the upper right displays the DOM objects that represent the selected form, arranged in a tree that corresponds to the user activity in the selected form. </p>"},{"location":"javascript/intro_java_scripts/#editing-the-javascript-code-in-a-script","title":"Editing the JavaScript Code in a script","text":""},{"location":"javascript/intro_java_scripts/#accessing-the-javascript-code-within-the-script-tree","title":"Accessing the JavaScript Code within the Script Tree","text":"<p>WebLOAD Recorder provides a complete graphic user interface for creating and editing script files. Additions or changes to a script are usually made through the WebLOAD Recorder, working with intuitive icons representing user actions in a graphic Script Tree. For greater clarity, the JavaScript code that corresponds to each user action in a script is also visible in the JavaScript View pane on the WebLOAD Recorder desktop.</p> <p>While most people never really work with the JavaScript code within their script, some users do wish to manually edit the JavaScript code underlying their Script Tree. For example, some test sessions may involve advanced WebLOAD testing features that cannot be completely implemented though the GUI, such as Java or XML objects.Editing the JavaScript code in a script does not necessarily mean editing a huge JavaScript file. Most of the time users only wish to add or edit a specific feature or a small section of the code. WebLOAD Recorder provides access to the JavaScript code in a script through JavaScript Object nodes, which are seen on the following levels:</p> <ul> <li> <p>JavaScript Object nodes\u2014individual nodes in the Script Tree. Empty JavaScript Object nodes may be dragged from the WebLOAD Recorder toolbar and dropped onto the Script Tree at any point selected by the user, as described in the WebLOAD Scripting Guide. Use the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor , to add lines of code or functions to the JavaScript Object.</p> </li> <li> <p>Converted Web page\u2014the sub-tree or branch of a Script Tree that represents all user activity within a single Web page, converted to a single JavaScript Object node. A Web page branch is \u2018rooted\u2019 in the Script Tree with an icon that represents the user\u2019s navigation to that page\u2019s URL. The icons on that branch represent all user activities from the point at which that Web page was first accessed until the point at which the user navigated to a different Web page. Some testing features may require manually editing or rewriting the JavaScript code for user activities within a Web page. To manually edit code in a recorded script, the Web page branch that includes that code must be converted to a JavaScript Object. Converting a Web page branch to a JavaScript Object is simple. Right click the preferred Web page node in the Script Tree and select Convert to JavaScript Object from the pop-up menu. The entire Web page branch becomes a single JavaScript Object, which can then be edited through the IntelliSense Editor.</p> </li> </ul> <p>Note: Once a branch has been converted to a single JavaScript Object, the various user activity icons that were on that branch are no longer individually accessible.</p> <ul> <li> <p>Imported JavaScript File\u2014an external JavaScript file that should be incorporated within the body of the current script. Select Edit \u0086 Import JavaScript File from the WebLOAD Recorder menu to import the file of your choice. Often testers work with a library of pre-existing library files from which they may choose functions that are relevant to the current test session. This modular approach to programming simplifies and speeds up the testing process, and is fully supported and endorsed by WebLOAD.</p> </li> <li> <p>Converted Script Tree\u2014if necessary, an entire Script Tree can be converted to a single JavaScript Object node consisting of a straight JavaScript text file. Right click the Script Tree\u2019s root node and choose Convert to JavaScript Object from the pop- up menu. However, this conversion is not recommended unless manual editing of an entire script file is truly required for the test session.</p> </li> </ul>"},{"location":"javascript/intro_java_scripts/#using-the-intellisense-javascript-editor","title":"Using the IntelliSense JavaScript Editor","text":"<p>For those users who wish to manually edit their scripts, WebLOAD Recorder provides three levels of programming assistance:</p> <ul> <li> <p>An IntelliSense Editor mode for the JavaScript View pane.</p> <p>Add new lines of code to your script or edit existing JavaScript functions through the IntelliSense Editor mode of the JavaScript View pane. The IntelliSense Editor helps you write the JavaScript code for a new function by formatting new code and prompting with suggestions and descriptions of appropriate code choices and syntax as programs are being written. IntelliSense supports the following shortcut keys:</p> <ul> <li> <p>Period (\u201c.\u201d) \u2013 Enter a period after the object name, to display a drop-down list of the object\u2019s available properties that can be added to the script (see Figure 2).</p> </li> <li> <p><code>&lt;CTRL&gt;</code> <code>&lt;Space&gt;</code> \u2013 While typing the name of an object, you can type <code>&lt;CTRL&gt;``&lt;Space&gt;</code> to display a drop-down list of the available objects that begin with the letters that you entered. For example, if you type <code>wl</code> the IntelliSense Editor displays a drop-down list of all of the objects that begin with <code>wl</code> (such as <code>wlhttp</code>).</p> </li> </ul> </li> </ul> <p>In addition, the IntelliSense Editor gives a structure to the code with the outline bar and line numbering.</p> <p>Collapsing the code enables you to view the heading of the section, without seeing the code within the section. To expand or collapse different sections of the code:</p> <ul> <li> <p>Click the plus sign (+) or minus sign (-) on the outline bar,</p> <p>-Or-</p> </li> <li> <p>Right-click within the IntelliSense Editor and select Outlining from the pop-up menu. The available outlining options are:</p> </li> <li> <p>Toggle outline \u2013 Collapses or expands the section at the mouse location.</p> </li> <li> <p>Toggle all outline \u2013 Collapses or expands all outlines.</p> </li> <li> <p>Collapse to definition \u2013 Collapses all outlines.</p> </li> </ul> <p>You can enable or disable both the outline bar and line numbering features by:</p> <ul> <li> <p>Selecting Edit \u0086 Enable Outlining or Line Numbers,</p> <p>-Or-</p> </li> <li> <p>Right-clicking within the IntelliSense Editor and selecting Enable Outlining or</p> </li> </ul> <p>Line Numbers from the pop-up menu.</p> <p>When these features are enabled, a checkmark appears next to the name in the Edit and pop-up menus. By default, these features are enabled, but WebLOAD opens with the settings that were saved during the previous WebLOAD session. During playback and debug modes, all outlines are expanded.</p> <p>Use WebLOAD Recorder\u2019s predefined delimiters to keep your code structured and organized. The available delimiters include:</p> <ul> <li> <p>For JavaScript functions, use the \u201c{\u201c as the start delimiter and the \u201c}\u201d end delimiter.</p> </li> <li> <p>For script tree nodes, insert a WLIDE comment from the General WebLOAD Recorder toolbox. This automatically inserts a start delimiter \u201c//\u201d and end delimiter \u201cEnd WLIDE\u201d.</p> </li> </ul> <p>For more information, see the WebLOAD Scripting Guide.</p> <p></p> <ul> <li> <p>A  selection of the most commonly used functions and commands, available through the Insert menu. You can choose to program your own JavaScript Object code within your script and take advantage of the WebLOAD Recorder to simplify your programming efforts. Rather than manually typing out the code for each command, with the risk of making a mistake, even a trivial typographical error, and adding invalid code to the script file, you may select an item from the Insert menu, illustrated in the following figure, to bring up a list of available commands and functions for the selected item. WebLOAD Recorder automatically inserts the correct code for the selected item into the JavaScript Object currently being edited. You may then change specific parameter values without any worries about accidental mistakes in the function syntax.</p> <p></p> </li> </ul> <p>In addition to the Insert menu, you may select an item from the Insert Variable menu, to add system and user-defined parameters to the script. This eliminates the need for manual coding.</p> <p></p> <ul> <li>A Syntax Checker that checks the syntax of the code in your script file and catches simple syntax errors before you spend any time running a test session. While standing in the JavaScript View pane of the WebLOAD Recorder desktop, select Tools &gt; Check Syntax to check the syntax of the code in your script file.</li> </ul> <p>Important: WebLOAD Recorder scripts should be edited only within the confines of WebLOAD Recorder, not an external editor. If you use an external editor to modify the JavaScript code in a script file generated by WebLOAD Recorder, your visual script will be lost.</p> <p>Script code that you wish to write or edit must be part of a JavaScript Object in the Script Tree. Adding or converting JavaScript Objects in a Script Tree is described in Accessing the JavaScript Code within the Script Tree .</p>"},{"location":"javascript/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD, the premier performance, scalability, and reliability testing solution for internet applications.</p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load.</p> <p>This section provides a brief introduction to WebLOAD technical support, including both documentation and online support.</p>"},{"location":"javascript/js_helper_funcs/","title":"JavaScript Helper Functions","text":"<p>The following are global JavaScript functions that are used by WebLOAD and can be used to perform specific tasks.</p>"},{"location":"javascript/js_helper_funcs/#protocol-script-functions","title":"Protocol Script Functions","text":""},{"location":"javascript/js_helper_funcs/#methods","title":"Methods","text":""},{"location":"javascript/js_helper_funcs/#debugmessagestr","title":"DebugMessage(str)","text":"<p>Print message to log. Like InfoMessage() but logs only when running in WebLOAD Recorder, not in Console</p> <p>Parameters:</p> Name Type Description <code>str</code> string to log"},{"location":"javascript/js_helper_funcs/#decodestrings","title":"DecodeString(s)","text":"<p>Decoding function - reverse of EncodeString</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to unescape <p>See:</p> <ul> <li>EncodeString</li> </ul> <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#decodestringunixs","title":"DecodeStringUnix(s)","text":"<p>Decoding function - reverse of EncodeString + convert end-of-line from unix to dos format</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to unescape <p>See:</p> <ul> <li>EncodeString</li> </ul> <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#decodestringwins","title":"DecodeStringWin(s)","text":"<p>Decoding function - reverse of EncodeStringWin</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to unescape <p>See:</p> <ul> <li>EncodeStringWin</li> </ul> <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#encodestrings","title":"EncodeString(s)","text":"<p>Encoding function - escape given string, replace special chars with %xx notaion. Similar to 'escape', except that it convert space to \"+\" (not %20), \"/\" to \"%2F\" and \"+\" to \"%2B\"</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to escape <p>Returns:</p> <p>- escaped string</p>"},{"location":"javascript/js_helper_funcs/#encodestringwins","title":"EncodeStringWin(s)","text":"<p>Encoding function - escape given string, replace special chars with %xx notaion. Similar to 'EncodeString', but converts linux style \\n to windows style \\r\\n</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to escape <p>Returns:</p> <p>- escaped string</p>"},{"location":"javascript/js_helper_funcs/#sleepeverymillis","title":"SleepEvery(millis)","text":"<p>SleepEvery a certain multiple number of milliseconds has passed since the beginning of the session. Can be used to synchronize virtual users session for intervals.</p> <p>Parameters:</p> Name Type Description <code>millis</code> number time in milliseconds from session start to repeatedly wait before resuming <p>Example</p> <pre><code>SleepEvery(5000); //wait until a multiple of 5 seconds have passed, for example, if called at 00:02 seconds into the session, will wait to 00:05, if call at 00:06 will wait until 00:10\n</code></pre>"},{"location":"javascript/js_helper_funcs/#sleepuntilmillisfrombeginning","title":"SleepUntil(millisFromBeginning)","text":"<p>SleepUntil a certain number of milliseconds has passed since the beginning of the session. Can be used to synchronize virtual users session start.</p> <p>Parameters:</p> Name Type Description <code>millisFromBeginning</code> number time in milliseconds from session start to wait before resuming <p>See:</p> <ul> <li>SleepEvery</li> </ul> <p>Example</p> <pre><code>SleepUntil(5000); //wait until 5 seconds have passed\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addtransactionstomdc","title":"addTransactionsToMDC()","text":"<p>When called, will cause all transactions to be automatically added to MDC</p> <p>See:</p> <ul> <li>putMDC</li> </ul>"},{"location":"javascript/js_helper_funcs/#assertequalsexpected-actual-messageopt","title":"assertEquals(expected, actual, messageopt)","text":"<p>JUnit like helper function - compare actal and expected and throw an error in they are different</p> <p>Parameters:</p> Name Type Attributes Description <code>expected</code> * value to be compared to <code>actual</code> * actual value <code>message</code> string (optional) custom message to show if values don't match"},{"location":"javascript/js_helper_funcs/#assertfalseexpr-messageopt","title":"assertFalse(expr, messageopt)","text":"<p>JUnit style assert that expression is false</p> <p>Parameters:</p> Name Type Attributes Description <code>expr</code> boolean expression to check <code>message</code> string (optional) custom message"},{"location":"javascript/js_helper_funcs/#assertnotequalsexpected-actual-messageopt","title":"assertNotEquals(expected, actual, messageopt)","text":"<p>JUnit like helper function - compare actal and expected and throw an error in they are the same</p> <p>Parameters:</p> Name Type Attributes Description <code>expected</code> * value to be compared to <code>actual</code> * actual value <code>message</code> string (optional) custom message to show if values are the same"},{"location":"javascript/js_helper_funcs/#asserttrueexpr-messageopt","title":"assertTrue(expr, messageopt)","text":"<p>JUnit style assert that expression is true</p> <p>Parameters:</p> Name Type Attributes Description <code>expr</code> boolean expression to check <code>message</code> string (optional) custom message"},{"location":"javascript/js_helper_funcs/#clearmdc","title":"clearMDC()","text":"<p>Clear content of MDC (Mapped Diagnostic Context)</p> <p>See:</p> <ul> <li>putMDC</li> </ul>"},{"location":"javascript/js_helper_funcs/#closeallwebsocketsws_prefixopt-from_idxopt-to_idxopt","title":"closeAllWebSockets(ws_prefixopt, from_idxopt, to_idxopt)","text":"<p>Close all WebSocket objects</p> <p>Parameters:</p> Name Type Attributes Default Description <code>ws_prefix</code> string (optional) ws prefix of var name <code>from_idx</code> number (optional) 1 <code>to_idx</code> number (optional) 20 <p>Example</p> <pre><code>//will close all WebSocket objects named \"ws1\" to \"ws20\"\n closeAllWebSockets();\n</code></pre>"},{"location":"javascript/js_helper_funcs/#decodexmlstr","title":"decodeXML(str)","text":"<p>Decoding function - reverse of encodeXML</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encode <p>See:</p> <ul> <li>encodeXML</li> </ul> <p>Returns:</p> <p>decoded string</p>"},{"location":"javascript/js_helper_funcs/#decodexmlattstr","title":"decodeXmlAtt(str)","text":"<p>Decoding function - reverse of encodeXmlAtt</p> <p>Parameters:</p> Name Type Description <code>str</code> string encoded string to decode <p>See:</p> <ul> <li>encodeXmlAtt</li> </ul> <p>Returns:</p> <p>- decoded string</p> <p>Example</p> <pre><code>//returns \"abc:/egf=\"\ndecodeXmlAtt(\"abc&amp;#x3a;&amp;#x2f;egf\\&amp;#x3d;\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#decodexmlattescstr","title":"decodeXmlAttEsc(str)","text":"<p>Decoding function - converts XML attribute format (&amp;#x??;) to URL encoding format (%??)</p> <p>Parameters:</p> Name Type Description <code>str</code> string encoded string to decode <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#decodexmlattnumstr","title":"decodeXmlAttNum(str)","text":"<p>Decoding function - decodes XML Attribute in numeric format</p> <p>Parameters:</p> Name Type Description <code>str</code> string encoded string to decode <p>Returns:</p> <p>- decoded string</p> <p>Example</p> <pre><code>//returns \"\\\"strategy\\\"\"\ndecodeXmlAttNum(\"&amp;#34;strategy&amp;#34;\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#encodeuricomponentlowers","title":"encodeURIComponentLower(s)","text":"<p>Encoding function - Similar to encodeURIComponent but uses lower-case letters</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to escape <p>Returns:</p> <p>- escaped string</p>"},{"location":"javascript/js_helper_funcs/#encodexmlstr","title":"encodeXML(str)","text":"<p>Encoding function - encodes XML tags</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encode <p>Returns:</p> <p>encoded string</p>"},{"location":"javascript/js_helper_funcs/#encodexmlbrokenstr","title":"encodeXMLbroken(str)","text":"<p>Encoding function - like encodeXML but &gt; is not replaced, only &lt; and &amp;</p> <p>Parameters:</p> Name Type Description <code>str</code> string <p>See:</p> <ul> <li>encodeXML</li> </ul> <p>Returns:</p> <p>encoded string</p>"},{"location":"javascript/js_helper_funcs/#encodexmlattstr","title":"encodeXmlAtt(str)","text":"<p>Encodeing function - encode an XML Attribute.</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encoded <p>Returns:</p> <p>- encoded string</p> <p>Example</p> <pre><code>//returns \"pcdshort&amp;#x3a;&amp;#x2f;M0szu5jMrfDvCVJp71LcecoFE5s\\&amp;#x3d;\"\nencodeXmlAtt(\"pcdshort:/M0szu5jMrfDvCVJp71LcecoFE5s=\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#encodexmlattescstr","title":"encodeXmlAttEsc(str)","text":"<p>Encoding function - coverts escaped string to XML attribute escaped string</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encoded <p>Returns:</p> <p>- encoded string</p> <p>Example</p> <pre><code>//returns \"a&amp;#x2b;b\"\nencodeXmlAttEsc( \"a%2Bb\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#escapeaugstr","title":"escapeAug(str)","text":"<p>Encoding function - vairation of escape. Also encodes @ / and ~</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encoded <p>Returns:</p> <p>- encoded string</p>"},{"location":"javascript/js_helper_funcs/#escapelowerstr","title":"escapeLower(str)","text":"<p>Encoding function - this is similar to 'escape', but uses lower case character, i.e. equals (=) sign is '%3d' instead of '%3D'</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to escape <p>Returns:</p> <p>- encoded string</p>"},{"location":"javascript/js_helper_funcs/#escapesiebelstr","title":"escapeSiebel(str)","text":"<p>Encoding function - vairation of escape. Only escape %, :, /, +, =. Space encoded as +. Used by Siebel</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encoded <p>Returns:</p> <p>- encoded string</p>"},{"location":"javascript/js_helper_funcs/#escapev2str","title":"escapeV2(str)","text":"<p>Encoding function - vairation of escape. Also encodes / and ~</p> <p>Parameters:</p> Name Type Description <code>str</code> string string to encoded <p>Returns:</p> <p>- encoded string</p>"},{"location":"javascript/js_helper_funcs/#escapexpathpath","title":"escapeXPath(path)","text":"<p>For XPath - make the given string valid for XPath expressions - escaping quotes if needed</p> <p>Parameters:</p> Name Type Description <code>path</code> string to escape <p>Returns:</p> <p>escaped path</p>"},{"location":"javascript/js_helper_funcs/#escapexmlbrokens","title":"escapeXmlBroken(s)","text":"<p>Encoding function - decodes and escapes XML tags</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to encode <p>Returns:</p> <p>encoded string</p> <p>Example</p> <pre><code>//returns \"%3Csome%40Tag%3E\"\nescapeXmlBroken(\"&amp;lt;some@Tag&amp;gt;\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractallvalues","title":"extractAllValues()","text":"<p>extractAllValues() Returns array of all values matching the prefix/suffix.</p> <p>Example</p> <pre><code>// returns: [\"aaa\", \"bbb\"]\nextractAllValues(\"&lt;td&gt;\",\"&lt;/td&gt;\",\"&lt;tr&gt;&lt;td&gt;aaa&lt;/td&gt;&lt;td&gt;bbb&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractheadervalueprefix-suffix-header_name","title":"extractHeaderValue(prefix, suffix, header_name)","text":"<p>Extract a value from the given HTTP Header name</p> <p>Parameters:</p> Name Type Description <code>prefix</code> string optional, return value after this prefix. Use \"\" to start from beginning <code>suffix</code> string optional, return value before this suffix. Use \"\" to return until the end <code>header_name</code> string name of HTTP header to search <p>Returns:</p> <p>- value of header of null if not found</p>"},{"location":"javascript/js_helper_funcs/#extractjspathexpr-src","title":"extractJSPath(expr, src)","text":"<p>Extract value using JSPath https://www.npmjs.com/package/jspath To test, use http://www.jsonquerytool.com/ with type: JSPath (dfilatov 0.4.0)</p> <p>Parameters:</p> Name Type Description <code>expr</code> string expresion to use <code>src</code> string | JSON string to extract from (needs to be JavaScrint object, or a JSON string that can converted to it) <p>Returns:</p> <p>extracted value or null if not found</p>"},{"location":"javascript/js_helper_funcs/#extractjsonvaluepath-source","title":"extractJsonValue(path, source)","text":"<p>Get value from JSON using a simple path - path.to.item</p> <p>Parameters:</p> Name Type Description <code>path</code> string dot delimited path to item <code>source</code> string String containing JSON string <p>See:</p> <ul> <li>extractJSPath - more full featured expressions</li> </ul> <p>Returns:</p> <p>value at specified path or null of not found</p>"},{"location":"javascript/js_helper_funcs/#extractregexptemplaterestr-srcopt-templateopt","title":"extractRegExpTemplate(reStr, srcopt, templateopt)","text":"<p>Extract based on regular expression, from src, with possible template - number enclosed in $ for capturing group</p> <p>Parameters:</p> Name Type Attributes Default Description <code>reStr</code> string string with RegExp expression <code>src</code> string (optional) document.wlSource source to search at <code>template</code> string (optional) template to use the extracted values with <p>Returns:</p> <p>extracted value, or null if not found</p> <p>Examples</p> <pre><code>//returns:\"54321\"\nextractRegExpTemplate ( \"foo=(.*?)&amp;\", \"foo=54321&amp;\")\n</code></pre> <pre><code>//returns: \"templated-54321-answer\"\nextractRegExpTemplate ( \"foo=(.*?)&amp;\", \"the foo=54321&amp;abcde&amp;zzzz\", \"templated-$1$-answer\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractsiebelarrayvalueidx-prefix-suffix-source-instance","title":"extractSiebelArrayValue(idx, prefix, suffix, source, instance)","text":"<p>Extact a value from Siebel 'star' array, in format `length@value..`</p> <p>Parameters:</p> Name Type Description <code>idx</code> number index of item in array to return. can be negative, so -1 is last one. <code>prefix</code> string prefix to look in source for start of array <code>suffix</code> string suffix to look in source for start of array <code>source</code> string source of data to look for. To get value from HTTP response use document.wlSource <code>instance</code> number occurence of prefix/suffix to find the array in the source <p>Returns:</p> <p>value extracted or null if not found.</p> <p>Example</p> <pre><code>var str = \"`array`10*first_item11*second_item`\";\n//returns \"first_item\"\nextractSiebelArrayValue(0, \"`array`\", \"`\", str, 1)\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractvalueprefix-suffix-str-orderopt-left_offsetopt-right_offsetopt","title":"extractValue(prefix, suffix, str, orderopt, left_offsetopt, right_offsetopt)","text":"<p>Extracts a value from a string having a prefix and a suffix</p> <p>Parameters:</p> Name Type Attributes Description <code>prefix</code> string text before value to extract to find <code>suffix</code> string text after value to extract to find <code>str</code> string string to look for. Mostly this will be document.wlSource to look in previous http response <code>order</code> number (optional) which occurence to return. Default is first (1). Negative value means from end, so -1 is last. <code>left_offset</code> number (optional) number of chars from left to remove from returned value. <code>right_offset</code> number (optional) number of chars from right to remove from returned value. <p>Returns:</p> <p>value extracted, or null is not found</p> <p>Example</p> <pre><code>//return xx\nextractValue(\"a\",\"b\",\"axxb\")\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractvaluebylengthprefix-len-str-order-left_offset-right_offset","title":"extractValueByLength(prefix, len, str, order, left_offset, right_offset)","text":"<p>Extracts a value from a string having a prefix with the specified length.</p> <p>Parameters:</p> Name Type Description <code>prefix</code> string String to search <code>len</code> number length of value to return, after the prefix <code>str</code> string string to search in. Mostly document.wlSource <code>order</code> number How many times to look for prefix <code>left_offset</code> number number of character before/after the left boundry to return (before: negative value) <code>right_offset</code> number number of character before/after the rigth boundry to return (before: negative value) <p>Returns:</p> <p>extract value or null if not found</p> <p>Examples</p> <pre><code>//return \"4321\"\nextractValueByLength(\"abc$\", 4, \"xxabc$4321xxx\")\n</code></pre> <pre><code>//return  \"$4444$\"\nextractValueByLength(\"abc$\", 4, \"xxabc$4321abc$4444$xxx\", 2, -1, 1)\n</code></pre>"},{"location":"javascript/js_helper_funcs/#extractcookieregex-regex-returncookiename","title":"extractCookieRegex (regex, returnCookieName)","text":"<p>Extract value based on cookie name regular expression</p> <p>Parameters:</p> Name Type Description <code>regex</code> string Regular expresion. For example \"myCookie.*\" <code>returnCookieName</code> boolean optional, when false (default) return the value of the cookie. When set to true, return the cookie name <p>Returns:</p> <p>Value (or name) of searched cookie.</p>"},{"location":"javascript/js_helper_funcs/#extractxpathexpr-source","title":"extractXPath(expr, source)","text":"<p>Extract from XML using XPath expression</p> <p>Parameters:</p> Name Type Description <code>expr</code> string XPath expresion. For example \"/bookstore/book[1]/title\" <code>source</code> string XML string to search for <p>Returns:</p> <p>extracted value or null is not found</p>"},{"location":"javascript/js_helper_funcs/#extractxmlvaluetagname-index-source","title":"extractXmlValue(tagName, index, source)","text":"<p>Extract tag value from XML string</p> <p>Parameters:</p> Name Type Description <code>tagName</code> string tag to search <code>index</code> number which occurence to return <code>source</code> string XML string <p>Returns:</p> <p>tag value</p>"},{"location":"javascript/js_helper_funcs/#failmessage","title":"fail(message)","text":"<p>JUnit style fail - throw error</p> <p>Parameters:</p> Name Type Description <code>message</code> * to throw"},{"location":"javascript/js_helper_funcs/#getcorrelationvaluevarname-func-object","title":"getCorrelationValue(varName, func) \u2192 {object}","text":"<p>Get value previously extracted</p> <p>Parameters:</p> Name Type Description <code>varName</code> string variable name to extract <code>func</code> function conversion/encoding function if needed <p>Returns:</p> <p>stored correlation value</p> <p>Type</p> <p>object</p>"},{"location":"javascript/js_helper_funcs/#getmdcnameopt","title":"getMDC(nameopt)","text":"<p>Return value in MDC (Mapped Diagnostic Context)</p> <p>Parameters:</p> Name Type Attributes Description <code>name</code> string (optional) item to return, if omiited all values are returned <p>See:</p> <ul> <li>putMDC</li> </ul> <p>Returns:</p> <p>value or all values</p>"},{"location":"javascript/js_helper_funcs/#pollcorrelationvaluevarname-func-timeout-object","title":"pollCorrelationValue(varName, func, timeout) \u2192 {object}","text":"<p>Get value previously extracted, wait for it if it does not exist. Useful in async situations.</p> <p>Parameters:</p> Name Type Description <code>varName</code> string variable name to extract <code>func</code> function conversion/encoding function if needed <code>timeout</code> number number of milliseconds to wait before timing out. Default to 30 seconds. <p>Returns:</p> <p>value expected, or null if it did not exist</p> <p>Type</p> <p>object</p>"},{"location":"javascript/js_helper_funcs/#printmdc","title":"printMDC()","text":"<p>Print (InfoMessage) content of MDC (Mapped Diagnostic Context)</p> <p>See:</p> <ul> <li>putMDC</li> </ul>"},{"location":"javascript/js_helper_funcs/#putmdcname-value","title":"putMDC(name, value)","text":"<p>Sets given name=value in MDC (Mapped Diagnostic Context). Contents of MDC will be displayed if error happens in the script. Useful to debug issues</p> <p>Parameters:</p> Name Type Description <code>name</code> string name of parameter <code>value</code> string value to set <p>Example</p> <pre><code>//will log the user name in case of error\nputMDC(\"username\", users_username.getValue() );\n</code></pre>"},{"location":"javascript/js_helper_funcs/#removemdcname","title":"removeMDC(name)","text":"<p>Remove items from MDC (Mapped Diagnostic Context)</p> <p>Parameters:</p> Name Type Description <code>name</code> string <p>See:</p> <ul> <li>putMDC</li> </ul>"},{"location":"javascript/js_helper_funcs/#setcorrelationvaluevarname-extractedvalue-originalvalueopt-errorfuncopt","title":"setCorrelationValue(varName, extractedValue, originalValueopt, errorFuncopt)","text":"<p>Store extracted correlation value for future use. Validate it against the recorded value. Use getCorrelationValue() to retrieve the value.</p> <p>Parameters:</p> Name Type Attributes Description <code>varName</code> string name of correlation value to set <code>extractedValue</code> string the value to store <code>originalValue</code> string (optional) original (recorded) value to compare (only first 200 chars are compared) <code>errorFunc</code> string | number (optional) function used to log not found errors. Default is WarningMessage. Can be degined globally using 'correlationErrorFunc'. If given value is a number constant, for example 'WLMinorError' then it also triggers Full Error Details to be logged <p>See:</p> <ul> <li>getCorrelationValue</li> </ul>"},{"location":"javascript/js_helper_funcs/#setcorrelationvaluesilent","title":"setCorrelationValueSilent()","text":"<p>Like setCorrelationValue() but does not show a WarningMessage() when not extracted.</p>"},{"location":"javascript/js_helper_funcs/#unescapeunixs","title":"unescapeUnix(s)","text":"<p>Decoding function - reverse of escape + convert end-of-line from unix to dos format</p> <p>Parameters:</p> Name Type Description <code>s</code> string string to unescape <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#unescapexmlbrokenstr","title":"unescapeXMLbroken(str)","text":"<p>Decoding function - reverse of escapeXmlBroken</p> <p>Parameters:</p> Name Type Description <code>str</code> string encoded string to decode <p>Returns:</p> <p>- decoded string</p>"},{"location":"javascript/js_helper_funcs/#uuidv4-string","title":"uuidv4() \u2192 {string}","text":"<p>Generate v4 UUID Universally unique identifier</p> <p>Returns:</p> <p>Generated ID</p> <p>Type</p> <p>string</p>"},{"location":"javascript/js_helper_funcs/#instrument-handlers","title":"Instrument Handlers","text":"<p>Handlers are custom functions that can be set to be called before or after certain commands.</p> <p>A handler has an \"ID\", which is a string name to indentify it, and a function to be called. This can be an annonymous function (see examples).</p>"},{"location":"javascript/js_helper_funcs/#method-handlers","title":"Method handlers","text":""},{"location":"javascript/js_helper_funcs/#addbeforerequesthandlerid-func","title":"addBeforeRequestHandler(id, func)","text":"<p>Handler function is called before each HTTP Request. Original arguments are given as array. Can be used to add commands before the request. </p> <p>Example</p> <pre><code>addBeforeRequestHandler(\n    \"info-before\", \n    function(args) { \n            InfoMessage(\"about to make request to \" + args[0]); \n            wlHttp.SaveSource=true;\n        } \n    );\n\n//will print \"about to make request to http://something.com\"\nwlHttp.Get(\"http://something.com\");\n</code></pre> <p>The handler function can return a boolean value to skip the default behavior. Default is <code>false</code> (don't skip), but returning <code>true</code> will cause skipping the command. For example:</p> <pre><code>Example:\naddBeforeRequestHandler(\"skip_bad\", function(args) { \n var url = args[0];\n if (url.indexOf(\"bad\")&gt;=0) {\n    InfoMessage(\"skip request to \" + url); \n    return true; //cause the default behavior to be skipped, i.e. don't perform the Get()\n } else {\n    InfoMessage(\"making request to \" + url); \n }\n});\nwlHttp.Get(\"http://www.good.com\") //do it\nwlHttp.Get(\"http://bad_one.com\") //skip it\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addafterrequesthandlerid-func","title":"addAfterRequestHandler(id, func)","text":"<p>Handler function is called after each HTTP Request. Original arguments are given as array. Can be used to check information after the request</p> <p>Example</p> <pre><code>addAfterRequestHandler(\n    \"after-request-check\", \n    function(args) { \n            InfoMessage(\"check request to \" + args[0]); \n            if (document.wlSource.indexOf(\"ERROR\")&gt;=0) {\n                WarningMessage(\"Request had ERROR\");\n            }\n        } \n    );\nwlHttp.SaveSource=true;\nwlHttp.Post(\"http://something.com\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addonscriptaborthandlerid-func","title":"addOnScriptAbortHandler(id, func)","text":"<p>Handler function is called whenver a virtual client is terminated.</p> <p>Example</p> <pre><code>addOnScriptAbortHandler(\n    \"after-request-check\", \n    function(args) { \n            InfoMessage(\"client is stopping\"); \n        } \n    );\n\nErrorMessage(\"stop client\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addbeforebegintransactionhandlerid-func","title":"addBeforeBeginTransactionHandler(id, func)","text":"<p>Handler function is called before each BeginTransaction(), function given original arguments.</p> <p>Example</p> <pre><code>addBeforeBeginTransactionHandler(\n    \"before-trx\", \n    function(trx) { \n            InfoMessage(\"wait outside transaction \" + trx); \n            Sleep(5000)\n        } \n    );\n\nBeginTransaction(\"Transaction1\");\nInfoMessage(\"Inside Transaction1\");\nEndTransaction(\"Transaction1\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addafterbegintransactionhandlerid-func","title":"addAfterBeginTransactionHandler(id, func)","text":"<p>Handler function is called after each BeginTransaction(), function given original arguments.</p> <p>Example</p> <pre><code>addAfterBeginTransactionHandler(\n    \"before-trx\", \n    function(trx) { \n            InfoMessage(\"wait inside transaction \" + trx); \n            Sleep(5000)\n        } \n    );\n\nBeginTransaction(\"Transaction1\");\nInfoMessage(\"Inside Transaction1\");\nEndTransaction(\"Transaction1\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addbeforeendtransactionhandlerid-func","title":"addBeforeEndTransactionHandler(id, func)","text":"<p>Handler function is called before each EndTransaction(), function given original arguments.</p> <p>Example</p> <pre><code>addBeforeEndTransactionHandler(\n    \"before-trx-end\", \n    function(trx) { \n            InfoMessage(\"make extra request inside transaction \" + trx); \n            wlHttp.Get(\"http://some-extra-request\");\n        } \n    );\n\nBeginTransaction(\"Transaction1\");\nInfoMessage(\"Inside Transaction1\");\nEndTransaction(\"Transaction1\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#addafterendtransactionhandlerid-func","title":"addAfterEndTransactionHandler(id, func)","text":"<p>Handler function is called after each EndTransaction(), function given original arguments.</p> <p>Example</p> <pre><code>addAfterEndTransactionHandler(\n    \"before-trx-end\", \n    function(trx) { \n            InfoMessage(\"make extra request outside transaction \" + trx); \n            wlHttp.Get(\"http://some-extra-request\");\n        } \n    );\n\nBeginTransaction(\"Transaction1\");\nInfoMessage(\"Inside Transaction1\");\nEndTransaction(\"Transaction1\");\n</code></pre>"},{"location":"javascript/js_helper_funcs/#dynamicreplacefieldfieldname-valuegenerator","title":"dynamicReplaceField(fieldName, valueGenerator)","text":"<p>Dynamically replace a field name in a wlHttp object, if it exists, in all subsequent calls.</p> <p>The value can be one of the following types:</p> <ul> <li>Literal value - that value will be used instead of current field value. </li> <li>Function value - if the given value is a function, that function will be called each time and the returned value used</li> <li>Parameter - if the given value is a name of a parameter created in Parameterization Manager, the paramter new value will be used (by calling getValue() for it)</li> </ul> <p>Example</p> <pre><code>function InitClient()\n{\n  numberParam = WLNumberParam(\"numberParam\",1, 10000, 1, WLParamRandom,WLParamLocal,WLParamUpdateRound,WLParamCycle);\n}\nfunction generateTimestamp() {\n  return new Date().getTime();\n}\n\n//replace the 'user_name' field with the literal string \"James\"\ndynamicReplaceField(\"user_name\", \"James\");\n//replace the 'user_id' field with the value given by parameter 'numberParam'\ndynamicReplaceField(\"user_id\", numberParam);\n//replace the 'timestamp' field with the value returned by calling generateTimestamp() \ndynamicReplaceField(\"timestamp\", generateTimestamp);\n\n//values sent in this request will change based on the string, pamater and function above:\nwlHttp.FormData[\"user_name\"] = \"John\"\nwlHttp.FormData[\"user_id\"] = \"98889\"\nwlHttp.FormData[\"timestamp\"] = \"178820233222\"\nwlHttp.Get(\"https://www.httpbin.org/get\")\n</code></pre>"},{"location":"javascript/using_javascript_ref/","title":"Using the WebLOAD JavaScript Reference","text":"<p>The WebLOAD JavaScript programming tools provide a powerful means of adding sophisticated, complex tailoring to recorded scripts. WebLOAD supports literally hundreds of functions, objects, properties, and methods, to provide optimal programming power for your test session script.</p> <p>To simplify access to the WebLOAD JavaScript toolset, this section organizes the functions and objects into major categories, providing you with information to help you locate a specific tool or capability.</p> <p>Note: These categories do not constitute an exhaustive list of all WebLOAD JavaScript objects, properties, methods, and functions. This is simply a list of the major categories, to help you quickly identify the most commonly used items.</p> <p>The WebLOAD JavaScript toolset includes many additional elements. For a complete, alphabetical reference list of all toolset components, see WebLOAD Actions, Objects, and Functions .</p> <p>The WebLOAD JavaScript toolset can be organized into the following categories:</p> <ul> <li>Collections\u2014Meta-objects that serve as arrays or sets of individual objects. </li> <li>File Management\u2014Functions used to manage access to a script\u2019s external files. </li> <li>Identification Components\u2014Functions and variables used to identify specific elements or points of time during a test session, for clarity in understanding session results and output reports. </li> <li>Message Functions\u2014Functions used to display messages in the WebLOAD Console Log Window. </li> <li> <p>Objects\u2014A brief introduction to the WebLOAD JavaScript object set. </p> </li> <li> <p>SSL Cipher Command Suite\u2014A set of functions and properties that implement full SSL/TLS 1.0 protocol support. </p> </li> <li> <p>Timing Functions\u2014Functions used to time or synchronize any operation or group of user activities in a script. </p> </li> <li> <p>Transaction Verification Components\u2014Components used to create customized transaction verification functions. </p> </li> <li> <p>Parameterization\u2014A brief introduction explanation and reference to all parameterization objects and functions. </p> </li> <li> <p>Internet Protocol Support\u2014Objects that implement full support of the complete range of Internet protocols. </p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#http-components","title":"HTTP Components","text":"<p>Properties and Methods of Objects</p> <ul> <li> <p>wlGlobals (see wlGlobals (object) )</p> </li> <li> <p>wlHttp (see wlHttp (object) )</p> </li> <li> <p>wlLocals (see wlLocals (object) )</p> </li> </ul> <p>Description</p> <p>The wlGlobals, wlLocals, and wlHttp objects share a set of components that manage user HTTP activities. This section lists these browser properties and methods. Some of the components are common to all three objects. Some of the properties or methods are used by only one object, and are marked so in the tables.</p> <p>Note: The values assigned in a <code>wlHttp</code> object override any global defaults assigned in <code>wlGlobals</code> or local defaults in <code>wlLocals</code>. WebLOAD uses the <code>wlGlobals</code> or <code>wlLocals</code> defaults only if you do not assign values to the corresponding properties in the <code>wlHttp</code> object.</p> <p>Syntax</p> <p><code>NewValue* = wlGlobals.BrowserMethod()</code> </p> <p><code>wlGlobals.BrowserProperty = PropertyValue</code></p> <p>Example</p> <p>Each individual property and method includes examples of the syntax for that property.</p> <p>Methods</p> <ul> <li> <p>ClearDNSCache() (see ClearDNSCache() (method) )</p> </li> <li> <p>ClearSSLCache() (see ClearSSLCache() (method) )</p> </li> </ul> <p>The following methods are for wlHttp objects only:</p> <ul> <li> <p>CloseConnection() (see CloseConnection() (method) )</p> </li> <li> <p>Get() (see Get() (transaction method) )</p> </li> <li> <p>Post() (see Post() (method) )</p> </li> <li> <p>Head() (see Head() (method) )</p> </li> </ul> <p>Data Methods</p> <ul> <li> <p>wlClear() (see wlClear() (method) )</p> </li> <li> <p>wlGet() (see wlGet() (method) )</p> </li> <li> <p>wlSet() (see wlSet() (method) )</p> </li> </ul> <p> </p> <p>Properties</p> <p>The following properties are for wlHttp objects only</p> <p>Data Properties</p> <ul> <li> <p>Data (see Data (property) )</p> </li> <li> <p>DataFile (see DataFile (property) )</p> </li> <li> <p>Erase (see Erase (property) )</p> </li> <li> <p>FileName (see FileName (property) )</p> </li> <li> <p>FormData (see FormData (property) )</p> </li> <li> <p>Header (see Header (property) )</p> </li> <li> <p>DataCollection.type (see type (property) )</p> </li> <li> <p>DataCollection.value (see value (property) )</p> </li> </ul> <p>The following properties are used by wlHttp, wlLocals, and wlGlobals objects unless otherwise noted.</p> <p>Configuration Properties</p> <ul> <li> <p>ConnectionSpeed (see ConnectionSpeed (property) ) (wlGlobals only)</p> </li> <li> <p>DisableSleep (see DisableSleep (property) )</p> </li> <li> <p>DNSUseCache (see DNSUseCache (property) )</p> </li> <li> <p>KeepAlive (see KeepAlive (property) )</p> </li> <li> <p>LoadGeneratorThreads (see LoadGeneratorThreads (property) )</p> </li> <li> <p>MultiIPSupport see MultiIPSupport (property) </p> </li> <li> <p>NTUserName, NTPassWord (see NTUserName, NTPassWord (properties) )</p> </li> <li> <p>Outfile (see Outfile (property) )</p> </li> <li> <p>PassWord (see PassWord (property) )</p> </li> <li> <p>ProbingClientThreads (see ProbingClientThreads (property) )</p> </li> <li> <p>Proxy, ProxyUserName, ProxyPassWord (see Proxy, ProxyUserName, ProxyPassWord (properties) </p> </li> <li> <p>RedirectionLimit (see RedirectionLimit (property) )</p> </li> <li> <p>SaveSource (see SaveSource (property) )</p> </li> <li> <p>SaveTransaction (see SaveTransaction (property) ) (wlGlobals only)</p> </li> <li> <p>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</p> </li> <li> <p>SSLCryptoStrength (see SSLCryptoStrength (property) )) (wlGlobals</p> </li> <li> <p>only)</p> </li> <li> <p>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</p> </li> <li> <p>SSLUseCache (see SSLUseCache (property) )</p> </li> <li> <p>SSLVersion (see SSLVersion (property) )</p> </li> <li> <p>type (see type (property) )</p> </li> <li> <p>Url (see Url (property) )</p> </li> <li> <p>UserAgent (see UserAgent (property) )</p> </li> <li> <p>UserName (see UserName (property) ))</p> </li> <li> <p>UsingTimer (see UsingTimer (property) )</p> </li> <li> <p>Version (see Version (property) )</p> </li> <li> <p>wlTarget (see wlTarget (property) )</p> </li> </ul> <p>See also</p> <ul> <li> <p>wlGlobals (see wlGlobals (object) )</p> </li> <li> <p>wlHttp (see wlHttp (object) )</p> </li> <li> <p>wlLocals (see wlLocals (object) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#collections","title":"Collections","text":"<p>Description</p> <p>Collections are arrays or sets of individual objects. For example, the elements collection refers to a collection of individual element objects.</p> <p>Access individual members of a collection either through an index number or directly through the member\u2019s name or ID. The following three syntax choices are equivalent:</p> <ul> <li><code>Collection[index#]</code></li> <li><code>Collection[\u201cID\u201d]</code></li> <li><code>Collection.ID</code></li> </ul> <p>Test session scripts work with all browser DOM collections and objects. The recommended way to access these objects is through the classic browser <code>document</code> object, via the relevant collection. For example, access a table through:</p> <ul> <li><code>document.links[0]</code></li> </ul> <p>Properties</p> <p>Each collection of objects includes the single property length, which contains the size of the collection, that is, the number of objects included in this collection. You may also use the index value to access individual objects from within a collection.</p> <p>For example, to find out how many <code>images</code> objects are contained within the <code>images</code> collection of a document, check the value of:</p> <p><code>document.images.length</code></p> <p>In this Guide, the description of each individual object includes information on the collection, if any, to which that object belongs.</p>"},{"location":"javascript/using_javascript_ref/#file-management-functions","title":"File Management Functions","text":"<p>Description</p> <p>These functions manage access to a script\u2019s function and input files, including opening and closing files, copying files, specifying include files, and reading lines from ASCII input files.</p> <p>Note: Input file management is also provided by wlInputFile (see wlInputFile (object) ). Output file management is also provided by wlOutputFile (see wlOutputFile (object) ).</p> <p>See also</p> <ul> <li> <p>Close() (see Close() (function) )</p> </li> <li> <p>CopyFile() (see CopyFile() (function) )</p> </li> <li> <p>Delete() (see Delete() (cookie method) )</p> </li> <li> <p>GetLine() (wlOutputFile) (see GetLine() (function) )</p> </li> <li> <p>GetLine() (wlInputFile) (see GetLine() (method) )</p> </li> <li> <p>IncludeFile() (see IncludeFile() (function) )</p> </li> <li> <p>Open() (wlOutputFile) (see Open() (function) )</p> </li> <li> <p>Open() (wlInputFile) (see Open() (method) )</p> </li> <li> <p>Reset() (see Reset() (method) )</p> </li> <li> <p>Using the IntelliSense JavaScript Editor </p> </li> <li> <p>wlOutputFile() (see wlOutputFile (object) )</p> </li> <li> <p>wlInputFile() (see wlInputFile (object) ))</p> </li> <li> <p>Write() (see Write() (method) )</p> </li> <li> <p>Writeln() (see Writeln() (method) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#identification-variables-and-functions","title":"Identification Variables and Functions","text":"<p>Description</p> <p>For performance statistics to be meaningful, testers must be able to identify the exact point being measured. WebLOAD therefore provides the following identification variables and functions:</p> <ul> <li> <p>Two variables, ClientNum (see ClientNum (property) ) and RoundNum, (see RoundNum (variable) ) identify the client and round number of the current script instance.</p> </li> <li> <p>The GeneratorName() (see GeneratorName() (function) ) function identifies the current Load Generator.</p> </li> <li> <p>The GetOperatingSystem() (see GetOperatingSystem() (function) ) function identifies the operating system of the current Load Generator.</p> </li> <li> <p>The VCUniqueID() (see VCUniqueID() (function) ) function identifies the current Virtual Client instance.</p> </li> </ul> <p>Example</p> <p>The following example illustrates common use of these variables and functions. Use these variables and function to support the WebLOAD measurement features and obtain meaningful performance statistics.</p> <p>Suppose your script submits data to a server on an HTML form. You want to label one of the form fields so you can tell which WebLOAD client submitted the data, and in which round of the main script.</p> <p>You can do this using a combination of the<code>ClientNum</code> and <code>RoundNum</code> variables. Together, these variables uniquely identify the WebLOAD client and round. For example, you can submit a string such as the following in a form field:</p> <p><code>\u201cC\u201d + ClientNum.toString() + \u201cR\u201d + RoundNum.toString()</code></p> <p>GUI mode</p> <p>WebLOAD recommends accessing these identification variables and functions through the WebLOAD Recorder. All the variables that appear in this list are available for use at all times in a script file. In the WebLOAD Recorder main window, click Variable Windows in the Debug tab of the ribbon.</p> <p>For example, it is convenient to add `ClientNum to a Message Node to clarify which client sent the messages that appear in the WebLOAD Console Log window.</p> <p>See also</p> <ul> <li> <p>ClientNum (see ClientNum (property) )</p> </li> <li> <p>GeneratorName() (see GeneratorName() (function) )</p> </li> <li> <p>GetOperatingSystem() (see GetOperatingSystem() (function) )</p> </li> <li> <p>RoundNum (see RoundNum (variable) )</p> </li> <li> <p>VCUniqueID() (see VCUniqueID() (function) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#message-functions","title":"Message Functions","text":"<p>Description</p> <p>These functions display messages in the Log Window of WebLOAD Recorder or Console. Some of the functions raise errors and interrupt test session execution. For information on using the Log Window and on message types, see the WebLOAD Console User\u2019s Guide.</p> <p>Example</p> <p>In the following example, the script attempts to download an HTML page. If it fails on the first try, it pauses for 3 minutes and tries again. If it fails on the second try, it aborts the current round.</p> <pre><code>function InitClient() {\n    wlLocals.Url = \u201chttp://www.ABCDEF.com/index.html\"\n}\n//First try \nwlHttp.Get()\nif (document.wlStatusNumber != 200) { \n    InfoMessage(\u201cThread \u201c + ClientNum.toString() +\n    \" pausing for 3 min\") \n    Sleep(180000)\n  //Second try\n    wlHttp.Get()\n    if (document.wlStatusNumber != 200) { \n      ErrorMessage(\u201cAborting round \u201c + RoundNum.toString() + \u201c \n      of thread \u201c + ClientNum.toString())\n    }   // End of second try\n}\n</code></pre> <p>GUI mode</p> <p>Note: Message functions are usually accessed and inserted into script files directly through the WebLOAD Recorder. Message function commands can be added to the script in Visual Editing mode using the Toolbox message item and the Insert menu command. The JavaScript code line that corresponds to this message function appears in the JavaScript View pane.         Message function command lines may also be added directly to the code in a JavaScript Object within a script through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .         Messages can also be added to the script using the Toolbox Message icon . Drag the Message icon to the Script Tree. The Message dialog box appears. Type or select the information to appear in the message. Use double quotes to include a string value, or click  to select a variable. Select the severity of the message from the Message Severity drop-down list.</p> <p>See also</p> <ul> <li>Error Management in the WebLOAD Scripting Guide</li> <li> <p>ErrorMessage() (see ErrorMessage() (function) )</p> </li> <li> <p>GetMessage() (see GetMessage() (method) )</p> </li> <li> <p>GetSeverity() (see GetSeverity() (method) )</p> </li> <li> <p>InfoMessage() (see InfoMessage() (function) )</p> </li> <li> <p>Message Functions </p> </li> <li> <p>ReportLog() (see ReportLog() (method) )</p> </li> <li> <p>SevereErrorMessage() (see SevereErrorMessage() (function) )</p> </li> <li> <p>Using the IntelliSense JavaScript Editor </p> </li> <li> <p>WarningMessage() (see WarningMessage() (function) )</p> </li> <li> <p>wlException (see wlException (object) )</p> </li> <li> <p>wlException() (see wlException() (constructor) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#objects","title":"Objects","text":"<p>Description</p> <p>WebLOAD scripts Work with an Extended Version of the Standard DOM presents an overview of the Document Object Model (DOM), describing some of the basic objects used by standard Web browsers when working with HTML Web pages. The classic browser DOM includes a wide range of objects, properties, and methods for maximum utility and versatility. For more information about the standard DOM structure and components, go to the following websites:</p> <ul> <li> <p>http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/introduction.html</p> </li> <li> <p>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dom/domoverview.asp</p> </li> <li> <p>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/refere nce/dhtmlrefs.asp</p> </li> </ul> <p>Since WebLOAD emulates the HTTP activities included in a test session, WebLOAD supports the standard DOM object set that implements those activities. Only the DOM objects, properties, and methods of special interest to WebLOAD programmers working with test session scripts are listed here. This guide also includes reference material for the objects, properties, and methods that were added by WebLOAD as extensions to the basic DOM, to implement specific test session features.</p> <p>Website testing usually means testing how typical user activities are handled by the application being tested. Are the user actions managed quickly, correctly and appropriately? Is the application responsive to the user\u2019s requests? Will the typical user be happy working with this application? When verifying that an application handles user activities correctly, WebLOAD usually focuses on the user activities, recording user actions through WebLOAD Recorder when initially creating scripts and recreating those actions during subsequent test sessions. The focus on user activities represents a high-level, conceptual approach to test session design.</p> <p>Sometimes a tester may prefer to use a low-level, \u201cnuts-and-bolts\u201d approach that focuses on specific internal implementation commands, such as HTTP transactions. The WebLOAD DOM extension set includes objects, methods, properties, and functions that support this approach. Items in the WebLOAD JavaScript Reference Guide that are relevant to the HTTP Transaction Mode are noted as such in the entry.</p>"},{"location":"javascript/using_javascript_ref/#ssl-cipher-command-suite","title":"SSL Cipher Command Suite","text":"<p>Description</p> <p>WebLOAD provides full SSL/TLS 1.0/TLS 1.2 protocol support through a set of SSL properties for the wlGlobals object combined with a set of functions called the Cipher Command Suite. These SSL functions allow you to identify, enable, and disable selected SSL protocols or security levels. For a complete list of the supported SSL protocols, see SSL Ciphers \u2013 Complete List </p> <p>Functions</p> <p>The Cipher Command Suite includes the following functions:</p> <ul> <li> <p>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</p> </li> <li> <p>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</p> </li> <li> <p>SSLDisableCipherName() (see SSLDisableCipherName() (function) )</p> </li> <li> <p>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</p> </li> <li> <p>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</p> </li> <li> <p>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</p> </li> <li> <p>SSLGetCipherID() (see SSLGetCipherID() (function) )</p> </li> <li> <p>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) )</p> </li> <li> <p>SSLGetCipherName() (see SSLGetCipherName() (function) )</p> </li> <li> <p>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</p> </li> <li> <p>SSLEnableStrength() (see SSLEnableStrength() (function) )</p> </li> </ul> <p>Comment</p> <p>Use the Cipher Command Suite to check or verify SSL configuration information at any point in your script. However, any changes to a script\u2019s SSL property configuration, whether through the <code>wlGlobals</code> properties or the Cipher Command Suite functions, must be made in the script\u2019s initialization functions. Configuration changes made in the <code>InitAgenda()</code> function will affect all client threads spawned during that script\u2019s test session. Configuration changes made in the <code>InitClient()</code> function will affect only individual clients. Do not make changes to the SSL property configuration using <code>wlHttp</code> or <code>wlLocals</code> properties or in a script\u2019s main body. The results will be undefined for all subsequent transactions.</p> <p>See also</p> <ul> <li>HTTP Components </li> <li> <p>SSLBitLimit (see SSLBitLimit (property) ) (wlGlobals only)</p> </li> <li> <p>SSLCipherSuiteCommand() (see SSLCipherSuiteCommand() (function) )</p> </li> <li> <p>SSLClientCertificateFile, SSLClientCertificatePassword (see SSLClientCertificateFile, SSLClientCertificatePassword (properties) )</p> </li> <li> <p>SSLCryptoStrength (see SSLCryptoStrength (property) ) (wlGlobals only)</p> </li> <li> <p>SSLDisableCipherID() (see SSLDisableCipherID() (function) )</p> </li> <li> <p>SSLDisableCipherName() (see SSLDisableCipherName() (function) </p> </li> <li> <p>SSLEnableCipherID() (see SSLEnableCipherID() (function) )</p> </li> <li> <p>SSLEnableCipherName() (see SSLEnableCipherName() (function) )</p> </li> <li> <p>SSLGetCipherCount() (see SSLGetCipherCount() (function) )</p> </li> <li> <p>SSLGetCipherID() (see SSLGetCipherID() (function) )</p> </li> <li> <p>SSLGetCipherInfo() (see SSLGetCipherInfo() (function) )</p> </li> <li> <p>SSLGetCipherName() (see SSLGetCipherName() (function) )</p> </li> <li> <p>SSLGetCipherStrength() (see SSLGetCipherStrength() (function) )</p> </li> <li> <p>SSLUseCache (see SSLUseCache (property) )</p> </li> <li> <p>SSLEnableStrength() (see SSLEnableStrength() (function) )</p> </li> <li> <p>SSLVersion (see SSLVersion (property) )</p> </li> <li> <p>wlGlobals (see wlGlobals (object) )</p> </li> <li> <p>wlHttp (see wlHttp (object) )</p> </li> <li> <p>wlLocals (see wlLocals (object) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#timing-functions","title":"Timing Functions","text":"<p>Description</p> <p>The timer functions let you time or synchronize any operation or group of user activities in a script, such as a navigation or mouse click, and send the time statistics to the WebLOAD Console.</p> <p>Example</p> <p>The following script connects to the home Web page of company. On every fifth round, the script also connects to a second Web page. The script uses different timers to measure the time for each connection.</p> <p>Note: This script fragment contains a main script only.</p> <p>WebLOAD reports three time statistics:</p> <ul> <li> <p>The round time, which includes both connections.</p> </li> <li> <p><code>Page 1 Time</code>, reported in every round for the first connection only.</p> </li> <li> <p><code>Page 2 Time</code>, reported in every fifth round for the second connection only.</p> </li> </ul> <pre><code>SetTimer(\u201cPage 1 Time\u201d) \nwlHttp.Get(\"http://www.ABCDEF.com\")\nSendTimer(\u201cPage 1 Time\u201d)\nif (RoundNum%5 == 0) { \n   SetTimer(\u201cPage 2 Time\u201d)\n   wlHttp.Get(\"http://www.ABCDEF.com/product_info.html\")\n   SendTimer(\u201cPage 2 Time\u201d)\n}\n</code></pre> <p>Functions</p> <p>The set of timer functions includes the following:</p> <ul> <li> <p>SendCounter() (see SendCounter() (function) ))</p> </li> <li> <p>SendMeasurement() (see SendMeasurement() (function) )</p> </li> <li> <p>SendTimer() (see SendTimer() (function) )</p> </li> <li> <p>SetTimer() (see SetTimer() (function) )</p> </li> <li> <p>Sleep() (see Sleep() (function) )</p> </li> <li> <p>SynchronizationPoint() (see SynchronizationPoint() (function) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#parameterization","title":"Parameterization","text":"<p>Parameterization enables you to edit a script containing static values and transform it into a script that will run multiple variations of the static values.</p> <p>When recording a script, WebLOAD captures the data that is being sent, including login details, user selections, and entered text. When running the script under load, simulating many users, it is desirable to use variations in the data, so as to simulate the application more realistically. To do so, you can replace the static values with parameters.</p> <p>Parameter values can come from a file, or be automatically generated numbers, strings and dates. Using parameterization enables you to specify how the script should select values from the data file. For example:</p> <ul> <li> <p>Order considerations \u2013 Whether to randomly select values from the data file, or use them in the order they appear.</p> </li> <li> <p>Uniqueness considerations \u2013 Whether the same value can be used at the same time by different virtual clients.</p> </li> </ul> <p>You can also specify the update policy, which defines when a new value will be read or calculated. For example, whether to update the value on each round, or once at the beginning of the test.</p> <p>In addition to defining a data file, you can also use parameterization to define a random number format, date/time format, and string format. These can also be used to replace static values. For example, if the online shop delivers books between 1-14 days from the date of purchase, you can define a random number format of 1-14 and replace the static desired delivery period value with a call to the random number format.</p> <p>Functions</p> <p>The set of parameterization functions includes the following:</p> <ul> <li> <p>wlTimeParam() (see wlTimeParam() (parameterization) )</p> </li> <li> <p>wlDataFileParam() (see wlDataFileParam() (parameterization) )</p> </li> <li> <p>wlNumberParam() (see wlNumberParam() (parameterization) )</p> </li> <li> <p>wlStringParam() (see wlStringParam() (parameterization) )</p> </li> </ul>"},{"location":"javascript/using_javascript_ref/#transaction-verification-components","title":"Transaction Verification Components","text":"<p>Description</p> <p>Customized transaction verification functions are created out of the following components:</p> <ul> <li> <p>BeginTransaction() (see BeginTransaction() (function) </p> </li> <li> <p>CreateDOM() (see CreateDOM() (function) )</p> </li> <li> <p>CreateTable() (see CreateTable() (function) )</p> </li> <li> <p>EndTransaction() (see EndTransaction() (function) )</p> </li> <li> <p>ReportEvent() (see ReportEvent() (function) )</p> </li> <li> <p>SetFailureReason() (see SetFailureReason() (function) )</p> </li> <li> <p>VerificationFunction() (user-defined) (see VerificationFunction() (user-defined)(function) )</p> </li> </ul> <p>See also</p> <ul> <li> <p>TimeoutSeverity (see TimeoutSeverity (property) )</p> </li> <li> <p>TransactionTime (see TransactionTime (property) )</p> </li> </ul>"},{"location":"javascript/websocket_object/","title":"WebSocket Object","text":"<p>WebLOAD supports WebSocket, a protocol that provides full-duplex communication channels over a single TCP connection. Unlike HTTP which is a request-response protocol, WebSocket creates connections for sending or receiving messages that are not dependent on one another. In this way, WebSocket provides full-duplex communication. WebSocket also enables streams of messages on top of TCP.</p> <p>WebLOAD\u2019s WebSocket object enables creating and managing a WebSocket connection to a server, as well as sending and receiving data on the connection. Note that you can create multiple WebSocket objects.</p>"},{"location":"javascript/websocket_object/#websocket-sample-code-using-messages-handler","title":"WebSocket Sample Code using messages handler","text":"<p>With message handler, you write a function that handles that message as they are received, in the onmessage() function.</p> <p>This mode is useful in general purpose WebSocket, where it is not know when and what messages are expected to be received.</p> <pre><code>// Create a WebSocket object\nws1 = new WebSocket( \"ws://echo.websocket.org\" );\n\n// Define an event handler, to handle events (incoming messages) when they occur\nws1.onmessage = function(evt) {\n  // Display in the Log the text that was sent in the message body \n  DebugMessage(\"Server said:\" + evt.getData());\n}\n\n// Create a websocket connection \nws1.connect();\n\n//Note that events are handled while in Sleep \nSleep(1000);\n\n// Send a message with the text \u201chi\u201d\nws1.send(\"hi\");\n\nSleep(1000);\n\n// Close the websocket connection \nws1.close();\n\nSleep(1000);\n</code></pre>"},{"location":"javascript/websocket_object/#websocket-stored-messages-sample-code","title":"WebSocket Stored Messages Sample Code","text":"<p>Stored messages mode is a mode that allows handling messages closer to where they are actually needed.</p> <p>This mode is useful when the protocol behaeves in some expected way, for example, after sending a \"connect\" message it will repond with a \"connected\" reply you can expect.</p> <p>This mode makes it easier to correlate values - from WebSocket reply to another WebSocket or HTTP Request, and from HTTP Response to a WebSocket message.</p> <p>Since: WebLOAD 12.6</p> <pre><code>// Create a WebSocket object\nws1 = new WebSocket( \"ws://echo.websocket.org\" );\nws1.storeMessages=true; //messages will be kept in ws1.messages array.\nws1.connect()\n\n//Received  string ws1\n//\"WebSocket Connected!\"\n\n//wait here for a message with this string in it\nws1.expectMessage(\"Connected!\");        \n\n//Received  string ws1\n//\"connection details: sessionid='5333455693' \"\n\n//extract or wait for a message with prefix, suffix\nws1.extractMessageValue(\"sessionid='\", \"'\", \"mySessionId\");  \n\n//can use the value in HTTP/WebSocket request:\nwlHttp.Get(\"http://someurl?\" + getCorrelationValue(\"mySessionId\"))\n\n//replace the value ${mySessionId} with the correlation \"mySessionId\"\nws1.dynamicReplaceCorrelation(\"mySessionId\");\n\n//this send will replace ${mySessionId} with session id value if it existed\nws1.send(\"sessionid=${mySessionId}\");                         \n\n// Close the websocket connection \nws1.close();\n</code></pre>"},{"location":"javascript/websocket_object/#object-details","title":"Object details","text":""},{"location":"javascript/websocket_object/#websocketurl-manualhandleeventsopt","title":"WebSocket(url, manualHandleEventsopt)","text":""},{"location":"javascript/websocket_object/#new-websocketurl-manualhandleeventsopt","title":"new WebSocket(url, manualHandleEventsopt)","text":"<p>Create new WebSocket object</p> <p>Parameters:</p> Name Type Attributes Description <code>url</code> string connection string <code>manualHandleEvents</code> boolean if true, will only handle events when manually asked for (for example, using ws.handlePending()). Default is to automatically handle events <p>Example</p> <pre><code>ws1 = new WebSocket( \"wss://echo.websocket.org/?encoding=text\" );\nws1.onmessage = function(evt ) {\n    DebugMessage(\"Server said:\" + evt.getData());\n}\nws1.connect();\nSleep(1000); //Event are handled while in Sleep\nws1.send(\"hi\");\nws1.close();\n</code></pre>"},{"location":"javascript/websocket_object/#events","title":"Events","text":""},{"location":"javascript/websocket_object/#onclose","title":"onclose","text":"<p>Callback called when WebSocket is closed</p> <p>Type:</p> <ul> <li>close-event</li> </ul>"},{"location":"javascript/websocket_object/#onerror","title":"onerror","text":"<p>Callback called when WebSocket has error. Event getData() will hold exception information, or use evt.toString()</p> <p>Type:</p> <ul> <li>error-event</li> </ul>"},{"location":"javascript/websocket_object/#onmessage","title":"onmessage","text":"<p>Callback to be called when a new message arrives</p> <p>Type:</p> <ul> <li>Event type for messages</li> </ul> <p>Properties:</p> Name Type Description <code>getData</code> Funtion Return the message raw data <code>getEncodedData</code> Funtion returns data, if binary encoded as text <code>getTimeMillis</code> Funtion get timestamp of event <code>isBinary</code> boolean Indicates whether message was binary or not."},{"location":"javascript/websocket_object/#onopen","title":"onopen","text":"<p>Callback called when WebSocket is opened</p> <p>Type:</p> <ul> <li>open-event</li> </ul>"},{"location":"javascript/websocket_object/#members","title":"Members","text":""},{"location":"javascript/websocket_object/#manualhandleevents-boolean","title":"manualHandleEvents :boolean","text":"<p>when true, messages are handled (callbacks called) automatically</p> <p>Type:</p> <ul> <li>boolean</li> </ul> <p>Default Value:</p> <ul> <li>true</li> </ul>"},{"location":"javascript/websocket_object/#reporterrorfunction-function","title":"reportErrorFunction :function","text":"<p>Function used to log messages</p> <p>Type:</p> <ul> <li>function</li> </ul> <p>Default Value:</p> <ul> <li>ErrorMessage or WebSocket.prototype.globalReportErrorFunction</li> </ul>"},{"location":"javascript/websocket_object/#storemessages-boolean","title":"storeMessages :boolean","text":"<p>when true, messages are stored after being handled for future inspection.</p> <p>Type:</p> <ul> <li>boolean</li> </ul> <p>Since:</p> <ul> <li>WebLOAD 12.6</li> </ul> <p>Default Value:</p> <ul> <li>false</li> </ul>"},{"location":"javascript/websocket_object/#waittime-number","title":"waitTime :number","text":"<p>Time in milliseconds before checking new messages</p> <p>Type:</p> <ul> <li>number</li> </ul> <p>Default Value:</p> <ul> <li>500 or WebSocket.prototype.globalWaitTime</li> </ul>"},{"location":"javascript/websocket_object/#methods","title":"Methods","text":""},{"location":"javascript/websocket_object/#addheadername-value","title":"addHeader(name, value)","text":"<p>Add custom HTTP Header</p> <p>Parameters:</p> Name Type Description <code>name</code> string <code>value</code> string"},{"location":"javascript/websocket_object/#close","title":"close()","text":"<p>Close the connection</p>"},{"location":"javascript/websocket_object/#connect","title":"connect()","text":"<p>Connect to WebSocket</p>"},{"location":"javascript/websocket_object/#dynamicreplacecorrelationtocorrelationparam-searchvalueopt","title":"dynamicReplaceCorrelation(toCorrelationParam, searchValueopt)","text":"<p>Replace send/sendBinary data with value in correlation. Value is looked up using pollCorrelationValue, so if value does not yet exist, wait for it until timeout (30000 millis)</p> <p>Parameters:</p> Name Type Attributes Description <code>toCorrelationParam</code> string name of parameter to replace. The name is expected to be set via setCorrealtionValue(\"myParamName\", \"the value\"); <code>searchValue</code> string the replacement value to replace. The default is ${toCorrelationParam}, for example the string \"session=${sessionId}\" will be replaced with \"session=\"+pollCorrelationValue(\"sessionId\"). <p>Since:</p> <ul> <li>WebLOAD 12.6</li> </ul>"},{"location":"javascript/websocket_object/#expectmessageexpr-timeoutopt-keepmessagesopt","title":"expectMessage(expr, timeoutopt, keepMessagesopt)","text":"<p>Wait for some message to be received.</p> <p>Parameters:</p> Name Type Attributes Default Description <code>expr</code> string | RegExp can be a \"string\" or /regex/ to look for in previous or future messages <code>timeout</code> number 30000 how much time to wait, default is 30000 milis <code>keepMessages</code> boolean false if true, will not remove messages, if false (default) will remove all messages up to the looked up message. <p>Since:</p> <ul> <li>WebLOAD 12.6</li> </ul>"},{"location":"javascript/websocket_object/#extractmessagevalueprefix-suffix-nameopt-timeoutopt-keepmessagesopt","title":"extractMessageValue(prefix, suffix, nameopt, timeoutopt, keepMessagesopt)","text":"<p>Wait for some message to be received.</p> <p>Parameters:</p> Name Type Attributes Default Description <code>prefix</code> string prefix in message to look for <code>suffix</code> string suffix in message to look for <code>name</code> string name of correlation value to store. If not specified, value will be returned but not stored <code>timeout</code> number 30000 how much time to wait, default is 30000 milis <code>keepMessages</code> boolean false if true, will not remove messages, if false (default) will remove all messages up to the looked up message. <p>Since:</p> <ul> <li>WebLOAD 12.6</li> </ul> <p>Returns:</p> <p>value extracted, null if not found after timeout</p>"},{"location":"javascript/websocket_object/#handlemessage","title":"handleMessage()","text":"<p>Call to manually handle messages, not normally needed</p>"},{"location":"javascript/websocket_object/#senddata-encoded","title":"send(data, encoded)","text":"<p>Send message</p> <p>Parameters:</p> Name Type Description <code>data</code> string to send <code>encoded</code> boolean if true, value is encoded and will decoded when sent"},{"location":"javascript/websocket_object/#sendbinarydata","title":"sendBinary(data)","text":"<p>Sent as Binary Message</p> <p>Parameters:</p> Name Type Description <code>data</code> Object"},{"location":"javascript/websocket_object/#setconnectiontimeoutmilis","title":"setConnectionTimeout(milis)","text":"<p>Connection timeout</p> <p>Parameters:</p> Name Type Description <code>milis</code> number"},{"location":"javascript/websocket_object/#setignoresslerrorsb","title":"setIgnoreSslErrors(b)","text":"<p>Call with true to ignore SSL Errors</p> <p>Parameters:</p> Name Type Description <code>b</code> boolean"},{"location":"javascript/websocket_object/#setpermessagedeflateb","title":"setPerMessageDeflate(b)","text":"<p>Call with true for per-message-deflate extention</p> <p>Parameters:</p> Name Type Description <code>b</code> boolean"},{"location":"javascript/websocket_object/#setproxyproxy","title":"setProxy(proxy)","text":"<p>Proxy host:port to use</p> <p>Parameters:</p> Name Type Description <code>proxy</code> string <p>Example</p> <pre><code>setProxy(\"myproxy:8080\")\n</code></pre>"},{"location":"javascript/websocket_object/#settimeoutmilis","title":"setTimeout(milis)","text":"<p>Max time to spend handling messages</p> <p>Parameters:</p> Name Type Description <code>milis</code> number time in milliseconds"},{"location":"javascript/websocket_object/#setverifyhostb","title":"setVerifyHost(b)","text":"<p>Call with false to not verify host</p> <p>Parameters:</p> Name Type Description <code>b</code> boolean"},{"location":"javascript/xmlparser/","title":"XML Parser Object","text":"<p>WebLOAD provides an embedded, third-party XML parser object to improve the multi-platform support for XML parsing within the WebLOAD environment. The XML parser object can be used instead of MSXML and Java XML parsing, resulting in lower memory consumption and increased performance during load testing.</p> <p>The XML parser object can be used to reference any element in an XML document. For example, you can use the XML parser object to generate an Excel file containing the desired details of a specified element. WebLOAD uses the Open Source Xerces XML parser (see http://xml.apache.org/xerces-c/).</p> <p>The XML parser object is instanced as follows:</p> <p><code>xmlObject = new XMLParserObject();</code></p> <p>The parse() method, not exposed by the original XML parser, is exposed by WebLOAD. This method is identical to the parseURI() method, except that it receives an XML string instead of a URI. The following sections provide lists of exposed methods and properties as well as a detailed example of the implementation of the XML parser object.</p> <p>Note: For additional information, refer to: http://xml.apache.org/xerces-c/ApacheDOMC++BindingL2.html</p>"},{"location":"javascript/xmlparser/#methods","title":"Methods","text":"<p>The following table lists the XML parser object methods exposed by WebLOAD.</p> Object Method  Name xmlparser parseURI  parse  resetDocumentPool  release  setFeature  getFeature  canSetFeature  load  loadXML xmlAttr getName  getValue  setValue  getOwnerElement  getSpecified xmlCharacterData getData  getLength  appendData  setData  substringData  deleteData  insertData  replaceData xmlDocument createElement  getElementById  getDocumentElement  getElementsByTagName  createTextNode  createDocumentFragment  getDoctype  createComment  createCDATAsection  createAttribute  createEntityReference  createProcessingInstruction  createElementNS  createAttributeNS  getElementsByTagNameNS  importNode xmlDocumentType getName  getPublicId  getSystemId  getInternalSubset  getEntities  getNotations xmlElement getElementsByTagName  getElementsByTagNameNS  getAttribute  getAttributeNS  getAttributeNode  getAttributeNodeNS  setAttributeNode  setAttributeNodeNS  getTagName  hasAttribute  hasAttributeNS  removeAttribute  removeAttributeNS  setAttribute  setAttributeNS  removeAttributeNode xmlEntity getPublicId  getSystemId  getNotationName xmlnamednodemap getLength  getNamedItem  removeNamedItem  getNamedItemNS  removeNamedItemNS  setNamedItem  setNamedItemNS  item xmlnode getNodeName  getNodeValue  getNodeType  getParentNode  getFirstChild  getLastChild  getPreviousSibling  getNextSibling  getChildNodes  getAttributes  getOwnerDocument  getNamespaceURI  getPrefix  getLocalName  hasChildNodes  hasAttributes  normalize  release  removeChild  appendChild  insertBefore  setNodeValue  setPrefix  isSupported xmlnodelist Item  getLength xmlNotation getPublicId  getSystemId  xmlProcessingInstruction  getTarget  getData  setData"},{"location":"javascript/xmlparser/#properties","title":"Properties","text":"<p>The following table lists the XML parser object properties exposed by WebLOAD.</p> Object Property  Name xmlAttr name  value xmlCharacterData length  data xmlDocument documentElement xmlElement tagName xmlnode nodeName  attributes  childNodes  firstChild  lastChild  namespaceURI  nextSibling  nodeType  nodeValue  ownerDocument  parentNode  prefix  previousSibling  nodeTypeString  xml xmlnodelist length xmlProcessingInstruction target  Data"},{"location":"javascript/xmlparser/#example","title":"Example","text":"<p>The following is an example of the use of the XML parser object:</p> <pre><code>{\n\n//Create the XML parser object (xerces-c parser) xmlObject = new XMLParserObject();\n\n\n\n//Parse the xml file from the specified path xmlDoc = xmlObject.parseURI(\"C:\\\\xml_file.xml\");\n\n\n\n//Retrieve the first node with the \u201cNODE5\u201d tag\n\ndomNode = xmlDoc.getElementsByTagName(\"NODE5\").item(0);\n\n\n\n//Retrieve the node's type nodeType = domNode.getNodeType();\n\n\n\n//Retrieve the node's parent\n\nnodeParent = domNode.getParentNode().getNodeName();\n\n\n\n//Retrieve the number of child nodes\n\nnumOfChilds = domNode.getChildNodes().getLength();\n\n\n\n//Create a new element\n\nnewNode1 = xmlDoc.createElement(\"NEW_NODE1\");\n\n\n\n//Insert the new element into DOM domNode1.insertBefore(newNode1, domNode);\n</code></pre>"},{"location":"recorder/appendix_a/","title":"Appendix A: The WebLOAD Recorder Toolbox Set","text":"<p>This section describes the WebLOAD Recorder toolbox set.</p>"},{"location":"recorder/appendix_a/#the-webload-recorder-toolbox-items","title":"The WebLOAD Recorder Toolbox Items","text":"<p>The following are the WebLOAD Recorder Toolbox items:</p> Toolbox Items General - Sleep - Message - JavaScriptObject - Comment - Try - Catch Load - Begin Transaction - End Transaction - Set Timer - Send Timer - Synchronization Point - Send Measurement - URL Screening - Value Extraction - Define Concurrent - Execute Concurrent Internet Protocols - FTP-connect - FTP-upload - FTP-download - FTP-disconnect - SMTP-send message - POP-retrieve - POP-Delete - IMAP-Connect - IMAP-Retrieve - IMAP-Delete - IMAP-CreateMailbox - IMAP-ListMailboxes - IMAP-DeleteMailbox - IMAP-RenameMailbox - IMAP-SubscribeMailbox - IMAP-UnsubscribeMailbox Toolbox Items - IMAP-ListSubscribedMailbox - IMAP-Search - NNTP-Connect - NNTP-GetArticle - NNTP-GetArticleCount - NNTP-PostArticle - TCP-Connect - TCP-Send - TCP-Receive - TCP-Erase - TELNET-Connect - TELNET-Receive - TELNET-Send - TELNET-Erase - UDP-Bind - UDP-Broadcast - UDP-Receive - UDP-Send - UDP-Erase - LDAP-Bind - LDAP-Search - LDAP-UnBind IoT  Protocols - MQTT-Connect - MQTT-Subscribe - MQTT-Send - MQTT-GetMessages - AMQP-Connect - AMQP-Send - AMQP-GetMessages Database - OpenDB - Oracle OpenDB - MySQL OpenDB - Execute Command - Fetch Data - DB GetLine - Oracle DB GetLine - MySQL DB GetLine - DB Load - Oracle DB Load - MySQL DB Load Verifications - WS-SingleNode - WS-MultipleNodes - Flex:Verify-Ext - Flex:Extract-Ext Multimedia - Streaming-Create - Streaming-Play - Streaming-Play with range - Streaming-Wait for Media  and Stop - Streaming-Wait for Media  and Pause - Streaming-Close WebSocket - WebSocket Connect - WebSocket Send - WebSocket Close Web  Services - HTTP - WSDL JMS - JMS-Connect-JNDI - JMS-Connect-HornetQ - JMS-Send - JMS-Receive Real  Clients - Selenium Driver - Selenium Report Statistics - JUnit Runner - PerfectoMobile"},{"location":"recorder/appendix_a/#the-webload-recorder-general-toolbox","title":"The WebLOAD Recorder General Toolbox","text":"<p>The following table describes the purpose of each of the WebLOAD Recorder General Toolbox items:</p> Script Item Purpose Sleep <p>Emulates the time it takes users to get from one page to the next</p><p>- includes download time and the time it takes to read the page.</p> Message Places an informational or error message in the script. This message will appear in the Log window when you play back the script. Message objects can also be used to print out the values of variables. JavaScript Object <p>Enables you to insert JavaScript code directly into the script. You can code directly in JavaScript.</p><p>To add a JavaScript Object to the script, drag the JavaScript Object icon into the Script Tree, and then open the object to insert JavaScript code.</p> Comment Places comments in your script. The comment will appear in the JavaScript View pane when viewing the entire script. Try\u2026Catch Places Try and Catch statements in your script. You can use the Try...Catch statements for structured exception handling."},{"location":"recorder/appendix_a/#sleep","title":"Sleep","text":"<p>Users vary their activity when accessing a Web application, sometimes pausing between transactions and occasionally only accessing the server intermittently. The time a user waits between performing consecutive actions is known as sleep time.</p> <p>When you record a script, WebLOAD Recorder automatically records the actual sleep time and inserts sleep icons into the script. You can edit the recorded sleep times manually, add more sleep statements, and control how WebLOAD is influenced by the sleep timers in the script.</p> <p>To insert sleep timers:</p> <ol> <li> <p>Drag the Sleep  icon from the General toolbox into the Script Tree at the desired location.</p> <p>The Sleep dialog box opens.</p> </li> <li> <p>In the Enter or select pause time field, enter or select the duration of the sleep. The default value is 1000 milliseconds.</p> <p>The Sleep item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/appendix_a/#message","title":"Message","text":"<p>While running a test session, WebLOAD Recorder and WebLOAD Recorder\u2019s Log windows display information about session execution. You can include Message nodes in your script, defining points at which to send error and/or notification messages to the Log window.</p> <p>To insert a message:</p> <ol> <li> <p>Drag the Message  icon from the General toolbox into the Script Tree at the desired location.</p> <p>The Message dialog box opens.</p> <p></p> </li> <li> <p>Create a text message by typing the text you want to appear in the message into the input text box.</p> <p>Note: When entering a string value to the message, the string must be enclosed in quotation marks; for example, \u201cSample Message\u201d.</p> </li> <li> <p>To add a global variable to the message text, click the globe icon to the right of the input text box and select a global variable from the drop-down list.</p> </li> <li> <p>Select a severity level for the message from the drop-down list. The following severity levels are available:</p> <ul> <li>Information message (WLInfoMessage)</li> <li>Minor error message (WLMinorError)</li> <li>Error message (WLError)</li> <li>Severe error message (WLSevereError)</li> <li>Debug message (WLDebugMessage)</li> </ul> </li> <li> <p>Click OK.</p> <p>The Message item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/appendix_a/#javascriptobject","title":"JavaScriptObject","text":"<p>JavaScript Objects enable you to insert JavaScript code directly into the script, giving you access to advanced functionality not available through the WebLOAD Recorder graphic interface. For example, working with XML or COM, or retrieving data from a database, are all tasks that require some additional programming code.</p> <p>To insert a JavaScriptObject:</p> <ol> <li> <p>Drag the JavaScriptObject  icon from the General toolbox into the Script Tree at the desired location.</p> <p>The JavaScriptObject item appears in the Script Tree and the WebLOAD Recorder protocol block is added to the script.</p> </li> <li> <p>Open the object in JavaScript Editing mode to insert JavaScript code, as described in Using the JavaScript Editor .</p> </li> </ol>"},{"location":"recorder/appendix_a/#comment","title":"Comment","text":"<p>WebLOAD Recorder enables you to add comments to your script to describe an activity or provide information about a specific operation.</p> <p>To insert a comment:</p> <ol> <li> <p>Drag the Comment  icon from the General toolbox into the Script Tree at the desired location.</p> <p>The Comment dialog box opens.</p> <p></p> </li> <li> <p>Enter the text you want to appear in the comment.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The Comment item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/appendix_a/#try-catch-statements","title":"Try / Catch Statements","text":"<p>You can use the Try\u2026Catch statements for structured exception handling. This enables you to execute a particular block of statements if a specified exception occurs while your code is running.</p> <p>To insert a Try...Catch statement:</p> <ol> <li>Drag the Try  icon from the General toolbox into the Script Tree directly before the first action you want to include in the Try...Catch block.</li> <li> <p>Drag the Catch  icon from the General toolbox into the Script Tree directly after the last action you want to include in the Try...Catch block.</p> <p>The Try and Catch items appear in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/appendix_a/#the-webload-recorder-load-toolbox","title":"The WebLOAD Recorder Load Toolbox","text":"<p>The following table describes the purpose of each of the WebLOAD Recorder Load Toolbox items:</p> <p>Table: Load Toolbox Items</p> Script Item Purpose <p>Begin Transactions</p><p>End Transactions</p> Adds named transactions to the script to measure the performance of logical actions in your script, such as a Login process. By inserting named transactions into your script, you can take a series of simple actions, define them as a single transaction, and set success or failure criteria for the complete transaction. <p>Set Timer</p><p></p><p>Send Time</p> Timers let you time any operation or group of operations in a script and send the time statistics to the WebLOAD Console. SynchronizationPo int Create peak server loads that stress your system to the limit by deliberately forcing multiple Virtual Clients to perform key tasks and execute a given command at precisely the same moment in real time. SendMeasurement Create a new measurement name and assign a value to the measurement available in WebLOAD reports. URL Screening Specify the URLs the WebLOAD engine should ignore (not fetch). ValueExtraction Extract a value from a string using a prefix and suffix. DefineConcurrent Define a starting point after which the WebLOAD engine collects all Post and Get HTTP requests, but does not execute them, until an Execute Concurrent function is run. ExecuteConcurrent Defines a starting point after which the WebLOAD engine stops collecting and begins executing all the Post and Get HTTP requests that were defined since the last Define Concurrent function, concurrently (using multithreading)."},{"location":"recorder/appendix_a/#begin-and-end-transaction","title":"Begin and End Transaction","text":"<p>In addition to the automatic transactions provided by WebLOAD, you can use the WebLOAD Recorder GUI to easily add named transactions to the script to measure the performance of logical actions in your script, such as a Login process. By inserting named transactions into your script, you can take a series of simple actions, define them as a transaction, and set success or failure criteria for the transaction. Each transaction can be a simple action, such as a query, or a complex action that may include several steps.</p> <p>To measure transactions, you must mark the beginning and end of the transaction in your script. During runtime, WebLOAD measures the time it takes to complete the transaction and reports the results in the WebLOAD Integrated reports, Statistics reports, and Data Drilling report.</p> <p>Note: You can add an unlimited number of transactions into your script, each with a different name.</p> <p>To mark the beginning of a transaction:</p> <ol> <li> <p>Drag the Begin Transaction  icon from the Load toolbox into the Script Tree, directly above the first action you want to include in the transaction.</p> <p>The Begin Transaction dialog box opens.</p> <p></p> </li> <li> <p>Enter a logical name for the transaction; for example, Login.</p> </li> <li> <p>Click OK.</p> <p>The Begin Transaction item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>To mark the end of a transaction:</p> <ol> <li> <p>Drag the End Transaction  icon from the Load toolbox into the Script Tree, directly after the last action you want included in the script.</p> <p>The End Transaction dialog box opens.</p> <p></p> </li> <li> <p>Select the transaction to end from the Select Opened Transaction drop-down list.</p> </li> <li> <p>Select a return value for the transaction from Select Return Value drop-down list.</p> <p>You can select from the return values provided, or select Custom Function to create your own verification function to call when the transaction is complete.</p> <p>For information on creating custom functions, see the WebLOAD Scripting Guide.</p> </li> <li> <p>To set WebLOAD to save the results of all transaction instances, successes and failures, for later analysis with Data Drilling, select true in the Save transaction information for Data Drilling field. Select false (default) to save only results of failed transaction instances that triggered some sort of error flag.</p> </li> <li> <p>Optionally, enter a text string to specify a possible reason for a transaction failure within your transaction verification function in the Failure Reason field. This reason will also appear in the Statistics Report.</p> </li> <li> <p>Click OK.</p> <p>The End Transaction item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/appendix_a/#set-and-send-timer","title":"Set and Send Timer","text":"<p>Timers let you time any operation or group of operations in a script and send the time statistics to the WebLOAD Console. For example, you can add a timer to measure the amount of time needed to complete a series of user activities on a single Web page.</p> <p>You can add timers to a script directly through the WebLOAD Recorder.</p> <p>Note: When you set a timer, it is automatically zeroed.</p> <p>To mark the beginning of a timer:</p> <ol> <li> <p>Drag the Set Timer  icon from the Load toolbox into the Script Tree directly before the first action you want to include in the timed task.</p> <p>The Set Timer dialog box opens.</p> <p></p> </li> <li> <p>Type a name for the timer in the Enter a timer name field.</p> </li> <li> <p>Click OK.</p> <p>The Set Timer item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>To mark the end of the timer:</p> <ol> <li> <p>Drag the Send Timer  icon from the Load toolbox into the Script Tree directly after the last action you want included in the timed task.</p> <p>The Send Timer dialog box opens.</p> <p></p> <p>Figure: Send Timer Dialog Box</p> </li> <li> <p>From the Select Timer drop-down list, to select the timer to end.</p> </li> <li>Click OK.     The Send Timer item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</li> </ol>"},{"location":"recorder/appendix_a/#synchronization-point","title":"Synchronization Point","text":"<p>During a test session, WebLOAD simulates the random nature of the real world, where even with hundreds or thousands of Web site hits, users do not all necessarily execute the same commands at precisely the same instant. However, for testing purposes, you may wish to create peak server loads that stress your system to the limit by deliberately forcing multiple Virtual Clients to perform key tasks and execute a given command at precisely the same moment in real time.</p> <p>WebLOAD provides Synchronization Points to coordinate the actions of multiple Virtual Clients. A Synchronization Point is a meeting place where Virtual Clients wait before continuing with a script. When one Virtual Client arrives at a Synchronization Point, WebLOAD holds the Client at that point until all the other Virtual Clients arrive. When all the Virtual Clients have arrived, they are all released at once to perform the next action in the script simultaneously.</p> <p>For example, suppose that you want to simulate 500 users, all trying to access a form on the same Web page simultaneously. To maximize the impact of this test situation, all 500 Virtual Clients must access the form at exactly the same time. Add a Synchronization Point before the form entry node to ensure that all the Virtual Clients log in simultaneously.</p> <p>WebLOAD Recorder enables you to define the meeting place where all Virtual Clients wait. You can also optionally set the timeout value, the number of milliseconds that WebLOAD will wait for all of the Virtual Clients to arrive at the Synchronization Point. The timeout is a safety mechanism that prevents an infinite wait if any of the Virtual Clients does not arrive at the Synchronization Point for any reason. Once the timeout period expires, WebLOAD releases the rest of the Virtual Clients. Setting a timeout</p> <p>value is important to ensure that the test session will not \u2018hang\u2019 indefinitely in case of error.</p> <p>To insert a Synchronization Point:</p> <ol> <li> <p>Drag the Synchronization Point  icon from the Load toolbox into the Script Tree directly before the action you want all Virtual Clients to perform simultaneously. The Synchronization Point dialog box opens.</p> <p></p> </li> <li> <p>In the Timeout Value field, enter or select a timeout value for the Synchronization Point. The default value is 1000 milliseconds.</p> <p>The Synchronization Point item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>During a test session, the SynchronizationPoint() function returns a value to WebLOAD. This value indicates whether the function was successful or not. All failures are logged and displayed in the WebLOAD and Console Log windows, similar to any other WebLOAD test failure.</p> <p>Synchronization Point function calls may return one of the following return values:</p> <ul> <li>WLSuccess\u2014synchronization succeeded. All Virtual Clients arrived at the Synchronization Point and were released together.</li> <li>WLLoadChanged\u2014synchronization failed. A change in the load size was detected while Virtual Clients were being held at the Synchronization Point. All Virtual clients were released.</li> <li>WLTimeout\u2014synchronization failed. The timeout expired before all Virtual Clients arrived at the Synchronization Point. All Virtual Clients were released.</li> <li>WLError\u2014synchronization failed. Invalid timeout value. All Virtual Clients were released.</li> </ul> <p>For a complete explanation and example of the SynchronizationPoint function syntax, see WebLOAD Actions, Objects, and Functions, in the WebLOAD JavaScript Reference Guide.</p>"},{"location":"recorder/appendix_a/#send-measurement","title":"Send Measurement","text":"<p>WebLOAD Recorder enables you to insert Send Measurement actions into your script to create a new measurement name and assign a value to the measurement. During runtime the measurement is displayed in the WebLOAD statistics report.</p> <p>To create and set the value for a measurement:</p> <ol> <li> <p>Drag the Send Measurement  icon from the Load toolbox into the Script Tree at the desired location.</p> <p>The Send Measurement dialog box opens.</p> <p></p> </li> <li> <p>Type or select a name for the measurement in the Select measurement name field.</p> </li> <li> <p>Type or select a value for the measurement in the Set measurement value field.</p> </li> <li> <p>Click OK.</p> <p>The Send Measurement item appears in the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/appendix_a/#url-screening","title":"URL Screening","text":"<p>WebLOAD Recorder enables you to add URL screening to a script to define the URLs that the WebLOAD protocol engine should ignore during runtime. The ability to ignore links on the page being tested is a useful feature. For example, many Web sites include links to external sites. If these sites are not relevant to the testing requirements, they should be ignored. Other links may be to advertisement sites that charge a fee every time the link is accessed. Hitting these links during a typical load test that may run hundreds or thousands of iterations would be a tremendous waste, so these links should also be ignored.</p> <p>To add URL screening to a script:</p> <ol> <li> <p>Drag the URL Screening  icon, from the Load toolbox, into the Script Tree at the desired location. </p> <p>The URL Screening Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Enter the URLs to ignore, separated by commas, in the Value field.</p> </li> <li> <p>Click OK.</p> <p>The URL Screening Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda() function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>Note: Fields that were not assigned a value in the dialog box are left as empty fields in the script code.</p>"},{"location":"recorder/appendix_a/#value-extraction","title":"Value Extraction","text":"<p>WebLOAD Recorder enables you to add value extraction to a script to define the parameters for the extractValue JavaScript function.</p> <p>To add value extraction to a script:</p> <ol> <li> <p>Drag the Value Extraction  icon, from the Load toolbox, into the Script Tree at the desired location. </p> <p>The Value Extraction Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>In the Prefix field, enter a prefix.</p> </li> <li> <p>In the Suffix field, enter a suffix.</p> </li> <li> <p>In the Str field, enter the string that will be searched.</p> </li> <li> <p>In the retVarName, enter the variable name that will be generated to the script.</p> </li> <li> <p>Click OK.</p> <p>The Value Extraction Building Block is added to the Script Tree. The JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>Note: Fields that were not assigned a value in the dialog box are left as empty fields in the script code.</p>"},{"location":"recorder/appendix_a/#define-concurrent","title":"Define Concurrent","text":"<p>WebLOAD Recorder enables you to collect Post and Get HTTP requests and simultaneously execute them by two or more threads, as defined in the MultiThread Virtual Clients number. This is configured in the Browser Parameters tab in WebLOAD Console\u2019s Script Options dialog box.</p> <p>Note: WebLOAD Recorder does not perform the Post and Get HTTP requests concurrently.</p> <p>To simultaneously execute Post and Get HTTP requests, you must define where in the script to begin collecting the requests and where to stop collecting and begin executing them. The HTTP requests are collected until the engine encounters an Execute Concurrent function in the script. For more information about the Execute Concurrent Building Block, see Execute Concurrent .</p> <p>These Post and Get HTTP requests are saved in a file which you can access at any time. For more information, refer to the WebLOAD JavaScript Reference.</p> <p>To start collecting HTTP requests in a script:</p> <ul> <li>Drag the Define Concurrent  icon from the Load toolbox into the Script Tree at the desired location.</li> </ul> <p>The Define Concurrent Building Block is added to the Script Tree. The JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/appendix_a/#execute-concurrent","title":"Execute Concurrent","text":"<p>WebLOAD Recorder enables you to simultaneously execute all the Post and Get HTTP requests that were defined since the last Define Concurrent function by two or more threads, as defined in the MultiThread Virtual Clients number. This is configured in the Browser Parameters tab in WebLOAD Console\u2019s Script Options dialog box.</p> <p>Note: This function can only be inserted in your script after a Define Concurrent function. For more information about the Define Concurrent function, see Define Concurrent .</p> <p>When the engine encounters the Execute Concurrent function, it stops collecting the HTTP requests in the script and starts their execution.</p> <p>To start concurrently executing HTTP requests in a script:</p> <ul> <li>Drag the Execute Concurrent  icon from the Load toolbox into the Script Tree at the desired location.</li> </ul> <p>The Execute Concurrent Building Block is added to the Script Tree. The JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/appendix_a/#the-webload-recorder-internet-protocols-toolbox","title":"The WebLOAD Recorder Internet Protocols Toolbox","text":"<p>Use the WebLOAD Recorder Internet Protocols Building Blocks to simply and easily add Internet Protocols functionality to your test session script without having to write numerous lines of code.</p> <p>To add Internet Protocols Building Blocks to a test script directly through the WebLOAD Recorder GUI:</p> <ul> <li>Drag the selected Internet Protocols icon from the Internet Protocols toolbox and drop it into the Script Tree at the appropriate point.</li> </ul> <p>WebLOAD Recorder automatically adds the appropriate JavaScript code to your test session script.</p> <p>WebLOAD Recorder provides full support for secure sites that utilize the SSL security protocol. The same FTP, POP, and SMTP functionality that is available for standard- security sites is also provided for sites that utilize the SSL security protocol. WebLOAD Recorder SSL protocol support is virtually transparent for the web site tester. Simply choose the appropriate Building Block, such as FTP-Connect, for example. Activate the SSL Protocol feature by setting the Boolean SSLFlag property to true. Complete the rest of the Building Block properties as described for standard Building Block use.</p> <p>Note: The Internet Protocols Building Blocks displayed in the Internet Protocols toolbox correspond to only a small part of the WebLOAD Recorder Internet Protocols function set. These Building Blocks are provided for the most commonly used Internet Protocols activities. For a description of the complete set of Internet Protocols functions supported by WebLOAD Recorder, see the WebLOAD Internet Protocols Reference in the WebLOAD JavaScript Reference Guide.</p> <p>Each Internet Protocols icon opens a different dialog box. Enter the required values in the Value field. Explanations are provided at the bottom of the dialog box for each parameter as it is selected in the dialog box.</p> <p>Note: Values that must be enclosed within quotation marks are indicated in the Value column by sets of quotation marks. Type the field value within the quotation marks that automatically appear in the input-text box that pops-up when the value field is selected. Fields that were not assigned a value in the dialog box are left as empty fields in the script code.</p> <p>Once you have finished defining the new Internet Protocols activity, the new action is reflected in the Script Tree. An Internet Protocols icon is added to the Script Tree for each Internet Protocols activity defined. WebLOAD Recorder automatically adds the corresponding JavaScript code to your test session script.</p> <p>To see the complete sequence of JavaScript code for all the Internet Protocols Building Blocks that have been added to the Script Tree, click the Agenda root node in the Script Tree.</p> <p>Note: The JavaScript code for each of the Internet Protocols Building Blocks can be found in the Internet Protocols library files, part of the Include directory under the WebLOAD installation directory. Each protocol has its own library file. For example, the SMTP functions refer to the wlSMTP.js file. </p>"},{"location":"recorder/appendix_a/#ftp","title":"FTP","text":"<p>Dragging an FTP icon into your Script Tree opens an FTP Building Block parameters dialog box.</p>"},{"location":"recorder/appendix_a/#ftps","title":"FTPS","text":"<p>The FTP building block can be used to access FTPS servers. FTPS - 'FTP over SSL', not to be confued with SFTP - 'SSH FTP'. To use FTPS, use the FTP building block and specify Secure FTP 'Yes' in the connection setttings.</p> <p>FTP toolbox items include:</p> <ul> <li>FTP-Connect: Open an FTP connection.</li> <li>FTP-Upload: Designate a file to be uploaded to a remote host.</li> <li>FTP-Download: Designate a file to be downloaded from a remote host.</li> <li>FTP-Disconnect: Disconnect from a remote host.</li> </ul>"},{"location":"recorder/appendix_a/#ftp-connect","title":"FTP-Connect","text":"<p>Use the FTP-Connect Building Block to open an FTP connection.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the FTP-Connect icon from the Internet Protocols toolbox into the Script Tree at the desired location. The FTP-Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the UserName field is used to define the user ID to be used when logging in to the specified FTP host. WebLOAD Recorder automatically sends the user-specified name and password to the FTP host when connecting.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The FTP-Connect Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda()and InitClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the InitAgenda()function notes that the connection will be utilizing SSL security, and therefore includes the WebLOAD Recorder FTP/SSL library file. The InitClient() function includes a command to define a separate FTP/SSL object for each client. Within the main body of the script, an FTP connection is opened using the connection name, user name, and password specified by the user.</p> </li> </ol> <p> The fields in the FTP-Connect Building Block parameters dialog box are described in the following table:</p> Field Name Description FTP Host <p>Specify the name of the FTP host connection.</p><p>Type the FTP Host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The FTP host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> User Name <p>Specify a user ID for the FTP connection.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The user name must be enclosed within quotation marks.</p> Password <p>Specify a password for authentication during the FTP connection.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The password must be enclosed within quotation marks.</p> Secure FTP (FTPS) Select the appropriate Boolean value to indicate whether the site being accessed utilizes the SSL security protocol."},{"location":"recorder/appendix_a/#ftp-upload","title":"FTP-Upload","text":"<p>Use the FTP-Upload Building Block to designate a file to be uploaded to a remote host.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the FTP-Upload icon from the Internet Protocols toolbox into the Script Tree at the desired location. </p> <p>The FTP-Upload Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Uploaded File field is used to define the name and location for the file to be saved on the specified FTP host.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table. </p> <p>Note: If the script will be running for multiple clients or over multiple rounds, use global variables to specify a unique file name for each client and/or round, to avoid file access conflicts and to make it easier to work with and analyze the files after the test is completed. For example:</p> <p><code>\u201ck:\\Ftp\\files\\inputFiles\\text\\_upload\\_\u201d+ ThreadNum + RoundNum + \u201c.txt\u201d</code></p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The FTP-Upload Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>Note: The WebLOAD Recorder global variables ThreadNum and RoundNum are used to differentiate between the files uploaded by different clients during different test iterations.</p> <p></p> <p>The fields in the FTP-Upload Building Block parameters dialog box are described in the following table:</p> Field Name Description File for upload <p>Specify the name of the file to be uploaded to the specified FTP host.</p><p>Select the appropriate file from the Browser window that appears when you click the button to the right of the Value input area for this field.</p> Uploaded file <p>Specify a name and location to save the uploaded file.</p><p>Type the uploaded file name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The file name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#ftp-download","title":"FTP-Download","text":"<p>Use the FTP-Download Building Block to designate a file to be downloaded from a remote host.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the FTP-Download icon from the Internet Protocols toolbox into the Script Tree at the desired location. </p> <p>The FTP-Download Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the File for Download field is used to define the name of the file to be downloaded from the specified FTP host.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> <p>Note: If the script will be running for multiple clients or over multiple rounds, use global variables to specify a unique file name for each client and/or round, to avoid file access conflicts and to make it easier to work with and analyze the files after the test is completed. For example:</p> <p><code>\u201ck:\\Ftp\\files\\inputFiles\\text\\_upload\\_\u201d + ThreadNum + RoundNum + \u201c.txt\u201d</code></p> </li> <li> <p>Click OK.</p> <p>The FTP-Download Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the name of the file to be downloaded is passed as a parameter to the ftp.Download() function. The file name to which the downloaded file should be saved is assigned as a value to the ftp.Outfile variable.</p> </li> </ol> <p> The fields in the FTP-Download Building Block parameters dialog box are described in the following table:</p> Field Name Description File for download <p>Specify the name of the file to be downloaded from the specified FTP host.</p><p>Type the name of the file to be downloaded into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The file name must be enclosed within quotation marks.</p> Downloaded file <p>Specify a name and location to save the downloaded file.</p><p>Type the name and location in which to save the downloaded file into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The file name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#ftp-disconnect","title":"FTP-Disconnect","text":"<p>Use the FTP-Disconnect Building Block to disconnect from a remote host.</p> <p>To enter a value:</p> <ul> <li> <p>Drag the FTP-Disconnect icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The FTP-Disconnect Building Block is added to the Script Tree. The JavaScript code, including the TerminateClient() function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#sftp","title":"SFTP","text":"<p>Dragging an SFTP icon into your Script Tree opens an SFTP Building Block parameters dialog box. </p> <p>SFTP is SSH FTP, or Secure Shell File Transfer Protocol, not to be confused with FTP over SSL, FTPS - 'File Transfer Protocl Secure'</p> <p>To enter a value:</p> <ol> <li>Drag the SFTP icon from the Internet Protocols toolbox into the Script Tree at the desired location. The SFTP Building Block parameters dialog box opens.</li> </ol> <p></p> <ol> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in SFTP Parameters.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The SFTP Building Block is added to the Script Tree. The JavaScript is added to the script. The script contains commented out examples for basic functionality like get() or put() to receive or send files.</p> <p>The fields in the SFTP Building Block parameters dialog box are described in the following table:</p> Field Name Description FTP Host <p>Specify the name of the FTP host connection.</p><p>Type the FTP Host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The FTP host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> FTP Port Port to connect, default is SSH Port 22 Username Username to connect. Some SFTP Server requests file authentication instead of or on top of username, can be added later in code Password Password to use <p>This will generate the SFTP code, for example:</p> <p>Note The code include comments for the usual commands, for example addIndentity for private key authentication. get/put command to get or put a file.</p> <p>SFTP is based on JSch library. See examples and javadoc for more options.</p> <pre><code>jsch = new Packages.com.jcraft.jsch.JSch();\n//jsch.addIdentity(\"c:\\\\path\\\\to\\\\id_rsa\"); //authenticate using private key:\njschSession = jsch.getSession(\"user\", \"host\", 22);\nconfig = new java.util.Properties();\nconfig.put(\"StrictHostKeyChecking\", \"no\"); //to solve UnknownHostKey:\nconfig.put(\"PreferredAuthentications\", \"password\");\njschSession.setConfig(config);  \n\njschSession.setPassword(\"pass\");\n\njschSession.connect(10000);\n\nsftp = jschSession.openChannel(\"sftp\");\nsftp.connect(10000);\n\n// transfer file from local to remote server\n//sftp.put(localFile, remoteFile)\n\n// download file from remote server to local\n//sftp.get(remoteFile, localFile);\n\nsftp.exit();\n</code></pre>"},{"location":"recorder/appendix_a/#smtp-send-message","title":"SMTP-Send Message","text":"<p>Use the SMTP-Send Message Building Block to define an email to be sent.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the SMTP-Send Message icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The SMTP-Send Message Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Server Name Host designates the name of the host to which the email should be sent.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The SMTP-Send Message Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the specified SMTP connection is opened, an email message constructed from the user input is sent out, and the SMTP connection is closed.</p> </li> </ol> <p></p> <p>The fields in the SMTP-Send Message Building Block parameters dialog box are described in the following table:</p> Field Name Description Server Name Host <p>Specify the name of the host to which the email should be sent.</p><p>Type the host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The file name must be enclosed within quotation marks.</p><p></p><p> Note: The host can be designated either with a full text name or DNS number.</p> User name <p>Specify a user name with which to login to the mail server.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The user name must be enclosed within quotation marks.</p> Password <p>Specify a password with which to login to the mail server.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The password must be enclosed within quotation marks.</p> Type <p>Select which type to use:</p><p>- SMTP</p><p>- ESMTP (SMTP extensions \u2013 supports graphics and other attachments.)</p> From <p>Specify the name of the person sending the email.</p><p>Type the sender\u2019s name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The name must be enclosed within quotation marks.</p> To <p>Specify the name of the person to whom the email should be sent.</p><p>Type the receiver\u2019s name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The name must be enclosed within quotation marks.</p> Subject <p>Enter a short text line that appears as the subject line for the email being sent.</p><p>Type the subject line into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The subject text must be enclosed within quotation marks.</p> Message <p>Enter the message text of the email being sent.</p><p>Type the message text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The message text must be enclosed within quotation marks.</p> Add attachment <p>Specify the name of a file to be attached to this email.</p><p>Select the appropriate file from the Browser window that appears when you click the button to the right of the Value input area for this field.</p> Secure SMTP (SMTPS) Select the appropriate Boolean value to indicate whether the site being accessed utilizes the SSL security protocol."},{"location":"recorder/appendix_a/#pop","title":"POP","text":"<p>Dragging a POP icon into your Script Tree opens a POP Building Block parameters dialog box.</p> <p>POP toolbox items include:</p> <ul> <li>POP-Retrieve: Retrieve all waiting messages.</li> <li>POP-Delete: Delete all messages from a POP mailbox.</li> </ul>"},{"location":"recorder/appendix_a/#pop-retrieve","title":"POP-Retrieve","text":"<p>Use the POP-Retrieve Building Block to retrieve all waiting messages, optionally together with a full set of header properties for each message.</p> <p>To enter a value:</p> <ol> <li>Drag the POP-Retrieve icon from the Internet Protocols toolbox into the Script Tree at the desired location.</li> </ol> <p>The POP-Retrieve Building Block parameters dialog box opens.</p> <p></p> <ol> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>For example, in the preceding figure, the comment area explains that the Message Properties field is a toggle that defines whether or not all the message properties should be retrieved.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The POP-Retrieve Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the POP connection is opened using the connection name, user name, and password specified by the user. The waiting messages are retrieved and the message property values are saved to a local structure.</p> <p> The fields in the POP-Retrieve Building Block parameters dialog box are described in the following table:</p> Field Name Description Server Name Host <p>Specify the name of the POP host connection.</p><p>Type the POP Host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The host name must be enclosed within quotation marks.</p> User Name <p>Specify a user ID for the POP connection.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The user name must be enclosed within quotation marks.</p> Password <p>Specify a password for authentication during the POP connection.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The password must be enclosed within quotation marks.</p> Message properties <p>A toggle that defines whether or not all the message properties should be retrieved.</p><p>Toggle Message Properties on or off depending on whether you select Yes or No from the list displayed in the drop-down list box that appears when you click the small arrow to the right of the Value input area for this field.</p> Secure POP (POPS) Select the appropriate Boolean value to indicate whether the site being accessed utilizes the SSL security protocol."},{"location":"recorder/appendix_a/#pop-delete","title":"POP-Delete","text":"<p>Use the POP-Delete Building Block to delete all messages from a POP mailbox.</p> <p>To enter a value:</p> <ol> <li>Drag the POP-Delete icon from the Internet Protocols toolbox into the Script Tree at the desired location. </li> </ol> <p>The POP-Delete Building Block parameters dialog box opens.</p> <p></p> <ol> <li>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box. </li> </ol> <p>For example, in the preceding figure, the comment area explains that the Server Name Host field is used to define the name of the mail server. WebLOAD Recorder automatically sends the user-specified name and password to the server when connecting.</p> <ol> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The POP-Delete Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, a POP connection is opened using the host name, user name, and password specified by the user. The code then loops through all messages on the server, deleting each message and printing a note to the user identifying the message that was just deleted. When all messages are deleted, the connection is closed.</p> <p></p> <p>The fields in the POP-Delete Building Block parameters dialog box are described in the following table:</p> Field Name Description Server Name Host <p>Specify the name of the POP server connection.</p><p>Type the POP host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The host name must be enclosed within quotation marks.</p> User Name <p>Specify a user ID for the POP connection.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The user name must be enclosed within quotation marks.</p> Password <p>Specify a password for authentication during the POP connection.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The password must be enclosed within quotation marks.</p> Secure POP (POPS) Select the appropriate Boolean value to indicate whether the site being accessed utilizes the SSL security protocol."},{"location":"recorder/appendix_a/#imap","title":"IMAP","text":"<p>Dragging an IMAP icon into your Script Tree opens an IMAP Building Block parameters dialog box.</p> <p>IMAP toolbox items include:</p> <ul> <li>IMAP-Connect: Start an IMAP session.</li> <li>IMAP-Retrieve: Retrieve all waiting messages.</li> <li>IMAP-Delete: Delete messages from an IMAP mailbox.</li> <li>IMAP-CreateMailbox: Create a new IMAP mailbox.</li> <li>IMAP-ListMailboxes: Generate a complete list of all IMAP mailboxes accessed through the current IMAP server.</li> <li>IMAP-DeleteMailbox: Delete an IMAP mailbox.</li> <li>IMAP-RenameMailbox: Rename an IMAP mailbox.</li> <li>IMAP-SubscribeMailbox: Subscribe to an IMAP mailbox.</li> <li>IMAP-UnsubscribeMailbox: Unsubscribe from an IMAP mailbox.</li> <li> <p>IMAP-ListSubscribeMailboxes: Generate a complete list of all subscribed IMAP mailboxes accessed through the current IMAP server</p> </li> <li> <p>IMAP-Search: Search for a specific email item within an IMAP mailbox.</p> </li> </ul>"},{"location":"recorder/appendix_a/#imap-connect","title":"IMAP-Connect","text":"<p>Use the IMAP-Connect Building Block to start an IMAP session. When you connect, you are connecting to a specific mailbox within the host, as specified by your User ID.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the IMAP-Connect icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the IMAP Server field is used to define the IMAP Server Name or IP to be used when logging in to the specified IMAP server. WebLOAD Recorder automatically sends the user- specified name and password to the IMAP server when connecting.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-Connect Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, an IMAP connection is opened using the connection name, local host name, user name, and password specified by the user.</p> </li> </ol> <p></p> <p>The fields in the IMAP-Connect Building Block parameters dialog box are described in the following table:</p> Field Name Description User Name <p>Specify an NT user ID for the IMAP connection.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The user name must be enclosed within quotation marks.</p> Password <p>Specify an NT password for authentication during the IMAP connection.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The password must be enclosed within quotation marks.</p> IMAP Server <p>Specify the IMAP server name or IP number.</p><p>Type the IMAP server name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The IMAP host is identified either through an IP number or a full name string. A server name string must be enclosed within quotation marks.</p> LocalHost <p>Specify the name of the local host.</p><p>Type the local host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The local host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-retrieve","title":"IMAP-Retrieve","text":"<p>Use the IMAP-Retrieve Building Block to retrieve all waiting messages, optionally together with a full set of header properties for each message.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the IMAP-Retrieve icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-Retrieve Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Items List field contains a list of mailbox items to be retrieved.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-Retrieve Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the specified message is retrieved from the specified mailbox and the message property values are saved to a local structure. A comment embedded in the code describes the message attributes stored in the imap JavaScript object.</p> </li> </ol> <p></p> <p>The fields in the IMAP-Retrieve Building Block parameters dialog box are described in the following table:</p> Field Name Description MailBox <p>Specify the name of the mailbox from which messages should be retrieved.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p> Items List <p>Specify the messages to be retrieved.</p><p>Type the message numbers into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The message numbers must be enclosed within quotation marks. You may specify a single message number, or you may specify a range, separated by a colon. For example, 1:10 returns messages one through ten. If you do not specify a message ID, the next message is returned.</p>"},{"location":"recorder/appendix_a/#imap-delete","title":"IMAP-Delete","text":"<p>Use the IMAP-Delete Building Block to delete messages from an IMAP mailbox.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the IMAP-Delete icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-Delete Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Items List field contains a list of mailbox items to be deleted.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-Delete Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the messages specified by the user are deleted from the mail box specified by the user.</p> </li> </ol> <p>The fields in the IMAP-Delete Building Block parameters dialog box are described in the following table:</p> <p></p> Field Name Description MailBox <p>Specify the name of the mailbox from which messages should be deleted.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p> Items List <p>Specify the messages to be deleted.</p><p>Type the message numbers into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The message numbers must be enclosed within quotation marks. You may specify a single message number, or you may specify a range, separated by a colon. For example, 1:10 deletes messages one through ten. If you do not specify a message ID, the current message is deleted.</p>"},{"location":"recorder/appendix_a/#imap-createmailbox","title":"IMAP-CreateMailbox","text":"<p>Use the IMAP-CreateMailbox Building Block to create a new IMAP mailbox.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the IMAP-CreateMailbox icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-CreateMailbox Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the MailBox field contains the name of the mail box to be created.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-CreateMailbox Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, a new mailbox is created using the name specified by the user.</p> </li> </ol> <p></p> <p>The field in the IMAP-CreateMailbox Building Block parameters dialog box is described in the following table:</p> Field Name Description MailBox <p>Specify the name of the mailbox to be created.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-listmailboxes","title":"IMAP-ListMailboxes","text":"<p>Use the IMAP-ListMailboxes Building Block to generate a complete list of all IMAP mailboxes accessed through the current IMAP server.</p> <p>To generate the list of IMAP mailboxes:</p> <ul> <li> <p>Drag the IMAP-ListMailboxes icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-ListMailboxes Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#imap-deletemailbox","title":"IMAP-DeleteMailbox","text":"<p>Use the IMAP-DeleteMailbox Building Block to delete an IMAP mailbox.</p> <p>To delete an IMAP mailbox:</p> <ol> <li> <p>Drag the IMAP-DeleteMailbox icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-DeleteMailbox Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the MailBox field contains the name of the mail box to be deleted.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-DeleteMailbox Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the mailbox specified by the user is deleted.</p> </li> </ol> <p></p> <p>The field in the IMAP-DeleteMailbox Building Block parameters dialog box is described in the following table:</p> Field Name Description MailBox <p>Specify the name of the mailbox to be deleted.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-renamemailbox","title":"IMAP-RenameMailbox","text":"<p>Use the IMAP-RenameMailbox Building Block to rename an IMAP mailbox.</p> <p>To rename an IMAP mailbox:</p> <ol> <li> <p>Drag the IMAP-RenameMailbox icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-RenameMailbox Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area contains the name of the old mail box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-RenameMailbox Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode. In the script, the mailbox is renamed using the name specified by the user.</p> </li> </ol> <p>The fields in the IMAP-RenameMailbox Building Block parameters dialog box are described in the following table:</p> <p> Field Name Description Old MailBox name <p>Specify the name of the mailbox to be renamed.</p><p>Type the old mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p> New Mailbox name <p>Specify the new name of the mailbox.</p><p>Type the new mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-subscribemailbox","title":"IMAP-SubscribeMailbox","text":"<p>Use the IMAP-SubscribeMailbox Building Block to subscribe to an IMAP mailbox.</p> <p>To subscribe to an IMAP mailbox:</p> <ol> <li> <p>Drag the IMAP-SubscribeMailbox icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-SubscribeMailbox Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area contains the name of the mail box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-SubscribeMailbox Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the mailbox is renamed using the name specified by the user.</p> </li> </ol> <p>The field in the IMAP-SubscribeMailbox Building Block parameters dialog box is described in the following table:</p> <p></p> Field Name Description MailBox name <p>Specify the name of the mailbox to which to subscribe.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-unsubscribemailbox","title":"IMAP-UnsubscribeMailbox","text":"<p>Use the IMAP-UnsubscribeMailbox Building Block to unsubscribe from an IMAP mailbox.</p> <p>To unsubscribe from an IMAP mailbox:</p> <ol> <li> <p>Drag the IMAP-UnsubscribeMailbox icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-UnsubscribeMailbox Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area contains the name of the mail box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-UnsubscribeMailbox Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the mailbox is renamed using the name specified by the user.</p> </li> </ol> <p>The field in the IMAP-UnsubscribeMailbox Building Block parameters dialog box is described in the following table:</p> <p></p> Field Name Description MailBox name <p>Specify the name of the mailbox from which to unsubscribe.</p><p>Type the mailbox name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The mailbox name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#imap-listsubscribedmailboxes","title":"IMAP-ListSubscribedMailboxes","text":"<p>Use the IMAP-ListSubscribedMailboxes Building Block to generate a complete list of all subscribed IMAP mailboxes.</p> <p>To generate the list of subscribed IMAP mailboxes:</p> <ul> <li> <p>Drag the IMAP-ListSubscribedMailboxes icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-ListSubscribedMailboxes Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#imap-search","title":"IMAP-Search","text":"<p>Use the IMAP-Search Building Block to search for a specific email item within an IMAP mailbox.</p> <p>To search for a specific email item in an IMAP mailbox:</p> <ol> <li> <p>Drag the IMAP-Search icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The IMAP-Search Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box. </p> <p>For example, in the preceding figure, the comment area explains that the MailBox field contains the name of the mail box to be searched.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The IMAP-Search Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the mailbox specified by the user is searched for all mail items containing the string \u201ctimesheet\u201d.</p> </li> </ol> <p>  The fields in the IMAP-Search Building Block parameters dialog box are described in the following table:</p> Field  Name Description MailBox Specify the name of the mailbox to be searched.  Type the mailbox name into  the input-text window that appears when you click the small arrow to the  right of the Value input area for this field. The mailbox name must be  enclosed within quotation marks. Search String Specify the search criteria for the current mailbox search. Valid  search criteria include: ALL - All messages in the  mailbox - this is the default initial key for AND-ing. ANSWERED - Messages with the \\Answered flag set. BCC - Messages that  contain the specified string in the envelope structure\u2019s BCC field. BEFORE - Messages whose internal date is  earlier than the specified date. BODY - Messages that contain the specified  string in the body of the message. CC - Messages that contain  the specified string in the envelope structure\u2019s CC field. DELETED - Messages with the \\Deleted flag  set. DRAFT - Messages with the \\Draft flag set. FLAGGED - Messages with the \\Flagged flag set. FROM - Messages that  contain the specified string in the envelope structure\u2019s FROM field. HEADER - Messages that  have a header with the specified field-name and that contains the specified  string in the field-body. KEYWORD - Messages with the specified  keyword set. LARGER - Messages with a size larger than the  specified number of octets. NEW Messages that have the  \\Recent flag set but not the \\Seen flag. This is functionally equivalent to  \u201c(RECENT UNSEEN)\u201d. NOT - Messages that do not match the specified  search key. OLD - Messages that do not have the \\Recent flag  set. This is  functionally equivalent to \u201cNOT RECENT\u201d (as  opposed to \u201cNOT NEW\u201d). ON - Messages whose internal date is within  the specified date. OR - Messages that match either search key. RECENT - Messages that have the \\Recent flag set. SEEN - Messages that have the \\Seen flag  set. SENTBEFORE - Messages  whose Date: header is earlier than the specified date. SENTON - Messages whose Date: header is within the  specified date. SENTSINCE - Messages whose Date: header is  within or later than the specified date. SINCE - Messages whose internal date is  within or later than the specified date. SMALLER - Messages with an RFC822.SIZE  smaller than the specified number of octets. SUBJECT - Messages that  contain the specified string in the envelope structure\u2019s SUBJECT field. TEXT - Messages that contain the specified string  in the header or body of the message. TO - Messages that contain the specified  string in the envelope structure\u2019s TO field. UID - Messages with unique  identifiers corresponding to the specified unique identifier set. UNANSWERED - Messages that do not have the  \\Answered flag set. UNDELETED - Messages that do not have the  \\Deleted flag set. UNDRAFT - Messages that do not have the  \\Draft flag set. UNFLAGGED - Messages that do not have the  \\Flagged flag set. UNKEYWORD - Messages that do not have the  specified keyword set. UNSEEN - Messages that do not have the  \\Seen flag set. This Building Block  returns a string containing the IDs of messages that meet the search criteria  if successful, an exception if unsuccessful."},{"location":"recorder/appendix_a/#nntp","title":"NNTP","text":"<p>Dragging an NNTP icon into your Script Tree opens an NNTP Building Block parameters dialog box.</p> <p>NNTP toolbox items include:</p> <ul> <li>NNTP-Connect: Start an NNTP session.</li> <li>NNTP-GetArticle: Retrieve articles from the specified news group from the NNTP server.</li> <li>NNTP-GetArticleCount: Retrieve the number of articles in the specified news group from the NNTP server.</li> <li>NNTP-PostArticle: Post articles to the specified news group.</li> </ul>"},{"location":"recorder/appendix_a/#nntp-connect","title":"NNTP-Connect","text":"<p>Use the NNTP-Connect Building Block to start an NNTP session. When you connect, you are connecting to a specific.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the NNTP-Connect icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The NNTP-Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Server Host Name field is used to define the NNTP Server Name or IP to be used when logging in to the specified NNTP server. WebLOAD Recorder automatically sends the user-specified name and password to the NNTP server when connecting.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The NNTP-Connect Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, an NNTP connection is opened using the server name, user name, and password specified by the user.</p> </li> </ol> <p> The fields in the NNTP-Connect Building Block parameters dialog box are described in the following table:</p> Field Name Description Server Host Name <p>Specify the NNTP server name or IP number.</p><p>Type the NNTP server name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The NNTP host is identified either through an IP number or a full name string. A server name string must be enclosed within quotation marks.</p> User Name <p>Specify an NT user ID for the NNTP connection.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The user name must be enclosed within quotation marks.</p> Password <p>Specify an NT password for authentication during the NNTP connection.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The password must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#nntp-getarticle","title":"NNTP-GetArticle","text":"<p>Use the NNTP-GetArticle Building Block to retrieve articles from the specified news group from the NNTP server.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the NNTP-GetArticle icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The NNTP-GetArticle Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Article ID field contains the ID number of the news article to be retrieved.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The NNTP-GetArticle Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the specified article is retrieved from the specified news group.</p> </li> </ol> <p> The fields in the NNTP-GetArticle Building Block parameters dialog box are described in the following table:</p> Field Name Description Group Name <p>Specify the name of the news group from which articles should be retrieved.</p><p>Type the news group name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The news group name must be enclosed within quotation marks.</p> Article ID <p>Specify the ID number of the article to be retrieved.</p><p>Type the ID number into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#nntp-getarticlecount","title":"NNTP-GetArticleCount","text":"<p>Use the NNTP-GetArticleCount Building Block to retrieve the number of articles in the specified news group from the NNTP server.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the NNTP-GetArticleCount icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The NNTP-GetArticleCount Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Group Name field contains the name of the news group whose articles are to be counted.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The NNTP-GetArticleCount Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode. In the script, the number of articles appearing in the specified news group is returned.</p> </li> </ol> <p> The field in the NNTP-GetArticleCount Building Block parameters dialog box is described in the following table:</p> Field Name Description Group Name <p>Specify the name of the news group from which articles should be counted.</p><p>Type the news group name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The news group name must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#nntp-postarticle","title":"NNTP-PostArticle","text":"<p>Use the NNTP-PostArticle Building Block to post articles to the specified news group.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the NNTP-PostArticle icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The NNTP-PostArticle Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the From field contains the name of the person sending the news article to be posted on the news group.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The NNTP-PostArticle Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> In the script, the article text is posted to the specified news group. The fields in the NNTP-PostArticle Building Block parameters dialog box are described in the following table:</p> Field Name Description From <p>Specify the name of the person sending the email.</p><p>Type the sender\u2019s name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The name must be enclosed within quotation marks.</p> Subject <p>Enter a short text line that appears as the subject line for the email being sent.</p><p>Type the subject line into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The subject text must be enclosed within quotation marks.</p> Organization Specify the name of the organization to which the recipient belongs. To <p>Specify the name of the person to whom the email should be sent.</p><p>Type the receiver\u2019s name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The name must be enclosed within quotation marks.</p> ReplyTo <p>Specify the name of the person to whom the recipient should reply.</p><p>Type the name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The name must be enclosed within quotation marks.</p> Article Text <p>Enter the message text of the email being sent.</p><p>Type the message text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The message text must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#tcp","title":"TCP","text":"<p>Dragging a TCP icon into your Script Tree opens a TCP Building Block parameters dialog box.</p> <p>TCP toolbox items include:</p> <ul> <li>TCP-Connect: Open a TCP connection.</li> <li>TCP-Send: Send a TCP request.</li> <li>TCP-Receive: Return all responses from the TCP host since the last TCP-Send action.</li> <li>TCP-Erase: Clear the contents of the TCP document object.</li> </ul>"},{"location":"recorder/appendix_a/#tcp-connect","title":"TCP-Connect","text":"<p>Use the TCP-Connect Building Block to open a TCP connection.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the TCP-Connect icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TCP-Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Connection Timeout field is used to set the amount of time the system will wait for a TCP connection to be established before timing out. Time is defined in milliseconds.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The TCP-Connect Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, a TCP connection is opened using the host names specified by the user.</p> </li> </ol> <p></p> <p>The fields in the TCP-Connect Building Block parameters dialog box are described in the following table:</p> Field Name Description Host Name <p>Specify the name of the TCP destination host.</p><p>Type the TCP Host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The TCP host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> Port <p>Specify the port to which you are connecting.</p><p>Type the port number into the input field. If you do not specify a value, the default TCP port is used.</p> Connection Timeout <p>Specify the amount of time the system will wait for a TCP connection to be established before timing out.</p><p>Type the timeout value in the input field. Time is defined in milliseconds.</p> Outfile <p>Specify the name of the file into which the TCP output stream should be stored.</p><p>Type the Outfile name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The file name string must be enclosed within quotation marks.</p> LocalHost <p>Specify the name of the local host.</p><p>Type the local host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The local host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#tcp-send","title":"TCP-Send","text":"<p>Use the TCP-Send Building Block to send a TCP request.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the TCP-Send icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TCP-Send Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Send String designates the text string to be sent.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> </li> <li> <p>Click OK.</p> <p>The TCP-Send Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the TCP-Send Building Block parameters dialog box are described in the following table:</p> Field Name Description Next Prompt <p>Specify a distinctive text string to be identified in the next string received from the host. If used, this string must appear in all communications received from the TCP host.</p><p>Type the prompt string into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The string must be enclosed within quotation marks.</p> Next Size <p>Specify the size, in bytes, of the expected data. If used, this size specification limits the length of all communications received from the TCP host.</p><p>Type the size value in the input area for this field.</p> Send String <p>Enter the text being sent to the TCP host.</p><p>Type the string text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The message text must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#tcp-receive","title":"TCP-Receive","text":"<p>Use the TCP-Receive Building Block to return all responses from the TCP host since the last TCP-Send action. A TCP-Receive action returns to the script when the NextPrompt, NextSize, or Timeout conditions set with a previous TCP-Send action are met. If more than one of these properties is specified, the method returns to the script when the first one is met. Subsequent uses of TCP-Receive find the next instance of the limiting property, returning additional information from the buffer. The content returned depends upon which of the three limiting properties triggered the return.</p> <p>To enter a value:</p> <ul> <li> <p>Drag the TCP-Receive icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TCP-Receive Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#tcp-erase","title":"TCP-Erase","text":"<p>Use the TCP-Erase Building Block to clear the contents of the TCP document object.</p> <p>To enter a value:</p> <ul> <li> <p>Drag the TCP-Erase icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TCP-Erase Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#telnet","title":"TELNET","text":"<p>Dragging a TELNET icon into your Script Tree opens a TELNET Building Block parameters dialog box.</p> <p>TELNET toolbox items include:</p> <ul> <li>TELNET-Connect: Open a TELNET connection.</li> <li>TELNET-Receive: Receive a TELNET communication.</li> <li>TELNET-Send: Send a TELNET communication.</li> <li>TELNET-Erase: Clear the contents of the TELNET document object.</li> </ul>"},{"location":"recorder/appendix_a/#telnet-connect","title":"TELNET-Connect","text":"<p>Use the TELNET-Connect Building Block to open a TELNET connection.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the TELNET-Connect icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TELNET-Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Local Host field is used to define the name of the local host for this TELNET session.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The TELNET-Connect Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, a TELNET connection is opened using the host names specified by the user.</p> </li> </ol> <p> The fields in the TELNET-Connect Building Block parameters dialog box are described in the following table:</p> Field Name Description Host Name <p>Specify the name of the TELNET destination host.</p><p>Type the TELNET Host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The TELNET host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> Connection Timeout <p>Specify the amount of time the system will wait for a TELNET connection to be established before timing out.</p><p>Type the timeout value in the input field. Time is defined in milliseconds.</p> Outfile <p>Specify the name of the file into which the TELNET output stream should be stored.</p><p>Type the Outfile name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The file name string must be enclosed within quotation marks.</p> LocalHost <p>Specify the name of the local host.</p><p>Type the local host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The local host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#telnet-receive","title":"TELNET-Receive","text":"<p>Use the TELNET-Receive Building Block to receive a TELNET communication.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the TELNET-Receive icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TELNET-Receive Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the NextPrompt String designates the text string that must be found and identified in the next communication received via TELNET.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The TELNET-Receive Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the TELNET-Receive Building Block parameters dialog box are described in the following table:</p> Field Name Description NextPrompt String <p>Specify a distinctive text string to be identified in the next string received from the host. If used, this string must appear in all communications received from the TELNET host.</p><p>Type the prompt string into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The string must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#telnet-send","title":"TELNET-Send","text":"<p>Use the TELNET-Send Building Block to send a TELNET communication.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the TELNET-Send icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TELNET-Send Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Send String designates the text string to be sent.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The TELNET-Send Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The field in the TELNET-Send Building Block parameters dialog box is described in the following table:</p> Field Name Description Send String <p>Enter the text being sent to the TELNET host.</p><p>Type the string text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The message text must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#telnet-erase","title":"TELNET-Erase","text":"<p>Use the TELNET-Erase Building Block to clear the contents of the TELNET document object.</p> <p>To enter a value:</p> <ul> <li> <p>Drag the TELNET-Erase icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The TELNET-Erase Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#udp","title":"UDP","text":"<p>Dragging a UDP icon into your Script Tree opens a UDP Building Block parameters dialog box.</p> <p>UDP toolbox items include:</p> <ul> <li>UDP-Bind: Create a connection to a UDP port.</li> <li>UDP-Broadcast: Broadcast data to the local net.</li> <li>UDP-Receive: Return all responses from the host since the last UDP-Send action.</li> <li>UDP-Send: Send a UDP communication.</li> <li>UDP-Erase: Clear the contents of the UDP document object.</li> </ul>"},{"location":"recorder/appendix_a/#udp-bind","title":"UDP-Bind","text":"<p>Use the UDP-Bind Building Block to create a connection to a UDP port.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the UDP-Bind icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The UDP-Bind Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the InBuffer Size field is used to define the amount of space allocated to the incoming data buffer for this UDP session.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The UDP-Bind Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the InitAgenda() function includes commands to include the WebLOAD Recorder JIPP and UDP library files. The InitClient() function includes a command to define a separate UDP object for each client. Within the main body of the script, a UDP connection is opened using the connection parameters specified by the user. The TerminateClient() function automatically closes the connection and deletes all objects created for clients during test sessions.</p> </li> </ol> <p> The fields in the UDP-Bind Building Block parameters dialog box are described in the following table:</p> Field Name Description LocalHost <p>Specify the name of the local host.</p><p>Type the local host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The local host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> Connection Timeout <p>Specify the amount of time the system will wait for a UDP connection to be established before timing out.</p><p>Type the timeout value in the input field. Time is defined in milliseconds.</p> Outfile <p>Specify the name of the file into which the UDP output stream should be stored.</p><p>Type the Outfile name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The file name string must be enclosed within quotation marks.</p> Requested Packets <p>Specify the number of requested packets per UDP communication.</p><p>Type the number of requested packets per communication for this session in the Value input area. The default value is 100.</p> InBuffer Size <p>Specify the amount of space allocated to the incoming data buffer for this UDP session.</p><p>Type the input buffer size for this session in the Value input area. The default value is 300.</p> OutBuffer Size <p>Specify the amount of space allocated to the outgoing data buffer for this UDP session.</p><p>Type the output buffer size for this session in the Value input area. The default value is 300.</p> MaxDatagram Size <p>Specify the maximum datagram size, in bytes, for this UDP session.</p><p>Type the maximum datagram size for this session in the Value input area. The default value is 200.</p>"},{"location":"recorder/appendix_a/#udp-broadcast","title":"UDP-Broadcast","text":"<p>Use the UDP-Broadcast Building Block to broadcast data to the local net.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the UDP-Broadcast icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The UDP-Broadcast Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Broadcast String field is used to define the string to be broadcast.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The UDP-Broadcast Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>In the script, the string defined by the user is broadcast via the specified port.</p> </li> </ol> <p> The fields in the UDP-Broadcast Building Block parameters dialog box are described in the following table:</p> Field Name Description Number of Responses <p>Specify the number of responses the testing machine waits for before proceeding. Use this property to make sure that all network hosts have responded. To specify an unlimited number of responses, specify a Number of Responses value of zero.</p><p>Type the timeout value in the input field.</p> Port <p>Specify the port to which you are connecting.</p><p>Type the port number into the input field. If you do not specify a value, the default TCP port is used.</p> Broadcast String <p>Enter the text to be broadcast on the net.</p><p>Type the string text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The text must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#udp-receive","title":"UDP-Receive","text":"<p>Use the UDP-Receive Building Block to return all responses from the host since the last UDP-Send action. A UDP-Receive action is completed when either the RequestedPackets or Timeout conditions set when the UDP connection was first established is met. Subsequent uses of UDP-Receive find the next instance of the limiting property, returning additional information from the buffer.</p> <p>Use the UDP-Send Building Block to send a UDP communication.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the UDP-Send icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The UDP-Send Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Send String designates the text string to be sent.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The UDP-Send Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the UDP-Send Building Block parameters dialog box are described in the following table:</p> Field Name Description Destination Host <p>Specify the name of the destination host.</p><p>Type the destination host name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The destination host is identified either through a DNS number or a full name string. A host name string must be enclosed within quotation marks.</p> Port <p>Specify the port to which you are connecting.</p><p>Type the port number into the input field. If you do not specify a value, the default port is used.</p> Send String <p>Enter the text being sent to the specified host.</p><p>Type the string text into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. The message text must be enclosed within quotation marks.</p>"},{"location":"recorder/appendix_a/#udp-erase","title":"UDP-Erase","text":"<p>Use the UDP-Erase Building Block to clear the contents of the UDP document object.</p> <p>To enter a value:</p> <ul> <li> <p>Drag the UDP-Erase icon from the Internet Protocols toolbox into the Script Tree at the desired location.</p> <p>The UDP-Erase Building Block is added to the Script  Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ul>"},{"location":"recorder/appendix_a/#the-webload-recorder-iot-protocols-toolbox","title":"The WebLOAD Recorder IoT Protocols Toolbox","text":"<p>Use the WebLOAD Recorder IoT Protocols Building Blocks to simply and easily add IoT protocols functionality to your test session script without having to write numerous lines of code.</p> <p>To add IoT Protocols Building Blocks to a test script directly through the WebLOAD Recorder GUI:</p> <ul> <li> <p>Drag the selected IoT Protocols icon from the IoT Protocols toolbox and drop it into the Script Tree at the appropriate point.</p> <p>WebLOAD Recorder automatically adds the appropriate JavaScript code to your test session script.</p> </li> </ul> <p>The following are the available IoT Protocols building blocks:</p> <p></p> <p>Each Building Block opens a different dialog box. Enter the required values in the Value field. Explanations are provided at the bottom of the dialog box for each parameter as it is selected in the dialog box.</p> <p>The field descriptions in this section assume a basic familiarity with IoT protocols terminology.</p>"},{"location":"recorder/appendix_a/#mqtt-connect","title":"MQTT-Connect","text":"<p>The MQTT-Connect Building Block enables you to connect to the broker (i.e., the MQTT server).</p> <p>To insert an MQTT-Connect Building Block:</p> <ol> <li> <p>Drag the MQTT-Connect icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The MQTT-Connect Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Broker Address The address of the MQTT broker. For example: \u201cmqtt.example.com\u201d Broker Port The MQTT Broker port number. For  example: 1883. Client ID The MQTT client ID. In some cases this can be random text, such as \u201crandom123\u201d. User Name The MQTT user name. Password The MQTT Client password. </li> <li> <p>Click OK.</p> </li> </ol> <p>The MQTT-Connect node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#mqtt-subscribe","title":"MQTT-Subscribe","text":"<p>The MQTT-Subscribe Building Block enables you to subscribe to a topic.</p> <p>To insert an MQTT-Subscribe Building Block:</p> <ol> <li> <p>Drag the MQTT-Subscribe icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The MQTT-Subscribe Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Topic Name The MQTT topic name. For example: \u201cany topic\\my topic\u201d. </li> <li> <p>Click OK.</p> </li> </ol> <p>The MQTT-Subscribe node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#mqtt-send","title":"MQTT-Send","text":"<p>The MQTT-Send Building Block enables you to send MQTT messages.</p> <p>To insert an MQTT-Send Building Block:</p> <ol> <li> <p>Drag the MQTT-Send icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The MQTT-Send Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Topic Name The MQTT topic name. Message The MQTT message to publish. </li> <li> <p>Click OK.</p> </li> </ol> <p>The MQTT-Send node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#mqtt-getmessages","title":"MQTT-GetMessages","text":"<p>The MQTT-GetMessages Building Block enables you to get MQTT messages.</p> <p>To insert an MQTT-GetMessages Building Block:</p> <ol> <li> <p>Drag the MQTT-GetMessages icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The MQTT-GetMessages Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Sleep Time The default sleep time. </li> <li> <p>Click OK.</p> </li> </ol> <p>The MQTT-GetMessages node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#amqp-connect","title":"AMQP-Connect","text":"<p>The AMQP-Connect Building Block enables you to connect to the broker.</p> <p>To insert an AMQP-Connect Building Block:</p> <ol> <li> <p>Drag the AMQP-Connect icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The AMQP-Connect Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Broker Address The address of the AMQP broker. Broker Port The AMQP port number. UserName/VirtualHost The AMQP Client ID. Password The AMQP Client password. </li> <li> <p>Click OK.</p> </li> </ol> <p>The AMQP-Connect node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#amqp-send","title":"AMQP-Send","text":"<p>The AMQP-Send Building Block enables you to send AMQP messages.</p> <p>To insert an AMQP-Send Building Block:</p> <ol> <li> <p>Drag the AMQP-Send icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The AMQP-Send Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Topic Name The AMQP topic name. Message The AMQP message to publish. </li> <li> <p>Click OK.</p> </li> </ol> <p>The AMQP-Send node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#amqp-getmessages","title":"AMQP-GetMessages","text":"<p>The AMQP-GetMessages Building Block enables you to get AMQP messages.</p> <p>To insert an AMQP-GetMessages Building Block:</p> <ol> <li> <p>Drag the AMQP-GetMessages icon from the IoT toolbox into the Script Tree at the desired location.</p> <p>The AMQP-GetMessages Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Topic Name The AMQP Topic name. Sleep Time The sleep time. </li> <li> <p>Click OK.</p> </li> </ol> <p>The AMQP-GetMessages node is added to the Script Tree.</p>"},{"location":"recorder/appendix_a/#the-webload-recorder-database-toolbox","title":"The WebLOAD Recorder Database Toolbox","text":"<p>The WebLOAD Recorder Database Toolbox includes a complete set of database Building Blocks. Use the WebLOAD Recorder database Building Blocks to simply and easily add database activities to your test session script.</p> <p>To add database Building Blocks to a test script directly through WebLOAD Recorder:</p> <ul> <li>Drag the selected database Building Block from the Database toolbox and drop it into the Script Tree at the appropriate point.</li> </ul> <p>The following are the database Building Blocks available in WebLOAD Recorder:</p> <p></p> <p>Each database Building Block opens a different dialog box. Enter the required values in the Value field. Explanations are provided at the bottom of the dialog box for each parameter as it is selected in the dialog box.</p> <p>Note: The values that appear in the Wizard\u2019s Value area are the default values for each field. In most cases, the default value for string variables is an empty string, indicated in the Value area by a set of empty quotation marks. If you are entering your own value for a string field, the new string must also be enclosed within quotation marks. Fields that were not assigned a value in the dialog box are left as empty fields in the script code.</p> <p>Once you have finished defining the new database Building Block, the new activity is reflected in the Script Tree. A database Building Block is added to the Script Tree for each database Building Block defined. WebLOAD Recorder automatically adds the corresponding JavaScript code to your test session script.</p> <p>To see the complete sequence of JavaScript code for all the Database Building Blocks that have been added to the Script Tree, click the Agenda root node in the Script Tree and select the JavaScript View tab.</p> <p>Notes: The JavaScript code for each of the Database Building Blocks can be found in the DBBuildingBlocks.js library file, which is part of the Include directory under the WebLOAD installation directory. The JavaScript code that implements these Database Building Blocks is automatically inserted to the appropriate locations within the script. Code lines may be added to the initialization phase (within the InitAgenda() function), in the main body of the script, or to the termination phase (within the TerminateAgenda() function).</p> <p>The JavaScript code for that object can be edited, as described in Using the JavaScript Editor *.</p> <p>The field descriptions in this section assume a basic familiarity with database terminology. To take full advantage of the Database Building Blocks, testers must understand how to work with ADO objects and have a basic knowledge of SQL command syntax. WebLOAD Recorder automatically inserts into the test session script the appropriate JavaScript code to implement the database commands that the tester specifies. However, it is the tester\u2019s responsibility to specify valid database commands.</p>"},{"location":"recorder/appendix_a/#opendb","title":"OpenDB","text":"<p>Use the OpenDB Building Block to open and close a specified database.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the OpenDB icon from the Database toolbox into the Script Tree at the desired location. </p> <p>The OpenDB Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Database Type field is used to specify the type of database to be opened.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described Table.</p> <p>Note: The Database toolbox is currently available only for database activities through ADO under a Windows operating system.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The OpenDB Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>Note: The OpenDB Building Block automatically adds the JavaScript code required to both open and close the specified database. No \u201cCloseDB\u201d Building Block is necessary.</p> <p></p> <p>The fields in the OpenDB Building Block parameters dialog box are described in the following table:</p> Field Name Description Database type <p>Specify the type of database to be opened.</p><p>Select the appropriate value from the drop-down list that appears when you click the Value input area for this field.</p><p>The options include MS-Access and SQL Server databases.</p> Server name (SQL Server) <p>Specify the name of the machine where the database is running.</p><p>Type the appropriate server name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Database name (SQL Server) <p>Specify the name of the database on the SQL server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> User name (SQL Server) <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Password (SQL Server) <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> File name (MDB File) <p>Specify the full path for an MDB file.</p><p>Select the appropriate file from the Browser window that appears when you click to the right of the Value input area for this field.</p><p>Relevant for MDB databases only.</p> Connection name <p>Specify the name of the connection variable.</p><p>Type the connection name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. This connection name variable is used throughout the script file to access and work with this database.</p>"},{"location":"recorder/appendix_a/#oracle-opendb","title":"Oracle OpenDB","text":"<p>Use the Oracle OpenDB Building Block to open and close an Oracle database.</p> <p>Note: To use the Oracle OpenDB Building Block you must first install the Oracle Client. The Oracle Client must be installed on the same machine as the WebLOAD Recorder.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the Oracle OpenDB icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The OpenDB Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Database Type field is used to specify the type of database to be opened.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> <p>Note: The Database toolbox is currently available only for database activities through ADO under a Windows operating system.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The Oracle OpenDB Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>Note: The Oracle OpenDB Building Block automatically adds the JavaScript code required to both open and close the specified database. No \u201cCloseDB\u201d Building Block is necessary.</p> <p></p> <p>The fields in the Oracle OpenDB Building Block parameters dialog box are described in the following table:</p> Field Name Description Database name <p>Specify the name of the database on the Oracle server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for Oracle Server databases only.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for Oracle Server databases only.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for Oracle Server databases only.</p> Connection name <p>Specify the name of the connection variable.</p><p>Type the connection name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field. This connection name variable is used throughout the script file to access and work with this database.</p>"},{"location":"recorder/appendix_a/#mysql-opendb","title":"MySQL OpenDB","text":"<p>Use the MySQL OpenDB Building Block to open and close a MySQL database.</p> <p>Note: Before connecting to the MySQL database, verify that the MySQL connector/ODBC 3.5.1 Driver is installed on your computer. In addition, verify that the MySQL port (3306) is open on the local/remote firewall and that the MySQL database has the right grant permission for the user and IP address from which you are connecting.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the MySQL OpenDB icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The MySQLOpenDB Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The MySQL Open DB Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p></p> <p>The fields in the MySQL OpenDB Building Block parameters dialog box are described in the following table:</p> Field Name Description Server name (MySQL Server) Specify the name of the MySQL Database server. Database name <p>Specify the name of the database on the MySQL Database server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Connection name The connection to use to open the database."},{"location":"recorder/appendix_a/#execute-command","title":"Execute Command","text":"<p>Use the Execute Command Building Block to add simple database commands to your test session script. The database is identified using the Connection Name variable defined through the Oracle OpenDB and OpenDB Building Blocks. The Execute Command Building Block is used for database commands that do not involve getting a return value, such as Insert, Update, and Delete.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the Execute Command icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The Execute Command Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, the comment area in the preceding figure explains that the SQL/Command Expression field is used to enter the command to be executed.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name.</p> <p>For example, to enter a text string, type the complete text into the input-text window that appears when you click the small arrow to the right of the Value input area for the field, as illustrated in the preceding figure.</p> <p></p> </li> <li> <p>Click OK.</p> <p>The Execute Command Building Block is added to the Script Tree and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>Note: The database connection is identified with the variable defined in the OpenDB and Oracle OpenDB Building Block parameters dialog boxes.</p> <p> </p> <p>The fields in the Execute Command Building Block parameters dialog box are described in the following table:</p> Field Name Description Connection name <p>Specify the name of the connection variable.</p><p>Type the connection name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The connection name variable must match the name of a database connection that was previously opened with the OpenDB Building Block. The same connection name is used throughout the script file to access and work with this database.</p> SQL/command expression <p>Specify the SQL command to be executed.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#fetch-data","title":"Fetch Data","text":"<p>Use the Fetch Data Building Block to add database commands that return data values to the script. The database is identified using the Connection Name variable defined through the OpenDB and Oracle OpenDB Building Blocks.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the Fetch Data icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The Fetch Data Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Cursor Type field is used to define the level of access and visibility requested for this database Building Block.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> <p>For example, to select a value from a pre-defined list, select the Cursor Type choice from the list of options displayed in the drop-down list box that appears when you click the small arrow to the right of the Value input area for this field.</p> </li> <li> <p>Click OK.</p> <p>The Fetch Data Building Block is added to the Script Tree. The JavaScript code, including the TerminateClient() function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>The fields in the Fetch Data Building Block parameters dialog box are described in the following table:</p> Field Name Description Connection name <p>Specify the name of the connection variable.</p><p>Type the connection name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The connection name variable must match the name of a database connection that was previously opened with the OpenDB Building Block. The same connection name is used throughout the script file to access and work with this database. By default, the connection name defined in the most recent OpenDB Building Block appears in this field.</p> RecordSet name <p>Specify the name of the database RecordSet variable.</p><p>Type the RecordSet name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>The same RecordSet name is used throughout the script file to access and work with records from this database.</p> SQL expression <p>Specify the SQL command to be executed.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Cursor type <p>Specify the level of access and visibility requested for this database Building Block.</p><p>Select the Cursor Type choice from the list of options displayed in the drop-down list box that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#db-getline","title":"DB GetLine","text":"<p>When running large load tests, the user input is usually read automatically from an input file. To read many rows of input data from a simple text file, WebLOAD uses the GetLine() I/O command. To read large amounts of input data from an MS-Access or SQL Server database, WebLOAD uses the equivalent DB GetLine database Building Block.</p> <p>The DB GetLine Building Block reads complete records, one by one, from a specified database table. The database table is exported into a temporary file, from which the records are read, one record per line.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the DB GetLine icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The DB GetLine Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The DB GetLine Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda() and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The f&gt;ields in the DB GetLine Building Block parameters dialog box are described in the following table:</p> Field Name Description Database type <p>Specify the type of database to be opened.</p><p>Select the appropriate value from the drop-down list that appears when you click the Value input area for this field.</p><p>The options include MS-Access and SQL Server databases.</p> Server name (SQL Server) <p>Specify the name of the machine where the database is running.</p><p>Type the appropriate server name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Database name (SQL Server) <p>Specify the name of the database on the SQL server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> User name (SQL Server) <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Password (SQL Server) <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> File name (MDB File) <p>Specify the full path for an MDB file.</p><p>Select the appropriate file from the Browser window that appears when you click the button to the right of the Value input area for this field.</p><p>Relevant for MDB databases only.</p> SQL expression <p>Specify the SQL command to be executed.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p></p><p> Note: To take full advantage of the Database Building Blocks, testers must understand how to work with ADO objects and</p><p>have a basic knowledge of SQL command syntax. WebLOAD Recorder automatically inserts into the test session script the appropriate JavaScript code to implement specified database commands. However, it is the tester who must specify the database commands to be inserted. WebLOAD Recorder cannot correct a tester\u2019s SQL syntax errors.</p> Temporary file name <p>Name to use for the temporary file that will contain the output data from the SQL statement.</p><p>This temporary file will serve as an input file to the test session script. Data from this file is read line by line, where each data record is a separate line.</p> The delimiter character between the fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> Max number of records Specifies the maximum number of records to read from the database. Number of records per Generator <p>Specifies the maximum number of records to be read from the database by each generator.</p><p>This field is intended for instances of testing by a network of generators. Multiple generators do not merge or share data. Database access is synchronized between generators, similar to WebLOAD Recorder\u2019s synchronization of Global Parameters.</p><p>Each generator is allowed access to a specific number of records, enabling all the generators to work with the database in parallel. Record access is divided evenly between generators. The total number of records allocated to all generators must be equal to the Maximum Number of Records field value. For example, 1000 records may be divided between 10 Load Generators, with 100 records allocated per generator.</p>"},{"location":"recorder/appendix_a/#oracle-db-getline","title":"Oracle DB GetLine","text":"<p>When running large load tests, the user input is usually read automatically from an input file. To read many rows of input data from a simple text file, WebLOAD uses the Oracle GetLine() I/O command. To read large amounts of input data from an Oracle database, WebLOAD uses the equivalent Oracle DBGetLine database Building Block.</p> <p>The Oracle DB GetLine Building Block reads complete records, one by one, from a specified database table. The database table is exported into a temporary file, from which the records are read, one record per line.</p> <p>Note: To use the Oracle DB GetLine Building Block you must first install the Oracle Client. The Oracle Client must be installed on the same machine as the WebLOAD Recorder.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the Oracle DB GetLine icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The Oracle DB GetLine Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The Oracle DB GetLine Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda() and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the Oracle DB GetLine Building Block parameters dialog box are described in the following table:</p> Field Name Description Database name <p>Specify the name of the database on the Oracle Database server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> SQL expression <p>Specify the SQL command to be executed. Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Note: To take full advantage of the Database Building Blocks, testers must understand how to work with ADO objects and have a basic knowledge of SQL command syntax. WebLOAD Recorder automatically inserts into the test session script the appropriate JavaScript code to implement specified database commands.</p><p>However, it is the tester who must specify the database commands to be inserted. WebLOAD Recorder cannot correct a tester\u2019s SQL syntax errors.</p> Temporary file name <p>Name to use for the temporary file that will contain the output data from the SQL statement.</p><p>This temporary file will serve as an input file to the test session script. Data from this file is read line by line, where each data record is a separate line.</p> The delimiter character between the fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> Max number of records Specifies the maximum number of records to read from the database. Number of records per Generator <p>Specifies the maximum number of records to be read from the database by each generator.</p><p>This field is intended for instances of testing by a network of generators. Multiple generators do not merge or share data. Database access is synchronized between generators, similar to WebLOAD Recorder\u2019s synchronization of Global Parameters.</p><p>Each generator is allowed access to a specific number of records, allowing all the generators to work with the database in parallel. Record access is divided evenly between generators. The total number of records allocated to all generators must be equal to the Maximum Number of Records field value. For example, 1000 records may be divided between 10 Load Generators, with 100 records allocated per generator.</p>"},{"location":"recorder/appendix_a/#mysql-db-getline","title":"MySQL DB GetLine","text":"<p>When running large load tests, the user input is usually read automatically from an input file. To read many rows of input data from a simple text file, WebLOAD uses the MySQL GetLine() I/O command. To read large amounts of input data from a MySQL database, WebLOAD uses the equivalent MySQL DBGetLine database Building Block.</p> <p>The MySQL DB GetLine Building Block reads complete records, one by one, from a specified database table. The database table is exported into a temporary file, from which the records are read, one record per line.</p> <p>Note: Before connecting to the MySQL database, verify that the MySQL connector/ODBC 3.5.1 Driver is installed on your computer. In addition, verify that the MySQL port (3306) is open on the local/remote firewall and that the MySQL database has the right grant permission for the user and IP address from which you are connecting.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the MySQL DB GetLine icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The MySQL DB GetLine Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the following Table.</p> </li> <li> <p>Click OK.</p> <p>The MySQL DB GetLine Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the MySQL DB GetLine Building Block parameters dialog box are described in the following table:</p> Field Name Description Server name (MySQL Server) Specify the name of the MySQL Database server. Database name <p>Specify the name of the database on the MySQL Database server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> SQL expression <p>Specify the SQL command to be executed. Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Note: To take full advantage of the Database Building Blocks, testers must understand how to work with ADO objects and have a basic knowledge of SQL command syntax. WebLOAD Recorder automatically inserts into the test session script the appropriate JavaScript code to implement specified database commands.</p><p>However, it is the tester who must specify the database commands to be inserted. WebLOAD Recorder cannot correct a tester\u2019s SQL syntax errors.</p> Temporary file name <p>Name to use for the temporary file that will contain the output data from the SQL statement.</p><p>This temporary file will serve as an input file to the test session script. Data from this file is read line by line, where each data record is a separate line.</p> The delimiter character between the fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> Max number of records Specifies the maximum number of records to read from the database. Number of records per Generator <p>Specifies the maximum number of records to be read from the database by each generator.</p><p>This field is intended for instances of testing by a network of generators. Multiple generators do not merge or share data. Database access is synchronized between generators, similar to WebLOAD Recorder\u2019s synchronization of Global Parameters.</p><p>Each generator is allowed access to a specific number of records, allowing all the generators to work with the database in parallel. Record access is divided evenly between generators. The total number of records allocated to all generators must be equal to the Maximum Number of Records field value. For example, 1000 records may be divided between 10 Load Generators, with 100 records allocated per generator.</p>"},{"location":"recorder/appendix_a/#db-load","title":"DB Load","text":"<p>Use the DB Load Building Block to generate a load test for the specified database. The load is generated by executing multiple iterations of database commands read from an input file. Load testing though the WebLOAD testing suite is usually scheduled only after functional testing is completed with WebLOAD Recorder.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the DB Load icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The DB Load Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the following Table.</p> </li> <li> <p>Click OK.</p> <p>The DB Load Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> </p> <p>The fields in the DB Load Building Block parameters dialog box are described in the following table:</p> Field Name Description Database type <p>Specify the type of database to be opened.</p><p>Select the appropriate value from the drop-down list that appears when you click the Value input area for this field.</p><p>The options include MS-Access and SQL Server databases.</p> Server name (SQL Server) <p>Specify the name of the machine where the database is running.</p><p>Type the appropriate server name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Database name (SQL Server) <p>Specify the name of the database on the SQL server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> User name (SQL Server) <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> Password (SQL Server) <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p><p>Relevant for SQL Server databases only.</p> File name (MDB file) <p>Specify the full path for an MDB file.</p><p>Select the appropriate file from the Browser window that appears when you click to the right of the Value input area for this field.</p><p>Relevant for MDB databases only.</p> Input File Name <p>Name of the input file that contains a set of SQL commands and transactions to be completed during this load test. Select the appropriate file from the Browser window that appears when you click to the right of the Value input area for this field. Relevant for MDB databases only.</p><p>A typical SQL command input file may look like the following:</p><p>Select1#select * from john_emp</p><p>Select2#select * from john_emp where name=\u2018john\u2019 Select3#select * from john_emp where name=\u2018john\u2019 or</p><p>age &gt; 10</p><p>Update#update john_emp set age = 20 where</p><p>name=\u2018john\u2019</p><p>Insert#insert into john_emp values (99, \u2018zzz\u2019, 2)</p><p>Delete#delete from john_emp where id=99</p><p>The input file consists of rows of SQL commands. As with all load testing, the commands in the input file are executed in sequence, with WebLOAD looping through the file repeatedly until the test is completed. Each SQL command line in the input file is preceded by a name identifying the transaction in which the command will be located. A pound sign (#) separates the transaction name field from the SQL command field in each row.</p><p>Each SQL command is defined as a distinct HTTP transaction, enclosed in the script body within a BeginTransaction()/EndTransaction() set and identified by the transaction name. These transactions, like all transactions, are tracked automatically by the built-in WebLOAD timers and counters. Statistics on the performance of each transaction appear in the WebLOAD output reports, with each transaction identified in the report by name.</p> Delimiter character between fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> SQL/command to reset DB <p>Specify an SQL command to be executed at the end of a testing round to reset the database.</p><p>This field is reserved for any \u201ccleanup\u201d commands that may be required in order to continue using the database for multiple iterations.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#oracle-db-load","title":"Oracle DB Load","text":"<p>Use the Oracle DB Load Building Block to generate a load test for the specified Oracle database. The load is generated by executing multiple iterations of database commands read from an input file. Load testing though the WebLOAD testing suite is usually scheduled only after functional testing is completed with WebLOAD Recorder.</p> <p>Note: To use the Oracle DB Load Building Block you must first install the Oracle Client. The Oracle Client must be installed on the same machine as the WebLOAD Recorder.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the Oracle DB Load icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The Oracle DB Load Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the followingTable.</p> </li> <li> <p>Click OK.</p> <p>The Oracle DB Load Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p> The fields in the Oracle DB Load Building Block parameters dialog box are described in the following table:</p> Field Name Description Database name <p>Specify the name of the database on the Oracle Database server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Input File Name <p>Name of the input file that contains a set of SQL commands and transactions to be completed during this load test. Select the appropriate file from the Browser window that appears when you click the button to the right of the Value input area for this field. Relevant for MDB databases only.</p><p>A typical SQL command input file may look like the following:</p><p>Select1#select * from john_emp</p><p>Select2#select * from john_emp where name=\u2018john\u2019</p><p>Select3#select * from john_emp where name=\u2018john\u2019 or</p><p>age &gt; 10</p><p>Update#update john_emp set age = 20 where</p><p>name=\u2018john\u2019</p><p>Insert#insert into john_emp values (99, \u2018zzz\u2019, 2)</p><p>Delete#delete from john_emp where id=99</p><p>The input file consists of rows of SQL commands. As with all load testing, the commands in the input file are executed in sequence, with WebLOAD looping through the file repeatedly until the test is completed. Each SQL command line in the input file is preceded by a name identifying the transaction in which the command will be located. A pound sign (#) separates the transaction name field from the SQL command field in each row.</p> Input File Name (continued) Each SQL command is defined as a distinct HTTP transaction, enclosed in the script body within a BeginTransaction()/EndTransaction() set and identified by the transaction name. These transactions, like all transactions, are tracked automatically by the built-in WebLOAD timers and counters. Statistics on the performance of each transaction appear in the WebLOAD output reports, with each transaction identified in the report by name. Delimiter character between fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> SQL/command to reset DB <p>Specify an SQL command to be executed at the end of a testing round to reset the database.</p><p>This field is reserved for any \u201ccleanup\u201d commands that may be required in order to continue using the database for multiple iterations.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#mysql-db-load","title":"MySQL DB Load","text":"<p>Use the MySQL DB Load Building Block to generate a load test for the specified MySQL database. The load is generated by executing multiple iterations of database commands read from an input file. Load testing though the WebLOAD testing suite is usually scheduled only after functional testing is completed with WebLOAD Recorder.</p> <p>Note: Before connecting to the MySQL database, verify that the MySQL connector/ODBC 3.5.1 Driver is installed on your computer. In addition, verify that the MySQL port (3306) is open on the local/remote firewall and that the MySQL database has the right grant permission for the user and IP address from which you are connecting.</p> <p>To enter a value:</p> <ol> <li> <p>Drag the MySQL DB Load icon from the Database toolbox into the Script Tree at the desired location.</p> <p>The MySQL DB Load Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described the Table.</p> </li> <li> <p>Click OK.</p> <p>The MySQL DB Load Building Block is added to the Script Tree. The JavaScript code, including the InitAgenda(), InitClient(), and TerminateClient() functions, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>The fields in the MySQL DB Load Building Block parameters dialog box are described in the following table: </p> Field Name Description Server name (MySQL server) Specify the name of the MySQL Database server. Database name <p>Specify the name of the database on the MySQL Database server.</p><p>Type the appropriate database name into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> User name <p>Specify a user ID for authentication against the database.</p><p>Type the user ID into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Password <p>Specify a password for authentication against the database.</p><p>Type the password into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p> Input File Name <p>Name of the input file that contains a set of SQL commands and transactions to be completed during this load test. Select the appropriate file from the Browser window that appears when you click the button to the right of the Value input area for this field. Relevant for MDB databases only.</p><p>A typical SQL command input file may look like the following:</p><p>Select1#select * from john_emp</p><p>Select2#select * from john_emp where name=\u2018john\u2019 Select3#select * from john_emp where name=\u2018john\u2019</p><p>or age &gt; 10</p><p>Update#update john_emp set age = 20 where</p><p>name=\u2018john\u2019</p><p>Insert#insert into john_emp values (99, \u2018zzz\u2019, 2)</p><p>Delete#delete from john_emp where id=99</p><p>The input file consists of rows of SQL commands. As with all load testing, the commands in the input file are executed in sequence, with WebLOAD looping through the file repeatedly until the test is completed. Each SQL command line in the input file is preceded by a name identifying the transaction in which the command will be located. A pound sign (#) separates the transaction name field from the SQL command field in each row.</p><p>Each SQL command is defined as a distinct HTTP transaction, enclosed in the script body within a BeginTransaction()/EndTransaction() set and identified by the transaction name. These transactions, like all transactions, are tracked automatically by the built-in WebLOAD timers and counters. Statistics on the performance of each transaction appear in the WebLOAD output reports, with each transaction identified in the report by name.</p> Delimiter character between fields <p>Delimiter character that separates between the fields in each record.</p><p>This delimiter character must not appear as valid character within any of the data fields. The default delimiter character is a pound sign (#).</p><p>Type in a different character as needed.</p> SQL/command to reset DB <p>Specify an SQL command to be executed at the end of a testing round to reset the database.</p><p>This field is reserved for any \u201ccleanup\u201d commands that may be required in order to continue using the database for multiple iterations.</p><p>Type the complete command into the input-text window that appears when you click the small arrow to the right of the Value input area for this field.</p>"},{"location":"recorder/appendix_a/#the-webload-recorder-verifications-toolbox","title":"The WebLOAD Recorder Verifications Toolbox","text":"<p>The following table describes the purpose of each of the WebLOAD Recorder Verifications Toolbox items:</p> Script Item Purpose WS-Single Verifies the value of the first element returned by the query to the Web service (WS). WS-Multiple Verifies the value of every element returned by the query to the Web service (WS). Flex:Verify-Ext Verifies data in the AMF data response. Flex:Extract-Ext Extracts data from AMF data response <p>To add Verifications Building Blocks to a test script directly through the WebLOAD Recorder:</p> <ul> <li>Drag the selected verification Building Block from the Verifications toolbox and drop it into the Script Tree immediately after the node that represents the response you wish to verify.</li> </ul> <p>Each Verifications Building Block opens a different dialog box. Enter the required values in the Value fields. Explanations are provided at the bottom of the dialog box for each parameter as it is selected in the dialog box.</p> <p>Note: The values that appear in the dialog box Value area are the default values for each field. In most cases, the default value for string variables is an empty string, indicated in the Value area by a set of empty quotation marks. If you are entering your own value for a string field, the new string must also be enclosed within quotation marks. Fields that were not assigned a value in the dialog box are left as empty fields in the script code.</p> <p>A Verifications node is added to the Script Tree for each Verifications Building Block defined. WebLOAD Recorder automatically adds the corresponding JavaScript code to your test session script.</p>"},{"location":"recorder/appendix_a/#ws-single","title":"WS-Single","text":"<p>The WS-Single Building Block enables you to automatically generate a verification function of the value of the first element in a Web service\u2019s response, in your script. During playback, the results of the verification process (failure or success) are displayed in the Log View window.</p> <p>If the verification succeeds, a Debug message is written to the Log View (with the element name and actual value) and the function returns WLSuccess. If the verification fails, a Warning message is displayed and the function returns WLMinorError.</p> <p>To insert a WS-Single Building Block:</p> <ol> <li> <p>Drag the WS-Single icon from the Verifications toolbox into the Script Tree immediately after the node that represents the response you wish to verify.</p> <p>The WS-Single Node Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description XML Node Path The XPath query string of the object to be verified. XML Node Value The desired response of the verification. Return Value The return value in case of failure. </li> <li> <p>Click OK.</p> <p>The WS-Single node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>For example:</p> </li> </ol> <pre><code>function InitAgenda()\n{\n//Start generation for Building Block WS - Single Node\n\nIncludeFile(\"wlXmlVerification.js\", WLExecuteScript); wlGlobals.SaveSource = true;\nxmlDom  = InitXML();\n\n//End generation for Building Block WS - Single Node\n}\n\n/***** WLIDE - WS - Single Node - ID:2 *****/\n\nVerifyXMLNode(document.wlSource, \u201c//Result\u201d, \u201c2\u201d)\n\n// END WLIDE\n</code></pre> <p>Note: After the verification function is created in the script, you can duplicate it several times within the script to verify different response values.</p>"},{"location":"recorder/appendix_a/#ws-multiple","title":"WS-Multiple","text":"<p>The WS-Multiple Building Block enables you to automatically generate a verification function of the values of every element in a Web service\u2019s response, in your script.</p> <p>During playback, the result of the verification process (failure or success) is displayed in the Log View window.</p> <p>If the verification succeeds, a Debug message is written to the Log View (with the element name and actual value) and the function returns WLSuccess. If the verification fails, a Warning message is displayed and the function returns WLMinorError.</p> <p>To insert a WS-Multiple Building Block:</p> <ol> <li> <p>Drag the WS-Multiple icon from the Verifications toolbox into the Script Tree immediately after the node that represents the response you wish to verify.</p> <p>The WS-Multiple Nodes Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description XML Node Path The XPath query string of the object to be verified. XML Node Value The desired response of the verification. Return Value Select the return value in case of failure. </li> <li> <p>Click OK.</p> <p>The WS-Multiple node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>For example:</p> <pre><code>function InitAgenda(){\n\n//Start generation for Building Block WS - Multiple Nodes\n\nIncludeFile(\"wlXmlVerification.js\", WLExecuteScript); wlGlobals.SaveSource = true;\n\nxmlDom  = InitXML();\n\n//End generation for Building Block WS - Multiple Nodes\n\n}\n\n/***** WLIDE - WS - Multiple Nodes - ID:3 *****/\n\nVerifyXMLNodes(document.wlSource, \u201d//Result\u201d, \u201c5\u201d)\n\n// END WLIDE\n</code></pre> <p>Note: After the verification function is created in the script, you can duplicate it several times within the script to verify different response values.</p>"},{"location":"recorder/appendix_a/#flexverify-ext","title":"Flex:Verify-Ext","text":"<p>The Flex:Verify-Ext Building Block enables you to automatically generate a verification function of the data in the AMF data response, in your script. During playback, the results of the verification process (failure or success) are displayed in the Log View window.</p> <p>If the verification succeeds, a Debug message is written to the Log View (with the element name and actual value) and the function returns WLSuccess. If the verification fails, a Warning message is displayed and the function returns WLMinorError.</p> <p>To insert a Flex:Verify-Ext Building Block:</p> <ol> <li> <p>Drag the Flex:Verify-Ext icon from the Verifications toolbox into the Script Tree immediately after the node that represents the AMF data response you wish to verify.</p> <p>The Flex:Verify-Ext Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description AMF Response Parameter Name The path to the relevant AMF response element. AMF Response Parameter Value The value of the AMF response's parameter. Severity Select the return value in case of failure. </li> <li> <p>Click OK.</p> <p>The Flex:Verify-Ext node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>For example:</p> </li> </ol> <pre><code>function InitAgenda()\n{\n\n//Start generation for Building Block Flex:Verify-Ext \n\nIncludeFile(\"amfVerification.js\");\n\n//End generation for Building Block Flex:Verify-Ext\n}\n\n/***** WLIDE - Flex:Verify-Ext - ID:11 *****/\n\nAMFResponse = new Packages.com.radview.amf.WLAmfMessage(getAmfDataAsJsStri ng());\n\nVerifyAMFExt(AMFResponse,\"ActionMessage.bodies(0).data.b ody(1).category\", \"AMF test3\", WLMinorError)\n\n// END WLIDE\n</code></pre> <p>Note: After the verification function is created in the script, you can duplicate it several times within the script to verify different response values.</p>"},{"location":"recorder/appendix_a/#flexextract-ext","title":"Flex:Extract-Ext","text":"<p>The Flex:Extract-Ext Building Block enables you to automatically extract data from an AMF data response, in your script. During playback, the extracted data is displayed in the Log View window.</p> <p>If the extraction succeeds, a Debug message is written to the Log View (with the element name and actual value). If the extraction fails, the function returns NULL and a warning message is displayed.</p> <p>To insert a Flex:Extract -Ext Building Block:</p> <ol> <li> <p>Drag the Flex: Extract-Ext icon from the Verifications toolbox into the Script Tree immediately after the node that represents the AMF data response from which you wish to extract data.</p> <p>The Flex:Extract-Ext Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description AMF Response Parameter Name The path to the relevant AMF response element. Parameter Name The name of the parameter to assign. </li> <li> <p>Click OK.</p> <p>The Flex:Extract-Ext node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>For example:</p> <pre><code>retVal = extractAMFValueExt(\"ActionMessage.bodies(0).data.body(1)\n\n.category\");\n</code></pre> <p>Note: After the extraction function is created in the script, you can duplicate it several times within the script to extract data from different AMF data responses.</p>"},{"location":"recorder/appendix_a/#the-webload-recorder-websocket-toolbox","title":"The WebLOAD Recorder WebSocket Toolbox","text":"<p>Use the WebLOAD WebSocket Building Blocks to simply and easily add WebSocket functionality to your test session script. For a full description of the available WebSocket functionality, refer to the WebLOAD\u2122 JavaScript Reference Guide.</p>"},{"location":"recorder/appendix_a/#websocket-connect","title":"WebSocket Connect","text":"<p>Use the WebSocket Connect Building Block to create a WebSocket connection to a specific URL address.</p> <p>Note: A WebSocket emits event messages. In order to process received event messages, event handlers needs to be defined for the WebSocket. </p> <p>To insert a WebSocket Connect Building Block:</p> <ol> <li> <p>Drag the WebSocket Connect icon from the WebSocket toolbox into the Script Tree at the desired location.</p> <p>The WebSocket Connect Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Socket Address field is used to define the URL to which to connect.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name.</p> Field Name Description Socket Address Specify the URL to which to connect. Socket variable name Specify a name for this WebSocket object. </li> </ol>"},{"location":"recorder/appendix_a/#websocket-send","title":"WebSocket Send","text":"<p>Use the WebSocket Send Building Block to send data to a WebSocket connection.</p> <p>To insert a WebSocket Send Building Block:</p> <ol> <li> <p>Drag the WebSocket Send icon from the WebSocket toolbox into the Script Tree at the desired location.</p> <p>The WebSocket Send Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>For example, in the preceding figure, the comment area explains that the Data to Send field is used to define the data to be sent.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name.</p> </li> </ol> Field Name Description Data to send Specify the data to be sent. Socket variable name Specify the name of the WebSocket object to which to send the data."},{"location":"recorder/appendix_a/#websocket-close","title":"WebSocket Close","text":"<p>Use the WebSocket Close Building Block to close a WebSocket connection.</p> <p>To insert a WebSocket Close Building Block:</p> <ol> <li> <p>Drag the WebSocket Close icon from the WebSocket toolbox into the Script Tree at the desired location.</p> <p>The WebSocket Close Building Block parameters dialog  box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name.</p> </li> </ol> Field Name Description Socket variable name Specify the name of the WebSocket connection you wish to close."},{"location":"recorder/appendix_a/#the-webload-recorder-web-services-toolbox","title":"The WebLOAD Recorder Web Services Toolbox","text":"<p>Use the WebLOAD Web Services Building Blocks to simply and easily add web service calls or HTTP requests to your test session script.</p>"},{"location":"recorder/appendix_a/#http","title":"HTTP","text":"<p>Use the HTTP Building Block to create an HTTP web service call. This building block supports any HTTP method.</p> <p>To insert an HTTP Web Service Building Block:</p> <ol> <li> <p>Drag the HTTP icon from the Web Services toolbox into the Script Tree at the desired location.</p> <p>The HTTP Web Service dialog box opens.</p> <p></p> </li> <li> <p>Select a method from the Method drop-down list: Get, Post, Put, Delete, Copy, Head or Options.</p> </li> <li> <p>Enter a URL in the URL field.</p> </li> <li> <p>Optionally, use the Headers tab to define the web service headers, as follows:</p> <ol> <li>In the Key field, select a key from the drop-down list, or enter any key.</li> <li>In the Value field, enter a value for the specified key.</li> <li>To add additional headers, click Add, and repeat steps (a) to (b). To remove a header, select the relevant line and click Remove.</li> </ol> <p></p> </li> <li> <p>Optionally, use the Body tab to define the web service body, using either of the following methods:</p> <ul> <li>Select Form-data, and define a desired list of Keys and their Values.<ol> <li>In the Key field, select a key from the drop-down list, or enter any key.</li> <li>In the Value field, enter a value for the specified key.</li> <li>To add an additional form data element, click Add, and repeat steps (a) to (b). To remove a form data element, select the relevant line and click Remove.</li> </ol> </li> </ul> <p></p> <ul> <li>Select Raw and enter content into the empty box.</li> </ul> <p></p> </li> <li> <p>Click OK. The matching code appears in the JavaScript View.</p> </li> </ol>"},{"location":"recorder/appendix_a/#wsdl","title":"WSDL","text":"<p>Use the WSDL Building Block to create a web service call based on data from a Web Services Description Language (WSDL) file.</p> <p>To insert a WSDL Building Block:</p> <ol> <li> <p>Drag the WSDL icon from the Web Services toolbox into the Script Tree at the desired location.</p> <p>The WSDL Web Service dialog box opens.</p> <p></p> </li> <li> <p>In the WSDL Address field, enter a WSDL URL, or browse to a WSDL file.</p> </li> <li> <p>Click Parse WSDL. The left pane in the Body tab is populated with the interfaces, and their methods, of the WSDL file.</p> </li> <li> <p>Define the web service body, as follows:</p> <ol> <li> <p>Select a desired method and click the arrow between the left and right panes.The right pane displays the body of the selected method. In addition, WebLOAD automatically creates a default SOAPAction header based on the selected method.</p> <p></p> </li> <li> <p>Enter values as desired to replace the \u201c?\u201d in the method body.</p> </li> </ol> </li> <li> <p>View and edit the SOAPAction headers as follows:</p> <ol> <li> <p>Click the Headers tab to view the SOAPAction header that WebLOAD had automatically created when you selected the method.</p> <p></p> </li> <li> <p>Optionally edit the header.</p> </li> <li> <p>Optionally add additional headers, as follows:</p> <ul> <li>Click Add. A new empty line is added to the table.</li> <li>In the Key field, select a key from the drop-down list, or enter any key.</li> <li>In the Value field, enter a value for the specified key.</li> </ul> </li> <li> <p>To remove a header, select the relevant line and click Remove.</p> </li> </ol> </li> <li> <p>Click OK. The matching code appears in the JavaScript View.</p> </li> </ol>"},{"location":"recorder/appendix_a/#the-jms-toolbox","title":"The JMS Toolbox","text":"<p>The following table describes the purpose of each of the WebLOAD Recorder JMS Toolbox items:</p> Script Item Purpose JMS-Connect-JNDI Connect to a JMS queue, and create consumer and producer objects using JNDI. JMS-Connect- HornetQ Connect to a JMS queue, and create consumer and producer objects using HornetQ implementation. JMS--Send Send a JMS message using a previously created producer. JMS-Receive Receive a JMS message from a previously created consumer. <p>To use JMS in WebLOAD:</p> <ol> <li>Create JMS consumer and producer objects, either through JNDI or using the HornetQ implementation.</li> <li> <p>Use send and/or receive to put or get messages from a queue.</p> <p>Note: The implementation relies on the WebLOAD Java connection, which enables making changes to the generated code easily. Refer to the \u201cWorking with Java\u201d section of the WebLOAD Scripting Guide for more details.</p> </li> </ol>"},{"location":"recorder/appendix_a/#jms-connect-jndi","title":"JMS-Connect-JNDI","text":"<p>The JMS-Connect-JNDI Building Block creates a JMS connection using JNDI. More specifically, the following objects are used:</p> <ul> <li>InitialContext \u2013 JNDI context</li> <li>JMS Connection Factory \u2013 looked up using JNDI</li> <li>JMS Destination (Queue) \u2013 looked up using JNDI</li> <li>JMS Session \u2013 using the JMS Connection</li> <li>JMS Producer and Consumer \u2013 using the session and destination</li> </ul> <p>The objects are created in InitClient to be used once per virtual client. If required, some or all of the code can be moved to the script body to repeat the action each round.</p> <p>The code can be adjusted as needed, for example by adding properties to the lookup:</p> <pre><code>env = new Packages.java.util.Properties(); env.put(\"INITIAL\\_CONTEXT\\_FACTORY\", \"my.factory\");\n\nenv.put(\"PROVIDER\\_URL\", [\"http://10.0.1.11\");](http://10.0.1.11/)\n\njndiContext = new Packages.javax.naming.InitialContext(env);\n</code></pre> <p>To insert a JMS-Connect-JNDI Building Block:</p> <ol> <li> <p>Drag the JMS-Connect-JNDI icon from the JMS toolbox into the Script Tree. The JMS-Connect-JNDI Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Connection Factory The JNDI Name of the Connection Factory, for example: \"java:comp/env/jms/MyConnectionFactory\" Destination The JNDI name of the destination, , for example: \"java:comp/env/jms/QueueName\" </li> <li> <p>Click OK.</p> <p>The node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> <p>For example:</p> </li> </ol> <pre><code>function InitAgenda()\n\n{\n\n//Start generation for Building Block JMS-Connect-JNDI IncludeFile(\"wljms.js\",WLExecuteScript);\n\n//End generation for Building Block JMS-Connect-JNDI\n\n}\n\nfunction InitClient()\n\n{\n\n//Start generation for Building Block JMS-Connect-JNDI\n\njndiContext = new Packages.javax.naming.InitialContext();\n\nconnectionFactory = jndiContext.lookup(\"/myConFact\");\n\ndest = jndiContext.lookup(\"/myQueue\");\n\nconnection = connectionFactory.createConnection();\n\nsession = connection.createSession(false, Packages.javax.jms.Session.AUTO\\_ACKNOWLEDGE);\n\nproducer = session.createProducer(dest); consumer = session.createConsumer(dest); connection.start();\n\n//End generation for Building Block JMS-Connect-JNDI\n\n}\n\n/***** WLIDE - JMS-Connect-JNDI - ID:2 *****/\n\n//JMS 'producer' and 'consumer' objects created at InitClient()\n\n// END WLIDE\n\nfunction TerminateClient()\n\n{\n\n//Start generation for Building Block JMS-Connect-JNDI connection.close();\n\n//End generation for Building Block JMS-Connect-JNDI\n\n}\n</code></pre>"},{"location":"recorder/appendix_a/#jms-connect-hornetq","title":"JMS-Connect-HornetQ","text":"<p>The JMS-Connect-HornetQ Building Block creates a JMS connection using the HornetQ native implementation.</p> <p>More specifically, the HornetQJMSClient class is used to create the connection factory and queue, as follows:</p> <ul> <li> <p>Create JMS Connection Factory using HornetQJMSClient</p> </li> <li> <p>Create JMS Queue using HornetQJMSClient</p> </li> <li>Create standard JMS objects \u2013 consumer, producer, session using the created objects</li> </ul> <p>The objects are created in InitClient to be used once per virtual client. If required, some or all of the code can be moved to the script body to repeat the action each round.</p> <p>Note: HornetQ supports different ways of creating the connection. The code can be adjusted to support methods other that the method described here..</p> <p>To insert a JMS-Connect-HornetQ Building Block:</p> <ol> <li> <p>Drag the JMS-Connect-HornetQ icon from the JMS toolbox into the Script Tree. The JMS-Connect- HornetQ Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description JMS Queue name The name of the JMS Queue, used in createQueue() calls. </li> <li> <p>Click OK.</p> <p>The node is added to the Script Tree. The JavaScript code, including the InitAgenda()function, is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>For example:</p> <pre><code>function InitAgenda()\n\n{\n\n//Start generation for Building Block JMS-Connect- HonrnetQ\n\nIncludeFile(\"wljms.js\",WLExecuteScript);\n\n//End generation for Building Block JMS-Connect-HonrnetQ\n\n}\n\nfunction InitClient()\n\n{\n\n//Start generation for Building Block JMS-Connect-\n\nHonrnetQ transportConfiguration =\n\nnew Packages.org.hornetq.api.core.TransportConfiguration\n\n(\"org.hornetq.core.remoting.impl.netty.NettyConnectorFac tory\");\n\nconnectionFactory = Packages.org.hornetq.api.jms.HornetQJMSClient.createConn ectionFactoryWithoutHA\n\n(Packages.org.hornetq.api.jms.JMSFactoryType.CF, [transportConfiguration]);\n\nconnection = connectionFactory.createConnection();\n\nsession = connection.createSession(false, Packages.javax.jms.Session.AUTO\\_ACKNOWLEDGE);\n\nqueue = Packages.org.hornetq.api.jms.HornetQJMSClient.createQueu e(\"MyQueue\");\n\nproducer = session.createProducer(queue); consumer = session.createConsumer(queue); connection.start();\n\n//End generation for Building Block JMS-Connect-HonrnetQ\n\n}\n\n/***** WLIDE - JMS-Connect-HonrnetQ - ID:2 *****/\n\n//JMS 'producer' and 'consumer' objects created at InitClient()\n\n// END WLIDE\n\nfunction TerminateClient()\n\n{\n\n\n\n//Start generation for Building Block JMS-Connect-\n\nHonrnetQ connection.close();\n\n//End generation for Building Block JMS-Connect-HonrnetQ\n\n}\n</code></pre>"},{"location":"recorder/appendix_a/#jms-send","title":"JMS-Send","text":"<p>The JMS-Send Building Block sends a JMS message to the specified \u2018producer\u2019 (javax.jms.MessageProducer), using a given \u2018session\u2019 (javax.jms.Session).</p> <p>The \u2018producer\u2019 and \u2018session\u2019 objects are expected to already have been created, for example by using one of the JMS-Connect building blocks.</p> <p>To insert a JMS-Send Building Block:</p> <ol> <li> <p>Drag the JMS-Send icon from the JMS toolbox into the Script Tree. The JMS-Send Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Session object <p>The JMS Session object, created by</p><p>connection.createSession()</p> Producer object <p>The JMS Producer object, created by</p><p>session.createProducer()</p> Message Text The text to send </li> <li> <p>Click OK.</p> <p>The node is added to the Script Tree.</p> </li> </ol> <p>For example:</p> <p><code>sendJmsMessage(session, producer, \"Text to send\");</code></p>"},{"location":"recorder/appendix_a/#jms-receive","title":"JMS-Receive","text":"<p>The JMS-Receive Building Block receives a JMS message from the specified \u2018consumer\u2019 (javax.jms.MessageConsumer), into a given variable. The variable can then be used to inspect the message context, using standard JavaScript String methods.</p> <p>The \u2018consumer\u2019 object is expected to already have been created, for example by using one of the JMS-Connect building blocks.</p>"},{"location":"recorder/appendix_a/#to-insert-a-jms-receive-building-block","title":"To insert a JMS-Receive Building Block:","text":"<ol> <li> <p>Drag the JMS-Receive icon from the JMS toolbox into the Script Tree. The JMS-Receive Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Consumer object The JMS Consumer object, create by session.createConsumer(). Return Message Text object The return value name. </li> <li> <p>Click OK.</p> </li> </ol> <p>The node is added to the Script Tree.</p> <p>For example:</p> <p>`var message = receiveJmsMessage(consumer);</p> <p>InfoMessage(\"Got message: \" + message);`</p>"},{"location":"recorder/appendix_a/#the-real-clients-toolbox","title":"The Real Clients Toolbox","text":"<p>The Real Clients Toolbox includes Selenium, Perfecto Mobile, and JUnit Runner building blocks.</p>"},{"location":"recorder/appendix_a/#selenium-building-blocks","title":"Selenium Building Blocks","text":"<p>Use the WebLOAD Selenium Building Blocks to simply and easily create Selenium actions. For a full description of how to use Selenium scripts in WebLOAD, refer to Selenium Integration , and to the Working with Java Selenium Scripts section in Chapter 3 Advanced JavaScript Script Features of the WebLOAD Scripting Guide.</p> <p>To call Selenium actions using the Selenium building blocks:</p> <ol> <li>Use the Selenium driver building block to instruct WebLOAD to create a Selenium Java WebDriver (org.openqa.selenium.WebDriver).</li> <li>Where desired, enter commands to be executed by the Selenium Java WebDriver. For information about using the WebDriver, refer to the Selenium documentation (http://docs.seleniumhq.org/docs/03_webdriver.jsp#selenium-webdriver-api- commands-and-operations).</li> <li>Where desired, use the Selenium Report Statistics building block to insert a command that instructs WebLOAD to collect Selenium statistics from the current page.</li> </ol>"},{"location":"recorder/appendix_a/#selenium-driver","title":"Selenium driver","text":"<p>Use the Selenium Driver Building Block to instruct WebLOAD to create a Selenium Java WebDriver (org.openqa.selenium.WebDriver).</p> <p>To insert a Selenium Driver Building Block:</p> <ol> <li> <p>Drag the Selenium Driver icon from the Real Clients toolbox into the Script Tree at the desired location.</p> <p>The Selenium Driver Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Driver Type field is used to specify which Selenium driver type to use.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> <p></p> Field Name Description Driver Type <p>Specify what type of Selenium driver to create. The possible values are:</p><p>- Firefox</p><p>- Chrome</p><p>- Internet Explorer</p> Base URL Specify the first URL to which the driver will connect. Selenium Driver variable name Specify a name for this WebLOAD object. </li> <li> <p>Click OK.</p> <p>The node is added to the Script Tree.</p> </li> </ol>"},{"location":"recorder/appendix_a/#selenium-report-statistics","title":"Selenium Report Statistics","text":"<p>Use the Selenium Report Statistics Block to instruct WebLOAD to collect and report navigation timing statistics for the current page.</p> <p>For a full list and description of the navigation timing statistics, see the Table</p>"},{"location":"recorder/appendix_a/#to-insert-a-selenium-report-statistics-building-block","title":"To insert a Selenium Report Statistics Building Block:","text":"<ol> <li> <p>Drag the Selenium Report Statistics icon from the Real Clients toolbox into the Script Tree at the desired location.</p> <p>The Selenium Report Statistics Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Click the name of an input field in the left-hand column to see an explanation of that field in the comment area at the bottom of the dialog box.</p> <p>For example, in the preceding figure, the comment area explains that the Selenium Driver field is used to specify the Selenium Driver object.</p> </li> <li> <p>Enter the appropriate field value into the Value column next to the field name, as described in the Table.</p> <p> </p> Field Name Description Selenium Driver Specify the name of the Selenium Driver object. Navigation timing statistics will be collected for actions executed by this Selenium Driver. Page Name <p>By default, WebLOAD reports navigation timing statistics as an average across all pages accessed by the Selenium Driver. If you wish to also display separately the statistics for a particular page, enter the page name in this parameter. The resultant measurements will be called -.<p>This parameter is optional.</p> <li> <p>Click OK.</p> <p>The node is added to the Script Tree.</p> <p>For example, if you enter driver as the name of the Selenium driver, and my Page name as the name of a desired page, the following is added to the Script Tree:</p> </li> <p><code>reportStatistics(driver, \"my Page name\");</code></p>"},{"location":"recorder/appendix_a/#junit-runner-building-block-for-running-junit-and-other-unit-testing-frameworks","title":"JUnit Runner Building Block for running JUnit and other unit testing frameworks","text":"<p>Use the JUnit Runner building block to run all unit tests of specified classes, as part of the load.</p> <p>This building block is relevant not only for JUnit but for unit tests of any kind inserted in the script. For example, if your script includes Cucumber unit tests, then adding the JUnit Runner building block will run the Cucumber unit tests.</p>"},{"location":"recorder/appendix_a/#to-insert-a-junit-runner-building-block","title":"To insert a JUnit Runner Building Block:","text":"<ol> <li> <p>Drag the JUnit Runner icon from the JMS toolbox into the Script Tree. The JUnit Runner Building Block parameters dialog box opens.</p> <p></p> </li> <li> <p>Edit the dialog box fields according to the following table.</p> Field Name Description Class with tests to run A comma-separated list of the classes on which to run the unit tests. Print execution output Whether to display in the WebLOAD Recorder and WebLOAD Console log window, the unit testing execution results. </li> <li> <p>Click OK.</p> <p>The node is added to the Script Tree.</p> </li> </ol>"},{"location":"recorder/appendix_a/#perfecto-mobile-building-blocks","title":"Perfecto Mobile Building Blocks","text":"<p>Use the Perfecto Mobile building block to instruct WebLOAD to create a Perfecto Mobile script. For a full description of how to create and use Perfecto Mobile scripts in WebLOAD, refer to Integrating with Perfecto Mobile .</p>"},{"location":"recorder/appendix_b/","title":"Appendix B: WebLOAD Recorder File Types","text":"<p>The following is a list of files associated with a WebLOAD Recorder project.</p> WebLOAD Recorder Extension WebLOAD Recorder File Type .WLP Files WebLOAD Recorder Project Files .WLS Files WebLOAD Recorder Session Files .WLA Files Actual Repository Files .WLE Files Expected Repository Files .LOG Files Saved Log Window Files"},{"location":"recorder/appendix_c/","title":"Appendix C: Launching WebLOAD Recorder Testing through the Command Line Interface","text":"<p>This section provides instructions and examples for using Command Line Interface (CLI) to launch WebLOAD Recorder testing.</p> <p>See Automation guide</p>"},{"location":"recorder/appendix_d/","title":"Appendix D: Converting Certificate Files","text":"<p>WebLOAD Recorder supports the use of SSL Client Certificates. WebLOAD Recorder requires that the certificate file be in *.pem format. If the certificate file is in *.pfx or</p> <p>*.p12 format, use the Certificate Conversion Wizard application to convert the file to</p> <p>*.pem format.</p> <p>Note: You can use your web browser to export certificates to *.pfx or *.p12 format.</p> <p>To convert certificate files:</p> <ol> <li> <p>Select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; Utilities &gt; Certificate Conversion Wizard. The Certificate Conversion Wizard appears.</p> <p></p> </li> <li> <p>In the Certificate file to convert field, enter the path and file name of a certificate file to convert.</p> <p>-Or</p> <p>Click  and browse to the file.</p> </li> <li> <p>In the Password for input file field, enter the password for the certificate file.</p> <p>Note: If you do not know the password, contact your IT manager.</p> </li> <li> <p>In the Save converted file as field, enter a path and file name for the converted certificate file.</p> <p>Or</p> <p>Click  to open a standard Windows<sup>\u00ae</sup> Save As window.</p> </li> <li> <p>In the Password for output file field, enter a password for the converted certificate.</p> <p>Note: It is recommended that you use the same password as the one used for the original certificate file.</p> </li> <li> <p>In the Confirm password field, enter the password that you entered in the Password for output file field.</p> </li> <li> <p>Click Convert. The file is converted.</p> </li> </ol>"},{"location":"recorder/appendix_e/","title":"Appendix E: Recording Mobile Applications","text":"<p>WebLOAD enables recording mobile applications in two ways:</p> <ul> <li>Native Mobile Recording \u2013 recording traffic from an actual mobile device. This works for both mobile web applications and native mobile applications.</li> <li>Simulate mobile in browser \u2013 records mobile web applications in the desktop by simulating a mobile browser. Does not require a mobile device, but only works for mobile web applications.</li> </ul> <p>In addition, you can playback a recording as if it were a recording from a mobile application. This is performed in the WebLOAD Console using the Current Project Options window. In the Browser Type tab, specify the mobile application in the Browser Parameters section. The browser type you select overrides the settings that were defined during the recording, and plays back the recording according to the new settings.</p>"},{"location":"recorder/appendix_e/#native-mobile-recording","title":"Native Mobile Recording","text":"<p>To record traffic from an actual mobile device:</p> <ol> <li> <p>Start native mobile recording, as follows:</p> <ol> <li> <p>In WebLOAD Recorder, click Start in the Home tab of the ribbon. The Recording dialog appears.</p> <p></p> </li> <li> <p>In the Open drop-down list, select Native Mobile Recording.</p> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Set up the mobile device proxy, as follows:</p> <ol> <li> <p>Connect the mobile device to a Wireless network that can access your WebLOAD machine.</p> </li> <li> <p>Configure the device\u2019s wireless proxy settings to go through the WebLOAD machine, on the noted port.</p> </li> </ol> <p>This step depends on the device OS type and version. For example, see Setting Proxy Settings in iPhone * and Setting Proxy Settings in Android .</p> </li> <li> <p>Perform actions in your mobile device application or web browser; the HTTP requests will be recorded in the test script.</p> </li> <li> <p>Stop recording, as follows:</p> <ol> <li>In WebLOAD Recorder, click Stop Recording.</li> <li>In the mobile device, change the Proxy settings back to off.</li> </ol> </li> </ol> <p>Note:</p> <p>You may need to open you firewall to accept connections to proxynator.exe, on port 9884.</p> <p>To record secure traffic (HTTPS), the root certificate needs to be imported to the phone. For example, see *Recording HTTPS Traffic on iPhone *HTTPS traffic on Android (4.0 and above)* </p> <p>When not recording, the mobile device will not be able to access the network (because the proxy is not available) \u2013 to use the network normally, revert the HTTP Proxy setting back to Off.</p>"},{"location":"recorder/appendix_e/#setting-proxy-settings-in-iphone","title":"Setting Proxy Settings in iPhone","text":"<p>To set iPhone proxy settings:</p> <ol> <li> <p>Open Settings, and access the Wi-Fi network settings:</p> <p></p> </li> <li> <p>Select edit current Wi-Fi Network settings:</p> <p></p> </li> <li> <p>Scroll down the HTTP Proxy section. Change proxy to Manual and set the Server and Port to point to the WebLOAD machines.</p> <p>The default port for the proxy-recorder is 9884. You may need to use the machine\u2019s IP-address instead of name.</p> <p></p> </li> </ol>"},{"location":"recorder/appendix_e/#recording-https-traffic-on-iphone","title":"Recording HTTPS Traffic on iPhone","text":"<p>In order to record HTTPS traffic, the WebLOAD root certificate needs to be trusted by the phone. To import the root certificate:</p> <ol> <li> <p>Locate the root certificate, in:</p> <p><code>c:\\Program Files\\RadView\\WebLOAD\\bin\\Certificates\\root.pem</code></p> </li> <li> <p>Open the root.pem file on the phone. This can be done by sending the file via e-mail, or accessing the file from a web-server.</p> </li> <li> <p>Click Install.</p> <p></p> </li> <li> <p>A warning will appear; click Install. The certificate should now be trusted</p> <p></p> </li> <li> <p>You need to turn on SSL trust for that certificate, go to:  Settings &gt; General &gt; About &gt; Certificate Trust Settings. Under \"Enable full trust for root certificates\", turn on trust for the certificate.</p> <p></p> </li> <li> <p>After recording is completed, the certificate may be removed. To remove the certificate, select the following: Settings &gt; General &gt; Profile \u2018RadView Root CA\u2019 &gt; Remove.</p> </li> </ol>"},{"location":"recorder/appendix_e/#setting-proxy-settings-in-android-emulator","title":"Setting Proxy Settings in Android Emulator","text":"<p>Follow these steps exactly as shown. Any small change will likely cause it not to work!</p> <p>Watch the video here: Android Recording</p>"},{"location":"recorder/appendix_e/#install-emulator","title":"Install emulator","text":"<ul> <li>Download Android studio/SDK: https://developer.android.com/studio</li> <li>Standard install</li> <li>Open \u2018Virtual Device Manager\u2019</li> <li>Choose a device WITHOUT google play, for example Pixel 3a XL</li> <li>Download \u201cQ\u201d system level and select it.</li> </ul>"},{"location":"recorder/appendix_e/#install-radview-root-certificate","title":"Install RadView root certificate","text":"<p>Needed in order to record https traffic - practically this is always needed.</p> <p>Use adb commands, adb will be in: C:\\Users\\myuser\\AppData\\Local\\Android\\Sdk\\platform-tools</p> <p>Emulator will be in : c:\\users\\myuser\\AppData\\Local\\Android\\Sdk\\emulator\\emulator.exe</p> <p>(See below these command as a script - Script to set-up emulator)</p> <p>List devices. Should show: Pixel_3a_XL_API_29</p> <p><code>emulator.exe -list-avds</code></p> <p>Start the emulator in writable mode (make sure it's not turned on before running). Should start the emulator in a new window, wait for it to load (\"boot completed\")</p> <p><code>emulator -avd Pixel_3a_XL_API_29 -writable-system</code></p> <p>start adb root, should say: restarting adbd as root</p> <p><code>adb root</code></p> <p>diable verification, should say: Successfully disabled verification.</p> <p><code>adb shell avbctl disable-verification</code></p> <p>Reboot the device for changes to take effect. WAIT for reboot to start and end. Emulator window will have \"boot completed\" again - this takes time!</p> <p><code>adb reboot</code></p> <p>start as root, should not display anything</p> <p><code>adb root</code></p> <p>remount, should say: remount succeeded</p> <p><code>adb remount</code></p> <p>copy cert, should say: 1 file pushed</p> <p><code>adb push \"c:\\Program Files (x86)\\RadView\\WebLOAD\\bin\\Certificates\\root.pem\" /system/etc/security/cacerts/3b4f28f8.0</code></p> <p>chmod, should not display anything</p> <p><code>adb shell chmod 664 /system/etc/security/cacerts/3b4f28f8.0</code></p> <p>Final reboot, wait for it to start and end, start recording in WebLOAD, change WiFi proxy settings to 10.0.2.2 port 9884 and record scenario</p> <p><code>adb reboot</code></p>"},{"location":"recorder/appendix_e/#record-in-webload","title":"Record in WebLOAD","text":"<p>Set proxy settings:</p> <p>On the desktop machine:</p> <p>Open Firewall settings, advanced, add rule to allow traffic on TCP port 9884</p> <p>Start WebLOAD Recorder.</p> <ul> <li>Start Recording (Click \u2018Start\u2019 on the red circle icon).</li> <li>Choose \"Native Mobile Recording\" (Preior to WebLOAD 13.2 - Choose \u201cChrome\u201d and click Ok. This will open a Chrome window, leave it open and ignore it until the end of recording)</li> <li>On the Mobile device (emulator) change proxy to use WebLOAD:</li> <li>Open WiFi Settings, find the \u201cAndoirdWiFi\u201d and change settings:</li> <li>Click the Pencil to edit:</li> <li>Expand the \u2018Advanced options\u2019<ul> <li>Set \u2018Proxy\u2019 to \u2018manual\u2019</li> <li>Set \u2018Proxy hostname\u2019 to \u201810.0.2.2\u2019 (this will point to the machine running the emulator. localhost/127.0.0.1 means the android device)</li> <li>Set \u2018Proxy port\u2019 to 9884 </li> </ul> </li> </ul> <p>Now traffic from the apps and browser should be captured in WebLOAD.</p>"},{"location":"recorder/appendix_e/#setting-proxy-settings-in-android-legacy-phones","title":"Setting Proxy Settings in Android (Legacy phones)","text":"<p>To set Android proxy settings:</p> <ol> <li> <p>Using the menu button, select Settings.</p> </li> <li> <p>Select Wireless &amp; networks.</p> </li> <li> <p>Select Wi-Fi settings.</p> </li> <li> <p>Switch on and connect to your designated Wi-Fi network.</p> </li> <li> <p>Once connected, press the Menu button again and select Advanced.</p> </li> <li> <p>Set Proxy to the WebLOAD machine IP-address, and Port to 9884.</p> <p></p> </li> </ol>"},{"location":"recorder/appendix_e/#recording-https-traffic-on-android-40-and-above","title":"Recording HTTPS traffic on Android (4.0 and above)","text":"<p>In order to record HTTPS traffic, the WebLOAD root certificate needs to be trusted by the phone. To import the root certificate:</p> <ol> <li> <p>Locate the root certificate, in:</p> <p>c:\\Program Files\\RadView\\WebLOAD\\bin\\Certificates\\root.pem</p> </li> <li> <p>Copy locally, as root.crt.</p> </li> <li> <p>Copy root.crt from your computer to the root of your device's internal storage (that is, not in a folder).</p> </li> <li> <p>From a Home or All Apps screen, tap the Settings icon.</p> </li> <li> <p>Go to Personal &gt; Security &gt; Credential storage &gt; Install from storage.</p> </li> </ol>"},{"location":"recorder/appendix_e/#simulating-a-mobile-in-a-browser","title":"Simulating a Mobile in a Browser","text":"<p>In Simulate mode, the recording is done using the desktop browser, identified to the server as a mobile user agent.</p> <p>To simulate a mobile:</p> <ol> <li> <p>In WebLOAD Recorder, click Start Recording.</p> <p></p> </li> <li> <p>Check the Identify As checkbox.</p> </li> <li> <p>Select the Browser family and Version.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>Notes: </p> <ul> <li>This approach is only applicable to some mobile web-sites, which rely on server- side mobile detection</li> <li>Some mobile sites may not render as expected in the desktop browser.</li> <li>For best results, use a Chrome browser.</li> </ul>"},{"location":"recorder/appendix_f/","title":"Appendix F: Integrating with Perfecto Mobile","text":"<p>Perfecto Mobile is a cloud-based real-device mobile testing solution. It tests mobile apps on real devices, in real time, on live carrier networks.</p> <p>WebLOAD enables creating and running scripts that run Perfecto Mobile scripts on mobile devices in the Perfecto Mobile cloud.</p> <p>Note that you can only use this feature if you have an account in Perfecto Mobile.</p>"},{"location":"recorder/appendix_f/#creating-a-perfecto-mobile-script","title":"Creating a Perfecto Mobile Script","text":"<p>In order to create a Perfecto Mobile script, you must first create a Perfecto Mobile script in Perfecto Mobile. The WebLOAD script will execute this Perfecto Mobile script, and gather statistics from the s Perfecto Mobile cript and from the device.</p> <p>For instructions on how to create a Perfecto Mobile script please refer to Perfecto Mobile tutorials.</p> <p>To create a Perfecto Mobile WebLOAD script:</p> <ol> <li> <p>Drag the Perfecto Mobile      icon from the Real Clients toolbox into the Script Tree at the desired location.</p> <p>The Perfecto Mobile dialog box opens.</p> <p></p> </li> <li> <p>In the Cloud Name field, enter the URL for Perfecto Mobile.</p> </li> <li> <p>Enter the Perfecto Mobile credentials:</p> <ul> <li>In Perfecto User, enter your user name.</li> <li>In Perfecto Password, enter your password.</li> </ul> </li> <li> <p>Click Select Script. WebLOAD accesses the Perfecto Mobile scripts and displays them in the Select Script dialog box.</p> <p>Select a desired script and click OK.</p> <p></p> </li> <li> <p>Click Select Device. WebLOAD accesses Perfecto Mobile and displays the list of available devices in the Select Device dialog box.</p> <p>Select a desired device and click OK.</p> <p></p> </li> <li> <p>Set the Test timeout. This is the maximum number of seconds that the test is allowed to run.</p> </li> <li> <p>Set the Ping Time. This is the frequency in seconds with which WebLOAD will check test status during test running.</p> </li> <li> <p>Specify whether to Send Transactions to WebLOAD. That is, whether to send a list of all the transactions (Groups) that are written in the Perfecto Mobile script (such as: \u201dOpen Chrome\u201d, \u201cNavigate to my application\u201d).</p> </li> <li> <p>Specify whether to Send All Actions to WebLOAD. That is, whether to send a list of all the actions that the script performs (such as: \u201dPress Key\u201d, \u201cTouch Drag\u201d).</p> </li> <li> <p>Click OK. The script is created, and is ready to be run.</p> <p></p> </li> </ol> <p>If you run the Perfecto Mobile script in WebLOAD Recorder, all you see are the periodic pings. In order to gather device, transaction and action statistics, you need to run the script in the WebLOAD Console, as described in the following section.</p>"},{"location":"recorder/appendix_f/#viewing-session-results-of-a-perfecto-mobile-session","title":"Viewing Session Results of a Perfecto Mobile Session","text":"<p>To gather statistics about the Perfecto Mobile script, create in the WebLOAD Console a Load template that runs the Perfecto Mobile script repetitively but for a single user (Probing Client).</p> <p>The following figure shows an example results window. Note that the example displays also Actions and Transactions. That is, in addition to the various device statistics (such as Battery Level), statistics are also displayed for actions (such as Touch Drag) and transactions (such as Navigate in Chrome).</p> <p></p>"},{"location":"recorder/appendix_g/","title":"Selenium Integration","text":"<p>Selenium is a browser automation tool, enabling you to record and playback your interactions with a browser. Its development environment (IDE) is a Firefox add-on, and it can run various browser drivers, such as IE, Chrome, and Firefox. Selenium is open-source software, and can be used without charge.</p> <p>WebLOAD enables integration of a Selenium script into WebLOAD, and the gathering of navigation timing statistics. This is useful for gathering information regarding user experience, such as how long it takes to login, or how long it takes a page to render.</p> <p>While WebLOAD simulates the load on a server, Selenium simulates the end-user experience. A hybrid WebLOAD-Selenium solution can thus give you the advantages of both simulation types. To implement such a solution, you can run a WebLOAD load session that does the following:</p> <ul> <li>Runs a regular WebLOAD script with many users.</li> <li>Run a Selenium script that simulates the same actions, for a single user.</li> </ul> <p>The template will gather and display statistics from both scripts in the WebLOAD reports. In order to easily distinguish between the statistics from the regular WebLOAD script and those from the Selenium script, it is recommended to give the transactions in each of the two scripts a different distinctive name. For example:</p> <ul> <li><code>Selenium-user-login</code> in the Selenium script</li> <li><code>WL-user-login</code> in the WebLOAD script</li> </ul> <p>Note: This appendix is intended for users creating Selenium code to be used in WebLOAD only. If you wish to use Selenium as usual and add WebLOAD navigation- timing functionality, refer to the Working with Java Selenium Scripts section in Chapter 3 Advanced JavaScript Script Features of the WebLOAD Scripting Guide.</p>"},{"location":"recorder/appendix_g/#using-selenium-scripts","title":"Using Selenium Scripts","text":"<p>This section describes how to use Selenium scripts in WebLOAD.</p>"},{"location":"recorder/appendix_g/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Download the Selenium required jars:</p> <ol> <li> <p>In the selenium web-site (http://www.seleniumhq.org/), select the Download tab.</p> </li> <li> <p>In \u2018Selenium Client &amp; WebDriver Language Bindings\u2019, download the Java version (selenium-java-x.x.zip).</p> </li> </ol> </li> <li> <p>Unzip the downloaded file in a temporary location.</p> </li> <li> <p>Copy the selenium-java-x.x.jar and all jars in the \u2018libs\u2019 folder to the WebLOAD Java extensions folder: c:\\ProgramData\\RadView\\WebLOAD\\extensions\\java</p> </li> <li> <p>If there are duplicate jars (same base name with different number), delete the older versions.</p> </li> </ol> <p>Important: Selenium dependencies include jar files that are already shipped with WebLOAD, but not always the same version. Make sure there are no duplicates by deleting the older versions. For example, if you have both commons-codec-1.9.jar and commons-codec-1.3.jar, delete the commons-codec-1.3.jar file.</p> <p>Note: Version numbers are not decimal numbers, so for example commons-codec- 1.10.jar is newer than commons-codec-1.3.jar.</p>"},{"location":"recorder/appendix_g/#step-1-create-a-webload-selenium-script","title":"Step 1: Create a WebLOAD Selenium Script","text":"<p>Do one of the following:</p> <ul> <li> <p>Record a Selenium script using the Selenium IDE, and export it to WebLOAD. Refer to Recording and Exporting a Selenium Script . It is recommended to record the script both in Selenium IDE and in WebLOAD simultaneously.</p> </li> <li> <p>Create a Selenium script in WebLOAD using the Selenium building blocks. Refer to Selenium Building Blocks . </p> </li> </ul>"},{"location":"recorder/appendix_g/#recording-and-exporting-a-selenium-script","title":"Recording and Exporting a Selenium Script","text":""},{"location":"recorder/appendix_g/#prerequisites-for-selenium-ide-export","title":"Prerequisites for Selenium IDE Export","text":"<ol> <li> <p>Install Firefox.</p> </li> <li> <p>Install the Selenium IDE plug-in for Firefox.</p> </li> <li> <p>Go to https://addons.mozilla.org/en-US/firefox/addon/selenium- ide-webload-formatter/ and install the WebLOAD plug-in for Selenium that enables exporting Selenium scripts to WebLOAD.</p> </li> </ol>"},{"location":"recorder/appendix_g/#recording-with-selenium-ide","title":"Recording with Selenium IDE","text":"<ol> <li> <p>Launch Selenium IDE by clicking the Selenium IDE button in the Firefox toolbar.</p> <p></p> <p>The Selenium IDE is launched.</p> </li> <li> <p>Record a desired script in the Selenium IDE.</p> <p></p> <p>Note: It is possible to record the same script both in Selenium and in WebLOAD simultaneously.</p> </li> <li> <p>After you finish recording, export the Selenium script to WebLOAD format as follows:</p> <ol> <li> <p>In the Selenium IDE, select Export Test Case As &gt; WebLOAD JavaScript.</p> <p></p> </li> <li> <p>Enter a name for the script. The script is saved as a WebLOAD .js file.</p> <p>Note that the .js file contains a WebLOAD command, reportStatistics, which appears periodically throughout the script. The command instructs WebLOAD to collect navigation timing statistics from the browser regarding the current page.</p> </li> </ol> </li> </ol> <p>Note: By default, WebLOAD reports navigation timing statistics as an average across all pages accessed by the Selenium Driver. If you wish to also display the statistics for a particular page separately, use a modified reportStatistics command, as described in Selenium Report Statistics .</p>"},{"location":"recorder/appendix_g/#step-2-create-a-webload-recorder-project-file-from-the-selenium-script","title":"Step 2: Create a WebLOAD Recorder Project File from the Selenium Script","text":"<p>Perform one of the following:</p> <ul> <li>Automatic Conversion to a Project File</li> <li>Manual Conversion to a Project File</li> </ul>"},{"location":"recorder/appendix_g/#automatic-conversion-to-a-project-file","title":"Automatic Conversion to a Project File","text":"<ol> <li> <p>In the WebLOAD Recorder, click Open in the File tab of the ribbon and select the JavaScript .js file you exported from Selenium.</p> <p>The Open message appears.</p> <p></p> </li> <li> <p>Click Yes to convert the JavaScript file to a WebLOAD Recorder project file.</p> </li> </ol>"},{"location":"recorder/appendix_g/#manual-conversion-to-a-project-file","title":"Manual Conversion to a Project File","text":"<ol> <li> <p>Open the JavaScript .js file you exported from Selenium, in a text browser such as Notepad.</p> </li> <li> <p>Copy the contents of the file to the clipboard.</p> </li> <li> <p>In the WebLOAD Recorder, select New Project in the File tab of the ribbon.</p> </li> <li> <p>Click Full Script in the Home tab of the ribbon.</p> </li> <li> <p>Paste the copied contents into the JavaScript View pane.</p> </li> <li> <p>Save the project as a .wlp file.</p> </li> </ol>"},{"location":"recorder/appendix_g/#step-3-edit-both-scripts","title":"Step 3: Edit Both Scripts","text":"<p>As mentioned above, it is possible to record the same actions both in Selenium and in WebLOAD simultaneously. Whether you do so or not, after creating a WebLOAD script that parallels the Selenium script, edit both scripts as desired.</p> <p>At this point it is recommended to give the transactions in each of the two scripts different distinctive names so that you will be able to easily distinguish between the statistics of each when viewing the test results. For example, give the login action the following names:</p> <ul> <li>Selenium_user_login \u2013 in the Selenium script</li> <li>WL_user_login \u2013 in the WebLOAD script</li> </ul>"},{"location":"recorder/appendix_g/#step-4-run-both-scripts-in-a-test-session","title":"Step 4: Run Both Scripts in a Test Session","text":"<ol> <li> <p>In the WebLOAD Console, define a load session template that does the following:</p> <ul> <li>Runs the Selenium script with a single user.</li> <li>Runs the regular WebLOAD script with many users.</li> </ul> <p>Note: For instructions on how to define two different scripts in a single template, refer to Adding a New Script/Mix to the Template, in the WebLOAD\u2122 Console User\u2019s Guide.</p> </li> <li> <p>Run the load session.</p> </li> </ol>"},{"location":"recorder/appendix_g/#step-5-view-the-test-results","title":"Step 5: View the Test Results","text":"<p>View the load session test results in the WebLOAD Console, WebLOAD Analytics, or the WebLOAD Web Dashboard.</p> <p>The following table describes the navigation timing measurements. These measurements are gathered by WebLOAD\u2019s <code>reportStatistics</code> command. By default, these measurements report navigation timing statistics as an average across all pages for which the <code>reportStatistics</code> command was invoked.</p> <p>If you added an optional <code>Page Name</code> parameter to a <code>reportStatistics</code> command (refer to Selenium Report Statistics ), the resultant measurement names will be displayed as <code>&lt;Measurement Name&gt;-&lt;Page Name&gt;</code>. Thus for example, the measurement <code>Selenium Redirect \u2013 Home Page</code> displays the redirect time for the home page.</p> <p>Note that in all navigation timing measurements, time is reported in units of seconds.</p> <p> </p> Measurement Name Type Definition Selenium Redirect Time Timer <p>Redirection Time.</p><p>The time from redirectStart to redirectEnd.</p> Selenium App Cache Time Timer <p>Fetch from cache, if relevant.</p><p>The time from redirectEnd to fetchStart.</p> Selenium DNS Time Timer <p>DNS Lookup time.</p><p>The time from domainLookupStart to domainLookupEnd.</p> Selenium Connect Time Timer <p>TCP Connect time.</p><p>The time from connectStart to connectEnd.</p> Selenium Request Time Timer <p>Request until first-byte.</p><p>The time from requestStart to responseStart.</p> Selenium First Byte Time Timer <p>The time from navigationStart to responseStart.</p><p>Note that the First Byte is calculated since navigation start, and not since request end as in WebLOAD.</p> Selenium Page Response Time Timer <p>Response download time. The time from responseStart to</p><p>responseEnd.</p> Selenium domInteractive Time Timer The time from navigationStart to domInteractive. Selenium domContentLoaded Time Timer <p>The time from navigationStart to</p><p>domContentLoadedEventStart.</p><p>Note that this measures the time until domContentLoadedEvent-Start but not event end, meaning until all content is loaded, but not including the javascript execution.</p> Selenium Processing Time Timer The time from load responseEnd to loadEventStart. Selenium onLoad Time Timer The time from loadEventStart to loadEventEnd. Selenium Full Page Time Timer The time from navigationStart to loadEventEnd. <p>The following figure explains the various timing attributes listed in the Table</p> <p></p>"},{"location":"recorder/appendix_h/","title":"Glossary","text":"Glossary Term Description AAT An older, obsolete WebLOAD utility that was used for recording web session activities as a JavaScript file. It is replaced by WebLOAD Recorder. Aborted Rounds The number of times the Virtual Clients started to run a script but did not complete the script, during the last reporting interval. This might be due to a session being stopped either automatically or manually by the user. Script Specification of the sequence of HTTP protocol calls sent by Virtual Clients to the SUT (System Under Test). scripts are written in JavaScript. You can either write scripts as a text file or generate them automatically using the WebLOAD Recorder. Application Being Tested (ABT) See SUT. Attempted Connections The total number of times the Virtual Clients attempted to connect to the SUT during the last reporting interval. Automatic Transaction counters <p>If you have Automatic Transactions enabled, WebLOAD creates three counters for each GET and POST statement in the script:</p><p>- The total number of times it occurred</p><p>- The number of times it succeeded</p><p>- The number of times it failed during the last reporting interval.</p> Average For timers, average is the total amount of time counted by the timer (not the elapsed time) divided by the Count (that is, the total number of readings). For example, the average for Transaction Time is the amount of time it took to complete all the successful transactions, divided by the number of successful transactions (the Count). Built-in Timer A timer measures the time required to perform a given task. WebLOAD supports both programmed timers and built-in timers. ROUND TIME is a built-in timer. The ROUND TIME is the time needed for one complete execution of a script. Connect Time <p>The time it takes for a Virtual Client to connect to the System Under Test (the SUT), in seconds. In other words, the time it takes from the beginning of the HTTP request to the TCP/IP connection.</p><p>The value posted in the Current Value column is the average time it took a Virtual Client to connect to the SUT during the last reporting interval.</p><p>If the Persistent Connection option is enabled, there may not be a value for Connect Time because the HTTP connection remains open between successive HTTP requests.</p> Connection Speed (Bits Per Second) <p>The number of bits transmitted back and forth between the Virtual Clients and the System Under Test (SUT), divided by the time it took to transmit those bits, in seconds.</p><p>You can set the Virtual Clients to emulate a particular connection speed during the test, either by using the Variable Connection Speed settings, or by coding the connection speed in the script.</p><p>If a connection speed is specified for the test, WebLOAD reports it in the Statistics Report.</p><p>The value posted in the Current Value column is the number (sum) of bits passed per second during the last reporting interval. It should match, very closely, the connection speed you specified for the test.</p> Console <p>The WebLOAD component that manages the test session.</p><p>The Console performs the following:</p><p>- Configures Load Session hosts and scripts</p><p>- Schedules Load Session scripts</p><p>- Configures Goal\u2013Oriented test sessions</p><p>- Monitors the application's performance under the generated load</p><p>- Manages the Load Session as it is running, allowing you to pause, stop, and continue Load Session components as needed</p><p>- Displays the current performance of the SUT</p><p>- Provides a final performance reports for Probing Clients and Virtual Clients</p><p>- Manages exporting of performance reports</p> Count (For timers only.) The  total number of readings (the number of times the item being timed has  occurred) for the timed statistic since the beginning of the test. For  example, for Transaction Time, Count shows the number of transactions that  have been completed. Current  Slice The value posted for this reporting  interval in the Statistics Report main window. Current  Slice Average For per time unit statistics and counters, average is the total of  all of the current values for the last reporting interval, divided by the  number of readings.  For timers, average is the  total amount of time counted by the timer (not the elapsed time), divided by  the Count (that is, the total number of readings for the last reporting  interval). For example, the average for Transaction Time is the amount of  time it took to complete all the successful transactions in the last  reporting interval, divided by the number of successful transactions (the  Current Slice Count). Current  Slice Count (For timers only.) The total number of  readings (the number of times the item being timed has occurred) for the  timed statistic for the last reporting interval. For example, for Transaction  Time, Current Slice Count shows the number of transactions that have been  completed over the last reporting interval. Current  Slice Max The highest value reported for this statistic over the last reporting  interval. Current  Slice Min The lowest value reported for this statistic over the last reporting  interval. Current  Slice Standard Deviation The average amount the measurement for this statistic varies from the  average over the last reporting interval. Current  Slice Sum The aggregate or total  value for this statistic in this script over the last reporting interval. DNS Lookup  Time The time it takes to  resolve the host name and convert it to an IP address by calling the DNS  server. Failed Connections The total number of times  the Virtual Clients tried to connect to the SUT but were unsuccessful, during  the last reporting interval.  This number is always less  than or equal to the number of failed hits because hits can fail for reasons  other than a failed connection. Failed Hits The total number of times the Virtual Clients made an HTTP request but did not receive the correct HTTP response from the SUT during the last reporting interval. Note that each request for each gif, jpeg, html file, etc., is a single hit. Failed Hits Per Second <p>The number of times the Virtual Clients did not obtain the correct HTTP response, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of unsuccessful HTTP requests per second during the last reporting interval.</p> Failed Pages Per Second <p>The number of times the Virtual Clients did not obtain the correct response to an upper level request, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of unsuccessful requests per second during the last reporting interval.</p> Failed Rounds The total number of times the Virtual Clients started but did not complete the script during the last reporting interval. Failed Rounds Per Second The number of times the Virtual Clients started but did not complete an iteration of the script, divided by the elapsed time, in seconds. The value posted in the Current Value column is the number (sum) of failed iterations of the script per second during the last reporting interval. First Byte The time it takes a Virtual Client to receive the first byte of data. Gallery See Templates Gallery. Goal\u2013Oriented Test <p>A WebLOAD component enabling you to define the performance goals required, and view the status of your application when it is operating under this performance goal. WebLOAD provides a Goal\u2013Oriented Test Wizard for configuring these performance goals. WebLOAD automatically accelerates the number of Virtual Clients accessing your website until you meet your performance goal.</p><p>Note: The Goal-Oriented Test Wizard was previously called the Cruise Control Wizard.</p> Goal\u2013Oriented Test Wizard See Goal\u2013Oriented Test. Hit Time <p>The time it takes to complete a successful HTTP request, in seconds. Each request for each gif, jpeg, html file, etc., is a single hit. The time of a hit is the sum of the Connect Time, Send Time, Response Time, and Process Time.</p><p>The value posted in the Current Value column is the average time it took to make an HTTP request and process its response during the last reporting interval.</p> Hits <p>The total number of times the Virtual Clients made HTTP requests to the System Under Test (SUT) during the last reporting interval.</p><p>For example, a Get statement for a URL retrieves a page. The page can include any number of graphics and contents files. Each request for each gif, jpeg, html file, etc., is a single hit.</p> Hits Per Second <p>The number of times the Virtual Clients made an HTTP request, divided by the elapsed time, in seconds. Each request for each gif, jpeg, html file, etc. is a single hit.</p><p>The value posted in the Current Value column is the number (sum) of HTTP requests per second during the last reporting interval.</p> Host A computer connected via a network, participating in a test session. Each Host in a test session has assigned tasks. A host can act as either a Load Machine or a Probing Client Machine. All hosts participating in a test session must be accessible to the Console over a network. Therefore they must run TestTalk, the network agent. HTTP Response Status <p>WebLOAD creates a row in the Statistics Report for each kind of HTTP status code it receives as an HTTP response from the SUT (redirection codes, success codes, server error codes, or client error codes).</p><p>The value posted is the number of times the Virtual Clients received that status code during the last reporting interval.</p> Integrated Report A single configurable report that can integrate both standard performance data, and data from the NT Performance Monitor. This report gives you a more complete picture of the performance of your application. The data to be monitored and the data to be displayed in the report are both configurable in the Console. Internet Productivity Pack (IPP) Provides a set of protocol implementations enabling you to load-test your application using these protocols. Java and ActiveX counters <p>You can add function calls to your scripts that enable you to instantiate and call methods and properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function calls in the script that you are running, WebLOAD reports three counters for them in the Statistics Report:</p><p>- The total number of times it occurred</p><p>- The number of times it succeeded</p><p>- The number of times it failed during the last reporting interval.</p><p>The row heading in the Statistics Report is the name of the function call.</p> Java and ActiveX timers <p>You can add function calls to your scripts that enable you to instantiate and call methods and properties in Java and ActiveX components (see the WebLOAD Scripting Guide). If there are ActiveX or Java function calls in the script you are running, WebLOAD reports timers for them in the Statistics Report.</p><p>The timer value is the average amount of time it took to complete the function call, in seconds, during the last reporting interval.</p><p>The row heading in the Statistics Report is the name of the function call.</p> Load Generator The component of the Load Machine that generates Virtual Clients. Load Generators have the task of bombarding the System Under Test with HTTP protocol call requests as defined in the script. WebLOAD assesses the application's performance by measuring the response time experienced by the Virtual Clients. The number of Virtual Clients at any given moment is determined by the user. Load Generator Machine See Load Machine. Load Machine A host that runs Load Generators. Load Generators bombard the application under test with a large load, to enable complete scalability and integrity testing. Load Session <p>A Load Session includes both the complete Load Template and the results obtained while running that Load Session. A Load Template consists of information about the hosts and scripts participating in the current Load Session. The Load Template will also include scheduling information. The complete Load Template is illustrated in the Session Tree. Storing a Load Template saves you time when repeatedly running WebLOAD with the same, or even a similar network configuration, since you don't have to recreate your Load Template from scratch each time you want to start working.</p><p>Storing Load Session results can be useful when you want to examine results from multiple test sessions or for analyzing test session results.</p> Load Size The number of Virtual Clients running during the last reporting interval. Load Template A Load Template contains the complete Load Session definition, without the test results. A Load Template includes information about the participating hosts and the scripts used in the current Load Session. The definition also includes scheduling information and the configuration of the Server Monitor and Integrated Reports. The complete Load Template is illustrated in the Session Tree. Storing a Load Template saves you time when repeatedly running WebLOAD with the same, or even a similar network configuration, since you do not have to recreate your Load Template from scratch each time you rerun a test. Page Time <p>The time it takes to complete a successful upper level request, in seconds. The Page Time is the sum of the Connection Time, Send Time, Response Time, and Process Time for all the hits on a page.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to make an upper level request and process its response during the last reporting interval.</p> Pages The total number of times the Virtual Client made upper level requests, both successful and unsuccessful, during the last reporting interval. Pages Per Second <p>The number of times the Virtual Clients made upper level requests divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of requests per second during the last reporting interval.</p> Per Time Unit statistics Ratios that calculate an average value for an action or process. For example: Transactions Per Second, Rounds Per Second. Portfolio A Portfolio of reports enables you to generate a single, inclusive report that contains all the charts generated by the templates included in the portfolio. Probing Client A software program which \"bombards\" the SUT as a single Virtual Client, to further measure the performance of the SUT. WebLOAD generates exact values for Probing Client performance. Probing Client Machines Hosts running Probing Client software simulating one Virtual Client, and running at the same time as Load Machines. Probing Client software See Probing Client. Process Time <p>The time it takes WebLOAD to parse an HTTP response from the SUT and then populate the document-object model (DOM), in seconds.</p><p>The value posted in the Current Value column is the average time it took WebLOAD to parse an HTTP response during the last reporting interval.</p> Receive Time The elapsed time between receiving the first byte and the last byte. Report Portfolio See Portfolio. Resource Manager <p>Distributes and circulates WebLOAD testing resources (Virtual Clients and Probing Clients) amongst users on a \"need to use\" basis. The Resource Manager is packaged with a maximum number of Virtual Clients, Probing Clients and Connected Workstation ports, as defined by the WebLOAD package.</p><p>With the Resource Manager, every WebLOAD Console can operate in Standalone Workstation mode or Connected Workstation mode.</p> Response Data Size <p>The size, in bytes, of all the HTTP responses sent by the SUT during the last reporting interval.</p><p>WebLOAD uses this value to calculate Throughput (bytes per second).</p> Response Time <p>The time it takes the SUT to send the object of an HTTP request back to a Virtual Client, in seconds. In other words, the time from the end of the HTTP request until the Virtual Client has received the complete item it requested.</p><p>The value posted in the Current Value column is the average time it took the SUT to respond to an HTTP request during the last reporting interval.</p> Responses <p>The number of times the SUT responded to an HTTP request during the last reporting interval.</p><p>This number should match the number of successful hits.</p> Round Time <p>The time it takes one Virtual Client to finish one complete iteration of a script, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to finish one complete iteration of the script during the last reporting interval.</p> Rounds The total number of times the Virtual Clients attempted to run the script during the last reporting interval. Rounds Per Second <p>The number of times the Virtual Clients attempted to run the script, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of attempts (both successful and unsuccessful) per second during the last reporting interval.</p> Send Time <p>The time it takes the Virtual Client to write an HTTP request to the SUT, in seconds.</p><p>The value posted in the Current Value column is the average time it took the Virtual Clients to write a request to the SUT during the last reporting interval.</p> Server Performance Measurements <p>If you selected Performance Monitor statistics for the report, WebLOAD creates a row for them and reports their values in the Statistics Report.</p><p>For definitions of the statistics, see the Server Monitor Definition dialog box.</p><p>Be selective when choosing server performance measurements , otherwise the system resources required to manage the data might affect the Console.</p> Session Tree A graphic representation of a Load Template and status. It illustrates the different components of a test session, including Load Machines and Probing Clients, the scripts that they execute, and their status. Single Client See Probing Client. Standard Deviation The average amount the measurement varies from the average since the beginning of the test. Successful Connections <p>The total number of times the Virtual Clients were able to successfully connect to the SUT during the last reporting interval.</p><p>This number is always less than or equal to the number of successful hits because several hits might use the same HTTP connection if the Persistent Connection option is enabled.</p> Successful Hits The total number of times the Virtual Clients made an HTTP request and received the correct HTTP response from the SUT during the last reporting interval. Each request for each gif, jpeg, html file, etc., is a single hit. Successful Hits Per Second <p>The number of times the Virtual Clients obtained the correct HTTP response to their HTTP requests divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful HTTP requests per second during the last reporting interval.</p> Successful Pages Per Second The value posted in the Current Value column is the number (sum) of successful requests per second during the last reporting interval. Successful Rounds The total number of times the Virtual Clients completed one iteration of the script during the last reporting interval. Successful Rounds Per Second <p>The number of times the Virtual Clients completed an entire iteration of the script, divided by the elapsed time, in seconds.</p><p>The value posted in the Current Value column is the number (sum) of successful iterations of the script per second during the last reporting interval.</p> SUT The system running the Web application currently under test. The SUT (System Under Test) is accessed by clients through its URL address. The SUT can reside on any machine or on multiple machines, anywhere on the global Internet or your local intranet. Template See Load Template. Templates Gallery The Templates Gallery is a single entity that contains predefined templates, user-defined templates, and portfolios. Test Program See Test Script. Test Script The script. This defines the test scenario used in your Load Session. Scripts are written in JavaScript. Test Template See Load Template. TestTalk The network agent. This program enables communication between the Console and the host computers participating in the test. Throttle Control A WebLOAD component that enables you to dynamically change the Load Size while a test session is in progress. Throughput (Bytes Per Second) The average number of bytes per second transmitted from the SUT to the Virtual Clients running the script during the last reporting interval. In other words, this is the amount of the Response Data Size, divided by the number of seconds in the reporting interval. Time to First Byte The time that elapsed since a request was sent until the Virtual Client received the first byte of data. User-defined Automatic Data Collection <p>If you have Automatic Data Collection enabled, WebLOAD creates three counters for each GET and POST statement in the script:</p><p>- The total number of times the Get and Post statements occurred</p><p>- The number of times the statements succeeded</p><p>- The number of times the statements failed during the last reporting interval.</p> User-defined counters <p>Your own counters that you can add to scripts using the SendCounter() and the SendMeasurement() functions (see the WebLOAD Scripting Guide). If there is a user-defined counter in the script that you are running, WebLOAD reports the counter\u2019s values in the Statistics Report.</p><p>The row heading is the name (argument) of the counter. That is, the row heading is the string in parenthesis in the SendCounter() or SendMeasurement() function call.</p><p>The value reported is the number of times the counter was incremented during the last reporting interval.</p> User-defined timer <p>Timers that you can add to scripts to keep track of the amount of time it takes to complete specific actions (see the WebLOAD Scripting Guide). If there are any timers in the scripts that you are running, WebLOAD reports their values in the Statistics Report.</p><p>The row heading is the name (argument) of the timer. That is, the row heading is the string in parenthesis in the SetTimer() function call. The timer represents the time it takes to complete all the actions between the SetTimer() call and its corresponding SendTimer() call, in seconds.</p><p>The value posted is the average time it took a Virtual Client to complete the actions between the pair of timer calls, in seconds, during the last reporting interval.</p> User-defined Transaction counters <p>Transaction functions that you can add to scripts for functional tests (see the WebLOAD Scripting Guide). If there is a user-defined transaction function in the script that you are running, WebLOAD reports three counters for it in the Statistics Report:</p><p>- The total number of times the transaction occurred</p><p>- The number of times a transaction succeeded</p><p>- The number of times a transaction failed during the last reporting interval.</p><p>The row heading is the name (argument) of the transaction. That is, the row heading is the string in parenthesis in the BeginTransaction() function call.</p> User-defined Transactions timers <p>A timer for user-defined transaction functions. If there is a user-defined transaction function in the script that you are running, WebLOAD reports a timer for it in the Statistics Report.</p><p>The row heading is the name (argument) of the user- defined transaction. That is, the row heading is the string in parenthesis in the BeginTransaction() function call.</p><p>The timer represents the average time it took to complete all the actions between the BeginTransaction() call and its corresponding EndTransaction() call, in seconds, during the last reporting interval.</p> Virtual Client <p>Artificial entities run by Load Generators. Each such entity is a perfect simulation of a real client accessing the System Under Test (SUT) through a Web browser.</p><p>Virtual Clients generate HTTP calls that access the SUT. The Load Generators that run Virtual Clients can reside anywhere on the Internet or on your local intranet. scripts are executed by all the Virtual Clients in parallel, achieving simultaneous access to the SUT. The size of the load on your SUT is determined by the number of Virtual Clients being generated. You may define as many Virtual Clients as needed, up to the maximum</p><p>supported by your WebLOAD \u201cpackage.\u201d</p> WebLOAD Analytics WebLOAD Analytics enables you to analyze data, and create custom, informative reports after running a WebLOAD test session. WebLOAD Console See Console. WebLOAD Recorder An easy-to-use tool for recording, creating, and authoring protocol scripts for the WebLOAD environment. WebLOAD Load Template See Load Template. WebLoad Session See Load Session. WebLOAD Wizard A WebLOAD Wizard that steps you through the configuration process. Each screen of the WebLOAD Wizard contains text explaining the configuration process. The WebLOAD Wizard enables you to create a basic Load Template. After using the demo, you can use the Console ribbon to add functionality not available through the WebLOAD Wizard. WebRM See Resource Manager."},{"location":"recorder/before_you_begin/","title":"Before You Begin using WebLOAD Recorder","text":"<p>This section provides information before you begin using WebLOAD Recorder.</p>"},{"location":"recorder/before_you_begin/#before-you-begin","title":"Before You Begin","text":"<p>Before you begin recording scripts using WebLOAD Recorder, there are configuration steps that you may have to complete, depending on the Web application you want to test.</p> <p>If you plan to record a script that includes retrieving a page that you accessed previously during that script, you should clear the cache and cookies in the browser. See Clearing the Cache and Cookies in Your Browser .</p> <p>When you have completed these startup steps, you can either start working with WebLOAD Recorder immediately, or you can configure the recording options first. For more information about configuring the recording options, see Configuring the Recording and Script Generation Options .</p>"},{"location":"recorder/before_you_begin/#clearing-the-cache-and-cookies-in-your-browser","title":"Clearing the Cache and Cookies in Your Browser","text":"<p>If your browser is set to use a cache file, steps such as loading a page that you have already visited are bypassed when you record a script.</p> <p>If your browser loads a page from the cache file, that action is not recorded because retrieving a file from the cache is not an HTTP protocol call. Typically, this behavior is appropriate because you want to emulate the behavior of an actual browser during a test. However, if you want each visit to a page during a test to connect through an actual GET statement, you must work without a cache file when you record a script.</p> <p>When you start recording, WebLOAD automatically changes the browser\u2019s proxy settings to clear the cache and cookies, according to the definitions in the Recording and Script Generation dialog box (see Configuring the Recording and Script Generation Options ). This enables WebLOAD Recorder to record all HTTP traffic. If you do not want to clear the cache and cookies automatically, you can manually clear the cache and cookies in your browser by following the instructions provided by your browser.</p>"},{"location":"recorder/before_you_begin/#configuring-the-proxy-value-for-your-browser","title":"Configuring the Proxy Value for Your Browser","text":"<p>Before you begin recording scripts using WebLOAD Recorder, your browser must be configured to use a specific proxy setting. This is usually done automatically when opening WebLOAD Recorder, but can also be done manually in the browser.</p> <p>Note: If your system is already configured to use a proxy setting, WebLOAD will preserve this setting for internal use, and will restore the setting after recording is complete.</p> <p>The procedures described here describe how to configure the proxy server for Internet Explorer, Netscape Navigator, and Mozilla Firefox. If you are using a different browser, read through the proxy setting procedures and modify them as necessary for configuring your browser.</p> <p>]Note: If your system is already using the WebLOAD Recorder default port (9884) for another application, you may designate an alternate port number (see Setting the Proxy Options ). </p> <p>When recording is finished, reset the browser proxy to its original setting.</p>"},{"location":"recorder/before_you_begin/#configuring-the-proxy-value-in-internet-explorer","title":"Configuring the Proxy Value in Internet Explorer","text":"<p>To configure the proxy value in Internet Explorer:</p> <ol> <li> <p>Open WebLOAD Recorder (see Starting WebLOAD Recorder ).</p> </li> <li> <p>Locate the Proxy Port number in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame. Usually this port number is 9884 (see Setting the Proxy Options ).</p> </li> <li> <p>Determine if your organization has a Proxy Server that must be used to access the Internet when you record scripts.</p> </li> <li> <p>If your organization has a Proxy Server:</p> <ol> <li>Determine the proxy name and port number.</li> <li>If the proxy port that it uses is not the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step 6.</li> <li>If the proxy port number is the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step    7.</li> </ol> </li> <li> <p>If your organization does not use a Proxy Server, go to step 7.</p> </li> <li> <p>Configure your organization\u2019s proxy as the application proxy in WebLOAD Recorder:</p> <ol> <li> <p>Open WebLOAD Recorder.</p> </li> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon and then select the Proxy Options tab.</p> </li> <li> <p>Select the Use the following definitions for the application\u2019s proxy server  option.</p> </li> <li> <p>In the HTTP Proxy/Port fields, type the name and port number of your organization\u2019s proxy.</p> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Open Internet Explorer.</p> </li> <li> <p>Select Tools &gt; Internet Options and then select the Connections tab.</p> </li> <li> <p>Click LAN Settings.</p> </li> <li> <p>In the Local Area Network LAN Settings dialog box, select the Use a proxy server option.</p> </li> <li> <p>In the Address field, type localhost.</p> </li> <li> <p>In the Port field, type the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame.</p> </li> <li> <p>Verify that the Bypass proxy server for local addresses checkbox is cleared.</p> </li> <li> <p>Click OK.</p> <p>You are finished configuring your proxy value.</p> </li> </ol>"},{"location":"recorder/before_you_begin/#configuring-the-proxy-value-in-netscape-navigator","title":"Configuring the Proxy Value in Netscape Navigator","text":"<p>To configure the proxy value in Netscape Navigator:</p> <ol> <li> <p>Open WebLOAD Recorder (see Starting WebLOAD Recorder ).</p> </li> <li> <p>Locate the Proxy Port number in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame. Usually this port number is 9884 (see Setting the Proxy Options ).</p> </li> <li> <p>Determine if your organization has a Proxy Server that must be used to access the Internet when you record scripts.</p> </li> <li> <p>If your organization has a Proxy Server:</p> <ol> <li>Determine the proxy name and port number.</li> <li>If the proxy port that it uses is not the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step 6.</li> <li>If the proxy port number is the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step 7.</li> </ol> </li> <li> <p>If your organization does not use a Proxy Server, go to step 7.</p> </li> <li> <p>Configure your organization\u2019s proxy as the application proxy in the WebLOAD Recorder:</p> <ol> <li> <p>Open WebLOAD Recorder.</p> </li> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon and then select the Proxy Options tab.</p> </li> <li> <p>Select the Use the following definitions for the application\u2019s proxy server  option.</p> </li> <li> <p>In the HTTP Proxy/Port fields, type the name and port number of your organization\u2019s proxy.</p> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Open Netscape Navigator and do one of the following:</p> <ul> <li>If you are using Navigator 3.x, select Options &gt; Network Preferences.</li> <li>If you are using Navigator 4.x, select Edit &gt; Preferences.</li> </ul> </li> <li> <p>Within Netscape Navigator, do one of the following:</p> <ul> <li>If you are using Navigator 3.x, in the Preferences dialog box, select the Proxies tab.</li> <li>If you are using Navigator 4.x, in the Preferences dialog box, under Category, expand Advanced and then select Proxies.</li> </ul> </li> <li> <p>Select the Manual Proxy Configuration option.</p> </li> <li> <p>In the Manual Proxy Configuration dialog box, in the HTTP Address field, type localhost.</p> </li> <li> <p>In the corresponding Port Number field, type the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame.</p> </li> <li> <p>Click OK to close the Manual Configuration dialog box.</p> </li> <li> <p>Click OK to close the Preferences dialog box. You are finished configuring your proxy value.</p> </li> </ol>"},{"location":"recorder/before_you_begin/#configuring-the-proxy-value-in-mozilla-firefox","title":"Configuring the Proxy Value in Mozilla Firefox","text":"<p>To configure the proxy value in Mozilla Firefox:</p> <ol> <li> <p>Open WebLOAD Recorder (see Starting WebLOAD Recorder ).</p> </li> <li> <p>Locate the Proxy Port number in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame. Usually this port number is 9884 (see Setting the Proxy Options ).</p> </li> <li> <p>Determine if your organization has a Proxy Server that must be used to access the Internet when you record scripts.</p> </li> <li> <p>If your organization has a Proxy Server:</p> <ol> <li>Determine the proxy name and port number.</li> <li>If the proxy port that it uses is not the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step 6.</li> <li>If the proxy port number is the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame, go to step 7.</li> </ol> </li> <li> <p>If your organization does not use a Proxy Server, go to step 7.</p> </li> <li> <p>Configure your organization\u2019s proxy as the application proxy in the WebLOAD Recorder:</p> <ol> <li> <p>Open WebLOAD Recorder.</p> </li> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon and then select the Proxy Options tab.</p> </li> <li> <p>Select the Use the following definitions for the application\u2019s proxy server option.</p> </li> <li> <p>In the HTTP Proxy/Port fields, type the name and port number of your organization\u2019s proxy.</p> </li> <li> <p>Click OK.</p> </li> </ol> </li> <li> <p>Open Mozilla Firefox.</p> </li> <li> <p>Select Tools &gt; Options.</p> </li> <li> <p>Click Advanced and then click the Network tab.</p> </li> <li> <p>In the Connection area, click Settings.</p> </li> <li> <p>Click Manual proxy configuration.</p> </li> <li> <p>In the HTTP Proxy field, type localhost.</p> </li> <li> <p>In the Port field, type the proxy port number found in the Recording and Script Generation Options dialog box \u2013 Proxy Options tab \u2013 Recording Proxy Options frame.</p> </li> <li> <p>Select the Use this proxy for all protocols checkbox.</p> </li> <li> <p>Click OK.</p> <p>You are finished configuring your proxy value.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/","title":"Configuring the WebLOAD Recorder Options","text":"<p>You can set the following WebLOAD Recorder configuration options:</p> <ul> <li>Default Project Options \u2013 Settings for WebLOAD Recorder that will be in effect for each script you create. These options are for the playback.</li> <li>Current Project Options \u2013 Settings that will override the Default Project Options settings.</li> <li>Recording and Script Generation Options \u2013 Settings that define the behavior of WebLOAD Recorder during the recording and script generation of a Web session.</li> <li>Settings \u2013 Settings for WebLOAD Recorder.</li> <li>Customize \u2013 Settings for the toolbar.</li> <li>Parameterization Manager \u2013 Settings for replacing a recorded static value in a script with a random value from a pool of values, or with a whole set of values from a file.</li> </ul>"},{"location":"recorder/configuring_recorder_options/#configuring-the-default-and-current-project-options","title":"Configuring the Default and Current Project Options","text":"<p>The Project Options are settings for WebLOAD Recorder that will be in effect for each script you create.</p> <ul> <li>Default Project Options are settings that will be in effect for each script you create. Each script created or edited in WebLOAD Recorder is automatically assigned these defaults. You can modify these settings to your specifications. -Current Project Options are settings that will override the Default Project Options settings and affect only the currently open script. You can modify these settings to your specifications.</li> </ul>"},{"location":"recorder/configuring_recorder_options/#notes","title":"Notes:","text":"<p>The Current Project Options dialog boxes are the same as the Default Project Options dialog boxes except for the title.</p> <p>You must be in Edit mode to modify the options. </p>"},{"location":"recorder/configuring_recorder_options/#opening-the-default-and-current-project-options","title":"Opening the Default and Current Project Options","text":"<p>To open the Default Project Options dialog box:</p> <ul> <li>Click Default Project Options in the Tools tab of the ribbon,</li> </ul> <p>-Or-</p> <p>Select Default Project Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Default Project Options dialog box opens with the Sleep Time Control tab displayed.</p> <p></p> <p>To open the Current Project Options dialog box:</p> <ul> <li>Click Current Project Options in the Tools tab of the ribbon,</li> </ul> <p>-Or-</p> <p>Select Current Project Options from the WebLOAD Recorder Home tab of the ribbon,</p> <p>-Or-</p> <p>Right-click the Agenda root node in the Script Tree and select Current Project Options.</p> <p>The Current Project Options dialog box opens with the Sleep Time Control tab displayed.</p> <p></p> <p>The following table describes the tabs in the Default and Current Project Options dialog box.</p> <p>Table: Default and Current Project Options Dialog Box Tabs</p> Tab Description <p>Sleep Time Control</p><p>(default)</p> Define the behavior of Sleep time during script playback and debug. Sleep time is a pause to simulate the intermittent activity of real users. Pass/Fail Definition Define the test failure criteria in WebLOAD Recorder. Browser Parameters Define the Virtual Client behavior. Authentication Define the Global and Proxy authentication settings. HTTP Parameters Define the HTTP Client behavior on the HTTP protocol level. Browser Cache Define the type of cache and when the cache is cleared. Diagnostic Define the Diagnostic options that can be enabled while developing a script or for tracking problems in existing scripts. Java Options Define the Virtual Machine to be used."},{"location":"recorder/configuring_recorder_options/#setting-passfail-definitions","title":"Setting Pass/Fail Definitions","text":"<p>Use the Pass/Fail Definition options to define test failure criteria in WebLOAD Recorder.</p> <p>To set the Pass/Fail Definition options:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</p> </li> <li> <p>Select the Pass/Fail Definition tab.</p> <p>The Pass/Fail Definition tab moves to the front of the dialog box. </p> <p></p> </li> <li> <p>Set test failure criteria. By default, WebLOAD Recorder will fail a test if a severe error occurs during the test run. You can also set WebLOAD Recorder to fail the test if a set numbers of errors or warnings are encountered.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#configuring-sleep-time-control-options","title":"Configuring Sleep Time Control Options","text":"<p>Sleep time is a pause to simulate the intermittent activity of real users. WebLOAD Recorder enables you to control the sleep time during run-time and set a script to execute with the sleep times recorded in the script, random sleep times, or no sleep times.</p> <p>To configure Sleep Time Control options:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</p> </li> <li> <p>Select the Sleep Time Control (default) tab. The Sleep Time Control tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Specify the type of sleep to use when playing the script. There are four options:</p> <ul> <li> <p>Select Sleep time as recorded to run the script with the delays corresponding to the natural pauses that occurred when recording the script.</p> </li> <li> <p>Select Ignore recorded sleep time (default) to eliminate any pauses when running the script and run a worst-case stress test.</p> </li> <li> <p>Select Set random sleep time and set the range of delays to represent a range of users.</p> </li> <li> <p>Select Set sleep time deviation and set the percentage of deviate from the recorded value to represent a range of users.</p> </li> </ul> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#setting-the-browser-parameters","title":"Setting the Browser Parameters","text":"<p>The Browser Parameters option enables you to define Virtual Client behavior.</p> <p>To set the Browser Parameters options:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</p> </li> <li> <p>Select the Browser Parameters tab.</p> <p>The Browser Parameters tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>To set the Browser and Version:</p> <ol> <li>Select the browser from the Select the browser drop-down list. An appropriate version automatically appears in the Select the version field.</li> <li>You can select an alternative version from the drop-down list, or click the Change  button to edit the version definition (see Editing Browser Version).</li> </ol> </li> <li> <p>To simulate specific cache behaviors, select the DNS cache checkbox and SSL cache checkbox.</p> </li> <li> <p>To set Redirection limits:</p> <ol> <li>Select the Enable redirection checkbox.</li> <li>In the Redirection limit field, type or select the desired redirection limit. The default limit is 10.</li> </ol> </li> <li> <p>To enable a persistent connection to the server, select the Persistent connection checkbox.</p> </li> <li> <p>To set Gzip, select the Gzip support checkbox.</p> </li> <li> <p>To set character encoding:</p> <ol> <li>Select a character encoding type from the drop-down list.</li> <li>To enforce character encoding, select the Enforce character encoding checkbox.</li> </ol> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the Browser Parameters tab.</p> Field Description Browser Type The browser type and user-agent setting specify the type of browser the Virtual Clients should emulate. By default, all Virtual Clients use the WebLOAD Recorder default browser agent. Select the browser You can set WebLOAD Recorder to emulate any of the standard browsers. Select the user-agent You can specify any specific application by supplying a custom user-agent that is included in all HTTP headers. Cache The types of cache to simulate. DNS Cache <p>Caches the IP addresses received from the domain name server, reducing the domain name resolution time.</p><p>Disable DNS caching if you want to include the time for domain name resolution in the WebLOAD performance statistics.</p> SSL Cache <p>Caches the SSL decoding keys received from an SSL server, so that WebLOAD Recorder only receives the key on the first SSL connection in each round. In subsequent connections, WebLOAD Recorder retrieves the key from cache. Enabling SSL Cache also reduces transmission time during SSL communication.</p><p>Disable SSL caching if you want to measure the transmission time of the decoding key in the WebLOAD performance statistics for each SSL connection.</p> Redirection Enable redirection Enables the redirection. Redirection limit Sets the redirection limit. Persistent Connection Persistent connection (keep-alive) When enabled, WebLOAD Recorder keeps an HTTP connection alive between successive accesses in the same round of the main script. Keeping a connection alive saves time between accesses. WebLOAD attempts to keep the connection alive unless you switch to a different server. However, some HTTP servers may refuse to keep a connection alive. You should not keep a connection alive if establishing the connection is part of the performance test. HTTP properties Gzip support <p>Sets the wlGlobals.AcceptEncodingGzip flag.</p><p>When this flag is set, WebLOAD Recorder behaves as follows:</p><p>1. For each request, sends the header \u201cAccept-Encoding: gzip, deflate\u201d. This informs the server that the client can accept zipped content.</p><p>2. When this header is turned on, the server MAY send a response with the header \u201ccontent-encoding: gzip\u201d or \u201ccontent-encoding: deflate\u201d. If either of these headers is sent, it means that the response is zipped/deflated and WebLOAD Recorder will unzip/inflate the content.</p><p></p><p>Note: Most servers will work correctly even if the client does not send the \u201cAccept-Encoding: gzip, deflate\u201d header.</p><p>Therefore, unless needed, it is recommended not to set the wlGlobals.AcceptEncodingGzip flag because it is performance heavy. However, some servers will fail if it is not sent. Microsoft Internet Explorer/Mozilla sends it by default.</p><p></p><p>You can manually code the script to send the \u201cAccept-Encoding: gzip, deflate\u201d header even if the wlGlobals.AcceptEncodingGzip flag is not set. In this case, if the server returns zipped content, WebLOAD Recorder will not unzip it.</p> Character Encoding Select the character encoding value Contains the value corresponding to the character set being used. The default value is Default (0), the regional settings of the computer. Enforce character encoding Indicates whether the parser should use the character set it parses in the HTML pages or override it using the value specified in the Select Character Encoding drop-down list. The default value is false (use the encoding from the HTML pages)."},{"location":"recorder/configuring_recorder_options/#editing-browser-version-definitions","title":"Editing Browser Version Definitions","text":"<p>The available browser version list is appropriate for the browser type you select. You can add to the browser version list.</p> <p>Note: If you are working in the Current Project options dialog box, adding a browser version to the list only affects the current session. When you restart the application, the original browser version list is used. If you are working in the Default Project options dialog box, the updated browser version list is saved for future sessions as well.</p> <p>To add a browser version:</p> <ol> <li> <p>Click the browse button in the Browser Type area on the Browser Parameters tab. The User Agent dialog box opens.</p> <p></p> </li> <li> <p>Manually edit the version definition.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#setting-the-http-parameters","title":"Setting the HTTP Parameters","text":"<p>The HTTP Parameters option enables you to define HTTP client behavior on the HTTP protocol level.</p> <p>To set the HTTP Parameters options:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</p> </li> <li> <p>Select the HTTP Parameters tab. The HTTP Parameters tab appears at the front of the dialog box. </p> <p></p> </li> <li> <p>Set the HTTP version by clicking HTTP version 1.0 or HTTP version 1.1.</p> </li> <li> <p>Select one or more HTTP properties checkboxes.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the HTTP Parameters dialog box.</p> Field Description HTTP version The appropriate HTTP protocol version (for example \u201cHTTP/1.1\u201d). HTTP version 1.0 Sets the HTTP protocol version to 1.0. HTTP version 1.1 Sets the HTTP protocol version to 1.1. HTTP properties Multi IP support <p>Sets the wlGlobals.MultiIPSupport flag to indicate that the HTTP protocol version supports more than one IP address.</p><p>If this option is selected, WebLOAD takes all IP addresses defined on the Load Generator machine. However, you can exclude specific IP addresses by modifying the WebLOAD.ini configuration file.</p><p>To exclude certain IP addresses, open the WebLOAD.ini file in</p><p><code>&lt;RadView directory&gt;</code>\\bin and locate the following line:</p><p>EXCLUDED_IPS=\" \"</p><p>Enter the IP addresses you wish to exclude. If you enter multiple addresses, use a pipe delimiter between addresses as in the following example:</p><p>EXCLUDED_IPS=\"127.0.0.1 Encode form data <p>Sets the wlGlobals.EncodeFormdata flag.</p><p>In general, when an HTTP client (Microsoft Internet Explorer/Firefox or WebLOAD Recorder) sends a post request to the server, the data must be HTTP encoded. Special characters like blanks, \u201c&gt;\u201c signs, and so on, are replaced by \u201c%xx\u201d. For example, space is encoded as \u201c%20\u201d.</p><p>This encoding can be performance heavy for large data, so WebLOAD Recorder enables you to turn it off.</p><p>This should ONLY be done if you are sure that the data does not contain special characters. If it does, and the customer wants to improve performance via this flag, then you should replace the special characters within the script or use wlHttp.EncodeFormdata to set the flag for specific requests.</p> Accept language Sets the wlGlobals.AcceptLanguage flag. This flag defines a global value for the \u201cAccept-Language\u201d header which will be sent with each request. Some applications/servers will behave differently depending on the setting. It is a simple string and WebLOAD Recorder does not enforce any checks on the values. It is similar to the property in the sense that it is a wlGlobals/wlHttp setting that affects the value of request headers."},{"location":"recorder/configuring_recorder_options/#setting-the-browser-cache","title":"Setting the Browser Cache","text":"<p>WebLOAD Recorder enables you to define the behavior of the cache that WebLOAD Console uses in order to simulate the behavior of a browser\u2019s cache. WebLOAD can cache JavaScript files, style sheets, images, applets, and XML files.</p> <p>To define the browser cache behavior:</p> <ol> <li>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</li> <li> <p>Select the Browser Cache tab.</p> <p>The Browser Cache tab moves to the front of the dialog box.</p> <p></p> </li> </ol> <p>The following table describes the fields in the Browser Cache tab.</p> Field Description Browser cache types None All Virtual Clients simulate a browser with no available cache. Clear cache after each Request Defines that the cache will be cleared after each request. Check for newer version after each Request <p>Defines that WebLOAD will check for a newer version of the cached item after every request.</p><p>Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</p> Clear cache after each Round Defines that the cache will be cleared after each script execution round. This is the default setting. Check for newer version after each Round <p>Defines that WebLOAD will check for a newer version of the cached item after each round.</p><p>Whenever the engine has a request for a cached resource, the engine sends the request with an \u201cif-modified-since\u201d header. If the server responds with a 200 status, the engine will refresh the cache.</p> Never clear cache Defines that the cache will never be cleared. Each client maintains its own cache. Cache content <p>You can select a filter, enabling you to indicate specific content types to be cached in the script. The available filters are:</p><p>- JavaScript files</p><p>- Style sheets</p><p>- Images</p><p>- Applets</p><p>- XML files</p><p>- Dynamic</p>"},{"location":"recorder/configuring_recorder_options/#configuring-authentication-settings","title":"Configuring Authentication Settings","text":"<p>WebLOAD Recorder enables you to define the global and proxy authentication settings.</p> <p>WebLOAD Recorder enables you to configure a double proxy configuration, which instructs the recorder to use two application proxies, one for regular HTTP traffic and another for secure (SSL) traffic. To configure the two proxies, see Configuring a Double Proxy *.</p> <p>To configure Authentication settings:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box appears.</p> </li> <li> <p>Select the Authentication tab.</p> <p>The Authentication tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields, as described below and click OK.</p> </li> </ol> <p>The following table defines all the fields and options in the Authentication tab.</p> Field Description Global Authentication Settings User name and Password The user name and password that the script should use to log onto restricted HTTP sites. <p>NT user name and</p><p>NT password</p> The user name the script should use for Windows NT Challenge response authentication. <p>SSL client certificate file and</p><p>SSL client certificate password</p> The file name (optionally including a directory path) of the certificate WebLOAD makes available to SSL servers and type the password. Click Browse to search for the file. Authentication method <p>The authentication method supported by the server:</p><p>- NTLM (default).</p><p>- Kerberos.</p> Kerberos server The Kerberos server Fully Qualified Domain Name (FQDN). For example, specify \u201cqa4\u201d rather than \u201cqa4.radview.co.il\u201d. This field is only enabled when the authentication method is set to Kerberos. Proxy authentication settings <p>Proxy server:</p><p>Proxy host and Proxy port</p> The host name and port number for the proxy server. Proxy user name and Proxy password The user name and password for the proxy server."},{"location":"recorder/configuring_recorder_options/#setting-diagnostic-options","title":"Setting Diagnostic Options","text":"<p>Diagnostic options can be enabled while developing a script or for tracking problems in existing scripts.</p> <p>To set Diagnostic options:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box opens.</p> </li> <li> <p>Select the Diagnostic tab.</p> <p>The Diagnostic tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Set the Enable syntax check option, see Enabling Syntax Checking .</p> </li> <li> <p>Set the Enable the enhanced RadView support diagnostic option, see Enabling RadView Support Diagnostic .</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#enabling-syntax-checking","title":"Enabling Syntax Checking","text":"<p>Enable syntax checking to perform the following tests on a script while it is running.</p> Test Description Type Inspection <p>WebLOAD Recorder checks that each property receives the correct type. For example, wlLocals.ParseForms = 14 prompts the following log message:</p><p>\u201cWrong type for the property ParseForms. The correct type is Boolean. Legal values are: \u201cYes\u201d/\u201dNo\u201d or \u201ctrue\u201d/\u201dfalse\u201d.</p> Value Inspections <p>WebLOAD Recorder checks to ensure that each property is assigned a legal value. For example, wlHttp.Version = \u201c2.1\u201d prompts the following log message:</p><p>\u201c2.1 is an illegal value for the property Version. Legal values are: 1.0, 1.1.\u201d</p> Scope Inspections <p>WebLOAD Recorder checks to ensure that each property is assigned a permitted scope. For example, wlLocals.ConnectionSpeed = 28800 prompts the following log message:</p><p>\u201cThe property ConnectionSpeed is not valid for the object wlLocals.\u201d</p> Case Inspections <p>WebLOAD Recorder objects and properties are case sensitive. When syntax checking is enabled, WebLOAD Recorder checks to ensure that all objects and properties are written correctly. For example, wlLocals.parse = \u201cNo\u201d prompts the following message:</p><p>\u201cThe property parse should be written Parse.\u201d</p> <p>We recommend that syntax checking be run at least once while developing a script.</p> <p>To enable syntax checking:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon.</p> </li> <li> <p>Select the Diagnostic tab.</p> </li> <li> <p>Select the Enable syntax check checkbox.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#enabling-radview-support-diagnostic","title":"Enabling RadView Support Diagnostic","text":"<p>Enabling the RadView support diagnostic option creates large files in the WebLOAD Recorder\\User\\Log directory that may affect Load Generator performance.</p> <p>To enable RadView Support diagnostic:</p> <ol> <li>Click Default/Current Project Options in the Tools tab of the ribbon.</li> <li>Select the Diagnostic tab.</li> <li>Select the Enable the enhanced RadView support diagnostic checkbox.</li> </ol>"},{"location":"recorder/configuring_recorder_options/#configuring-the-java-options","title":"Configuring the Java Options","text":"<p>The Java options enable you to define the Java Virtual Machine to be used by WebLOAD Recorder, for executing Java classes.</p> <p>To configure Java Option settings:</p> <ol> <li> <p>Click Default/Current Project Options in the Tools tab of the ribbon. The Default/Current Project Options dialog box appears.</p> </li> <li> <p>Select the Java Options tab.</p> <p>The Java Options tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>In the Select run-time JVM to be used drop down, select one of the available Java Virtual Machines. The default setting is the WebLOAD standard Java Virtual Machine.</p> <p>The selected value is passed to wlGlobals.JVMtype and is the key for</p> <p>WLJVMs.xml. This XML file (located on every WebLOAD Machine in the</p> <p>...\\extensions\\JVMs directory) contains the following parameters for each JVM:</p> <ul> <li>Type (the value from the flag)</li> <li>Path (should be machine-agnostic)</li> <li>Options</li> </ul> <p>When Type is \u201cDefault\u201d, the RadView default (installed) JVM will be used. The default JVM\u2019s path is defined in webload.ini, as it depends on the WebLOAD installation path.</p> </li> <li> <p>Click OK.</p> <p>The Java Options are saved.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#configuring-the-recording-and-script-generation-options","title":"Configuring the Recording and Script Generation Options","text":"<p>The Recording and Script Generation Options enable you to define the behavior of the WebLOAD Recorder during the recording and script generation of a Web session.</p>"},{"location":"recorder/configuring_recorder_options/#opening-the-recording-and-script-generation-options","title":"Opening the Recording and Script Generation Options","text":"<p>To open the Recording and Script Generation Options dialog box:</p> <ul> <li>Click Recording and Script Generation Options in the Tools tab of the ribbon. </li> </ul> <p>Or-</p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder</p> <p>Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box opens with the File Extensions tab displayed.</p> <p> </p> <p>The following table describes the tabs in the Recording and Script Generation Options dialog box.</p> Tab Description Proxy Certificates Configure the Server Side and Client Side certificates. Script Generation Define how the WebLOAD Recorder should handle various HTTP elements. Default Encoding Type Select the default encoding type. Browser Settings <p>Select the default browser.</p><p>If you selected either Microsoft Internet Explorer or Netscape Navigator, you can also request that the program configure the proxy value automatically (default). If you want to configure the proxy value manually, see Configuring the Proxy Value for Your Browser .</p> <p>File Extensions</p><p>(default)</p> Select which file types should be recorded and which ones should not. Content Types Select which objects should be recorded and which ones should not. Post Data Define how the WebLOAD Recorder should handle Post Data. Proxy Options Configure the proxy values for WebLOAD Recorder and the application (if necessary). Correlation Options Define correlation and logging options. Auto Correlation Define the auto-discovery correlation options. URL Filtering Configure which types of URLs the WebLOAD Recorder records."},{"location":"recorder/configuring_recorder_options/#specifying-the-script-content-to-be-generated","title":"Specifying the Script Content to be Generated","text":"<p>Use the Script Generation tab in the Recording and Script Generation Options dialog box to specify what the WebLOAD Recorder should record in your script. The Script Generation tab lists all the HTTP objects that can be automatically identified by the WebLOAD Recorder and recorded in the script so you do not have to enter them manually. For example, you can instruct WebLOAD Recorder whether or not to record and display the headers.</p> <p>To specify the HTTP objects to be recorded:</p> <ol> <li> <p>Select Recording and Script Generation Options from the WebLOAD Recorder</p> <p>Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Script Generation tab. </p> <p>The Script Generation tab moves to the front of the dialog box. </p> <p> </p> </li> <li> <p>Select or clear the options to specify what the WebLOAD Recorder should record in your script.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the options in the Script Generation tab.</p> HTTP Object Description Example Generate Authentication <p>Generates the name and password that appear in the header of a request.</p><p>This option is selected by default.</p> wlHttp.UserName=\u201cJohn\u201d wlHttp.Password=\u201cBlue\u201d Generate proxy <p>Generates the proxy setting.</p><p>This option is selected by default.</p> wlHttp.Proxy=&lt;ProxyName&gt;.&lt;ProxyPort&gt; Generate proxy authentication <p>Generates the name and password used to identify you to the proxy.</p><p>This option is selected by default.</p> wlHttp.ProxyUserName=&lt;UserName&gt; wlHttp.ProxyPassword=&lt;Password&gt; Decode query string Records the query string that is the part of the URL after the \u201c?\u201d sign and is used for sending parameters for the specific server item which is targeted by this URL. <p>When this option is not selected, the GET command will displayed as follows:</p><p>wlHttp.Get(\u201chttp://localhost/netizenba nk/myAccountWelcome.asp?netizenSID=313 41549426&amp;ssn=1234&amp;password=1231&amp;I1.x=2 1&amp;I1.y=10\u201d)</p><p>That is all the parameters that will appear as part of the URL.</p><p>When this option is selected, the URL will be parsed and displayed as follows:</p><p>wlHttp.FormData[\u201cnetizenSID\u201d] = \u201c31341549618\u201d</p><p>wlHttp.FormData[\u201cssn\u201d] = \u201c124\u201d</p><p>wlHttp.FormData[\u201cpassword\u201d] = \u201c3424\u201d</p><p>wlHttp.FormData[\u201cI1.x\u201d] = \u201c29\u201d</p><p>wlHttp.FormData[\u201cI1.y\u201d] = \u201c14\u201d</p><p>wlHttp.Get(\u201chttp://localhost/netizenba nk/myAccountWelcome.asp\u201d)</p><p>That is a block of parameters that will be easier to parameterize.</p> Generate redirection path WebLOAD Recorder records (in the script) only the first GET statement; the rest of the URLs visited when redirected are inserted into the script as comments. The script does not revisit all the URLs during playback. <p>wlHttp.Get (\u201chttp://www.abcdef.com\u201d)</p><p>// Redirections: http://www.ghijkl.com, etc.</p> Generate all headers <p>Generates all HTTP headers.</p><p>The headers</p><p>If-Modified-Since, If-None-Matched, and Keep Alive will be commented out to overcome the situation where recorded links were fetched from the browser\u2019s</p><p>cache during the recording.</p><p>The request header Accept-Encode: gzip will also be commented out, to ensure correct behavior.</p><p>When Generate All Headers is selected, Generate Referer Header and Generate Custom Header are automatically checked and disabled so that they cannot be unchecked.</p> <p>wlHttp.Header[\u201cuser-agent\u201d]</p><p>=\u201cMozilla/4.04 [en] (WinNT; I)\u201d</p><p>wlHttp.Header[\u201caccept-charset\u201d] =\u201ciso- 8859-1,*,utf-8\u201d</p><p>wlHttp.Header[\u201cproxy-connection\u201d]</p><p>=\u201cKeep-Alive\u201d</p><p>wlHttp.Header[\u201caccept-language\u201d] =\u201cen\u201d</p> Generate referer header <p>Generates the referer header only. This header tells the server which URL submitted the request. For example, if you click a link from page xxx, the browser will send that url as the referer.</p><p>This option is selected by default.</p><p>This option is automatically selected and cannot be changed when Generate All Headers is selected.</p> wlHttp.Header[\u201cReferer\u201d] = \u201chttp://www.easycar.com/\u201d Generate custom headers Generates any headers that are not explicitly defined in the RFC, such as the SOAP Action header. This option is selected by default. Comment status Writes a comment about the status of your transactions (that is, any GET statement), including information about the contents of the pages. <p>wlHttp.Get(\u201chttp://www.RadView.com/\u201d)</p><p>//200 OK</p> Comment request headers Writes a comment for each HTTP request. <p>// Request Headers:</p><p>// user-agent=Mozilla/4.0 (compatible; MSIE 5.01; Windows NT)</p><p>// accept-encoding=gzip, deflate</p><p>// proxy-connection=Keep-Alive</p> Comment response headers Writes a comment for each reply to HTTP request. <p>// Response Headers:</p><p>// content-type=text/html</p><p>// server=Microsoft-IIS/4.0</p><p>// date=Thu, 06 Jan 2000 16:12:44 GMT</p><p>// via=1.1 localhost (Jigsaw/1.0a5)//</p><p>200 OK</p> Encode binary data Used to specify if the binary data should be encoded. By default this flag is not selected. <p>If a mobile operator wants to simulate the sending of binary data from the browser (phone) to the server. Part of the binary data is a value (for example, phone number) that needs parameterization.</p><p>When the EncodeBinaryData flag is selected, the binary form data \u201cx0Ax0BAMIRx00\u201d appears as \u201c%0A%0BAMIR%00\u201d in the script.</p> Generate VIEWSTATE data Enables filtering the  VIEWSTATE  data while  recording.  When this is not  selected,  VIEWSTATE data  will be  commented out in  the script. Save all redirection headers Records the headers for all  URL redirections. Generate Client side Cookies When unchecked, the web  page sets  cookies from the  JavaScript  and you must  implement  the cookies  manually in  the script.  If selected, the cookies from  the headers  are compared  to cookies  that the server  sends. If  there is a  difference,  the correct  SetCookie  command is  added to  the script. This is  performed  during  recording.  The cookie value  is obtained  from the  recorded  traffic. WebLOAD  automatically  inserts a  comment  before the  SetCookie command in  the script  to let the user  know that  the cookie was  added  automatically. Parse JSON Used to specify how to  present  JSON values in the  script appearing in the  JavaScript View pane \u2013  whether as  a long string, or  parsed. An example of a long script display:  <code>wlHttp.FormData[\"data\"]=\"{\\\"id\\\":\\  \"001\\\", \\\"type\\\":\\\"donut\\\",  \\\"name\\\":\\\"Cake\\\"  }\"  An example  of parsed JSON display:  var  json = {  \"id\":  \"0001\",  \"type\":  \"donut\",  \"name\": \"Cake\"  }</code> Generate Host List Enables running the same script on different hosts, with minimum editing, by replacing host names with variables.If selected, each host name in the recording is replaced by a variable.To specify the actual value of each host variable, define it in the InitAgenda() function Instead of the script including, for example: wlHttp.Get(\"https://www.amazon.com/\") It will include the following:wlHttp.Get(\"https://\" + domain_www_amazon_com + \"/\")You can then, using the same script, run one test in which you edit the InitAgenda()function so that:domain_www_amazon_com=\u201dwww.amazon.com\u201d and another test in which: domain_www_amazon_com=\u201dwww.qalab.com\u201d"},{"location":"recorder/configuring_recorder_options/#setting-the-webload-recorder-to-record-post-data-types","title":"Setting the WebLOAD Recorder to Record Post Data Types","text":"<p>Use the Post Data tab in the Recording and Script Generation Options dialog box to instruct the WebLOAD Recorder how to treat different data types when it is recording. Data can be written in the script as part of the command, as a data block, or in a data file. A data block is stored within the script itself, and is useful when you prefer to see the data directly. A data file stores the data in a local text file, and is useful when you are working with large amounts of data which would be too cumbersome to store within the script code itself, or binary data. When working with data files, only the name of the text file is stored in the script itself. Data can also be recorded as FormData, in which the data is formatted in a tidy name-value format and is</p> <p>url-encoded when sent to the server.</p> <p>While recording a script, WebLOAD automatically identifies if there are no name-value pairs, checks if there is a valid content type (for example, text/plain), and records it accordingly (for example, as Data).</p> <p>Note: The content type application/x-www-form-urlencoded (with or without a charset), should always be recorded as FORMDATA, unless you explicitly specify to record it as DATA or DATA FILE.</p> <p>To set the WebLOAD Recorder to record data types:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Post Data tab. The Post Data tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields as described in table below.</p> </li> <li> <p>Optionally, you can double-click an item from the DATA block or DATAFILE block lists to display the item\u2019s full text.</p> <p></p> </li> <li> <p>Click OK to return to the Post Data tab.</p> </li> <li> <p>Click OK to save the record options settings.</p> </li> </ol> <p>The following table defines all the fields and options in the Post Data tab.</p> Field Description DATA block Lists the types of data that the WebLOAD Recorder records as DATA blocks in the script\u2019s JavaScript. A DATA block is recorded without HTTP encoding and is not structured. During playback, the WebLOAD Recorder makes this data into form data and sends it without any further modification. A DATA block is for posting data that is not meant to be HTTP encoded, for example Web service calls. DATAFILE block Lists the types of data that the WebLOAD Recorder records as DATAFILE blocks (files with a name and a path). A DATAFILE block can store text and binary data. During playback, the WebLOAD Recorder copies and then sends this file with multipart form data, using a MIME protocol. Remove Click this button to delete a selected DATA block or DATAFILE block from both lists. Add new type Type the name of a new type you want to be added to either of the lists. As DATAFILE Adds the new type you entered in the Add new type field to the DATAFILE block list. As DATA Adds the new type you entered in the Add new type field to the DATA block list. Record Unknown Post Types as <p>Select to instruct the WebLOAD Recorder to record any data type not defined on this tab as:</p><p>- FORMDATA</p><p>- DATA</p><p>- DATAFILE</p> <p>By default, the following content types are recorded as DATA blocks:</p> <ul> <li>application/json; charset=utf-8</li> <li>application/json-rpc</li> <li>application/xml; charset=utf-8</li> <li>text/xml</li> <li>text/xml; charset=utf-8</li> </ul> <p>Note: The recorder searches for exact content types from this list. Therefore, text/xml and text/xml; charset=utf-8 are different content types even though the former is a subset of the latter.</p> <p>WebLOAD Recorder deals specially with the following content types:</p> <ul> <li>multipart/form-data \u2013 This content type is used for uploading files. The actual content type sent by the client is multipart/form-data;boundary=long- string. The recorder searches for the multipart/form-data content type and then records the request as a From Data, although it appears in the DATAFILE block list.</li> <li>multipart/text \u2013 This content type is similar to multipart/form-data, except that the multipart/text content type is not used for uploading files. The multipart/text content type is therefore handled as a DATA block, but since it contains a variable in the name (the value of boundary in multipart/text;boundary= \u2026), the treatment of this content type is hard- coded. For example, any content type that starts with multipart/text is recorded as a DATA block content type.</li> <li>soap messages \u2013 This content type is always recorded as DATA blocks.</li> </ul>"},{"location":"recorder/configuring_recorder_options/#configuring-the-default-encoding-type","title":"Configuring the Default Encoding Type","text":"<p>Use the Default Encoding Type tab in the Recording and Script Generation Options dialog box to set up the default encoding type.</p> <p>To configure the default encoding type:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Default Encoding Type tab.</p> <p>The Default Encoding Type tab moves to the front of the dialog box.</p> <p> </p> </li> <li> <p>Select an option as the default encoding type.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#configuring-the-default-browser","title":"Configuring the Default Browser","text":"<p>Use the Browser Settings tab in the Recording and Script Generation Options dialog box to set up the default browser.</p> <p>To configure the default browser:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Browser Settings tab.</p> <p>The Browser Settings tab moves to the front of the dialog box.</p> <p> </p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK. </p> <p>A message appears stating that in order for WebLOAD Recorder to change your proxy definition automatically, you must close all instances of the browser before recording.</p> <p>After you close all instances of the browser, the WebLOAD Recorder screen appears.</p> </li> </ol> <p>The following table defines all the fields and options in the Browser Settings tab.</p> <p></p> Field Description Default browser selection Web browser <p>Select this option to define Google Chrome, Mozilla Firefox or Microsoft Internet Explorer as your default browser.</p><p>If you selected Mozilla Firefox as your browser, and Mozilla Firefox was installed on the machine after WebLOAD Recorder was installed, a message appears recommending that you install the Firefox extension responsible for setting the proxy definitions automatically.</p><p>If you accept, the extension is installed.</p><p>If you do not accept, the Set the proxy definitions automatically checkbox is automatically cleared, and you should configure the proxy value manually (see Configuring the Proxy Value for Your Browser ).</p><p>The next time you check the Set the proxy definitions automatically</p><p>checkbox, WebLOAD Recorder will show the installation message again.</p> Other browser Select this option and browse to define a browser other than Google Chrome, Mozilla Firefox or Microsoft Internet Explorer as your default browser. Mobile native application Select this option to define a mobile native application as your default browser. This option is intended for recording from a mobile device. To do so, you must setup the device and the system as described in Recording Mobile Applications . None Select this option to define that there is no default browser. Automatic browser settings Set the proxy definitions automatically If you selected either Mozilla Firefox or Microsoft Internet Explorer, you can also set WebLOAD Recorder to configure their proxy settings automatically (default). If you want to configure the proxy value manually, see Configuring the Proxy Value for Your Browser . Clear browser cache Select this option to clear the browser cache before recording. This option is selected, by default. Clear browser cookies Select this option to clear the browser\u2019s cookie history before recording. This option is selected, by default. General browser settings Open a new browser window for each recording Select this option to open a new browser window each time you start recording. The first time you start recording, a message is displayed with information about this option. You can disable this message by checking the Don\u2019t show this message again checkbox. Simulate mobile user agent <p>Select this option to simulate a mobile web application.</p><p>If you select this option, define the specific user agent (browser type and browser version) you wish to simulate. You can click the Change button  to edit the user agent definition."},{"location":"recorder/configuring_recorder_options/#configuring-the-correlation-options","title":"Configuring the Correlation Options","text":"<p>Use the Correlation Options tab in the Recording and Script Generation Options dialog box to set up the correlation options.</p> <p>To configure the correlation options:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. </p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Correlation Options tab.</p> <p>The Correlation Options tab moves to the front of the dialog box.  </p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p> |Field|Description| | :- | :- | |Add correlation comments to script|<p>Select this option to instruct WebLOAD to add comments to your script in the places where correlation was performed and create a log of all the changes that were made to your script\u2019s JavaScript.</p><p>When selected, the following comment is added to your script before a command that extracts the dynamic value from a response or that uses a parameter instead of a dynamic value in a request:</p><p>//WLCORR \u2013 Extracting the dynamic value from the response according to Correlation Rule s<p>-Or-</p><p>//WLCORR \u2013 Using the Correlation Parameter instead of the dynamic value according to Correlation Rule s<p>where <code>&lt;ID&gt;</code> is the correlation rule ID.</p>| |Preserve user changes|<p>Specify whether to preserve or discard user changes before running correlation.</p><p>- When this option is unselected, all manual (user) changes to the script are discarded before running correlation. This is equivalent to performing Script Regeneration prior to running correlation.</p><p>- When this option is selected (default), user changes are preserved when correlation is run. If the changes introduced by correlation conflict with the changes made by the user, the user is requested to resolve the conflict, as described in Resolving Conflicts between Manual Changes and Correlation Changes </p>| |Correlation level|<p>Specify the correlation level to determine the type of correlation to run automatically after recording the script:</p><p>Possible values:</p><p>- Do not run \u2013 Do not run correlation after recording the script.</p><p>- Use existing rules \u2013 Perform manual correlation after recording the script, using the existing rules.</p><p>- Discover rules \u2013 Perform automatic correlation after recording the script, to discover and suggest new rules.</p><p>- Prompt \u2013 After recording the script, a dialog box is displayed enabling you to select the type of correlation you wish to perform (Do not run, Use existing rules, or Discover rules).</p>| |Logging level|<p>Specify the correlation logging level to determine the amount and content of the comments that the correlation engine adds to your script\u2019s JavaScript.</p><p>Possible values:</p><p>- 0 \u2013 None. No log messages are added to the JavaScript.</p><p>- 1 \u2013 Minimal. Fatal, Error, and Warning messages are added to the JavaScript. Fatal messages indicate that an unrecoverable error occurred, Error messages indicate that a recoverable error occurred, and Warning messages indicate that there is a possible error.</p><p>- 2 \u2013 Medium. In addition to the messages added with the minimal logging level, Info messages are added to the JavaScript. Info messages provide important information, such as, when a rule finds a value or when a correlation hint is found.</p><p>- 3 \u2013 Full. In addition to the messages added with the medium logging level, Debug messages are added to the JavaScript. Debugging messages provide detailed information about the script.</p>| |Logging file|<p>Specify the location of the correlation log file. The default file is</p><p>correlation.log and the default location is:</p><p>C:\\Program Files\\Radview\\WebLOAD\\Log</p>| |Correlation rules file|<p>Specify the location of the correlation rules XML file. The default file is</p><p>correlationRules.xml and the default location is:</p><p>C:\\Program Files\\Radview\\WebLOAD\\Extensions\\Correlation</p>| |Edit Rules|Open the Correlation Rules Editor. For more information about the Correlation Rules Editor, see Configuring the Correlation Rules .| |Flex / AMF correlation|| |Correlate Flex / AMF messages|<p>Create automatic correlation rules to correlate RPC Flex messages and Messaging Flex messages.</p><p>Selecting this option enables correlation of the DSId value. This correlation is part of the AMF script generation, which means the correlation is performed during recording.</p>| |Auto generate DSIds|<p>If selected, a new DSId is generated during session initialization. The generated DSId is used for all AMF requests until the next session initialization.</p><p>If not selected, the DSId is retrieved from the session initialization request (nil request) and is used for all AMF requests until the next session initialization.</p>| |Disable Flex correlation|Disable Flex correlation.|"},{"location":"recorder/configuring_recorder_options/#configuring-the-auto-correlation-options","title":"Configuring the Auto-Correlation Options","text":"<p>Use the Auto Correlation Options tab in the Recording and Script Generation Options dialog box to set up the Auto Discovery correlation options.</p> <p>To configure the Auto Discovery correlation options:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Auto Correlation Options tab.</p> </li> <li> <p>The Auto Correlation Options tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p></p> Field Description Minimum value length Specify the minimum length of the value to be considered for correlation. Shorter values, even if matched by a rule, are ignored. Filter strength <p>Specify the rules to display in the Correlation Review Form, according to the rule\u2019s score. Each rule is given a score during auto-discover correlation according to an algorithm that calculates the chances of the rule being used. Specify the filter strength as follows:</p><p>- Strict (few records) \u2013 Display only the rules that are very likely to be used in the script. This leads to faster script execution, but also has a high risk of missing a necessary rule.</p><p>- Normal (balanced) \u2013 Displays rules that are likely to be used in the script. This leads to average script execution, includes most (if not all) of the necessary rules and displays some rules that are not used.</p><p>- Weak (many records) \u2013 Display rules that have a chance of being used in the script. This leads to slower script execution and displays many rules that are not used.</p> Value delimiters <p>Specify the characters to be considered delimiters when searching for a dynamic value during correlation. The correlation engine searches for the dynamic value in the script, where the value is surrounded by a specific delimiter.</p><p>For example, in:</p><p>SessionID=1234&amp;Day</p><p>\u2019&amp;\u2019 is a delimiter, which defines \u20181234\u2019 and \u2018Day\u2019 as two separate strings.</p> Show correlation review form <p>Specify when to show the Correlation Review form after performing correlation.</p><p>Possible values:</p><p>- Never.</p><p>- Always.</p><p>- After Auto-discovery.</p>"},{"location":"recorder/configuring_recorder_options/#configuring-the-url-filtering-options","title":"Configuring the URL Filtering Options","text":"<p>Use the URL Filtering tab in the Recording and Script Generation Options dialog box to configure which types of URLs the WebLOAD Recorder records.</p> <p>To configure the URL filtering options:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. </p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the URL Filtering tab.</p> </li> <li> <p>The URL Filtering tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p> The following table describes the fields in the URL Filtering tab.</p> Field Description Excluded URLs List Lists the URLs that WebLOAD Recorder does not record. WebLOAD Recorder ignores all actions involving any URL in this list when it is encountered during a Web session. Included URLs List Lists the URLs that WebLOAD Recorder records. WebLOAD Recorder records all actions involving any URL in this list when it is encountered during a Web session. Edit URLs List Type a URL in this field to add the URL to either the Included URLs List or Excluded URLs List. Add to Exclude Click to add the URL in the Edit URLs List field to the Excluded URLs List. Add to Include Click to add the URL in the Edit URLs List field to the Included URLs List. Remove Click to delete a selected URL from either the Included URLs List or the Excluded URLs List."},{"location":"recorder/configuring_recorder_options/#configuring-the-file-extensions","title":"Configuring the File Extensions","text":"<p>Use the File Extension tab in the Recording and Script Generation Options dialog box to configure which types of files the WebLOAD Recorder records.</p> <p>Both the File Extensions and the Content Types tabs (see Configuring the Content Types to Record ), enable you to specify the types of data that are accepted and recorded by WebLOAD Recorder, or not accepted and ignored. On the File Extensions tab, you specify which objects should be recorded or ignored, according to their file extension, such as \u201c.gif\u201d, \u201c.wav\u201d, or \u201c.txt\u201d.</p> <p>In a case where the file extension and content types contradict each other, precedence is given to the record filter as opposed to the ignore filter. For example, if the File Extensions and Content Types tabs are configured with the following settings:</p> <ul> <li>Filter the following file extensions as \u2013 Recorded Extensions: gif</li> <li>Filter the following content types as \u2013 Ignored Types: image/gif</li> </ul> <p>A resource with the gif file extension that contains image/gif content is recorded in WebLOAD Recorder even though the image/gif content type is set to be ignored.</p> <p>To configure the file extensions:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or-</p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the File Extensions tab.     The File Extensions tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields, as described the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p> The following table describes the fields in the File Extensions tab.</p> Field Description Ignored extensions Lists the file extensions that WebLOAD Recorder does not record. WebLOAD Recorder ignores all actions involving any file extension in this list when it is encountered during a Web session. Recorded extensions Lists the file extensions that WebLOAD Recorder records. WebLOAD Recorder records all actions involving any file extension in this list when it is encountered during a Web session. Remove Click this button to delete a selected file extension from both lists. Record unknown extensions Select this option to record all actions involving any unknown file extensions encountered during a Web session. File extensions not defined and listed in the Ignored Extensions window are treated as if they were included in the Recorded Extensions window. Record all extensions Select this option to disregard the settings in the Ignored / Recorded Extensions lists. WebLOAD Recorder then records all actions involving all file extensions encountered during a Web session, including unknown file extensions. Add new extension Type a new file extension. Add Click this button to add the new file extension to the Ignored Extensions list."},{"location":"recorder/configuring_recorder_options/#configuring-the-content-types-to-record","title":"Configuring the Content Types to Record","text":"<p>Use the Content Types tab in the Recording and Script Generation Options dialog box to set up which types of Web content the WebLOAD Recorder records.</p> <p>Both the Content Types and the File Extensions tabs (see *Configuring the File Extensions ), enable you to specify the types of data that are accepted and recorded by WebLOAD Recorder, or not accepted and ignored. On the Content Types tab you</p> <p>define which objects should be recorded by type, such as \u201cimage/gif\u201d, \u201cimage/jpeg\u201d, or \u201ctext/html\u201d.</p> <p>In a case where the content types and file extension contradict each other, precedence is given to the record filter as opposed to the ignore filter. For example, if the Content Types and File Extensions tabs are configured with the following settings:</p> <ul> <li>Filter the following content types as \u2013 Recorded Types: image/gif</li> <li>Filter the following file extensions as \u2013 Ignored Extensions: gif</li> </ul> <p>A resource with the gif file extension that contains image/gif content is recorded in WebLOAD Recorder even though the gif file extension is set to be ignored.</p> <p>To configure the content types to record:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or-</p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. </p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Content Types tab.     The Content Types tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields in the Content Types tab.</p> Field Description Ignored types Lists the content types that WebLOAD Recorder does not record. WebLOAD Recorder ignores all actions involving any content type in this list when it is encountered during a Web session. Recorded types Lists the content types that WebLOAD Recorder records. WebLOAD Recorder records all actions involving any content type in this list when it is encountered during a Web session. Remove Click this button to delete a selected content type from both lists. Record unknown types Select this option to record all actions involving any unknown content types encountered during a Web session. Content types not defined and listed in the Ignored Types area are treated as if they were included in the Recorded Types area. Record all types Select this option to disregard the settings in the Ignored / Recorded Types lists. WebLOAD Recorder then records all actions involving all content types encountered during a Web session, including unknown content types. Add new content type Type a new content type. Add Click this button to add the new content type to the Ignored Types list."},{"location":"recorder/configuring_recorder_options/#setting-the-proxy-options","title":"Setting the Proxy Options","text":"<p>Use the Proxy Options tab in the Recording and Script Generation Options dialog box to designate the proxy server at your organization as the application proxy during recording sessions or to change the proxy port number for WebLOAD Recorder.</p> <p>When you record scripts with the WebLOAD Recorder, your browser must be configured to use proxy port 9884 (which is the default proxy port). In other words, you must record scripts through proxy port 9884.</p> <p>WebLOAD Recorder enables you to configure a double proxy configuration, which instructs the recorder to use two application proxies, one for regular HTTP traffic and another for secure (SSL) traffic. To configure the double proxy, see Configuring a Double Proxy *.</p> <p>To set the proxy options:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon.</p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Proxy Options tab.</p> <p>The Proxy Options tab moves to the front of the dialog box.</p> <p> </p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and options on the Proxy Options tab.</p> <p></p> HTTP Object Description Recording proxy options Proxy port The port number for the WebLOAD Recorder proxy-recorder. The default value is 9884. When you record scripts, your browser must use the default value. Use transparent proxy Select this option to enable WebLOAD Recorder to record from any Web client that does not support proxy configurations. When selected, the Proxy port field is disabled. For more information, see Recording Desktop Web Applications Application proxy options Use the following definitions for the application\u2019s proxy server Select this option if you use a proxy server to access the Internet. When selected, the HTTP proxy/Port, SSL proxy/Port and the Proxy authentication area fields are enabled and updated with the current settings from your Internet browser. (This is only relevant for Internet Explorer and Mozilla Firefox. If you are using a different Internet browser, update these fields manually). For additional information on determining if your browser is configured with a proxy, see Troubleshooting . HTTP proxy/Port The address and port number of your organization\u2019s proxy, if one exists (for example, to access the Internet beyond a company firewall). Modifying these fields automatically updates your default browser\u2019s proxy settings and restores the original settings when the recording process is complete. SSL proxy/Port The address and port number of your organization\u2019s Secure proxy, if one exists (for example, to access the Internet beyond a company firewall). Use these fields in conjunction with the HTTP Proxy/Port fields to define a double proxy. Modifying these fields automatically updates your default browser\u2019s proxy settings and restores the original settings when the recording process is complete. <p>Use browser\u2019s settings</p><p>when recording</p> Select this option to enable WebLOAD Recorder to use your default browser\u2019s proxy settings when recording a script. When selected, WebLOAD Recorder copies your default browser\u2019s proxy settings into the HTTP Proxy/Port and SSL Proxy/Port fields. (This is only relevant for Internet Explorer and Mozilla Firefox. If you are using a different Internet browser, this is irrelevant). Proxy authentication User name The user name used for proxy authentication purposes. Password The password used for proxy authentication purposes. Proxy exceptions Do not use proxy server for addresses beginning with <p>Enter the address of complex addresses you wish to bypass.</p><p>A proxy bypass entry can begin with a protocol type such as http:// or https://. If a protocol type is used, the exception entry applies only to requests for that protocol. Note that the protocol value is not case sensitive. Multiple entries should be separated by a semicolon (;).</p><p>Next, enter an Internet address, an IP address, or domain name. If no protocol is specified, any request using the address is bypassed. If a protocol is specified, requests with the address are bypassed only if they are of the indicated protocol type. Both address entries and protocol types are not case sensitive.</p><p>This field allows a wildcard character ( * ) to be used in place of zero or more characters.</p> User Authentication User Name The user name used for user authentication purposes. Password The password used for user authentication purposes."},{"location":"recorder/configuring_recorder_options/#configuring-a-double-proxy","title":"Configuring a Double Proxy","text":"<p>A double proxy configuration is a way to instruct the recorder to use two application proxies: one for non-secure HTTP traffic and one for SSL traffic. When you define only an HTTP proxy as the application proxy in the Proxy Options tab in the Recording and Script Generation Options dialog box, the recorder uses the same definition for both traffic types.</p> <p>In order to instruct the recorder to use a separate proxy for secured HTTP traffic, define the SSL Proxy and Port values.</p> <p>WebLOAD Recorder also enables you to set authentication information for accessing the proxy. In the SSL proxy configuration, the User Name and Password values (in the Proxy Authentication frame) are used for both HTTP and SSL proxies. In order to set different authentication information for the SSL proxy, add the following lines to wlproxyinclude.js (which can be found in the WebLOAD include directory):</p> <p><code>ProxyObject.RSecondarySSLProxyUserName = \u201cradview\u201d</code></p> <p><code>ProxyObject.RSecondarySSLProxyPassword=\u201crad1\u201d</code></p> <p>Finally, using this configuration will generate JavaScript code to indicate to the playback engine that it needs to use two proxies:</p> <p><code>wlHttp.UseSameProxyForSSL = false</code></p> <p><code>wlHttp.HttpProxy = wlHttp.HttpsProxy =</code></p> <p>The engine will fit the relevant proxy to the request.</p>"},{"location":"recorder/configuring_recorder_options/#setting-the-proxy-certificates","title":"Setting the Proxy Certificates","text":"<p>Use the Proxy Certificates tab in the Recording and Script Generation Options dialog box to configure the Server Side and Client Side certificates.</p> <p>To set the proxy certificates:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. </p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Proxy Certificates tab.</p> <p>The Proxy Certificates tab moves to the front of the dialog box. </p> <p></p> </li> <li> <p>Fill in the fields.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and options on the Proxy Certificates tab.</p> Field Description Server side certificates Certificate file name Browse to the server certificate file that will be used to emulate a server certificate for the user client application. Default: The certificate supplied with the WebLOAD installation. Certificate password Type the password for the supplied certificate file. Default: password of the supplied by RadView certificate. Trusted CA file name <p>Browse to a Trusted CA file that is a certificate file with the list of trusted certificate authorities.</p><p>Note: We recommend that you use the file supplied with the WebLOAD installation.</p> Client side certificates Certificate file name Browse to the client certificate file that will be used by the proxy to connect to Internet sites. Certificate password Type the password for the supplied certificate file."},{"location":"recorder/configuring_recorder_options/#setting-security-options","title":"Setting Security Options","text":"<p>Use the Security tab in the Recording and Script Generation Options dialog box to mask passwords in the script.</p> <p>There are two kinds of passwords you can mask:</p> <ul> <li>Protocol passwords \u2013 WebLOAD protocol password fields. These are the various possible password fields of the wlHttp object. They include the five following fields:<ul> <li>ProxyNTPassWord</li> <li>ProxyPassWord</li> <li>HttpsProxyPassWord</li> <li>PassWord</li> <li>NTPassWord</li> <li>Form passwords \u2013 Password fields in form data. These can vary, depending on the form. You can list the names of the passwords fields whose contents you wish to encrypt.</li> </ul> </li> </ul> <p>In the JavaScript code, the encrypted password is replaced with a \u2018decrypt\u2019 statement for the encrypted value, as shown in the following example:</p> <p></p> <p>Note that the purpose of the masking operation is to make sure passwords are not visible in plain text.</p> <p>To set the password encryption options:</p> <ol> <li> <p>Click Recording and Script Generation Options in the Tools tab of the ribbon. </p> <p>Or- </p> <p>Select Recording and Script Generation Options from the WebLOAD Recorder Home tab of the ribbon. </p> <p>The Recording and Script Generation Options dialog box appears (see Figure).</p> </li> <li> <p>Select the Security tab.</p> <p>The Security tab moves to the front of the dialog box.</p> <p></p> </li> <li> <p>Fill in the fields, as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p> The following table describes the fields and options on the Security tab.</p> Field Description Protocol Passwords Encrypt Protocol Passwords Select this option to instruct WebLOAD to encrypt all WebLOAD protocol passwords. Form Passwords Encrypt Form Passwords Select this option to instruct WebLOAD to encrypt all form passwords specified in the Form Password Fields List. Form Password Fields List Lists the form passwords that WebLOAD will encrypt. Add new form password name Type the name of a form password field to add it to the Form Password Fields List. Add Click to add a form password field to the Form Password Fields List. Remove Click to delete a selected password field from the Form Password Fields List."},{"location":"recorder/configuring_recorder_options/#configuring-the-settings","title":"Configuring the Settings","text":"<p>WebLOAD Recorder enables you to specify settings for WebLOAD Recorder.</p>"},{"location":"recorder/configuring_recorder_options/#opening-the-settings","title":"Opening the Settings","text":"<p>To open the Settings dialog box:</p> <ul> <li>Click Settings in the Tools tab of the ribbon. </li> </ul> <p>Or-</p> <ul> <li>Select Settings from the WebLOAD Recorder Home tab of the ribbon. The Settings dialog box opens.</li> </ul> <p></p> <p>The following table describes the options in the Settings dialog box.</p> Setting Description Playback Set the number of iterations to run when running scripts with WebLOAD Recorder (Default:1) and determine when to be prompted to save the session file. File Locations Define the default file locations during a test session. Diff Viewer Define which program is used for comparing recordings to playbacks. The default is WinMerge. Merge Tool Define which program is used for resolving code conflicts by editing the JavaScript code. The default is WinMerge."},{"location":"recorder/configuring_recorder_options/#setting-playback-options","title":"Setting Playback Options","text":"<p>Set the number of iterations to be run during a test session and whether to prompt to save the session file before returning from debug mode to edit mode.</p> <p>To set Playback iterations:</p> <ol> <li>In the Settings dialog box (Settings Dialog Box), click Playback. The Playback Options screen is displayed (see Settings Dialog Box).</li> <li>Specify the number of iterations to run during script playback. The default value is 1.</li> <li>Select Prompt to save the debugging session file if you wish to be prompted to save the session file before switching to edit mode. When this is not selected, you are prompted to save the session file only when closing a script or exiting WebLOAD Recorder.</li> <li>Click OK.</li> </ol>"},{"location":"recorder/configuring_recorder_options/#setting-file-locations","title":"Setting File Locations","text":"<p>Define the default file locations during a test session.</p> <p>To set the file locations:</p> <ol> <li> <p>In the Settings dialog box (Settings Dialog Box), click File Locations. The File Locations screen is displayed.</p> <p></p> <p>The Description area at the bottom of the dialog provides a short explanation of each file location item.</p> <p>The following file locations can be defined:</p> <ul> <li>Sessions, scripts, and Templates: Default storage location for WebLOAD Recorder session, project, and script files.</li> <li>User Include Files: Default path for user Include files.</li> <li>User Copy Files: Default path for user Copy files.</li> <li>User PostData Files: Default path for user PostData files.</li> <li>User Certificate Files: Default path for user Certificate files.</li> </ul> </li> <li> <p>Double-click the file location option that you wish to reset, and select a new file location.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#defining-the-difference-viewer-application","title":"Defining the Difference Viewer Application","text":"<p>Define which application is used for comparing and displaying the differences which may exist between a recording and its playback.</p> <p>To define the difference viewer application:</p> <ol> <li> <p>In the Settings dialog box (Settings Dialog Box), click Diff Viewer. The Diff Viewer screen is displayed.</p> <p> </p> <p>By default, WinMerge is selected.</p> </li> <li> <p>Optionally, select External and enter the relevant information into the corresponding field to specify a different application. Enter the following information:</p> <ol> <li>The path to the application\u2019s executable file. (Mandatory.)</li> <li>% rname \u2013 Represents the name for the dialog box which displays the recording file. (Optional.)</li> <li>% pname \u2013 Represents the name for the dialog box which displays the playback file. (Optional.)</li> <li>% record \u2013 Represents the path of the recording file. (Optional.)</li> <li>% playback \u2013 Represents the path of the playback file. (Optional.)</li> </ol> <p>Examples:</p> <ul> <li> <p>ExamDiff Pro:</p> <p>C:\\Program Files\\ExamDiff Pro\\ExamDiff.exe % record % playback -- left_display_name:% rname --right_display_name:% pname</p> </li> <li> <p>KDiff:</p> <p>C:\\Program Files\\KDiff\\kdiff3.exe % record % playback --L1 % rname --L2 % pname</p> </li> <li> <p>Araxis</p> </li> </ul> <p>C:\\Program Files\\Araxis\\compare.exe /max /wait /title1:% rname /title2:% pname % record % playback</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#defining-the-merge-tool-application","title":"Defining the Merge Tool Application","text":"<p>Define which application is used for resolving conflicts between user changes and correlation changes made to the JavaScript code.</p> <p>To define the merge tool application:</p> <ol> <li> <p>In the Settings dialog box (Settings Dialog Box), click Merge Tool. The Merge Tool screen is displayed. </p> <p></p> <p>By default, WinMerge is selected. WinMerge enables 2-way merging.</p> </li> <li> <p>Optionally, select External and enter the relevant information into the corresponding field to specify a different application such as Araxis or TortoiseSVN which enable 3-way merging. Enter the following information:</p> <ol> <li>%basefile \u2013 Represents the path of the base file, before user and correlation changes.</li> <li>%corrfile \u2013 Represents the path of the file with the correlation changes.</li> <li>%userfile \u2013 Represents the path of the file with the user changes.</li> <li>%outfile \u2013 Represents the outcome of the merge file.</li> </ol> <p>Examples:</p> <ul> <li>Perforce Merge:</li> </ul> <p><code>C:\\Path-To\\P4Merge.exe %basefile %corrfile %userfile %outfile</code></p> <ul> <li>KDiff3:</li> </ul> <p><code>C:\\Path-To\\kdiff3.exe %basefile %userfile %corrfile -o %outfile --L1 Base --L2 User --L3 Correlation</code></p> <ul> <li>Araxis:</li> </ul> <p><code>C:\\Path-To\\compare.exe /max /wait /3 /title1:Correlation /title2:Base /title3:User %corrfile %basefile %userfile %outfile /a2</code></p> <ul> <li>WinMerge (2.8 or later):</li> </ul> <p><code>C:\\Path-To\\WinMerge.exe %outfile DiffMerge:</code></p> <ul> <li>DiffMerge:</li> </ul> <p><code>C:\\Path-To\\DiffMerge.exe -caption=%mname -result=%outfile \u2013merge -nosplash -t1=%yname -t2=%bname -t3=%tname %userfile %basefile %corrfile</code></p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#customizing-the-quick-access-toolbar","title":"Customizing the Quick Access Toolbar","text":"<p>You can use the Customize Quick Access Toolbar option in the Quick Access toolbar to customize the Quick Access toolbar.</p>"},{"location":"recorder/configuring_recorder_options/#configuring-the-parameterization-manager","title":"Configuring the Parameterization Manager","text":"<p>The Parameterization Manager enables you to edit a script containing static values and transform it into a script that will run multiple variations of the static values.</p> <p>When recording a script, WebLOAD captures the data that is being sent, including login details, user selections, and entered text. When running the script under load, simulating many users, it is desirable to use variations in the data, so as to simulate the</p> <p>application more realistically. To do so, you can replace the static values with parameters.</p> <p>Parameter values can come from a file, or be automatically generated numbers, strings and dates.</p> <p>The Parameterization Manager enables you to specify how the script should select values from the data file. For example:</p> <ul> <li>Order considerations \u2013 Whether to randomly select values from the data file, or use them in the order they appear.</li> <li>Uniqueness considerations \u2013 Whether the same value can be used at the same time by different virtual clients.</li> </ul> <p>You can also specify the update policy, which defines when a new value will be read or calculated. For example, whether to update the value on each round, or once at the beginning of the test.</p>"},{"location":"recorder/configuring_recorder_options/#opening-the-parameterization-manager","title":"Opening the Parameterization Manager","text":"<p>To open the Parameterization Manager dialog box:</p> <ul> <li>Click Parameterization Manager in the Home tab of the ribbon. The Parameterization Manager dialog box opens.</li> </ul> <p></p> <p></p>"},{"location":"recorder/configuring_recorder_options/#setting-parameters-in-the-parameterization-manager","title":"Setting Parameters in the Parameterization Manager","text":"<ol> <li>In the Parameterization Manager Dialog Box (*Figure *), click Add.</li> <li>In the Name field, enter a name for the parameter.</li> <li> <p>In the Type field, select the parameter type:</p> <ul> <li>Date/Time \u2013 Defines a date/time parameter. For more information see Defining a Date/Time Parameter .</li> <li> <p>File \u2013 Defines a data file parameter. For more information see Defining a Data File . To create a new data file, see Creating a Data File </p> </li> <li> <p>Number \u2013 Defines a number parameter. For more information see Defining a Number Parameter .</p> </li> <li>Random String \u2013 Defines a random string parameter. For more information see</li> </ul> <p>Defining a Random String Parameter .</p> <p>The parameters definitions are stored with the script. You can change the parameters\u2019 definition at any time by using the Parameterization Manager again.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#defining-a-datetime-parameter","title":"Defining a Date/Time Parameter","text":"<p>To define a date/time parameter:</p> <ol> <li> <p>In the Parameterization Manager Dialog Box (*Figure *), click Add. The Parameterization Manager dialog box opens.</p> </li> <li> <p>In the Type field, select Date/Time. The fields appropriate for defining a date/time parameter appear in the dialog box.</p> <p></p> </li> <li> <p>In the Description field, optionally enter a description for the date/time parameter.</p> </li> <li> <p>Fill in the fields as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the Parameterization Manager \u2013 Date/Time dialog box.</p> Setting Description Date/Time Format Sample (current time) Shows the current time in the format you select in Date/Time format. Date/Time format Various predefined date/time formats. Select the desired format. Custom format <p>Enables you to define a custom date/time format using the supported field types. The valid field options are:</p><p>- %a \u2013 Abbreviated weekday name (such as, Fri).</p><p>- %A \u2013 Full weekday name (such as, Friday).</p><p>- %b \u2013 Abbreviated month name (such as, Oct).</p><p>- %B \u2013 Full month name (such as, October).</p><p>- %c \u2013 Standard date and time string (Sun Oct 17 04:41:13 2010).</p><p>- %d \u2013 Day of the month (1-31).</p><p>- %H \u2013 Hour, in 24-hour format (00-23).</p><p>- %I \u2013 Hour, in 12-hour format (1-12).</p><p>- %j \u2013 Day of the year (1-366).</p><p>- %m \u2013 Month in numerical format (1-12).</p><p>- %M \u2013 Minute (0-59).</p><p>- %p \u2013AM/PM.</p><p>- %S \u2013 Second (0-59).</p><p>- %U \u2013 Week of the year, (0-53), where week 1 has the first Sunday.</p><p>- %w \u2013 Weekday in numerical format (0-6), where Sunday is 0.</p><p>- %W \u2013 Week of the year, (0-53), where week 1 has the first Monday.</p><p>- %x \u2013 Date representation, as preferred in your locale.</p><p>- %X \u2013 Time representation, as preferred in your locale.</p><p>- %y \u2013 Abbreviated year (0-99).</p><p>- %Y \u2013 Full year (such as 2011).</p><p>- %Z \u2013 Time zone name.</p><p>- %% \u2013 Percent sign.</p><p>In addition, you can enter any kind of separator between fields, including spaces, dashes, underscores, slashes, and periods.</p> Verify Format <p>After entering a custom format, click this button to verify whether the format is valid:</p><p>- If it is valid, a sample of the format\u2019s output is displayed in the</p><p> Sample (current time) field.</p><p>- If it is invalid, a popup window appears indicating that you must enter a valid value.</p> Offset Specifies that the date/time parameter will not consider the current date and time but another date and time, in the future or in the past. Offset parameter by Determines by how many days and how much time to offset the current date. Prior to current date Specifies a negative offset (prior to the current day and time). Update Policy Defines when to update the parameter. Update value on each Round The virtual clients update the parameter once per round. Thus, if the same parameter appears again in the same round, it will get the same value. Update value on each use The virtual clients update the parameter\u2019s value each time it is used. Update value per Virtual Client The virtual clients update the parameter\u2019s value once at the beginning of the test (when running the InitClient function). All usage of the parameter by that virtual client will always use the same value."},{"location":"recorder/configuring_recorder_options/#defining-a-data-file","title":"Defining a Data File","text":"<p>To select a data file:</p> <ol> <li> <p>In the Parameterization Manager Dialog Box (*Figure *), click Add.</p> </li> <li> <p>In the Type field, select File. The fields appropriate for selecting a data file and configuring its settings appear in the dialog box.</p> <p></p> </li> <li> <p>In the Description field, optionally enter a description of the file.</p> </li> <li> <p>Fill in the fields as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the Parameterization Manager \u2013 File dialog box.</p> Setting Description Select Input File File Name Enables selecting the data file. Click  to select a data file. File Delimiter** The character separating the fields in each row of the data file. Create New Data File <p>Enables creating a new data file. For information, see Creating a Data File</p><p>.</p> Select access method Defines the method for reading the next value/row from the file. The predefined methods are the most common and useful methods. Use values from the file <p>Use rows from the file without any specific restrictions. This is the recommended method to use when applicable.</p><p>This method corresponds to the following Custom settings: Scope \u2013 local, Order \u2013 random, When Out of Values \u2013 cycle.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Use values, ensure that virtual clients do not use the same value at the same time <p>Use unique rows from the file so that a row cannot be used by two virtual clients at the same time. This is useful for example if the value is the login name, and the system under test does not allow the same user to be logged in twice.</p><p>This method corresponds to the following Custom settings:</p><p>Scope \u2013 global unique, Order \u2013 random, When Out of Values \u2013 cycle.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Use all values once and stop the virtual clients <p>Use each row once. When all rows have been used, the virtual clients will be stopped.</p><p>This method corresponds to the following Custom settings:</p><p>Scope \u2013 global unique, Order \u2013 random, When Out of Values \u2013 stop virtual client.</p><p>For the explanations of the Scope, Order and When Out of Values parameters, see the explanations of the Custom (Advanced) option.</p> Custom (Advanced) Enables selecting any combination of Scope, Order and When Out of Value settings. Scope <p>Defines the scope (sharing policy) of values.</p><p>- Local \u2013 Each virtual client reads rows from its own copy of the pool.</p><p>- Global unique \u2013 All virtual clients read a unique row from a global pool, which is shared by all virtual clients on all load generators. A row cannot be used by two virtual clients at the same time.</p><p>- Global \u2013 All virtual clients in the session read rows from the shared (global) pool. However, the rows are not necessarily unique \u2013 two virtual clients may happen to use the same row at the same time. Note that if you select Global, there is not much point in enforcing order on the values because all virtual clients run at the same time, so it is not possible to read the values efficiently in a certain order. Therefore, specify Random or Not-ordered in the Order field.</p> Order <p>Defines the method for reading the next row from the file:</p><p>- Random \u2013 Every virtual client gets a random row from the file. All available rows have the same probability of being selected at any given point.</p><p>- Not Ordered \u2013 Every virtual client gets a random row from among the rows that have been used less times. Over time, all rows are used approximately the same number of times.</p><p>- Ordered \u2013 Every virtual client gets the next row from the file (sequential order). If necessary, the file is read through many times. Select this option only if sequential order is crucial for the application. When running more than one virtual client concurrently, the order of execution is anyway not defined, therefore this option is discouraged.</p><p></p><p>Note that specifying Ordered in conjunction with a Global or Global Unique Scope and Cycle When Out of Values, has unavoidable performance costs.</p> When out of values <p>Defines whether the rows can be used any number of times, or only once.</p><p>- Cycle values \u2013 Each row can be used any number of times.</p><p>- Stop virtual client \u2013 After each row was used once, stop any virtual client that requests another row. An error message is written to the monitor log window.</p><p>- Keep last value \u2013 After each row was used once, keep re-using the last value.</p> Update Policy <p>Defines when a parameter is updated, meaning when a new row is read.</p><p>- Update value on each Round \u2013 A virtual client reads a new row from the file per round. Thus, if the same parameter appears again in the same round, it will get the same value.</p><p>- Update value on each use \u2013 A virtual client reads a parameter\u2019s row each time it is used.</p><p>- Update value per Virtual Client \u2013 A virtual clients reads a new row from the file when initialized (when running the InitClient function). All usage of a parameter by that virtual client will always use the same value.</p> <p>Show all file rows /</p><p>Show first 10 rows only</p> Determines which rows the grid displays. Use first row as title row Uses the first row of the file as the title row. If you select this option, the values of the first row are not used as data but as parameter names. For further explanations, refer to Inserting User-Defined Parameters in a Script ."},{"location":"recorder/configuring_recorder_options/#creating-a-data-file","title":"Creating a Data File","text":"<p>You can create a new data file.</p> <p>To create a data file:</p> <ol> <li> <p>From the Parameterization Manager \u2013 File dialog box: (Figure), click Create New Data File. </p> <p>The Create Data File dialog box appears.</p> <p></p> </li> <li> <p>Select a file delimiter from the drop-down list.</p> </li> <li> <p>Type the number of rows in the Rows field. The default is 10 rows.</p> </li> <li> <p>Type the number of columns in the Columns field. The default is 10 columns.</p> </li> <li> <p>If you did not use the default values, click OK.</p> </li> <li> <p>In the table, type a value in each cell.</p> </li> <li> <p>Click OK.     A Save As dialog box appears. Save the new data file.</p> </li> </ol>"},{"location":"recorder/configuring_recorder_options/#defining-a-number-parameter","title":"Defining a Number Parameter","text":"<p>To define a number parameter:</p> <ol> <li> <p>In the Parameterization Manager Dialog Box (*Figure *), click Add. The Parameterization Manager dialog box opens.</p> </li> <li> <p>In the Type field, select Number. The fields appropriate for defining a number parameter appear in the dialog box. </p> <p></p> </li> <li> <p>In the Description field, optionally enter a description of the number parameter.</p> </li> <li> <p>Fill in the fields as described in the Table.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the Parameterization Manager \u2013 Number dialog box.</p> Setting Description Number range Min The minimum value for the number range. Max The maximum value for the number range. Select access method <p>Defines the method for determining the next number value.</p><p>The predefined methods are the most common and useful methods.</p> Random <p>Use random numbers freely.</p><p>This method corresponds to the following Custom settings: Scope \u2013 local, Order \u2013 random, When Out of Values \u2013 cycle.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Random Unique, ensures that virtual clients do not use the same value at the same time <p>Use unique numbers. A number cannot be used by two virtual clients at the same time.</p><p>This method corresponds to the following Custom settings:</p><p>Scope \u2013 global unique, Order \u2013 random, When Out of Values \u2013 cycle.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Use all values from the range once and stop the virtual clients <p>Use each number once. When all numbers in the range have been used, the virtual clients will be stopped.</p><p>This method corresponds to the following Custom settings:</p><p>Scope \u2013 global unique, Order \u2013 random, When Out of Values \u2013 stop virtual client.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Local counter, each Virtual Client takes values sequentially from its own pool. <p>Each virtual client will pass through the numbers in the range.</p><p>This method corresponds to the following Custom settings: Scope \u2013 local, Order \u2013 ordered, When Out of Values \u2013 cycle.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Global counter, all Virtual Clients take values sequentially from a shared pool <p>Use increasing integer values. Each value can be used only once. When the whole range is used, the virtual clients are stopped.</p><p>This method corresponds to the following Custom settings:</p><p>Scope \u2013 global unique, Order \u2013 ordered, When Out of Values \u2013 stop virtual client.</p><p>For the explanations of Scope, Order and When Out of Values, see the explanations of the Custom (Advanced) option.</p> Custom (Advanced) Enables selecting any combination of Scope, Order and When Out of Value settings. Scope <p>Defines the scope (sharing policy) of values.</p><p>- Local \u2013 Each virtual client reads values from its own copy of the pool.</p><p>- Global unique \u2013 All virtual clients read a unique value from a global pool, which is shared by all clients on all load generators. A value cannot be used by two virtual clients at the same time.</p><p>- Global \u2013 All virtual clients in the session read values from the shared (global) pool. However, the values are not necessarily unique \u2013 two virtual clients may happen to use the same value at the same time. Note that if you select Global, there is not much point in enforcing order on the values because all virtual client run at the same time, so it is not possible to read the values efficiently in a certain order. Therefore, specify Random or Not-ordered in the Order field.</p> Order <p>Defines the method for determining the next number value:</p><p>- Random \u2013 Every virtual client gets a random number value. All available values have the same probability of being selected at any given point.</p><p>- Not Ordered \u2013 Every virtual client gets a random number value from among the values that have been used less times. Over time, all rows are used approximately the same number of times.</p><p>- Ordered \u2013 Every virtual client gets the next number value. If necessary, the sequence of numbers is gone through many times. Select this option only if sequential order is crucial for the application. In general, this option is not recommended</p><p>\u2003Note that specifying Ordered in conjunction with a Global or Global Unique scope and Cycle When Out of Values, has unavoidable performance costs.</p> When out of values <p>Defines whether the values can be used any number of times, or only once.</p><p>- Cycle values \u2013 Each value can be used any number of times.</p><p>- Stop virtual client \u2013 After each value was used once, stop any virtual client that requests another value. An error message is written to the monitor log window.</p><p>- Keep last value \u2013 After each value was used once, keep re-using the last value.</p> Update Policy <p>Defines when a parameter is updated, meaning when a new value is read.</p><p>- Update value on each Round \u2013 A virtual client reads a new value per round. Thus, if the same parameter appears again in the same round, it will get the same value.</p><p>- Update value on each use \u2013 A virtual client reads a parameter\u2019s value each time it is used.</p><p>- Update value per Virtual Client \u2013 A virtual clients reads a new value when initialized (when running the InitClient function). All usage of a parameter by that virtual client will always use the same value.</p>"},{"location":"recorder/configuring_recorder_options/#defining-a-random-string-parameter","title":"Defining a Random String Parameter","text":"<p>To define a random string parameter:</p> <ol> <li> <p>In the Parameterization Manager Dialog Box (*Figure *), click Add. The Parameterization Manager dialog box opens.</p> </li> <li> <p>In the Type field, select Random String. The fields appropriate for defining a random string parameter appear in the dialog box.</p> <p></p> </li> <li> <p>In the Description field, optionally enter a description of the random string parameter.</p> </li> <li> <p>Fill in the fields as described in Parameterization Manager \u2013 Random String dialog box.</p> </li> <li> <p>Click OK.</p> </li> </ol> <p>The following table describes the fields and buttons in the Parameterization Manager \u2013 Random String dialog box.</p> <p></p> Setting Description String length Min The minimum length of the string, in number of characters. Max The maximum length of the string, in number of characters. Update Policy <p>Defines when to update the parameter, meaning when the virtual clients get a new value for the parameter.</p><p>- Update value on each Round \u2013 A virtual clients reads a new value per round. Thus, if the same parameter appears again in the same round, it will get the same value.</p><p>- Update value on each use \u2013 A virtual clients reads a parameter\u2019s value each time it is used.</p><p>- Update value per Virtual Client \u2013 A virtual clients reads a new value when initialized (when running the InitClient function). All usage of the parameter by that virtual client will always use the same value.</p> <p>Note: Using a random string parameter in a script does not provide unique values. If you need unique values, or special formatting of the string, create a data file with unique values and use File parameterization (see Defining a Data File ).</p>"},{"location":"recorder/configuring_recorder_options/#inserting-user-defined-parameters-in-a-script","title":"Inserting User-Defined Parameters in a Script","text":"<p>WebLOAD Recorder enables you to edit parameters having static values and replace the static values with a call to a set of specified values. During runtime, the script runs the parameter using values from the set.</p> <p>The first step is to use the Parameterization Manager to define the set of values (see Configuring the Parameterization Manager ). The set of values is a type of parameter (Number parameter, String parameter, Date/Time parameter or Data File parameter). The second step, described in this section, is to replace a static value in the script with a call to the defined parameter.</p> <p>To insert a user-defined parameter in a script:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon, and open the script you want to edit.</p> </li> <li> <p>In the JavaScript View pane, select the static value you want to replace. For example, in the line : </p> <p><code>wlHttp.FormData[\"name\"] = \"john\"</code> </p> <p><code>select \"John\".</code></p> </li> <li> <p>Right-click and select Insert Variable.</p> <p>The Insert Variable menu appears, see (Figure).</p> </li> <li> <p>Select the parameter you defined in the Parameterization Manager.</p> <p>The selected parameter replaces the static value in the script. In our example, if you selected Users_firstname.getValue()from the Insert Variable menu, the line now shows:</p> <p><code>wlHttp.FormData[\"name\"] = Users\\_firstname.getValue();</code></p> <p>Note that if you are using a parameter from a data file, the parameter name reflects whether the data file includes a title row.</p> <ul> <li> <p>If the data file includes a title row, the parameter name is of type:       <code>{Parameter name}\\_{column title}.getValue().</code></p> </li> <li> <p>If the data file does not include a title row, the column number is used, and the parameter name is of type:       <code>{Parameter name}\\_Col{column number}.getValue()</code></p> </li> </ul> </li> </ol> <p>Note: To replace multiple occurrences of a static value, you can use the Edit &gt; Replace tool.</p>"},{"location":"recorder/configuring_recorder_options/#example-of-using-user-defined-parameters-in-a-script","title":"Example of Using User-Defined Parameters in a Script","text":"<p>If the original recorded script includes:</p> <p><code>wlHttp.FormData[\"first\\_name\"] = \"John\"</code></p> <p><code>wlHttp.FormData[\"last\\_name\"] = \"Smith\"</code></p> <p><code>wlHttp.FormData[\"age\"] = \"47\"</code></p> <p>and you wish to replace the static values (John, Smith, 47) with parameters, you can define a random number parameter \u2018Age\u2019, and a file parameter that calls the \u2018Users\u2019 data file having columns \u2018firstName\u2019 and \u2018lastName\u2019.</p> <p>Using the Insert Variable menu, modify the script as follows:</p> <p><code>wlHttp.FormData[\"first\\_name\"] = Users\\_firstName.getValue();</code> </p> <p><code>wlHttp.FormData[\"last\\_name\"] = Users\\_lastName.getValue();</code> </p> <p><code>wlHttp.FormData[\"age\"] = Age.getValue();</code></p>"},{"location":"recorder/correlating_scripts/","title":"Correlating Scripts","text":"<p>This section provides instructions for correlating scripts with WebLOAD Recorder. The WebLOAD correlation engine helps you overcome one of the main challenges of recording or replaying Web application load tests: dynamic data.</p> <p>Dynamically generated data changes every time you run a Web application. For example, the session ID that uniquely identifies a user\u2019s active session is allocated by the Web server or the application every time such a session is initiated. (The session ID is also used for session management. For more information, see Session Management .) Such dynamic data cannot simply be recorded as is and played back, because the playback will inevitably fail.</p> <p>WebLOAD enables you to correlate the most common methods used to pass dynamic data between a server and a client. The methods are:</p> <ul> <li>Cookies \u2013 This method is mostly used for session management, but cookies may also contain additional dynamic data sent from a server. In most situations, the browser returns the sent cookie in subsequent requests. This scenario is handled automatically by WebLOAD and no additional correlation activities are required. WebLOAD also supports cases where a value received in a cookie is sent as request data or a cookie is created in the client-side JavaScript.</li> <li>URL rewriting \u2013 This method is most commonly resolved by assigning the returned Session ID to a local variable and using this variable throughout the rest of the script.</li> <li>Hidden form fields \u2013 This method is most commonly used for passing localized dynamic data that is not necessarily within the scope of the full session.</li> <li>Any response content \u2013 Some applications return dynamic data within various types of HTTP responses, including client-side JavaScript and XML content.</li> </ul>"},{"location":"recorder/correlating_scripts/#about-correlating-scripts-with-webload-recorder","title":"About Correlating Scripts with WebLOAD Recorder","text":"<p>WebLOAD contains a powerful rule based correlation engine. You can define rules that describe how dynamic values should be extracted in their application.</p> <p>WebLOAD also provides automatic discovery of potential correlation rules. Using auto-discovery of rules eliminates the need to manually define correlation rules in some common cases.</p> <p>WebLOAD Recorder identifies dynamic data using correlation rules. These rules can be configured to suit your correlation needs. For more information on correlation rules, see Configuring the Correlation Rules .</p> <p>The WebLOAD correlation engine enables you to:</p> <ul> <li>Automatically discover potential correlation rules \u2013 WebLOAD can automatically suggest correlation rules for common scenarios, based on the values sent and received in the script, or for a specific value.</li> <li>Reuse correlation logic \u2013 Once the rules are defined or discovered, the correlation engine uses the rules to make all necessary changes to the script. The rules can be used unchanged in all future scripts with the same scenarios.</li> <li>Re-run correlation at any time \u2013 You can run the correlation process multiple times on previously recorded scripts. For example, if you perform correlation based on a particular set of rules, you can correlate that script another time based on a different set of rules, without re-recording the script.</li> <li>Add comments to your JavaScript \u2013 When dynamic data is correlated according to the correlation rules you define, WebLOAD Recorder can add comments to your JavaScript to help you keep track of the changes made by the correlation engine.</li> <li>Keep a detailed correlation log \u2013 The correlation engine can keep track of all the correlation operations performed on your script in the form of a textual log file. You can determine the location of this log file as well as the level of information it stores. Either you or RadView Technical Support can use the correlation log file to identify, investigate, and solve correlation problems.</li> </ul>"},{"location":"recorder/correlating_scripts/#correlating-to-and-from-cookies","title":"Correlating To and From Cookies","text":"<p>WebLOAD enables correlating to and from cookies.</p> <p>Most cookies get their values from a previous response\u2019s Set-Cookie header, originating from the server. These values are handled automatically by WebLOAD and do not require any action. They do not appear in the script.</p> <p>Client-side cookies are created by the client using JavaScript in response to a user preference, client-side generated content, such as a random number, or for some other reason. These cookies appear in the script as wlCookie.Set() commands. The values of these cookies can be correlated like any other dynamic data.</p>"},{"location":"recorder/correlating_scripts/#performing-correlation","title":"Performing Correlation","text":"<p>Correlation is performed on your script, based on the correlation rules. Correlation rules are defined in one of the following ways:</p> <ul> <li>Auto-discovery of correlation rules \u2013 When performing correlation with</li> </ul> <p>auto-discovery of correlation rules, the correlation engine compiles a list of the suggested correlation rules, enabling you to select the rules that are applicable to your application. For more information, see *Approving the Correlation Engine Rules* .</p> <ul> <li>In the Correlation Rules Editor \u2013 Before running the correlation engine, you can use the correlation rules editor to add and edit the rules.</li> </ul> <p>Note: You can turn discovered rules into permanent rules and then edit the rules in the correlation rules editor.</p> <p>For more information, see Configuring the Correlation Rules .</p> <p>Note: Correlation cannot be performed on scripts that were not recorded.</p>"},{"location":"recorder/correlating_scripts/#performing-auto-discovery-correlation","title":"Performing Auto-discovery Correlation","text":"<p>To perform correlation with auto-discovery of rules:</p> <ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlate Script and Discover Rules from the drop-down list.</p> <p>The Perform Script Correlation dialog box appears.</p> <p></p> <p></p> </li> <li> <p>Click Save and Continue to save the changes in your script and perform correlation.</p> <p>-Or-</p> <p>Click Don\u2019t Save and Continue to perform correlation without saving the changes in your script.</p> <p>-Or-</p> <p>Click Cancel to close the Perform Script Correlation dialog box without performing correlation in your script.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#performing-auto-discovery-correlation-for-specific-values","title":"Performing Auto-discovery Correlation for Specific Values","text":"<p>WebLOAD enables you to perform correlation with auto-discovery of rules for any value you select in a script. This provides correlation when normal auto-discovery is not sufficient. Auto-discovery correlation for specific values can be used instead of normal auto-discovery in the following cases:</p> <ul> <li>Partial values \u2013 Since auto-discovery only searches for exact matches, if the dynamic value you wish to correlate is part of the sent value, it is not found. For example, in <code>wlHttp.FormData[\u201cdata\u201d]=\u201dsession\\*1234\u201d or wlHttp.FormData[\u201cdata\u201d]=\u201d</code><code>&lt;data sessionid= 1234/&gt;</code><code>\u201d</code>, if only 1234 is dynamic, normal auto-discovery does not find this value. <p>Note: The only exception is in POST and GET commands, where the parameter name or values are replaced.</p> <ul> <li>Dynamic URLs \u2013 Similar to partial values, if a URL contains a dynamic value, it is not found. For example, in http://www.mydomain.com/2131231/something.asp, if only 2131231 is dynamic, normal auto-discovery does not find this value..</li> <li>Non-standard query strings \u2013 Similar to partial values and dynamic URLs, if a value appears to be a URL but uses a different encoding method, it is not found. For example, in http://www.domain.com;strange=4342?normal=44&amp;other=222, normal auto-discovery finds normal=44 and other=222, but does not find strange=4342.</li> <li>Using the referer header \u2013 When available, auto-discovery uses the referer header and only searches for values there. Values that need to be correlated may be elsewhere.</li> <li>Filter noise \u2013 By default, auto-discovery filters out values that are too short or have a low score. In some cases, required rules may also be filtered out.</li> </ul> <p>To perform correlation with auto-discovery of rules for a specific value:</p> <ol> <li> <p>Select the value you wish to correlate in the script.</p> </li> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Script for Specific Value from the drop-down list.</p> <p>-Or-</p> <p>Right-click and select Correlate Specific Value.</p> <p>The Correlation Specific Value dialog box appears, displaying the selected value.</p> </li> <li> <p>Click OK.     WebLOAD performs a regular correlation with auto-discovery of rules. The Perform Script Correlation dialog box appears (Figure).</p> </li> <li> <p>Click Save and Continue to save the changes in your script and perform correlation.</p> <p>-Or-</p> <p>Click Don\u2019t Save and Continue to perform correlation without saving the changes in your script.</p> <p>-Or-</p> <p>Click Cancel to close the Perform Script Correlation dialog box without performing correlation in your script.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#setting-the-default-correlation-action","title":"Setting the Default Correlation Action","text":"<p>You can control the default correlation action that WebLOAD should perform after recording.</p> <p>To control which correlation action is performed after recording:</p> <ol> <li>Click Recording and Script Generation Options in the Tools tab of the ribbon. The Recording and Script Generation Options dialog box appears in the (Figure).</li> <li> <p>Select the Correlation Options tab.</p> <p>The Correlation Options tab moves to the front of the dialog box (Figure)).</p> </li> <li> <p>In the Correlation level drop-down, select one of the following:</p> <ul> <li>Do not run \u2013 When recording is complete, go directly to the script without performing correlation. You can run the correlation engine at a later time.</li> <li>Use existing rules \u2013 Run the correlation engine once the script recording is complete, only using the existing rules (do not try to auto-discover new rules).</li> <li>Discover rules \u2013 Run the correlation engine using existing rules and try to discover new rules.</li> <li>Prompt \u2013 A dialog that provides you with all of  the options is displayed when the recording is complete. This is the default setting. For more information on using the Recording Complete dialog box, see Recording a script .</li> </ul> </li> </ol>"},{"location":"recorder/correlating_scripts/#automatic-discovery-of-correlation-rules","title":"Automatic Discovery of Correlation Rules","text":"<p>WebLOAD enables you to automatically discover potential correlation rules.</p> <p>The discovery process is based on reverse scanning of the script. The auto-discovery module searches for the sent values in previous responses and tries to formulate rules to extract the values.</p> <p>Notes:</p> <ul> <li>Not all of the suggested rules are usually needed. Select the rules that are appropriate for your application. You can run auto-discovery as many times as</li> </ul> <p>needed, and try different rules.</p> <ul> <li>There are some rule types that are not automatically discovered and you must manually define a rule for them. </li> </ul> <p>When running correlation with auto-discovery, the correlation engine uses the existing defined rules and does not discover them again. Inactive rules are also not rediscovered or used. Making a rule inactive can be used to prevent discovering rules that you already know are unneeded.</p> <p>When the correlation process is complete, a review form is displayed for the user to choose which rules to use. For more information see Approving the Correlation Engine Rules </p>"},{"location":"recorder/correlating_scripts/#approving-the-correlation-engine-rules","title":"Approving the Correlation Engine Rules","text":"<p>When performing Auto-discovery correlation, the correlation engine compiles a list of the suggested correlation rules according to the dynamic values that were recorded in the script. This enables you to determine which rules to approve and use during the correlation.</p> <p>To approve the correlation engine rules:</p> <ol> <li> <p>After running correlation with auto-discovery of rules, the Correlation engine results dialog box appears.</p> <p></p> </li> <li> <p>Edit the rules in the Correlation Engine Results dialog box according to the following table and click OK.</p> </li> </ol> Column / Field Description Use <p>Select the rules to use in this script. You can click Use All to select all of the rules in the Use and Add as permanent columns, or Use None to deselect all of the rules in both columns.</p><p></p><p>Note: You can use the rule in the current script, without adding it as a permanent rule.</p> Field Name <p>The field name that was used to send the value in the request.</p><p>This field may be empty if it is defined in the rule.</p> Value The value extracted or replaced. Node ID <p>The node ID in the script. Each script node is marked with a comment indicating the node ID, for example:</p><p>/***** WLIDE - URL : http://ww.mydomain.com/ - ID:42</p><p>*****/</p> Node URL The GET or POST request of the value extracted or replaced. Rule Group The name of the group to which the correlation rule belongs. Rule Name The name of the correlation rule. Add as permanent <p>Specify how to use this rule:</p><p>- Never use \u2013 Do not use this rule in any script</p><p>- Add as rule \u2013 Add the rule to the permanent rules (always use)</p><p>- Temporary \u2013 Use the rule only in this run</p> Rule details Rule Type <p>The method used to find the dynamic data to be correlated, according to the selected rule\u2019s definition. To modify the rule, see Defining Correlation Rules </p><p>Possible values are:</p><p>- All body text</p><p>- Form field values</p><p>- User defined</p><p>- Replace with expression</p><p>- Search in cookies</p> \u2026 Additional rule type fields. These fields change according to the rule type. Description A summary of the selected rule\u2019s details."},{"location":"recorder/correlating_scripts/#resolving-conflicts-between-manual-changes-and-correlation-changes","title":"Resolving Conflicts between Manual Changes and Correlation Changes","text":"<p>Starting from WebLOAD 10.1, when you run correlation all the manual changes you may have made in the original JavaScript code are preserved by default (see Configuring the Correlation Options ). However, the process of correlation also introduces some changes into the original JavaScript. Sometimes your manual changes conflict with the correlation changes. When this happens, a Conflict Resolution window appears in which you are asked to resolve the conflict.</p> <p>The following Figure shows a sample Conflict Resolution window.</p> <p> </p> <p>The left side of the Conflict Resolution window displays the correlated version without any user changes, and the right side displays the user version without any correlation changes. You must do one of the following:</p> <ul> <li>Click Use correlated version \u2013 This keeps all correlation changes and discards all user changes.</li> <li>Click Use user version \u2013 This keeps all user changes and discards all correlation changes.</li> <li>Click Edit conflict \u2013 This enables editing the JavaScript to your satisfaction. When you select this option, a WinMerge window appears by default. For information, refer to Editing Conflicts between Manual Changes and Correlation Changes below. When you finish editing, click Resolved in the Conflict Resolution window.</li> </ul>"},{"location":"recorder/correlating_scripts/#editing-conflicts-between-manual-changes-and-correlation-changes","title":"Editing Conflicts between Manual Changes and Correlation Changes","text":"<p>When you select to edit conflicts between manual changes and correlation changes, a merge tool is automatically launched, displaying the two conflicting versions.</p> <p>The default merge tool is the WinMerge application. Note that you can optionally specify a different merge tool, as described in Defining the Merge Tool Application .</p> <p></p> <ol> <li>Select the lines you wish to edit, and edit them as desired.</li> <li>Save your changes.</li> <li>Exit the WinMerge application.</li> </ol>"},{"location":"recorder/correlating_scripts/#configuring-the-correlation-rules","title":"Configuring the Correlation Rules","text":"<p>WebLOAD Recorder enables you to configure the correlation rules used to define the correlation actions in your script with the Correlation Rules Editor. You can modify, create, and rename the correlation rules and groups.</p>"},{"location":"recorder/correlating_scripts/#opening-the-correlation-rules-editor","title":"Opening the Correlation Rules Editor","text":"<p>Open the Correlation Rules Editor to view, create or edit correlation rules.</p> <p>To open the Correlation Rules Editor:</p> <ul> <li>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</li> </ul> <p>The Correlation Rules Editor opens, displaying application- and development framework-specific correlation rules by groups.</p> <p> </p> <p>The following table describes the options in the Correlation Rules Editor.</p> Field Description Default rule set <p>Displays a tree of the correlation rules. Each node represents a correlation rule group. You can expand the group nodes to view the associated correlation rules.</p><p>The order of the correlation rules in the tree determines the order of their execution.</p><p>You can configure the correlation rules by selecting the checkbox adjacent to the rule that you want to apply in the correlation. You can expand or compress the tree using the +/- buttons. If an upper level component is selected, all of the subcomponents in that tree will be selected. If only some subcomponents in a tree are selected, the upper level component is selected and greyed.</p> Description Displays a description of the correlation group or rule. The type of information displayed in this area depends on the node selected in the Default rule set area. New Group Create a new correlation rule group below the selected group. If no group is selected, the new correlation rule group is created after the last group node. New Rule Create a new correlation rule below the selected rule. If no rule is selected, the new correlation rule is created after the last rule in the selected group. Move Up Move the selected correlation rule up inside its group or move the selected correlation group up in the tree. Move Down Move the selected correlation rule down inside its group or move the selected correlation group down in the tree. Delete Delete the selected correlation rule or group. Rename Rename the selected correlation rule or group. OK Accept your changes and close the Correlation Rules Editor dialog box. Cancel Discard your changes and close the Correlation Rules Editor dialog box."},{"location":"recorder/correlating_scripts/#creating-correlation-rules","title":"Creating Correlation Rules","text":"<p>You can create correlation rules and groups to better suit your correlation requirements.</p>"},{"location":"recorder/correlating_scripts/#to-create-a-correlation-rule","title":"To create a correlation rule:","text":"<ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</p> <p>The Correlation Rules Editor dialog box opens (see the Figure).</p> </li> <li> <p>In the Default rule set area, select the correlation rule under which you wish to create your correlation rule and click New Rule,</p> <p>-Or-</p> <p>Right-click the correlation rule under which you wish to create your correlation rule and select New Rule from the pop-up menu.</p> <p>A new rule is created in the tree, at the specified location.</p> </li> <li> <p>Modify the correlation rule parameters, as described in Defining Correlation Rules</p> </li> <li> <p>Click OK. The new correlation rule is added to the Default rule set.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#to-create-a-correlation-group","title":"To create a correlation group:","text":"<ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</p> <p>The Correlation Rules Editor dialog box opens (see the Figure).</p> </li> <li> <p>In the Default rule set area, select the correlation group under which you wish to create your group and click New Group,</p> <p>-Or-</p> <p>Right-click the correlation group under which you wish to create your group and select New Group from the pop-up menu.</p> <p>A new group is created in the tree, at the specified location.</p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#defining-correlation-rules","title":"Defining Correlation Rules","text":"<p>You can modify the existing correlation rules and groups to better define your correlation requirements.</p>"},{"location":"recorder/correlating_scripts/#to-modify-an-existing-correlation-rule","title":"To modify an existing correlation rule:","text":"<ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</p> <p>The Correlation Rules Editor dialog box opens (see the Figure).</p> </li> <li> <p>In the Default rule set area, expand a correlation rule group. The correlation rules belonging to the group are displayed.</p> <p></p> </li> <li> <p>Click a correlation rule. The Correlation Rules Properties appear.</p> <p></p> <p>Note: The Match by fields vary according to the value selected in the Rule type field.</p> </li> <li> <p>Modify the correlation rule properties according to the information in the following table:</p> Field Search Scope Value Match by Field Description Description A free text description of the selected rule. Rule type <p>Determines the method used to find the dynamic data to be correlated. Possible rule type values are:</p><p>- All body text</p><p>- Form field values</p><p>- User defined</p><p>- Replace with expression</p><p>- Search in cookies</p> All body text Prefix A text string that is used together with the Suffix parameter to uniquely identify the dynamic data string. The dynamic string should start immediately after the Prefix parameter. Suffix A text string that is used together with the Prefix parameter to uniquely identify the dynamic data string. The dynamic string should end immediately before the Suffix parameter. Prefix Instance The occurrence instance of the Prefix in the search scope. That is, if the Prefix parameter appears multiple times in the body text and you want to correlate only the second instance, select 2 Reverse <p>Search for dynamic data from the end of the search scope.</p><p>Note that if Reverse is selected, then Prefix Instance is also reversed. Thus, a value of 2 in Prefix Instance indicates the second from last occurrence instance.</p> All instances <p>Search for all occurrences of the dynamic data.</p><p>When All Instances is selected, both Prefix Instance and Reverse are not meaningful and are disabled.</p> Form Field values Search for dynamic data in specific form fields, regardless of if they are hidden. You can specify either a form field name or ID. For example, if you specify a form field ID, then the correlation engine will only search for form field IDs and not for form field names. By ID Specify a form field ID to be searched. By Name Specify a form field name to be searched. User defined Search for dynamic data according to your own search criteria. JavaScript expression <p>Specify a JavaScript expression to be used as an extraction logic. This can be a valid regular expression, DOM access function, or any other function call. For example:</p><p>extractValue (\u201cprefix\u201d, \u201csuffix\u201d,</p><p>document.wlSource )</p><p>To call a custom JavaScript function, the function must be accessible for both the execution engine and the correlation engine, so it should be included as an auto-discovered JavaScript code.</p><p>For more information on the auto-discovery of JavaScript files, see JavaScript Language Extension, in the WebLOAD Extensibility SDK.</p> Save Source Select this option if your JavaScript expression refers to the response body (document.wlSource). Replace with  expression Expression <p>Replace data according to the Field name, regardless of the value. Replace the value with the value in Expression.</p><p>For example:</p><p>Rule type = Replace with expression</p><p>Expression = new Date().getTime() Field name = timestamp</p><p>During correlation, the timestamp value is replaced with \u201cnewDate().getTime()\u201d instead of the date on which the script was recorded.</p> Search in cookies Cookie name <p>Search for dynamic data among the received cookies, according to the Cookie name.</p><p>Replace the dynamic data in the query string or post data request.</p><p>Note: In most cases, cookies sent by the server (in a Set-Cookie header) are echoed back by the client (in a Cookie header). WebLOAD\u2019s engine automatically handles these cases and they do not require correlation.</p><p>Select this rule type when the value received in the cookie is used elsewhere in the request (using JavaScript) and correlation is necessary.</p> Correlation settings Minimum Length Define the minimum length of the value to be considered for correlation. Shorter values, even if matched by a rule, are ignored. Maximum Length Define the maximum length of the value to be considered for correlation. Longer values, even if matched by a rule, are ignored. Correlate exact matches only <p>Select this option to replace the identified dynamic value with a variable only when the values are a complete match. If the value found is only a part of the sent value, the rule will be ignored.</p><p>For example, if the dynamic value found is \u201c1234\u201dand the variable replacing the dynamic value contains \u201c123\u201d:</p><p>- When Correlate exact matches only is unchecked, the value \u201c1234\u201d will be replaced by the variable and then a \u201c4\u201d.</p><p>- When Correlate exact matches only is checked, the value will not be replaced since it is not an exact match.</p><p> Note: The values within a query string are also considered a complete match. For example, if the dynamic value is found in the following string, wlHttp.Get(http://domain?field=123), the dynamic value \u201c123\u201d will be replaced by the variable regardless of whether the Correlate exact matches only is checked.</p><p>By default this is selected.</p> Field name <p>Replace the dynamic value only when the value is sent with this field name.</p><p>Note: The Field name limits where the value can be replaced and is applicable to all rule types. Do not confuse this with the Search in: Form field values: by name field, which controls how the value is extracted</p><p>This field is optional, unless Replace with Expression is selected, in which case, this field is mandatory.</p> </li> <li> <p>Click OK.</p> <p>The correlation rule is modified.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#renaming-correlation-rules","title":"Renaming Correlation Rules","text":"<p>You can rename correlation rules and groups to better organize the correlation rules according to your specific correlation requirements.</p>"},{"location":"recorder/correlating_scripts/#to-rename-a-correlation-rule","title":"To rename a correlation rule:","text":"<ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</p> <p>The Correlation Rules Editor dialog box opens (see the Figure).</p> </li> <li> <p>Expand the correlation group to which your correlation rule is associated.</p> </li> <li> <p>Slow double-click the correlation rule,</p> <p>-Or-</p> <p>Right-click the correlation rule and select Rename from the pop-up menu. The correlation rule\u2019s name becomes editable.</p> </li> <li> <p>Rename the correlation rule and click anywhere in the Default rule set area. The correlation rule is renamed.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#to-rename-a-correlation-group","title":"To rename a correlation group:","text":"<ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Correlation Rules Editor from the drop-down list.</p> <p>The Correlation Rules Editor dialog box opens (see the Figure).</p> </li> <li> <p>Slow double-click a correlation group.</p> <p>-Or-</p> <p>Right-click a correlation group and select Rename from the pop-up menu. The correlation group\u2019s name becomes editable.</p> </li> <li> <p>Rename the correlation group and click anywhere in the Default rule set area. The correlation group is renamed.</p> </li> </ol>"},{"location":"recorder/correlating_scripts/#session-management","title":"Session Management","text":"<p>The HTTP protocol has no built-in method of uniquely identifying or tracking a particular user or session within an application, without transmitting some data between the client and the server. The most common method for an internet</p> <p>application developer to track a user\u2019s interaction with a website is by providing the user with a unique session ID. This process is referred to as session management. Most Web servers generate such session IDs for internet application developers. In such cases, the Web servers can communicate the session IDs between the user\u2019s internet browser and the server through:</p> <ul> <li>Cookies \u2013 When a server receives a request to create a session, it creates a session object and associates this object with a session ID. The session ID is then transmitted back to the browser as part of a response header and is stored with the rest of the cookies in the browser. On subsequent requests from the browser, the session ID is transmitted as part of the request header, which enables the application to associate each request for a session ID with the previous requests from that user. The entire interaction between the browser, application server, and the application is transparent to the end user.</li> <li>URL rewriting \u2013 The session ID information is embedded by the server in the URL and is then received by the application with the HTTP GET command (for example, when the client clicks on an embedded link within a page).</li> <li>Hidden form fields \u2013 The session ID information is stored within the fields of a form and submitted to the application. Typically, the session ID information is embedded within the form as a hidden field and is submitted with the HTTP GET/POST command.</li> </ul> <p>The following sections provide information on how some of the most commonly used Web and application servers perform session management.</p>"},{"location":"recorder/correlating_scripts/#ibm-websphere-application-server","title":"IBM WebSphere Application Server","text":"<p>The IBM WebSphere Application Server (WAS) supports all the session management methods listed in Session Management , but works best with cookies (which is its default method). The WAS implementation of this method differs from a pure cookie-based method by using only one cookie, JSESSIONID, that contains only the session ID information. (A pure cookie-based method would use multiple cookies, containing possibly sensitive user state information, such as an account number or user ID.) JSESSIONID is used by the server to associate the request with the information already stored on the server for that session ID.</p> <p>In an HTTP session, all the attributes associated with a user\u2019s request are stored on the server. Since the only information transmitted between the server and the browser is the session ID cookie, which has a limited lifetime, an HTTP session can provide a much more secure session management method than cookies, when configured in conjunction with SSL.</p>"},{"location":"recorder/correlating_scripts/#microsoft-aspnet","title":"Microsoft ASP.NET","text":"<p>Microsoft ASP.NET uses HTTP cookies to send a user a unique session key. For example, an ASP.NET application that uses sessions can respond to a user\u2019s request with the following HTTP header:</p> <p><code>Set-Cookie: ASPSESSIONID=PUYQGHUMEAAJPUYL; path=/Webapp</code></p> <p>Any subsequent request made by this browser to the same server, in the virtual directory /Webapp, includes the following HTTP cookie header:</p> <p><code>Cookie: ASPSESSIONID=PUYQGHUMEAAJPUYL</code></p> <p>Each active ASP.NET session is identified and tracked using a 120-bit session ID string containing only the ASCII characters that are permitted in URLs. These session ID values are generated using an algorithm that guarantees a unique and random result. Such a guarantee is required to ensure that sessions do not collide and to prevent malicious user interference. These session ID strings are communicated between the client and server either by means of an HTTP cookie or a modified URL with the session ID string embedded, depending on how the application is configured.</p>"},{"location":"recorder/correlating_scripts/#apache-server","title":"Apache Server","text":"<p>An Apache server (version 1.3 onwards) uses cookies to identify a new user and then records access to the application identified by this unique ID, through the mod_usertrack module. When a user first visits the application, that user is sent a cookie with a unique ID. This unique ID is maintained until a predetermined timeout, thus enabling the server to track the user. This method enables the identification of different users even if they appear to originate from the same IP address. With Apache servers, the CookieName directive configures the name of the cookie that is stored.</p>"},{"location":"recorder/editing_scripts/","title":"Editing Scripts","text":"<p>This section provides instructions for editing scripts with WebLOAD Recorder.</p>"},{"location":"recorder/editing_scripts/#about-editing-scripts-with-webload-recorder","title":"About Editing Scripts with WebLOAD Recorder","text":"<p>WebLOAD Recorder is both flexible and extendable to fit all of your script editing needs, from the most basic to the most advanced. On the simplest level, you use the WebLOAD Recorder GUI to record your basic script. You can edit your script either while it is being recorded or after it has finished recording to add functionality through the options available in the GUI. In most cases, the options available through the GUI meet all testing needs. For advanced functionality where programming is required, the JavaScript Editor is available to add further functionality to your script.</p> <p>In the script, each request and event is based on previous input, tying the entire script into a whole, making many actions interdependent. Items such as JavaScript Objects, Comments, Messages, and Sleeps can be added to the script, but changing the sequence of items in effect means changing the sequence of activities, and may destroy the functionality of the script. For more information on recording scripts, see Recording Scripts .</p> <p>When editing your script, you can work at whatever level you prefer. The following script editing tools are discussed:</p> <ul> <li>Editing a Script in the Script Tree  describes how to add script items and JavaScript Objects, and edit a script by right-clicking in the Script Tree.</li> <li>Editing a Script in the JavaScript View Pane  describes how to use JavaScript objects to create scripts with the full functionality of JavaScript code programs. The WebLOAD Recorder JavaScript Editor includes a set of context- sensitive prompts that help you code your script more effectively.</li> <li>Editing your Script Using the WebLOAD Recorder Toolbox Set  describes how to use the WebLOAD Recorder toolbox that contains drag-and-drop items to create a script with minimal coding.</li> </ul>"},{"location":"recorder/editing_scripts/#editing-a-script-in-the-script-tree","title":"Editing a Script in the Script Tree","text":"<p>This section describes how to edit a script in the Script Tree. If you are editing your script while it is being recorded, you can focus on any specific node in the Script Tree and edit its JavaScript in the JavaScript view pane.</p> <p>Note: You must be in Visual Editing mode.</p>"},{"location":"recorder/editing_scripts/#adding-script-items-and-javascript-objects-to-a-script","title":"Adding Script Items and JavaScript Objects to a Script","text":"<p>WebLOAD Recorder contains shortcuts to frequently performed actions. This section describes how to place script items and JavaScript Objects from the Insert menu into a script. For guidelines for replacing the placeholder variables with your own, see Guidelines for Editing JavaScript Code .</p> <p>To add items and JavaScript Objects to a script:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Make sure that you are in Visual Editing mode.</p> </li> <li> <p>Right-click the Agenda root node or the script item where you want to place the new script item.</p> <p>A pop-up menu appears.</p> </li> <li> <p>From the pop-up menu, click Insert. The following list of shortcuts appears.</p> <p></p> </li> <li> <p>Select a script item or JavaScript Object.</p> <p>The script item or JavaScript is inserted on a new line in the script, immediately after the selected node.</p> <p>The script items and JavaScript Objects that you can insert are also available through the WebLOAD Recorder toolbox, see Editing your Script Using the WebLOAD Recorder Toolbox Set .</p> </li> </ol>"},{"location":"recorder/editing_scripts/#editing-a-script-by-right-clicking-in-the-script-tree","title":"Editing a Script by Right-Clicking in the Script Tree","text":"<p>You can edit directly in the Script Tree using the right mouse button. When you right- click a script item, a menu gives you options that vary according to the script item selected and the mode.</p> <p>To right-click menus in Edit mode:</p> <ol> <li>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</li> <li>Make sure that you are in Visual Editing mode.</li> <li> <p>In the Script Tree, right-click the Agenda root node or right-click a script item in the tree.</p> <p>A pop-up menu appears. The menu for the Agenda root differs slightly from the menu for a script item, as described in the Table.</p> <p>The following table describes the menu options:</p> </li> </ol> <p></p> Right-Click Menu Option Purpose <p>Synchronize</p><p>(Agenda root menu only)</p> <p>Synchronize the Script Tree, with the edits made to the JavaScript code in Visual Editing mode In most cases, synchronization is performed automatically.</p><p>Only available at the Agenda root level.</p> Insert <p>Insert a script item or JavaScript Object into the script (see</p><p>Adding Script Items and JavaScript Objects to a Script ).</p><p>The script items and JavaScript Objects that you can insert are also available through the WebLOAD Recorder toolbox, described in Editing your Script Using the WebLOAD Recorder Toolbox Set *.</p> Paste <p>Paste the script item you cut or copied, after the current script item.</p><p>Note: If you copied a script item, you can paste it more than once. Each time you paste, the node ID automatically changes.</p><p></p><p>If you cut a script item, you can paste it only once, and the node ID does not change.</p> <p>Cut</p><p>(script item menu only)</p> Cut the script item from the tree to paste elsewhere. <p>Copy</p><p>(script item menu only)</p> Copy the script item from the tree to paste elsewhere. <p>Delete</p><p>(script item menu only)</p> Delete the script item from the tree. Toggle Breakpoint Add or remove a breakpoint at the selected script item in the Script Tree. For more information, see Setting Breakpoints . Current Project Options Display the Current Project Options dialog box. Only available at the script level. For more information, see Configuring the Default and Current Project Options *. Regenerate Script Regenerate the script. For more information, see Performing Script Regeneration . Response Validation Add response validation to the script. For more information, see Validating Responses"},{"location":"recorder/editing_scripts/#editing-a-script-in-the-javascript-view-pane","title":"Editing a Script in the JavaScript View Pane","text":"<p>You can edit directly in the JavaScript View pane using the right mouse button. When you right-click a script item, a menu gives you options that vary according to the mode.</p>"},{"location":"recorder/editing_scripts/#editing-the-javascript-code-for-a-script-item","title":"Editing the JavaScript Code for a Script Item","text":"<p>You can edit the JavaScript code generated by WebLOAD Recorder for any item in the script.</p> <p>Note: When you select the Agenda root node, the entire script appears in the JavaScript View pane as read only. To edit the entire script, see Using the JavaScript Editor .</p> <p>To edit the JavaScript code for a script item:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Make sure that you are in Visual Editing mode.</p> </li> <li> <p>Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.</p> </li> <li> <p>Select the item in the Script Tree.</p> <p>The JavaScript script code for that item appears in the JavaScript View pane.</p> <p></p> </li> <li> <p>Edit the script (see Editing the JavaScript Code ).</p> <p>Important: The ID number is automatically generated by WebLOAD Recorder and is the connection between the script node and the specific header. It is recommended that you do not change the contents of this comment. If you do, important data might be lost.</p> </li> </ol>"},{"location":"recorder/editing_scripts/#editing-the-javascript-code-functions","title":"Editing the JavaScript Code Functions","text":"<p>A script includes a few sections of code, including functions. At the Agenda root node only, you can select these sections from the Function Name drop-down list.</p> <p>When you select the NodeScript for the Agenda root node, the entire script appears in the JavaScript View pane as read only. You can only edit the script as a whole file when in JavaScript Editing mode (see Using the JavaScript Editor ).</p> <p>When you select a section other than NodeScript for the Agenda root node, the code appears in the JavaScript View pane. In the JavaScript View pane, you can edit the JavaScript code for functions called in the script. By default, WebLOAD Recorder calls the InitAgenda(), InitClient(), TerminateClient(), and TerminateAgenda() functions ?for each script.</p> <p>Table: WebLOAD Functions</p> Function Description InitAgenda Optional. Creates a JavaScript function InitAgenda to begin the script. InitAgenda is typically where global variables are defined. InitClient <p>Optional. Creates a JavaScript function InitClient to begin a client process.</p><p>Usually there will be only one client in a WebLOAD Recorder session; WebLOAD uses multiple clients.</p> TerminateClient <p>Optional. Creates a JavaScript function TerminateClient to end a client process.</p><p>Usually there will be only one client in a WebLOAD Recorder session; WebLOAD uses multiple clients.</p> TerminateAgenda Optional. Creates a JavaScript function TerminateAgenda to end the script. <p>The function properties do not need to be edited unless you want to make special customizations, such as including a function from a different file and using the IncludeFile() function.</p> <p>To edit the JavaScript code for functions:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Make sure that you are in Visual Editing mode.</p> </li> <li> <p>Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.</p> </li> <li> <p>Select the script item in the Script Tree.</p> <p>The JavaScript script code for the script item appears in the JavaScript View pane. The JavaScript for the Agenda root node will include the whole script.</p> </li> <li> <p>From the Function Name drop-down list, located at the top of the JavaScript View pane, select the name of the function.</p> <p>The JavaScript code for the function appears in the JavaScript View pane. </p> <p></p> </li> <li> <p>Type the JavaScript code to include in the InitClient, InitAgenda, TerminateClient, or TerminateAgenda (see Editing the JavaScript Code ).</p> <p>Note: You cannot add a WebLOAD Recorder protocol block in the middle of a function. When in Visual Editing mode, this option is disabled.</p> </li> </ol>"},{"location":"recorder/editing_scripts/#using-the-javascript-editor","title":"Using the JavaScript Editor","text":"<p>Although represented visually, all scripts are written in JavaScript. The JavaScript code within a script is created from the actions you record and the verification tests you place in the script. You can add JavaScript Objects to your recorded script, allowing you to add additional written code directly to your script. The JavaScript Editor is both a viewer and an editor for adding and editing JavaScript code in the script.</p> <p>WebLOAD Recorder provides the following features for manually editing a script:</p> <ul> <li> <p>Import JavaScript Files</p> <p>WebLOAD Recorder enables you to import JavaScript files into your script.</p> </li> <li> <p>WebLOAD Recorder Protocol Block</p> <p>WebLOAD Recorder enables you to add code to your script which is then represented visually in the Script Tree.</p> </li> <li> <p>An IntelliSense Editor mode for the JavaScript View pane</p> <p>Add new lines of code to your script or edit existing JavaScript functions through the IntelliSense Editor mode of the JavaScript View pane. The IntelliSense Editor helps you write the JavaScript code for a new function by formatting new code and prompting with suggestions and descriptions of appropriate code choices and</p> <p>syntax as programs are being written. IntelliSense supports the following shortcut keys:</p> </li> <li> <p>Period (\u201c.\u201d) \u2013 Enter a period after the object name, to display a drop-down list of the object\u2019s available properties that can be added to the script (see</p> <p>Figure).</p> </li> <li> <p><code>&lt;CTRL&gt;</code> <code>&lt;Space&gt;</code> \u2013 While typing the name of an object, you can type <code>&lt;CTRL&gt;</code></p> </li> </ul> <p><code>&lt;Space&gt;</code> to display a drop-down list of the available objects that begin with the letters that you entered. For example, if you type wl the IntelliSense Editor displays a drop-down list of all of the objects that begin with wl (such as wlhttp).</p> <p>In addition, the IntelliSense Editor gives a structure to the code with the outline bar and line numbering.</p> <p>Collapsing the code enables you to view the heading of the section, without seeing the code within the section. To expand or collapse different sections of the code:</p> <ul> <li>Click the plus sign (+) or minus sign (-) on the outline bar,</li> </ul> <p>-Or-</p> <ul> <li>Right-click within the IntelliSense Editor and select Outlining from the pop-up menu. The available outlining options are:</li> <li>Toggle outline \u2013 collapses or expands the section at the mouse location.</li> <li>Toggle all outline \u2013 collapses or expands all outlines.</li> <li>Collapse to definition \u2013 collapses all outlines.</li> </ul> <p>You can enable or disable both the outline bar and line numbering features by:</p> <ul> <li> <p>Right-clicking within the IntelliSense Editor and selecting Enable Outlining or</p> <p>Line Numbers from the pop-up menu.</p> </li> </ul> <p>When these features are enabled, a checkmark appears next to the name in the pop-up menus. By default, these features are enabled, but WebLOAD opens with the settings that were saved during the previous WebLOAD session. During playback and debug modes, all outlines are expanded.</p> <p>Use WebLOAD Recorder\u2019s predefined delimiters to keep your code structured and organized. The available delimiters include:</p> <ul> <li>For JavaScript functions, use \u201c{\u201c as the start delimiter and \u201c}\u201d as the end delimiter.</li> <li> <p>For Script Tree nodes, insert a WLIDE comment from the General WebLOAD Recorder toolbox. This automatically inserts a start delimiter \u201c//\u201d and end</p> <p>delimiter \u201cEnd WLIDE\u201d.</p> </li> </ul> <p>For more information, see the WebLOAD Scripting Guide.</p> <p> </p> <ul> <li> <p>A selection of the most commonly used functions and commands, available through the Insert menu.</p> <p>You can choose to program your own JavaScript Object code within your script and take advantage of the WebLOAD Recorder GUI to simplify your programming efforts. Rather than manually typing out the code for each command, with the risk of making a mistake, even a trivial typographical error, and adding invalid code to the script file, you may select an item from the Insert menu, illustrated in the following figure, to bring up a list of available commands and functions for the selected item. WebLOAD Recorder automatically inserts the correct code for the selected item into the JavaScript Object currently being edited. You may then change specific parameter values without any worries about accidental mistakes in the function syntax.</p> </li> </ul> <p></p> <p>In addition to the Insert menu, you may select an item from the Insert Variable menu, to add system and user-defined parameters to the script. This eliminates the need for manual coding. For more information about adding user-defined parameters to the script, see Inserting User-Defined Parameters in a Script </p> <p></p> <ul> <li>A Syntax Checker that checks the syntax of the code in your script file and catches simple syntax errors before you spend any time running a test session. While standing in the JavaScript View pane of the WebLOAD Recorder desktop, click Syntax Checker in the Edit tab of the ribbon, or right-click and select Check Syntax from the pop-up menu to check the syntax of the code in your script file.</li> </ul> <p>Important: WebLOAD Recorder scripts should be edited only within the confines of WebLOAD Recorder, not within an external editor. If you use an external editor to modify the JavaScript code in a script file generated by WebLOAD Recorder, your visual script will be lost.</p>"},{"location":"recorder/editing_scripts/#editing-the-javascript-code","title":"Editing the JavaScript Code","text":"<p>Note: Any part of the code that is edited in the JavaScript Editing mode is inserted into the script as a JavaScript block, which cannot be edited in the Visual Editing mode.</p> <p>To edit the JavaScript code for the script:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Select Full Script in the Home tab of the ribbon to open the script in JavaScript Editing mode.</p> <p>The entire script appears.</p> </li> <li> <p>Position the cursor where you want to edit the JavaScript code.</p> <p>Note: To add a new JavaScript node, place the cursor after the END WLIDE comment of the previous node before you start writing your JavaScript code. When you switch back to Visual Editing mode a JavaScript node is automatically created, containing your code.</p> </li> <li> <p>Type the JavaScript code that you want this item to contain.</p> </li> <li> <p>Add functions and commands from the Insert menu (see Adding Commands and Functions to a Script ).</p> </li> <li> <p>Import a JavaScript file:</p> <ol> <li>Right-click in the script.</li> <li>Click Import JavaScript File from the pop-up menu. The JavaScript code is added to the script.</li> </ol> </li> <li> <p>Add a WebLOAD Recorder protocol block from the pop-up menu (see Adding WebLOAD Recorder Protocol Blocks ).</p> </li> <li> <p>Perform a syntax check:</p> <ol> <li>Right-click in the script.</li> <li>Select Check Syntax from the pop-up menu.    WebLOAD Recorder performs a syntax check and displays the errors.</li> </ol> </li> <li> <p>Toggle a breakpoint (for more information, see Setting Breakpoints ).</p> <p>Note: To clear the JavaScript View pane, click Clear JavaScript Editor in the Edit tab of the ribbon.</p> </li> </ol>"},{"location":"recorder/editing_scripts/#adding-webload-recorder-protocol-blocks","title":"Adding WebLOAD Recorder Protocol Blocks","text":"<p>To add WebLOAD Recorder Protocol Blocks to a script:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Click Full Script in the Home tab to edit the script in full screen editing mode.</p> </li> <li> <p>In the JavaScript View pane, position the cursor where you want to place the WebLOAD Recorder protocol block.</p> </li> <li> <p>Right-click in the script, and click Add WebLOAD Recorder Block from the pop- up menu.</p> <p>A WebLOAD Recorder protocol block header is inserted on a new line in the script, immediately after the line where the cursor is located, and a script item is added to the Script Tree.</p> <p></p> </li> <li> <p>Replace the placeholder <code>&lt;Block Type&gt;</code> with a description. For example: Replace <code>&lt;Block Type&gt;</code> with URL.</p> </li> <li> <p>Add the JavaScript code after the WebLOAD Recorder protocol block header. The code is added to the script.</p> <p></p> </li> </ol>"},{"location":"recorder/editing_scripts/#adding-commands-and-functions-to-a-script","title":"Adding Commands and Functions to a Script","text":"<p>WebLOAD Recorder contains shortcuts to frequently performed actions. This section describes how to place Commands, and functions from the Insert menu in a script. For guidelines for replacing the placeholder variables with your own, see *Guidelines for Editing JavaScript Code* .</p> <p>To add commands and functions to a script:</p> <ol> <li> <p>In the main window, click Open in the File tab and open the script you want to edit.</p> </li> <li> <p>In the JavaScript View pane, position the cursor where you want to place the command or function.</p> </li> <li> <p>Right-click in the script and click Insert. The list of shortcuts appears.</p> <p></p> </li> <li> <p>Select a command or function.</p> <p>The command or function selected is inserted on a new line in the script, immediately after the line where the cursor is located.</p> </li> </ol>"},{"location":"recorder/editing_scripts/#guidelines-for-editing-javascript-code","title":"Guidelines for Editing JavaScript Code","text":"<p>Use the following guidelines to edit commands and functions you have placed in a script through the JavaScript Editor:</p> <ul> <li>Placeholders between brackets <code>&lt; &gt;</code> that appear in generic examples must be replaced with the literal name of a variable.</li> </ul> <p>For example, the generic example:</p> <p><code>wlHttp.PassWord = \u201c</code><code>\u201c</code> <p>must be replaced with the string:</p> <p><code>wlHttp.PassWord = \u201cBlue\u201d</code></p> <ul> <li>Placeholders between square brackets within parentheses ([ ]) are optional function parameters. It is not mandatory to include them in the command.</li> </ul> <p>For example, the generic example:</p> <p><code>&lt;Line\\_Array&gt; = GetLine(\u201c&lt;File\\_Name&gt;\u201c [,\u201d&lt;Separator&gt;\u201c])</code></p> <p>can be replaced with the string:</p> <p>MyFile = GetLine(\u201cC:\\InputFile.txt\u201d)`</p> <ul> <li>Placeholders between square brackets [ ] are array variables and must be replaced with the literal name of a variable, enclosed with square brackets.</li> </ul> <p>For example:</p> <p><code>wlHttp.Header[\u201c&lt;Key&gt;\u201c]= \u201c&lt;Value&gt;\u201c</code></p> <p>must be replaced with the string:</p> <p><code>wlHttp.Header[\u201cproxy-connection\u201d]=\u201cKeep-Alive\u201d</code></p> <ul> <li>In a WebLOAD Recorder protocol block, replace the placeholder <code>&lt;Block Type&gt;</code>with a description. </li> </ul> <p>For example:</p> <p><code>&lt;Block Type&gt;</code></p> <p>can be replaced with:</p> <p><code>SSL Certificate</code></p>"},{"location":"recorder/editing_scripts/#editing-your-script-using-the-webload-recorder-toolbox-set","title":"Editing your Script Using the WebLOAD Recorder Toolbox Set","text":"<p>The WebLOAD Recorder provides a set of objects, such as Sleep, that you can drag and drop to add script items in the Script Tree while recording or viewing your script. The WebLOAD Recorder bar is referred to as the toolbox.</p> <p></p> <p>Use the WebLOAD Recorder toolboxes to add the following items to your script:</p> <ul> <li>General objects, such as Message or Sleep timers. These objects are used in all test scripts, run in both WebLOAD Recorder and WebLOAD. General toolbox tools are described in The WebLOAD Recorder General Toolbox .</li> <li>Load objects, such as transactions and synchronization points used in WebLOAD tests. Load toolbox tools are described in The WebLOAD Recorder Load Toolbox .</li> <li>Internet Protocols functionality, such as downloading data from an FTP site for a WebLOAD Recorder test. Internet Protocols Building Blocks are described in The WebLOAD Recorder Internet Protocols Toolbox .</li> <li>JMS functionality, such as sending and receiving JMS message. JMS Building Blocks are described in The JMS Toolbox .</li> <li>IoT Protocols functionality, such as connecting to a broker. IoT Protocols Building Blocks are described in The WebLOAD Recorder IoT Protocols Toolbox .</li> <li> <p>Real Clients functionality, such as Selenium actions and a Perfecto Mobile script. Real Clients building blocks are described in The Real Clients Toolbox .</p> </li> <li> <p>Web Service functionality, such as adding web service calls or HTTP requests to your test session script. Web Services Building Blocks are described in The WebLOAD Recorder Web Services Toolbox .</p> </li> <li>Database actions, such as opening and getting data from a database for a WebLOAD Recorder test. Database Building Blocks are described in The WebLOAD Recorder Database Toolbox .</li> <li>Verification functionality, such as verifying specific elements within HTTP responses in your script. Verifications Building Blocks are described in The WebLOAD Recorder Verifications Toolbox .</li> <li>WebSocket functionality, such as creating a WebSocket connection to a specific URL address. WebSocket building blocks are described in The WebLOAD Recorder WebSocket Toolbox .</li> </ul>"},{"location":"recorder/editing_scripts/#adding-script-items-from-a-webload-recorder-toolbox","title":"Adding Script Items from a WebLOAD Recorder Toolbox","text":"<p>To drag and drop a WebLOAD Recorder toolbox item into your script:</p> <ol> <li>Place the mouse over the item in the WebLOAD Recorder toolbox that you want to add.</li> <li>Press and hold the mouse button (just \u201cclicking\u201d has no effect).</li> <li>Drag the item into the Script Tree, highlighting the item after which you want to add the new item.</li> <li>Release the script item you have inserted.</li> <li> <p>For many of the items, such as Message, Comments, and Sleep objects, additional dialog boxes are used to prompt you for the information necessary to add messages, comments, and pause times. Enter the necessary information, and click OK.</p> <p>The item with its toolbox icon appears in the Script Tree at the point where you placed the item.</p> </li> <li> <p>For JavaScript Objects, add JavaScript code to the script (see Using the JavaScript Editor ).</p> </li> </ol>"},{"location":"recorder/editing_scripts/#working-with-javascript-files","title":"Working with JavaScript Files","text":"<p>WebLOAD Recorder enables you to open a JavaScript file and convert it to a WebLOAD Recorder project file or continue working with the file as a JavaScript file.</p> <p>You may want to save it as a JavaScript file if it is an Include file (component of a whole script) and not the main script.</p> <p>We recommend that you convert the JavaScript file to a WebLOAD Recorder project file for the following reasons:</p> <ul> <li>The project file is better suited to the WebLOAD Recorder visual environment.</li> <li>Enables you to save additional information to the script, such as the Current Project options.</li> </ul> <p>Note: When you convert a JavaScript file to a WebLOAD Recorder project file, the original JavaScript file is not deleted. If you convert it to the new format, you can always save it as a regular JavaScript file, using the Save As option.</p> <p>To work with a JavaScript File:</p> <ol> <li> <p>In the main window, click Open in the File tab.</p> </li> <li> <p>Select a JavaScript file.</p> <p>The Open message appears.</p> <p></p> </li> <li> <p>Click Yes to convert the JavaScript file to a WebLOAD Recorder project file,</p> <p>-Or-</p> <p>Click No to continue working with the file as a JavaScript file.</p> <p>If you continue working with the file as a JavaScript file, the file appears in the JavaScript View pane as a JavaScript file, and the WebLOAD Recorder block shows that it is a JavaScript file.</p> <p></p> <p>Important: If you save the file as a JavaScript file, the next time you open the file, the Open message will not appear.</p> </li> </ol>"},{"location":"recorder/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD, the premier performance, scalability, and reliability testing solution for internet applications.</p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load.</p> <p>This section provides a brief introduction to WebLOAD technical support, including both documentation and online support.</p>"},{"location":"recorder/overview/","title":"Overview of the WebLOAD Integrated Development Environment","text":"<p>This section provides a brief overview to the WebLOAD Integrated Development Environment.</p>"},{"location":"recorder/overview/#about-webload-recorder","title":"About WebLOAD Recorder","text":"<p>WebLOAD Recorder is an easy-to-use tool for recording, creating, and authoring protocol test scripts for the WebLOAD environment.</p> <p>WebLOAD Recorder is a visual environment for creating protocol test scripts (referred to as scripts) that provides the following features:</p> <ul> <li>Recording scripts</li> <li>Editing scripts</li> <li>Running and Debugging scripts</li> </ul> <p>WebLOAD Recorder records your action in a Web browser and saves it as a JavaScript script. WebLOAD Recorder provides two editing modes, the Visual Editing mode and the JavaScript Editing mode, that enable you to edit your JavaScript script.</p> <p>WebLOAD Recorder enables you run and play back the script in a number of ways, such as full playback without any breakpoints, with breakpoints, or step-by-step. After the script is run, WebLOAD Recorder returns response data from the Web server.</p> <p>WebLOAD Recorder provides various views of the response data to help you debug and edit the script. These views include a Web Page view, HTTP Header view, JavaScript view, DOM view, and HTML view.</p> <p>The script can then be used in the WebLOAD environment to test the performance of your Web application.</p>"},{"location":"recorder/overview/#the-user-flow","title":"The User Flow","text":"<p>As you develop a Web application, you and your organization will usually do the following:</p> <ol> <li> <p>Plan your session to include the basic tasks that you want the test to perform.</p> </li> <li> <p>Create the Test script in WebLOAD Recorder.</p> </li> <li> <p>Test the application in WebLOAD using the script created in WebLOAD Recorder.</p> <p>You do not need to modify the test script as it can run from WebLOAD Recorder to WebLOAD seamlessly.</p> </li> </ol> <p>WebLOAD emulates multiple users on a network or server, testing to be sure the application scales as needed. These tests ensure that your application operates \u201cnormally\u201d under load and stress, and your application appears as per your</p> <p>specifications and to your visitors\u2019 expectations.</p> <p>The scripts are executed during WebLOAD test sessions by multiple Virtual Clients in parallel, achieving simultaneous access to the SUT and generating the load burden necessary for effective testing. Each execution of the script generates an independent instance running in parallel during your WebLOAD test session.</p> <p>Note: Refer to the WebLOAD documentation for more information about using WebLOAD.</p>"},{"location":"recorder/overview/#script-creation","title":"Script Creation","text":"<p>You create a JavaScript script in WebLOAD Recorder so that you can test applications by running the JavaScript script in WebLOAD to simulate the actions of real users.</p> <p>A Script is a test script written in JavaScript code that is used to test the functionality of a Web application under a load. It contains a sequence of HTTP protocol calls sent by Virtual Clients to your System Under Test (SUT). For example, if you want to test the performance of your Web application when clients access a certain page, your script must contain the code for accessing the page.</p> <p>A script can be generated automatically using the recording tools supplied with WebLOAD Recorder, or it can be created manually by writing a script. This guide describes the recording tools supplied with WebLOAD Recorder for developing test scripts automatically and provides instructions for developing test scripts manually.</p> <p>Before creating a script, you should consider and plan which actions you want to include in a test session.</p> <p>Create a script by carrying out the following steps:</p> <ol> <li>Recording the script.</li> <li>Editing / enhancing the script.</li> <li>Running and debugging the script.</li> </ol> <p>The first step of creating a script is recording. As you execute a typical sequence of activities, WebLOAD Recorder records your accesses, creating a precise, detailed record of all your activities and application responses that occur during a recording session.</p> <p>WebLOAD Recorder operates in conjunction with a Web browser, such as Microsoft\u2019s Internet Explorer. The basic \u2018Building Blocks\u2019 of a test session are your actions. As you work with a test application in the browser, (navigating between pages, typing text into a form, clicking the mouse, and so on), WebLOAD Recorder stores information about you actions in a script file. Externally, your activities are represented in WebLOAD Recorder by a set of icons arranged in a Visual Script Tree. Internally, WebLOAD Recorder records these actions and automatically creates scripts that act as scripts, recreating the actions and verifying the functionality of Web sites under realistic conditions.</p> <p>The second step of creating a script is editing the code of the recorded script. This can be done in Visual Editing mode and/or JavaScript Editing mode. For example, if you want a script to vary a sequence of accesses, submit randomized data read from a file, or work with Java or COM components, a certain degree of programming is required. This guide describes how to edit the code in your scripts to add more complex functionality to your testing sessions.</p> <p>The last step is to run your script in WebLOAD Recorder to perform testing so you can emulate how your script will run when executed in WebLOAD. You can then use the debugging tools to correct or modify your script so that it acts as you expected.</p> <p>After completing these basic steps, you can incorporate your script into a WebLOAD test.</p> <p>Note: For examples of basic scripts, see the WebLOAD Scripting Guide. </p>"},{"location":"recorder/overview/#the-recording-tool","title":"The Recording Tool","text":"<p>WebLOAD Recorder is supplied with a recording tool to perform the following:</p> <ul> <li>Recording on any site, including sites that use SSL security.</li> <li>Recording in any browser that supports a configurable proxy.</li> </ul> <p>The recording tool runs independently of the WebLOAD Recorder. It runs under Microsoft Windows 2000, XP, 2003 and 2007.</p>"},{"location":"recorder/overview/#the-editing-modes","title":"The Editing Modes","text":"<p>WebLOAD Recorder provides two modes in which to write lines of code:</p> <ul> <li>Visual Editing mode</li> <li>JavaScript Editing mode</li> </ul> <p>You can switch between modes while customizing scripts.</p>"},{"location":"recorder/overview/#visual-editing-mode","title":"Visual Editing Mode","text":"<p>In Visual Editing mode, rather than writing numerous lines of code to describe the actions you want to test, you simply record the actions in a browser without programming. Your interactions with your Web application are captured, recorded, and presented graphically in the Script Tree.</p> <p>When editing a script, you can also drag and drop items from the WebLOAD Recorder toolboxes into the script Tree. This makes programming easier by building the code behind an intuitive drag-and-drop interface.</p> <p></p> <p>Each node in the Script Tree is a graphical representation of the JavaScript code. JavaScript code that cannot be edited appears grayed out.</p> <p></p>"},{"location":"recorder/overview/#javascript-editing-mode","title":"JavaScript Editing Mode","text":"<p>WebLOAD Recorder provides complete testing flexibility with the JavaScript Editor, enabling you to add your own code into the recorded script or import a JavaScript file. Each block of code is presented graphically in the Script Tree.</p> <p></p> <p>WebLOAD Recorder provides the following programming assistance to manually edit a script:</p> <ul> <li>IntelliSense Editor mode for the JavaScript View pane.</li> <li>Insert menu with commonly used functions and commands.</li> <li>Syntax Checker that checks the syntax of the code in your script file and catches simple syntax errors before you spend any time running a test session.</li> <li>Import JavaScript files.</li> </ul> <p>Note: For detailed information about the JavaScript language, see The Core JavaScript Language in the Netscape JavaScript Guide. This guide is supplied in Adobe Acrobat format with the WebLOAD software. You may also learn the elements of JavaScript programming from many books on Web publishing. Keep in mind that some specific JavaScript objects relating to Web publishing do not exist in the WebLOAD test environment.</p>"},{"location":"recorder/overview/#the-run-mode","title":"The Run Mode","text":"<p>WebLOAD Recorder enables you to run the script and view the results. You can then debug the script.</p> <p>WebLOAD Recorder provides a debugger that enables you to correct or modifying your script so that is acts as you expected. It includes a variety of tools to help with the task of debugging your script, such as setting breakpoints and specifying watch variables and expressions.</p>"},{"location":"recorder/quick_start/","title":"WebLOAD Recorder Quick Start","text":"<p>Welcome to WebLOAD Recorder, part of the premier load testing tool that helps you quickly and easily test the functionality of your application under load. WebLOAD Recorder serves as the recorder for WebLOAD. Using an intuitive visual interface, WebLOAD Recorder helps you create, edit and debug your own test scripts, and prepare them for automatically testing your Web based applications.</p> <p>WebLOAD Recorder\u2019s visual environment gives you easy-to-use editing tools. Once you understand the components of the product and a few basic techniques, you can use these methods throughout WebLOAD Recorder.</p> <p>This Quick Start explains how to start the program and use the features of the WebLOAD Recorder interface.</p>"},{"location":"recorder/quick_start/#getting-started","title":"Getting Started","text":"<p>This section shows you how you can get started quickly, using the RadView Software test site at www.webloadmpstore.com.</p> <p>You will be working with a test script. The basic steps are:</p> <ol> <li> <p>Recording your script \u2013 describes the steps in recording a basic script (see *Creating</p> </li> <li> <p>Editing your script \u2013 explains how to edit and modify your script, insert new items into your script, and parameterize form data to create data driven tests (see Editing Your Script ).</p> </li> <li> <p>Running and debugging your script \u2013 explains run and debug your script </p> </li> </ol> <p>Note: We recommend that you follow the steps in order. All examples are interrelated and dependent on earlier steps.</p>"},{"location":"recorder/quick_start/#creating-a-script","title":"Creating a Script","text":"<p>The first step in creating a script is to record your actions as you interact with your Web application.</p> <p>To create a script:</p> <ol> <li> <p>Start WebLOAD Recorder by selecting Start &gt; Programs &gt; RadView &gt; WebLOAD&gt; WebLOAD Recorder. </p> <p>WebLOAD Recorder opens.</p> <p></p> </li> <li> <p>Select Create a new project.</p> <p>The WebLOAD Recorder main window opens in Visual Editing Mode, for you to begin creating your script.</p> <p>When the WebLOAD Recorder main window first opens, it opens in Visual Editing Mode. In this mode, there are several active panes. The Script Tree appears on the left, and various view panes appear on the right: JavaScript View, Page View, HTML View, and HTTP headers View.</p> <p>In Visual Editing mode, you can simply record the actions in a browser without programming. Your interactions with your Web application are captured, recorded, and presented graphically in the Script Tree.</p> <p>Each node in the Script Tree is actually a visual representation of JavaScript code. You can view the contents of the nodes in the JavaScript view pane.</p> <p>To the left of the Script Tree are WebLOAD Recorder toolboxes that can be used to edit a script by dragging and dropping items from the WebLOAD Recorder toolboxes into the Script Tree. This makes programming easier by building the code behind an intuitive drag-and-drop interface.</p> <p>To the right of the View panes is the Assistant pane, which contains simple instructions to help you create your load test script. Click a link in the Assistant to go to the relevant item.</p> <p> </p> </li> <li> <p>In the main window, in Visual Editing Mode, click Start in the Home tab of the ribbon to begin recording.</p> <p>The following dialog appears:</p> <p></p> </li> <li> <p>Click OK.</p> <p>WebLOAD Recorder begins recording all of the actions you perform in the browser, as indicated by the recording notification in the WebLOAD Recorder status bar.</p> <p></p> <p>A blank browser window opens.</p> </li> <li> <p>In the address bar, enter the Web address www.webloadmpstore.com to go to the WebLOAD test site.</p> <p></p> </li> <li> <p>Navigate through the site, performing the actions you want to test. For example:</p> <ol> <li> <p>Click a product to view the product details.</p> </li> <li> <p>Click Add to Cart.</p> </li> </ol> <p>Your actions are recorded and appear in the Script Tree as you navigate the site. (If you see more nodes in the Script Tree with different URLs, this may be traffic generated by browser plug-ins or extensions, for example, third-party toolbars.)</p> <p></p> </li> <li> <p>Click Stop Recording in the Home tab of the WebLOAD Recorder ribbon to stop the recording.</p> </li> <li> <p>Click Save in the Home tab of the WebLOAD Recorder ribbon to save your script.</p> </li> <li> <p>Type in QuickStart for the name of the script in the Save As dialog box and click Save.</p> <p>The script is saved with the extension *.wlp.</p> </li> </ol> <p>You now have a basic script that can be used in a WebLOAD template. For complete information on creating, editing, modifying scripts, and adding functionality to your script, see the rest of the WebLOAD Recorder User\u2019s Guide.</p>"},{"location":"recorder/quick_start/#viewing-your-script","title":"Viewing Your Script","text":"<p>You can view the recorded script in four views:</p> <ul> <li>JavaScript View</li> </ul> <p>When the WebLOAD Recorder main window first opens, it opens in Visual Editing Mode. In this mode, there are several active panes. The Script Tree appears on the left, and various view panes appear on the right: JavaScript View, Page View, HTML View, and HTTP headers View.</p> <p>When recording, your interactions with your Web application are captured, recorded, and presented graphically in the Script Tree.</p> <p>Each node in the Script Tree is actually a visual representation of JavaScript code. You can view the contents of the nodes in the various View panes.</p> <p>In the JavaScript view pane, you can do the following:</p> <ul> <li> <p>Display the code for each node individually.</p> </li> <li> <p>View code for the entire script as a whole.</p> </li> <li> <p>View the code for different sections in the script, by clicking the Agenda root node in the Script Tree and selecting a section from the Function Name list at the top of the JavaScript view pane.</p> </li> </ul> <p></p> <ul> <li>HTTP Headers View</li> </ul> <p>Each node in the Script Tree also has a visual representation of response headers. These response headers were received when the script was recorded. You can view the headers of the nodes in the HTTP Headers view pane. Since each node has a correlated response header, but not all nodes contain HTTP methods, some headers will not have a response header. These nodes will have the message \u201cThis object does not have HTTP Headers\u201d associated with them.</p> <p>In the HTTP Headers view pane, you can do the following:</p> <ul> <li> <p>Display the header for each node individually.</p> </li> <li> <p>View headers for the entire script as a whole.</p> </li> </ul> <p></p> <ul> <li>HTML View \u2013 See Viewing the Recorded Script in the HTML View Pane .</li> <li>Page View \u2013 See Using the Page View to View Results .</li> </ul>"},{"location":"recorder/quick_start/#editing-your-script","title":"Editing Your Script","text":"<p>To edit your script:</p> <ol> <li> <p>Edit the runtime settings using the Default and Current Project Options.</p> </li> <li> <p>Toggle between Visual Editing mode and JavaScript Editing mode. The default setting is the Visual Editing mode.</p> </li> <li> <p>In Visual Editing mode, you can edit the Script Tree:</p> <ol> <li>Drag and drop items from the WebLOAD Recorder toolbox into the Script Tree.</li> <li>Right-click to insert new items.</li> </ol> </li> <li> <p>In JavaScript Editing mode:</p> <ol> <li>Modify the JavaScript code.</li> </ol> <p>Important: Each block of code starts with a comment that contains \u201cWLIDE\u201d, description, and ID number. The ID number is automatically generated by WebLOAD Recorder and is the connection between the script node and the specific header. It is recommended that you do not change the contents of this comment. If you do, important data might be lost.</p> <ol> <li> <p>Right-click to insert functions and commands.</p> </li> <li> <p>Use the Syntax Checker to check the syntax of the code in your script file.</p> </li> <li> <p>Import JavaScript files.</p> </li> </ol> </li> </ol> <p>Note: For complete reference information on all JavaScript objects, variables, and functions used in WebLOAD Recorder scripts, see the WebLOAD JavaScript Reference Guide.</p>"},{"location":"recorder/quick_start/#toggling-between-edit-modes","title":"Toggling Between Edit Modes","text":"<p>You can toggle between Visual mode and Full Script mode. The default setting is the Visual Editing mode.</p> <p>To toggle between Edit Modes:</p> <ul> <li>Click Visual Mode in the Home tab of the ribbon,</li> </ul> <p>-Or-</p> <p>\u200b       Click the Full Script in the Home tab of the ribbon.</p>"},{"location":"recorder/quick_start/#basic-editing-techniques","title":"Basic Editing Techniques","text":"<p>WebLOAD Recorder is designed for you to be able to create and edit your script easily, using the visual interface. Once you understand the basic techniques, you can use them throughout the WebLOAD Recorder interface.</p> <p>Here are some simple techniques, described in this section, that you can use in WebLOAD Recorder:</p> <ul> <li>Drag and drop items into your Script Tree.</li> <li>Right-click within the script and select an available option from the Insert menu.</li> </ul>"},{"location":"recorder/quick_start/#drag-and-drop","title":"Drag and Drop","text":"<p>WebLOAD Recorder enables you to drag script items from the WebLOAD Recorder toolbox and drop them into your Script Tree.</p> <p>To drag and drop items into your script:</p> <ol> <li> <p>Place the mouse pointer over the item in the WebLOAD Recorder toolbox that you want to add to your script, such as a Message.</p> </li> <li> <p>Press and hold the left mouse button.</p> </li> <li> <p>Drag the item into the Script Tree, and place the mouse pointer at the step in the script after which you want to add the item.</p> </li> <li> <p>Release the mouse button.</p> <p>A dialog box to enter the parameters opens or the item appears in the Script Tree.</p> </li> <li> <p>Click the script item in the Script Tree to view and/or edit the JavaScript code in the JavaScript view pane.</p> </li> </ol>"},{"location":"recorder/quick_start/#right-click-menus","title":"Right-Click Menus","text":"<p>Throughout WebLOAD Recorder, context-sensitive menus appear when you click the right mouse button, giving you the appropriate options to select at that point.</p> <p>You can also right-click any script item in the Script Tree to display a menu.</p> <p>To insert a new item:</p> <ol> <li>Right-click the script item and click Insert from the menu.</li> <li>Select an item from the options available.</li> </ol>"},{"location":"recorder/quick_start/#adding-script-items","title":"Adding Script Items","text":"<p>You can drag and drop an item, such as Message, from the WebLOAD Recorder toolbox. For the list of toolboxes, see The WebLOAD Recorder Toolbox Items .</p> <p>In the following instructions, adding a Message is used as an example. While running a test session, WebLOAD Recorder and WebLOAD Recorder\u2019s Log windows display information about session execution. You can include Message nodes in your script, defining points at which to send error and/or notification messages to the Log window.</p> <p>To add a Message script item:</p> <ol> <li> <p>Place the mouse pointer over the Message  icon in the WebLOAD Recorder toolbox.</p> </li> <li> <p>Press and hold the left mouse button.</p> </li> <li> <p>Drag the Message item into the script, and place the mouse pointer after the Web page to which you want to add the message.</p> </li> <li> <p>Release the mouse button.</p> <p>The Message dialog box opens.</p> <p></p> </li> <li> <p>Enter the text you want to appear in the message.</p> </li> <li> <p>To add a global variable to the message text, click the globe icon ( ) to the right of the input text box and select a global variable from the drop-down list.</p> <p>Note: When entering a string value to the message, the string must be enclosed in quotation marks, for example, \u201cSample Message\u201d.</p> </li> <li> <p>Select a severity level for the message from the drop-down list. The following severity levels are available:</p> <ul> <li>Information message (WLInfoMessage)</li> <li>Minor error message (WLMinorError)</li> <li>Error message (WLError)</li> <li>Severe error message (WLSevereError)</li> </ul> </li> <li> <p>Click OK.</p> <p>The Message item appears in the Script Tree.</p> </li> </ol>"},{"location":"recorder/quick_start/#running-and-debugging-your-script","title":"Running and Debugging Your Script","text":"<p>After your script has been developed, you run it to test for errors in your application. You can then debug your script.</p>"},{"location":"recorder/quick_start/#running-your-script","title":"Running Your Script","text":"<p>To run your script:</p> <ol> <li> <p>Click Run in the Debug tab of the ribbon.</p> <p>As the script is running:</p> <ul> <li>A yellow arrow points to the node being executed in the Script Tree.</li> <li>If the JavaScript View tab is open, you will also see the yellow arrow pointing to the script.</li> <li>If the Page View tab is open, you will see the pages that return from the Web server.</li> <li>Nodes are added to the Execution Tree as they occur.</li> <li>The GET and POST HTTP protocol commands are displayed in  the HTTP Headers view pane.</li> <li>Messages and errors generated by the test appear in the Log Window at the bottom of the screen.</li> </ul> </li> <li> <p>At the prompt asking whether to save the changes to the project, click Yes and enter a file name to save your script file.</p> <p>Note: If there is more than one tester and the tests are to be shared between testers, the root directory (test plans and the results of the test plans) and the tests must be saved to a network drive.</p> </li> </ol>"},{"location":"recorder/quick_start/#debugging-your-script","title":"Debugging Your Script","text":"<p>WebLOAD Recorder provides an integrated debugger with a variety of tools to help locate bugs in your script. The debugger provides special menus, windows, dialog boxes, and grids of fields for debugging. You can pause the debugger and trigger WebLOAD Recorder to wait for user input before proceeding with running the script. In the script, you can set breakpoints and step into / over / out. You can also abort the debugger without executing the TerminateClient and TerminateAgenda functions, as opposed to stopping it completely.</p> <p>To debug your script:</p> <ul> <li>Click Step Into or click Run in the Debug tab of the WebLOAD Recorder ribbon,</li> </ul> <p>-Or-</p> <p>Add breakpoints by clicking Toggle Breakpoint in the Debug tab of the WebLOAD Recorder ribbon, and then clicking Run to run the script.</p> <p>Note: If you stop the debugger prematurely (for example, by closing the WebLOAD Recorder or returning to edit mode), you can instruct WebLOAD, in the Settings dialog box, to prompt you to save the debugging session file. For more information about the Settings dialog box, see Configuring the Settings .</p>"},{"location":"recorder/quick_start/#debugging-using-the-watch-window","title":"Debugging Using the Watch Window","text":"<p>You can use the Watch window to specify variables and expressions that you want to watch while debugging your program.</p> <p>To debug using the Watch window:</p> <ol> <li>Start debugging.</li> <li> <p>Select the Watch Window checkbox in the Debug tab</p> <p></p> <p>In the Name column, plus sign (+) or minus sign (-) boxes may appear. These appear if you added an array or object variable to the Watch window. Use these boxes to expand or collapse your view of the variable.</p> </li> </ol>"},{"location":"recorder/quick_start/#debugging-using-the-variables-window","title":"Debugging Using the Variables Window","text":"<p>The Variables window provides quick access to variables that are important in the scripts current context.</p> <p>To debug using the Variables Window:</p> <ol> <li>Start debugging.</li> <li> <p>Check the Variables Window checkbox in the Debug tab of the ribbon.</p> <p></p> <p>The Variables window displays variables used in the current statement and in the previous statement. It also displays return values when you step over or out of a function.</p> <p>The Variables window contains a grid with fields for the variable name and value. The debugger automatically fills in these fields. You cannot add variables or expressions to the Variables window. The Context dropdown list displays the current scope of the variables displayed.</p> </li> </ol>"},{"location":"recorder/quick_start/#debugging-using-the-call-stack-window","title":"Debugging Using the Call Stack Window","text":"<p>The Call Stack window lists the function calls that led to the current statement, with the current function on the top of the stack.</p> <p>To debug using the Call Stack Window:</p> <ol> <li>Start debugging.</li> <li> <p>Select the Call Stack checkbox in the Debug tab of the ribbon.</p> <p></p> <p>This Quick Start has shown you an example of how to record, create, edit, run, and debug a script in WebLOAD Recorder. For more information about all the options available in WebLOAD Recorder, see the rest of the WebLOAD Recorder User\u2019s Guide and the WebLOAD Recorder Online Help.</p> </li> </ol>"},{"location":"recorder/recording_scripts/","title":"Recording Scripts","text":"<p>This section provides instructions for recording scripts with WebLOAD Recorder.</p>"},{"location":"recorder/recording_scripts/#about-recording-scripts-with-webload-recorder","title":"About Recording Scripts with WebLOAD Recorder","text":"<p>Use WebLOAD Recorder to create test scripts as a baseline for testing your Web application in the WebLOAD Console. As you navigate through a Web application, WebLOAD Recorder records your actions, automatically generating a script that reflects your actions in JavaScript. WebLOAD Recorder creates your scripts for you, writing GET and POST HTTP protocol commands automatically.</p> <p>As your actions are recorded, WebLOAD Recorder displays them in the Script Tree, which is a tree hierarchy with visual indications of the information recorded.</p> <p>WebLOAD Recorder records only HTTP protocol calls that place a load on the System Under Test (SUT). Activities that are not relevant to the script, such as moving windows for a more comfortable display or opening another application, are not recorded. While your script is being recorded, you can edit it with the WebLOAD Recorder Toolbox set. For information on editing your script using the WebLOAD Recorder Toolbox set, see Editing your Script Using the WebLOAD Recorder Toolbox Set .</p> <p>This process creates the basic script. You can then view the recorded script as JavaScript code in the JavaScript view pane, revise the script to test more objects in more detail, and run and debug the script. For information on editing your script, see Editing Scripts . For information on running and debugging your script, see Running and Debugging Scripts .</p> <p>The script can then be used with WebLOAD for load and scalability testing of your application.</p>"},{"location":"recorder/recording_scripts/#starting-webload-recorder","title":"Starting WebLOAD Recorder","text":"<p>To start WebLOAD Recorder:</p> <ol> <li> <p>Select Start &gt; Programs &gt; RadView &gt; WebLOAD &gt; WebLOAD Recorder. WebLOAD Recorder opens.</p> <p></p> </li> <li> <p>Check or uncheck Don\u2019t ask me again.</p> </li> <li> <p>Click one of the following options:</p> <ol> <li>Create a new project \u2013 Opens a new project. WebLOAD supports several types of projects, the default project being Internet Protocol Project. The new project type is set according to the type of project which was last open. To create a different type of project, select New Project in the File tab of the WebLOAD Recorder ribbon and select the desired project type.</li> <li>Open an existing project \u2013 Browse to the project.</li> <li>Open a saved session \u2013 Browse to the session.</li> </ol> <p>The WebLOAD Recorder main window opens in Editing Mode, enabling you to begin creating or editing your script.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#recording-a-script","title":"Recording a script","text":"<p>You can either start working with WebLOAD Recorder immediately, or you can configure the recording options first. For more information about configuring the recording options, see Configuring the Recording and Script Generation Options .</p> <p>When you record a script, WebLOAD Recorder displays the script being created in real time. You can watch WebLOAD Recorder record your actions as you navigate in the Web browser.</p> <p>If you start and stop recording more than once during a single recording session (for example, to skip an irrelevant step in the application you plan to test) each subsequent set of JavaScript commands is appended to the end of the script. If you open an existing script and start recording new Web activity, WebLOAD Recorder also appends the new JavaScript commands to the end of the script.</p> <p>To record a script:</p> <ol> <li> <p>Start WebLOAD Recorder (see Starting WebLOAD Recorder ).</p> <p>-Or-</p> <p>Start WebLOAD Recorder from your Explorer by double-clicking the WebLOAD Recorder project file (.wlp) or session WebLOAD Recorder session file (.wls).</p> <p>The WebLOAD Recorder main window opens in Editing Mode, enabling you to begin recording your script.</p> </li> <li> <p>To create a new script, click New Project in the File tab of the ribbon.</p> </li> <li> <p>To open an existing script:</p> <ol> <li>Click Open in the File tab of the ribbon.</li> <li>Select a file.</li> </ol> </li> <li> <p>Click Start in the Home tab of the ribbon.</p> <p>By default, the Recording dialog box appears.</p> <p> </p> <p>The Recording dialog box enables you to quickly define the basic settings for the default Web browser which you will be using during the recording.</p> <p>Note: Any changes to the settings in the Recording dialog box affect the settings of the Browser Settings tab of the Recording and Script Generation Options dialog box (Figure). For more information, see Configuring the Default Browser .</p> </li> <li> <p>Optionally change the browser settings:</p> Field Description Open <p>Select one of the following options as your default browser:</p><p>- Microsoft Internet Explorer.</p><p>- Mozilla Firefox.</p><p>- Google Chrome.</p><p>- Native Mobile Recording. For further explanations, refer to Recording Mobile Applications .</p><p>- None \u2013 No default browser.</p><p>If you selected Mozilla Firefox as your browser, and Mozilla Firefox was installed on the machine after WebLOAD Recorder was installed, a message appears recommending that you install the Firefox extension responsible for setting the proxy definitions automatically. If you accept, the extension is installed.</p> URL address <p>Enter an address of a web page if you wish to open that specific page in the browser you selected.</p><p>This option is useful if you wish to open the same page multiple times.</p> Clear browser cache Select this option to clear the browser cache before recording. This option is selected, by default. Clear cookies Select this option to clear the browser\u2019s cookie history before recording. This option is selected, by default. Identify as Select this option to simulate a mobile web application. Browser Select the browser type you wish to simulate. Version Select the browser version you wish to simulate. Alternatively, click the Change button  to edit the browser version definition. See Editing Browser Version Definitions *. <p>Don\u2019t show</p><p>again</p> Select this checkbox if you do not wish to see this dialog box every time you select Start Recording. <p>In addition, you can optionally click More Options to open the Browser Settings tab of the Recording and Script Generation Options dialog box (Figure) and define the default browser settings in full detail.</p> </li> <li> <p>Click OK. The Recording dialog box closes.</p> <p>A floating WebLOAD Recording toolbar appears. Throughout any recording session, the WebLOAD Recording toolbar always appears on top of the active window.</p> <p></p> <p>The following table describes the function of each button in the WebLOAD Recording toolbar:</p> <p>Table: WebLOAD Recording Toolbar Buttons</p> Button Purpose <p></p><p></p> Start recording. <p></p><p></p> End recording. Pause or resume recording. Insert message. Insert comment. <p>Begin transaction.</p><p>Adds named transactions to the script to measure the performance of logical actions in your script, such as a Login process. By inserting named transactions into your script, you can take a series of simple actions, define them as a single transaction, and set success or failure criteria for the complete transaction.</p> End transaction. <p>Define concurrent.</p><p>Defines a starting point after which the WebLOAD engine collects all Post and Get HTTP requests, but does not execute them until an Execute Concurrent function is run.</p> <p>Execute concurrent.</p><p>Defines a starting point after which the WebLOAD engine stops collecting and begins executing all the Post and Get HTTP requests that were defined since the last Define Concurrent function, concurrently (using multithreading).</p> <p>WebLOAD Recorder begins recording all actions you perform in the browser, as indicated by the recording notification in the WebLOAD Recorder status bar.</p> <p></p> <p>If this is the first time that you are recording after WebLOAD Recorder was launched, the default browser opens automatically with its predefined home page. This enables you to start recording and then access a page.</p> <p></p> </li> <li> <p>In the Web browser window, access the System Under Test (SUT).</p> </li> <li> <p>Perform the steps that you want to test, retrieving and submitting information found on different site pages and locations. Try to emphasize the actions whose performance you need to measure in your test sessions.</p> <p>Watch how WebLOAD Recorder adds nodes to the script as you work. Your actions are recorded and appear in the Script Tree as you navigate the site. (If you see more nodes in the Script Tree with different URLs, this may be traffic generated by browser plug-ins or extensions, for example, third-party toolbars.)</p> <p></p> <p>a. Click the JavaScript View tab to watch the JavaScript of the pages as they are being recorded.</p> <p>Note: During recording, the InitAgenda and TerminateAgenda sections of the script are not generated and therefore are not visible.</p> <p>b. Click the HTTP Headers View tab to watch the response headers of the pages as they are being recorded.</p> <p>c. Click the HTML View tab to watch the HTTP data as it is being recorded.</p> <p>Note: When switching between the JavaScript, HTTP Headers, Browser, and HTML Views, the new view displays the node that is selected in the Script Tree (during edit mode) or Execution Tree (during debug mode). These views are available during recording, after the recording is finished, and after opening a saved script.</p> </li> <li> <p>When you are finished, select WebLOAD Recorder.</p> </li> <li> <p>Click Stop Recording in the WebLOAD Recorder recording floating toolbar or in the Home tab of the WebLOAD Recorder ribbon.</p> <p>WebLOAD Recorder stops recording.</p> </li> <li> <p>Click Save in the File tab of the WebLOAD Recorder ribbon.</p> </li> <li> <p>In the File name field in the Save As dialog box, type a descriptive name for the script, and then click Save.</p> <p>Your script is saved with the file extension *.wlp.</p> </li> <li> <p>Close the Browser window to work in WebLOAD Recorder. The Recording Complete dialog box opens.</p> <p></p> </li> <li> <p>Select one of the following:</p> <ul> <li>Automatically discover rules and correlate script to run the correlation engine using the existing rules, and apply auto-discovery correlation to find potential correlation rules. For more information, see Automatic Discovery of Correlation Rules *(.)</li> <li>Correlate script using only the existing rules to run the correlation engine using the existing defined rules. For more information, see Configuring the Correlation Rules .</li> <li>Don\u2019t correlate now to view the recorded script without correlating the script. You can manually correlate the script later.</li> </ul> </li> </ol> <p>Notes: Although by default the Recording Complete dialog box appears, this depends on your settings in the Correlation Options tab of the Recording and Script Generations options dialog box. For more information, see Setting the Default Correlation Action .</p> <p>You can customize the script in a variety of ways or you can run your script as recorded. For information on editing your script, see Editing Scripts . For information on running your script, see Running and Debugging Scripts .</p> <p>Notes: If actions that you are interested in were not recorded, check the cache settings in your browser. WebLOAD Recorder may be skipping steps that you want to record because your browser is using a system cache file. For more information, see Clearing the Cache and Cookies in Your Browser .</p> <p>When you stop the recording, if no actions were recorded (that is, the script is blank), WebLOAD Recorder automatically displays the recording troubleshooting information. </p>"},{"location":"recorder/recording_scripts/#pausing-a-recording","title":"Pausing a Recording","text":"<p>WebLOAD Recorder enables you to pause a recording so that you can edit the script.</p> <p>To pause a recording:</p> <ol> <li> <p>Click  from the WebLOAD Recording toolbar</p> <p>-Or-</p> <p>Click Pause in the Home tab of the ribbon. The recording pauses.</p> </li> <li> <p>To restart the recording, click  from the WebLOAD Recording toolbar,</p> <p>-Or-</p> <p>Click Start in the Home tab of the ribbon. </p> <p>The recording restarts.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#inserting-messages-in-a-recording","title":"Inserting Messages in a Recording","text":"<p>WebLOAD Recorder enables you to insert messages while recording, defining points at which to send error and/or notification messages to the Log window.</p> <p>To insert a message:</p> <ol> <li> <p>Click  from the WebLOAD Recording toolbar at the desired location in the recording.</p> <p>The Message dialog box opens.</p> <p></p> </li> <li> <p>Create a text message by typing the text you want to appear in the message in the input text box.</p> <p>Note: When you enter a string value in the message, you must enclose it in quotation marks; for example, \u201cSample Message\u201d.</p> </li> <li> <p>To add a global variable to the message text, click the globe icon to the right of the input text box, and select a global variable from the drop-down list.</p> </li> <li> <p>Select a severity level for the message from the drop-down list. The following severity levels are available:</p> <ul> <li>Information message (WLInfoMessage)</li> <li>Minor error message (WLMinorError)</li> <li>Error message (WLError)</li> <li>Severe error message (WLSevereError)</li> <li>Debug message (WLDebugMessage)</li> </ul> </li> <li> <p>Click OK.</p> </li> </ol> <p>The Message item appears in the Script Tree, and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/recording_scripts/#inserting-comments-in-a-recording","title":"Inserting Comments in a Recording","text":"<p>WebLOAD Recorder enables you to insert comments while recording to describe an activity or provide information about a specific operation.</p> <p>To insert a comment:</p> <ol> <li> <p>Click  from the WebLOAD Recording toolbar at the desired location in the recording.</p> <p>The Comment dialog box opens.</p> <p></p> </li> <li> <p>Enter the text you want to appear in the comment.</p> </li> <li> <p>Click OK.</p> <p>The Comment item appears in the Script Tree, and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#inserting-begin-and-end-transactions-in-a-recording","title":"Inserting Begin and End Transactions in a Recording","text":"<p>In addition to the automatic transactions provided by WebLOAD, you can add named transactions during a recording to measure the performance of logical actions in your script, such as a Login process. By inserting named transactions into your script, you can take a series of simple actions, define them as a transaction, and set success or failure criteria for the transaction. Each transaction can be a simple action, such as a query, or a complex action that may include several steps.</p> <p>To measure transactions, you must mark the beginning and end of the transaction in your script. During runtime, WebLOAD measures the time it takes to complete the transaction and reports the results in the WebLOAD Integrated reports, Statistics reports, and Data Drilling report.</p> <p>Note: You can add an unlimited number of transactions into your script. Each transaction must have a different name.</p> <p>To mark the beginning of a transaction:</p> <ol> <li> <p>Click from the WebLOAD Recording toolbar just before the first action you want to include in the transaction.</p> <p>The Begin Transaction dialog box opens.</p> <p></p> </li> <li> <p>Enter a logical name for the transaction; for example, \u201cLogin\u201d.</p> </li> <li> <p>Click OK.</p> <p>The Begin Transaction item appears in the Script Tree, and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol> <p>To mark the end of a transaction:</p> <ol> <li> <p>Click  from the WebLOAD Recording toolbar directly after the last action you want included in the script.</p> <p>The End Transaction dialog box opens.</p> <p></p> </li> <li> <p>Select the transaction to end from the Select Opened Transaction drop-down list.</p> </li> <li> <p>Select a return value for the transaction from the Select Return Value drop-down list.</p> <p>You can select from the return values provided, or select Custom Function to create your own verification function to call when the transaction is complete.</p> <p>For information on creating custom functions, see the WebLOAD Scripting Guide.</p> </li> <li> <p>To set WebLOAD to save the results of all transaction instances, successes, and failures for later analysis with Data Drilling, select true in the Save transaction information for Data Drilling field. Select false (default) to save only results of failed transaction instances that triggered some sort of error flag.</p> </li> <li> <p>Optionally, enter a text string to specify a possible reason for a transaction failure within your transaction verification function in the Failure Reason field. This reason will also appear in the Statistics Report.</p> </li> <li> <p>Click OK.</p> <p>The End Transaction item appears in  the Script Tree, and the JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#defining-concurrent-in-a-recording","title":"Defining Concurrent in a Recording","text":"<p>WebLOAD Recorder enables you to collect Post and Get HTTP requests and simultaneously execute them by two or more threads, as defined in the MultiThread Virtual Clients number. This is configured in the Browser Parameters tab in WebLOAD Console\u2019s Script Options dialog box.</p> <p>Note: WebLOAD Recorder does not perform the Post and Get HTTP requests concurrently.</p> <p>To simultaneously execute Post and Get HTTP requests, you must define where in the script to begin collecting the requests and where to stop collecting and begin executing them. The HTTP requests are collected until the engine encounters an Execute Concurrent function in the script. For more information about the Execute Concurrent Building Block, see *Executing Concurrent Definition in a Recording *.</p> <p>To define when to start collecting HTTP requests in a script:</p> <ul> <li>Click from the WebLOAD Recording toolbar at the desired location in the recording.</li> </ul> <p>The Define Concurrent Building Block is added to the Script Tree. The JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/recording_scripts/#executing-concurrent-definition-in-a-recording","title":"Executing Concurrent Definition in a Recording","text":"<p>WebLOAD Recorder enables you to define the Execute Concurrent function. Then in WebLOAD Console, you can simultaneously execute all the Post and Get HTTP requests that were defined since the last Define Concurrent function by two or more threads, as defined by the MultiThread Virtual Clients number. This is configured in the Browser Parameters tab in WebLOAD Console\u2019s Script Options dialog box.</p> <p>Note: The Execute Concurrent function can only be inserted in your script after a Define Concurrent function. For more information about the Define Concurrent function, see Define Concurrent .</p> <p>When the engine encounters the Execute Concurrent function, it stops collecting the HTTP requests in the script and starts their execution.</p> <p>To insert concurrently executing HTTP requests in a script:</p> <ul> <li>Click from the WebLOAD Recording toolbar at the desired location in the recording.</li> </ul> <p>The Execute Concurrent Building Block is added to the Script Tree. The JavaScript code is added to the script. To see the new JavaScript code, view the script in JavaScript Editing mode.</p>"},{"location":"recorder/recording_scripts/#viewing-the-recorded-script","title":"Viewing the Recorded Script","text":"<p>WebLOAD Recorder creates scripts by recording your actions as you interact with your Web application or System Under Test (SUT). Your recorded script serves as a baseline, which is subsequently used in the WebLOAD environment to test the performance of your Web application.</p> <p>WebLOAD Recorder presents each recorded action visually in the Script Tree and as code in the JavaScript View pane.</p> <p></p>"},{"location":"recorder/recording_scripts/#viewing-the-recorded-script-in-the-script-tree","title":"Viewing the Recorded Script in the Script Tree","text":"<p>As you navigate through a Web application, WebLOAD Recorder records your actions.</p> <p></p> <p>WebLOAD Recorder displays the following as nodes in the Script Tree:</p> <ul> <li>Pages accessed</li> <li>Sleep time</li> <li>Messages</li> <li>Comments</li> <li>Begin Transaction</li> <li>End Transaction</li> <li>Define Concurrent</li> <li>Execute Concurrent</li> </ul> <p>When navigating to a new page in the Web application, WebLOAD Recorder inserts a node with the URL into the Script Tree.</p> <p></p> <p>When you pause while navigating in the Web application, WebLOAD Recorder inserts a Sleep node into the Script Tree. The Sleep node represents your thinking time.</p> <p></p> <p>When you insert a message while recording, WebLOAD Recorder inserts a Message node into the Script Tree.</p> <p></p> <p>When you insert a comment while recording, WebLOAD Recorder inserts a Comment node into the Script Tree.</p> <p></p> <p>When you begin a transaction while recording, WebLOAD Recorder inserts a BeginTransaction node into the Script Tree. All actions that occur during the Transaction appear on a lower hierarchical level in the Script Tree. You can collapse or expand this node by clicking  or   respectively.</p> <p></p> <p>When you end a transaction while recording, WebLOAD Recorder inserts an EndTransaction node into the Script Tree.</p> <p></p> <p>When you define concurrent while recording, WebLOAD Recorder inserts a DefineConcurrent node into the Script Tree.</p> <p></p> <p>When you define concurrent while recording, WebLOAD Recorder inserts an ExecuteConcurrent node into the Script Tree.</p> <p></p> <p>After the script is recorded, you can edit the script (see Editing a Script in the Script Tree ).</p> <p>After your script has been developed, you can run and debug it. While the script is running, you can view it in the Script Tree (see Viewing the Execution Sequence in the Script Tree ).</p>"},{"location":"recorder/recording_scripts/#viewing-the-recorded-script-in-the-javascript-view-pane","title":"Viewing the Recorded Script in the JavaScript View Pane","text":"<p>Each node in the Script Tree is actually a visual representation of JavaScript code. You can view the contents of the nodes in the JavaScript view pane.</p> <p></p> <p>In the JavaScript view pane, you can do the following:</p> <ul> <li>Display the code for each node individually.</li> <li>View code for the entire script as a whole.</li> <li>View the code for different sections in the script, by clicking the Agenda root node in the Script Tree and selecting a section from the Function Name list at the top of the JavaScript view pane.</li> </ul> <p>Each block of code starts with a header that contains \u201cWLIDE\u201d, description, and ID number, and ends with the \u201cEND WLIDE\u201d closing comment. The ID number is automatically generated by WebLOAD Recorder and is the connection between the script node and the specific header. The comments in the script are a light grey color.</p> <p></p> <p>After the script is recorded, you can edit the script (see Editing a Script in the JavaScript View Pane *).</p> <p>After your script has been developed, you can run and debug it. While the script is running, you can view it in the JavaScript View pane (see Viewing the Execution Sequence in the JavaScript View Pane )</p>"},{"location":"recorder/recording_scripts/#viewing-the-recorded-script-in-the-http-headers-view-pane","title":"Viewing the Recorded Script in the HTTP Headers View Pane","text":"<p>Each node in the Script Tree is also a visual representation of response headers. You can view the headers of the nodes in the HTTP Headers view pane.</p> <p></p> <p>In the HTTP Headers view pane, you can do the following:</p> <ul> <li>Display the header for each node individually.</li> <li>View headers for the entire script as a whole.</li> </ul> <p>When you click a node in the Script Tree, you can view the header for that node.</p> <p></p> <p>You can expand the header to view all of the gets and posts for that node.</p> <p></p> <p>For an object that does not have a header, such as a Sleep node, the following is displayed:</p> <p></p> <p>The Post command involves sending data to the HTTP server, as opposed to the Get command, which is used only for retrieving data. In the HTTP Headers View, the Post command also includes the actual data that was sent to the server. This part of the HTTP message is marked by a special icon:</p> <p></p> <p>After the script is recorded, you can edit the script (see Editing a Script in the JavaScript View Pane *).</p> <p>After your script has been developed, you can run and debug it. While the script is running, you can view it in the JavaScript View pane (see Viewing the Execution Sequence in the JavaScript View Pane ).</p>"},{"location":"recorder/recording_scripts/#viewing-the-recorded-script-in-the-html-view-pane","title":"Viewing the Recorded Script in the HTML View Pane","text":"<p>Each node in the Script Tree is actually a visual representation of HTML code. You can view the HTML preview of each page and frame requested in the script in the HTML view pane.</p> <p></p> <p>In the HTML view pane, you can display the code for each node individually. After your script has been developed, you can run and debug it. For more information on debugging with the HTML View, see Using the HTML View to View Results .</p>"},{"location":"recorder/recording_scripts/#performing-script-regeneration","title":"Performing Script Regeneration","text":"<p>When a script is recorded, all of the HTTP traffic is saved even if not all of it is used to generate the script (the recorded traffic is saved to the .wle file of the script). The script is created according to the settings defined in the Script Generation tab in the Record and Script Generation Options dialog box. You can regenerate the script any time after recording, to include additional traffic information that was originally recorded. This is done by modifying the settings in the Script Generation tab and then regenerating the script.</p> <p>For example, by default when a script is recorded, the HTTP headers settings for the HTTP requests are not displayed in the script even though they are recorded. After selecting the Generate All Headers checkbox in the Script Generation tab and regenerating the script, the script includes the wlHttp headers property. For more information on the script content that can be regenerated, see Specifying the Script Content to be Generated </p> <p>In addition, script regeneration is affected by changes in the settings defined in the Post Data tab in the Record and Script Generation Options dialog box. You can record a script with content type x in the DATA list, DATAFile list, or not in any list, (which means it will be recorded as FORMDATA) and then change the settings and regenerate the script and it will play back according to the new settings.</p> <p>To perform script regeneration:</p> <ol> <li> <p>Click Correlation in the Home tab of the ribbon and select Regenerate Script from the drop-down list.</p> <p>-Or-</p> <p>Right-click a node in the Script Tree and select Regenerate Script from the pop-up menu. This regenerates only the selected node.</p> <p>Note: If your script was created manually, and not recorded, WebLOAD informs you that your script does not contain any recorded nodes and cannot regenerate the script. When performing script regeneration, any modifications to the script\u2019s originally recorded nodes are lost. Any nodes that were added after the recording will remain in the script after the script is regenerated.</p> <p>The Perform Script Regeneration dialog box appears.</p> <p></p> </li> <li> <p>Click Save and Continue to save the changes in your script and regenerate the script.</p> <p>-Or-</p> <p>Click Don\u2019t Save and Continue to regenerate the script without saving the changes in your script.</p> <p>-Or-</p> <p>Click Cancel to close the Perform Script Regeneration dialog box without regenerating the script.</p> <p>Note: Click Edit &gt; Undo to discard the newly regenerated script and revert back to the previous script.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#saving-a-script","title":"Saving a Script","text":"<p>You must save your scripts so that you can use them in test sessions.</p> <p>To save a script:</p> <ol> <li> <p>Click Save in the File tab of the ribbon and select Save or Save As. The Save As dialog box appears.</p> </li> <li> <p>Type the script name in the File name field.</p> </li> <li> <p>Click Save.</p> <p>Your script is saved with the file extension *.wlp. You may now run a test using the script.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#saving-additional-project-information","title":"Saving Additional Project Information","text":"<p>The Additional Information dialog box provides details about the project that help identify it; for example:</p> <ul> <li>A descriptive title</li> <li>The author name</li> <li>The subject of the test</li> <li>The system under test</li> <li>Other important information about the project</li> </ul> <p>Use the Additional Information dialog box to save information about the project.</p> <p>To save additional information properties for the project:</p> <ol> <li> <p>Select Additional Information from the WebLOAD Recorder Home tab of the ribbon.</p> <p>The Project Additional Information dialog box opens.</p> <p></p> </li> <li> <p>Fill in the fields to save additional information, useful for later reference, with the project.</p> </li> <li> <p>Click OK.</p> <p>The following table describes the fields of the Project Additional Information dialog box.</p> </li> </ol> <p>Table: Project Additional Information Dialog Box Fields</p> Field Description Title Provides a space for you to type a title for this project. The title can be different then the project file name. Subject Provides a space for you to type a description of the subject of the project. Use this property to group similar projects together. Created by Provides a space for you to type the name of the person who authored this project. Test description Provides a space for you to type a description of the test objectives and what the project is designed to test. Version and build of the System Under Test Provides a space for you to type the name, version and build number of the System Under Test (SUT). Comments Provides a space for you to type any comments regarding the project. Custom Provides a space for you to type any comments you want saved with this project."},{"location":"recorder/recording_scripts/#recording-desktop-web-applications","title":"Recording Desktop Web Applications","text":"<p>Desktop web applications, such as Rich Internet Applications (RIAs), are web based applications that have the features and functionality of local desktop applications. A desktop web application can run either in a web browser or in software that is installed and run locally on the user\u2019s desktop (for example, Adobe AIR applications).</p> <p>Recording desktop web applications in scripts using WebLOAD Recorder, involves configuring the web applications to use a specific proxy setting. This proxy setting is usually configured automatically when opening WebLOAD Recorder for browser- based applications in Internet Explorer or Mozilla Firefox. To record any other web application that does not run within the browser, configure the web application to pass the traffic to the server through the WebLOAD Recorder proxy server, using one of the following methods:</p> <ul> <li>Recording WebLOAD Scripts Using the Client\u2019s Proxy Setting .</li> <li>Recording WebLOAD Scripts Using the LAN Settings .</li> <li>Recording WebLOAD Scripts Using Proxy Tunneling .</li> </ul>"},{"location":"recorder/recording_scripts/#recording-webload-scripts-using-the-clients-proxy-setting","title":"Recording WebLOAD Scripts Using the Client\u2019s Proxy Setting","text":"<p>Web applications that support working through a proxy server can be configured to pass the traffic to the server through the WebLOAD Recorder proxy server. Follow the web application\u2019s proxy setting instructions to specify the WebLOAD Recorder proxy server as the application\u2019s proxy server.</p> <p>WebLOAD Recorder\u2019s default proxy server settings are:</p> <ul> <li> <p>Host: localhost.</p> </li> <li> <p>Port: 9884.</p> </li> </ul>"},{"location":"recorder/recording_scripts/#recording-webload-scripts-using-the-lan-settings","title":"Recording WebLOAD Scripts Using the LAN Settings","text":"<p>Some operation systems provide the ability to configure the proxy setting of the LAN</p> <p>connection. The following example demonstrates configuring the Internet application\u2019s proxy setting of the LAN connection in Windows:</p> <p>To configure the proxy setting in Windows:</p> <ol> <li> <p>From the Start menu, select Settings &gt; Control Panel. The Control Panel dialog box appears.</p> </li> <li> <p>Select Internet Properties and then select the Connections tab.</p> <p>The Internet Properties \u2013 Connections tab appears.</p> <p></p> </li> <li> <p>In the Local Area Network (LAN) settings, click LAN settings. The Local Area Network (LAN) Settings dialog appears.</p> <p></p> </li> <li> <p>In the Proxy server area check Use a proxy server for your LAN.</p> </li> <li> <p>In the Address and Port fields enter WebLOAD Recorder\u2019s proxy server setting. By default, this is localhost:9884.</p> <p>Note: This setting is necessary for the recording process only and should be removed before the load test execution.</p> </li> <li> <p>Click OK.</p> <p>The proxy setting of the LAN connection in Windows XP is configured.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#recording-webload-scripts-using-proxy-tunneling","title":"Recording WebLOAD Scripts Using Proxy Tunneling","text":"<p>Proxy tunneling is a general method to handle desktop web applications that do not support working through a proxy server. Proxy tunneling involves using an external utility to redirect the outgoing web traffic on the client machine. The redirection enforces the traffic to pass through WebLOAD\u2019s proxy recorder, which is listening on port 9884, during the recording stage.</p> <p>To record scripts using Proxy Tunneling:</p> <ol> <li> <p>Enable a port interception service on the client machine. Configure the service to redirect the outgoing traffic from the application to pass through WebLOAD\u2019s proxy. The following are possible methods for intercepting web application traffic:</p> <ul> <li>Use an external utility that is capable of controlling and rerouting HTTP traffic. For example, the Proxifier application, which is available at: http://www.proxifier.com.</li> <li>Configure your firewall. Some firewalls provide advanced services of traffic manipulation.</li> <li>Configure your hardware. Four to seven layer switches may be used for controlling and routing web based traffic.</li> </ul> </li> <li> <p>Configure WebLOAD Recorder\u2019s recording options as follows:</p> <p>a. Click Recording and Script Generation Options in the Tools tab of the ribbon. The Recording and Script Generation Options dialog appears (see Figure).</p> <p>b. Select the Browser Settings tab.   The Browser Settings tab appears (see Figure).</p> <p>d. In the Automatic Browser Settings area, uncheck Set the Proxy definitions automatically.   Select the Proxy Options tab.</p> <p>The Proxy Options tab appears (see the Figure).</p> <p>e. In the Recording Proxy Options area, check Use Transparent Proxy. This enables WebLOAD Recorder to record from any Web client that does not support proxy configurations.</p> </li> <li> <p>Start recording your script.</p> </li> <li> <p>Run the web application. While the web application is running, all the http traffic generated on the client machine is directed to WebLOAD Recorder. WebLOAD handles this traffic as if it is received from a browser client and generates the appropriate script.</p> </li> <li> <p>Stop recording the script when the application is finished running.</p> </li> <li> <p>Disable the interception service.</p> <p>Note: Before starting the test and running the generated script, the interception service must be stopped. Otherwise, the load traffic generated by the Console will be directed back to the recorder.</p> </li> </ol> <p>The script is recorded successfully. You can now run the test in WebLOAD Console.</p> <p>In certain cases, the WebLOAD Proxy Recorder may timeout during recording. This may be due to a slow network and/or SUT. The default timeout is 60. To avoid this situation, you can increase the default timeout.</p> <p>To change the default timeout:</p> <ol> <li> <p>Right-click the <code>wlproxyinclude.js</code> file in {RadView directory}\\Include and select Edit.</p> </li> <li> <p>Add the following line to the file:</p> <p><code>ProxyObject.RProxyCOptConnectionTimeOut = 300</code></p> </li> <li> <p>Save the file.</p> </li> </ol>"},{"location":"recorder/recording_scripts/#troubleshooting","title":"Troubleshooting","text":"<p>Refer to the following table if you are having recording related problems. Before assuming the problem is with WebLOAD, make sure that your internet settings are correct and that you can access the internet without recording.</p> <p>Table: Troubleshooting</p> Problem Possible Options Solution Script is not created while recording Make sure browser opens while recording. Click Recording and Script Generation Options in the Tools tab of the ribbon and select the Browser Settings tab. Ensure that the settings are correct for your browser. See Configuring the Default Browser  for more information. Check browser proxy settings. For Internet Explorer:<p>1. From your browser\u2019s menu, select Tools \u0086 Internet Options and select the Connections Options tab.</p><p>2. Click Lan Settings.</p><p>3. If none of the checkboxes are selected, you have a direct connection to the internet and the browser proxy settings are not the problem.</p><p>\u2003If Automatically detect settings and/or Use automatic configuration script are checked, you must disable the automatic settings. Before disabling the automatic settings, contact your system administrator for your proxy server information.</p><p>\u2003If Use a proxy server for your LAN is checked, copy the Address and Port field\u2019s current proxy settings. In WebLOAD, click Recording and Script Generation Options in the Tools tab of the ribbon and select the Proxy Options tab. Check Use the following definitions for the application\u2019s proxy server and enter the current proxy information into the HTTP Proxy/Port and SSL Proxy/Port fields.</p> For Mozilla Firefox:<p>1. From your browser\u2019s menu, select</p><p> Tools &gt; Options.</p><p>2. At the top of the Options dialog box, select the Advanced icon and select the Network tab.</p><p>3. In the Connection area, click Settings.</p><p>4. If Direct connection to the internet is selected, the browser proxy settings are not the problem.</p><p></p><p>If Auto-detect proxy settings for this network or Automatic proxy configuration URL are selected, you must disable the automatic settings. Before disabling the automatic settings, contact your system administrator for your proxy server information.</p><p>If Manual proxy configuration is selected, copy the HTTP Proxy and Port field\u2019s current proxy settings. In WebLOAD, click Recording and Script Generation Options in the Tools tab of the ribbon and select the Proxy Options tab. Check Use the following definitions for the application\u2019s proxy server and enter the current proxy information into the HTTP Proxy/Port and SSL Proxy/Port fields.</p> Recording with a browser other than Internet Explorer or Mozilla Firefox. <p>1. Click Recording and Script Generation Options in the Tools tab of the ribbon and select the Browser Settings tab. Select Other browser or None as the default browser setting.</p><p>2. While recording, you must manually change the client\u2019s proxy setting. In your browser, manually configure the proxy settings to use WebLOAD\u2019s default port: 9884.</p><p>\u2003This points the browser\u2019s proxy settings to the WebLOAD recorder enabling WebLOAD to record the browser\u2019s HTTP clients.</p> LAN settings options for IE are disabled by IT Group Policies Request that your Network Administrator change the policies for the specific machine on which you are recording. For more information about Group Policy see the Microsoft TechNet Library. Advanced options <p>1. While recording, open the task manager and ensure that a single proxynator.exe process is active. If there is no proxynator.exe process or there is more than one proxynator.exe process contact RadView support for further assistance.</p><p>2. WebLOAD uses ports 9884, 9010, and 9000. Enter netstat -a -p tcp in the command line to ensure that the ports are not being used by another application on your machine. A list of the unavailable ports appears.</p><p></p><p>If port 9884 is unavailable, click Recording and Script Generation Options in the Tools tab of the ribbon and select the Proxy Options tab. In the Recording Proxy Options frame, modify the Proxy Port value from 9884 to an available port number.</p><p>If port 9010 or port 9000 are unavailable, open the WebLOAD.ini file in \\bin and locate the following lines:<p>TESTTALK_CLIENT_PORT=\u201c9010\u201d TESTTALK_NETWORK_PORT=\u201c9001\u201d</p><p>Modify the port value of the unavailable port from 9010 and/or 9000 to an available port number.</p> Local sites are not recorded in the Script Proxy settings are set to bypass local addresses <p>1. From your browser\u2019s menu, select Tools &gt; Internet Options and select the Connections Options tab.</p><p>2. Click Lan Settings.</p><p>3. Check Bypass proxy server for local addresses to ensure that the proxy settings are not set to bypass local addresses or any other server that you want to record.</p> WebLOAD does not record from http://localhost <p>For Internet Explorer:</p><p>Use any of the following instead of http://localhost:</p><p>- http://<p>- http://<p>- http://localhost./</p><p>For Mozilla Firefox:</p><p>1. From your browser\u2019s menu, select Tools &gt; Options.</p><p>2. Select the Advanced &gt; Network tab and click Settings.</p><p>3. Clear the No proxy for property checkbox.</p> Secured sites are not recorded in the script Proxy settings do not point to the recorder. <p>For Internet Explorer:</p><p>1. From your browser\u2019s menu, select Tools &gt; Internet Options and select the Connections Options tab.</p><p>2. Click Lan Settings.</p><p>3. Ensure that Use a proxy server for your LAN is checked and modify the port setting to 9884.</p><p></p><p>For Mozilla Firefox:</p><p>1. From your browser\u2019s menu, select Tools &gt; Options.</p><p>2. At the top of the Options dialog box, select the</p><p> Advanced icon and select the Network tab.</p><p>3. In the Connection area, click Settings.</p><p>4. Ensure that Manual proxy configuration is selected and modify the port setting to 9884.</p> A different proxy is needed for SSL <p>You must configure an SSL proxy. For instructions, see</p><p>Setting the Proxy Options </p> Certificate Error is displayed in the browser during recording <p>The browser correctly detects the recorder and warns the user. You can safely ignore the warning and continue.</p><p>Note: You can prevent the warning if you configure WebLOAD to use the server\u2019s certificate. Set the proxy certificate options in the Recording and Script Generation Options dialog box. For more information see Setting the Proxy Certificates .</p> A partial script is created while recording Browser cache needs to be cleared. <p>For Internet Explorer or Mozilla Firefox:</p><p>1. In WebLOAD Recorder, click Recording and Script Generation Options in the Tools tab of the ribbon.</p><p>2. Select the Browser Settings tab.</p><p>3. In the Automatic Browser Settings area, check Clear the browser cache and click OK.</p><p></p><p>For any other browser:</p><p>- From your browser\u2019s menu, select the command that clears the browser\u2019s cache.</p> Proxy settings need to be modified <p>Modify the proxy setting\u2019s file extensions and content types to record specific extensions, since WebLOAD by default only records top-level URLs, such as HTML, XML, and text.</p><p>1. Click Recording and Script Generation Options in the</p><p> Tools tab of the ribbon.</p><p>2. In the Recording and Script Generation Options dialog box select the Content Types and File Locations tabs.</p><p>3. Add the specific extension and content types that are not being recorded.</p><p></p><p>For more information see Configuring the Content Types to Record Setting File Locations.</p> The Internet Explorer proxy settings are locked <p>1. Click Start &gt; Run.</p><p>2. Type Regedit and click OK.</p><p>3. Select HKEY_CURRENT_USER &gt; Software &gt; Policies</p><p>\u2003&gt; Microsoft &gt; Internet Explorer &gt; Control Panel.</p><p>4. Set the data value for each key in this directory to 0.</p>"},{"location":"recorder/running_debugging_scripts/","title":"Running and Debugging Scripts","text":"<p>This section provides instructions for running and debugging scripts with WebLOAD Recorder.</p>"},{"location":"recorder/running_debugging_scripts/#about-running-and-debugging-scripts-with-webload-recorder","title":"About Running and Debugging Scripts with WebLOAD Recorder","text":"<p>When you run your script, WebLOAD Recorder interacts with your Web application just as a real user would. WebLOAD Recorder runs your script line by line. As your script executes, execution arrows are displayed in the left margin of the Script Tree and the JavaScript View pane, showing your progress.</p> <p>Unless otherwise configured in the project options, the test session will log and continue on Minor Errors encountered during runtime. Severe Errors will cause WebLOAD Recorder to stop the entire test. If WebLOAD Recorder encounters HTTP errors that are undefined by WebLOAD, the test session logs them and continues running.</p> <p>Messages, test failures, and differences are indicated by messages in the Log View Window.</p> <p>After running a script, you can debug it. WebLOAD Recorder enables you to check that the script runs smoothly without errors, offers step controls to run through the script step-by-step, breakpoints, and various view and windows to monitor variables.</p>"},{"location":"recorder/running_debugging_scripts/#running-a-script","title":"Running a Script","text":"<p>This section provides instructions for running a script. Before running a script, you can do the following:</p> <ul> <li>Set the number of iterations to run, see Setting Playback Options .</li> <li>Set the file locations for a test session, see Setting File Locations .</li> <li>Set WebLOAD Recorder to ignore the recorded sleep time, see Configuring Sleep Time Control Options .</li> </ul>"},{"location":"recorder/running_debugging_scripts/#starting-the-execution-of-a-script","title":"Starting the Execution of a Script","text":"<p>To execute the script:</p> <ol> <li> <p>In the main window, click Open in the File tab of the ribbon and open the script you want to edit.</p> </li> <li> <p>Click Run in the Home or Debug tab of the ribbon,</p> </li> </ol> <p>-Or-</p> <p>Click Step Into in the Debug tab of the ribbon to run the script step-by-step. </p> <p>The script runs and displays the following:</p> <ul> <li>A sequence of the events generated by the script in the Execution Tree.</li> <li>The execution sequence in the JavaScript View pane and the Script Tree.</li> <li>If the Page View tab is open, the pages returned from the Web site.</li> </ul> <p>Note: If you specified more than one playback iteration, you are returned to the beginning of the script (for information on playback iteration, see Setting Playback Options *). </p>"},{"location":"recorder/running_debugging_scripts/#viewing-the-execution-sequence-in-the-script-tree","title":"Viewing the Execution Sequence in the Script Tree","text":"<p>When you run your script, WebLOAD Recorder interacts with your Web application just as a real user would. WebLOAD Recorder runs your script line by line. Execution arrows are displayed in the left margin of the Script Tree. When you select a node in the Script Tree, the corresponding information is displayed in each of the available views. For example, the Page View displays the page you have requested from the server, the HTML View displays the HTML of that page, and the HTTP Headers View displays the request and response\u2019s headers. For more information, see Viewing and Analyzing the Test Results *.</p> <p>WebLOAD Recorder enables you to do the following:</p> <ul> <li>Run through the entire script line by line, and add breakpoints (see Debugging a Script ).</li> <li>Display the Current Project Options by right-clicking the Agenda root node and clicking Current Project Options from the pop-up menu,</li> </ul> <p>-Or-</p> <p>Click Current Project Options in the Tools tab of the ribbon (see Configuring the Default and Current Project Options ).</p> <p>-Or-</p> <p>Select Current Project Options from the WebLOAD Recorder Home tab of the ribbon (see Configuring the Default and Current Project Options ).</p> <p>To view the Script Tree:</p> <ul> <li>In the main window, click Visual Mode in the Home tab.</li> </ul> <p>By default, the Script Tree pane appears at the top left of the main window, to the right of the WebLOAD Recorder Toolbox pane.</p> <p></p>"},{"location":"recorder/running_debugging_scripts/#viewing-the-execution-sequence-in-the-javascript-view-pane","title":"Viewing the Execution Sequence in the JavaScript View Pane","text":"<p>JavaScript View displays the complete JavaScript of your script with an execution arrow tracking its progress during runtime.</p> <p>WebLOAD Recorder enables you to do the following:</p> <ul> <li>Run through the entire script line by line, add breakpoints, and add Watch variables (see Debugging a Script ).</li> <li>Check the syntax by right-clicking in the script and clicking Check Syntax from the pop-up menu.</li> </ul> <p>To view the JavaScript View:</p> <ul> <li>In the main window, select the JavaScript View checkbox in the View tab.</li> </ul> <p></p>"},{"location":"recorder/running_debugging_scripts/#viewing-the-response-data-in-the-execution-tree","title":"Viewing the Response Data in the Execution Tree","text":"<p>As you execute a script, WebLOAD Recorder displays the actions performed during runtime in the Execution Tree. The Execution Tree is an interactive tree that you can use to examine the results.</p> <p></p>"},{"location":"recorder/running_debugging_scripts/#comparing-recorded-sequence-and-execution-sequence-side-by-side-side-by-side","title":"Comparing Recorded Sequence and Execution Sequence Side by Side side by side","text":"<p>You can view the recorded sequence alongside the execution sequence using the side by side view feature. This can help you manually discover differences between the original recorded session and the playback.</p> <p>Side by side view is available for the Browser, HTTP Headers, and HTML Views.</p> <p>To view the recorded sequence side by side with the execution sequence:</p> <ul> <li>Select Side by Side in the Session tab of the ribbon.</li> </ul> <p>The recorded sequence is displayed to the left of the execution sequence.</p> <p>Note: This feature is only available after complete running an execution sequence, not at the beginning of an execution sequence.</p> <p></p>"},{"location":"recorder/running_debugging_scripts/#comparing-a-script-recording-node-to-its-playback","title":"Comparing a Script Recording node to its Playback","text":"<p>After running a script test, you can perform a comparison of the original script recording and its playback for each node in the script.</p> <p>To compare a script node\u2019s recording to its playback:</p> <ol> <li> <p>Select a script node.</p> </li> <li> <p>Click Compare HTML in the Session tab of the ribbon.</p> </li> </ol> <p>-Or-</p> <p>Right-click a node in the Script Tree or the Execution Tree and select Compare html from the pop-up menu.</p> <p>The defined Difference Viewer application launches and automatically compares the selected node in the recording and in the playback. For information about defining the Difference Viewer application, see Defining the Difference Viewer Application *.</p>"},{"location":"recorder/running_debugging_scripts/#comparing-a-recorded-sequence-with-the-execution-sequence","title":"Comparing a Recorded Sequence with the Execution Sequence","text":"<p>You can compare an entire original recorded sequence with the current execution sequence using the Compare All feature. This can help you to check and fix any undesirable changes you made to the original recorded session.</p> <p>To compare the current execution with the original sequence:</p> <ul> <li>Select Compare All in the Session tab of the ribbon.</li> </ul> <p></p> <p>The following comparison information and options are provided:</p>"},{"location":"recorder/running_debugging_scripts/#execution-tree-pane-in-compare-all-mode","title":"Execution Tree pane in Compare All mode","text":"<p>In the Execution Tree pane, each node\u2019s background color indicates the degree to which the original execution was changed, as follows:</p> <ul> <li> <p> Green \u2013 The current execution is identical with the original execution</p> </li> <li> <p> Yellow \u2013 There is a minor difference between the original and the current execution</p> </li> <li> Red \u2013 There is a major difference between the original and the current execution</li> </ul>"},{"location":"recorder/running_debugging_scripts/#compare-pane","title":"Compare pane","text":"<p>The Compare pane that appears at the bottom of the screen lists a digest of the differences between the original and the current execution. The icon at the beginning of each line indicates the level of difference:</p> <ul> <li> <p> Yellow \u2013 indicates a minor change.</p> </li> <li> <p> Red \u2013 indicates a major change.</p> </li> </ul> <p>Double clicking a line, or right-clicking a line and selecting Go to location, opens a side-by-side view of the relevant code in the view pane, with the first difference highlighted in blue. The original recorded sequence is displayed on the left and the current execution is displayed on the right. The side by side comparison can be viewed in the Browser, HTTP Headers, and HTML Views.</p> <p></p> <p>In addition, right-clicking a line and selecting Compare HTML, launches the defined Difference Viewer application that compares the selected node in the original recording with the current execution. For more information see Comparing a Script Recording node to its Playback .</p>"},{"location":"recorder/running_debugging_scripts/#stopping-the-execution-of-a-script","title":"Stopping the Execution of a Script","text":"<p>When debugging a script using a Step Into or breakpoint, the playback session stops immediately upon completion of the current WebLOAD Recorder protocol block.</p> <p>To stop the execution of a script:</p> <ul> <li>Click Stop in the Home tab of the ribbon,</li> </ul> <p>-Or-</p> <p>Use the hotkeys Shift + F5.</p> <p>The playback session is stopped.</p>"},{"location":"recorder/running_debugging_scripts/#debugging-scripts","title":"Debugging Scripts","text":"<p>WebLOAD Recorder provides an integrated debugger with a variety of tools to help locate bugs in your script. The debugger provides special menus, windows, dialog boxes, and grids of fields for debugging. You can pause the debugger and trigger WebLOAD Recorder to wait for user input before proceeding with running the script. In the script, you can set breakpoints and step into / over / out. While debugging your script, you can abort the debugger without executing the TerminateClient and TerminateAgenda functions, as opposed to stopping it completely.</p>"},{"location":"recorder/running_debugging_scripts/#debug-tab-items","title":"Debug Tab Items","text":"<p>Commands for debugging can be found on the Debug tab of the ribbon.</p> <p></p> <p>The Debug tab contains commands to start the debugging process. The following options are available through the Debug tab.</p> Tab Item Description Execution group Run Starts playback of the script from the current statement until a breakpoint or the end of the script is reached. Stop Stops the playback of the script. Abort <p>Stops the playback of the script without executing the</p><p>TerminateClient or TerminateAgenda functions.</p> Debug group Step Into Starts the play back of the script, a step at a time, entering each function encountered. Step Over Starts the playback of the script, one step at a time. When a function is reached, it is executed without stepping through the function. Step Out Plays through the remaining steps of the called function, and stops on the line in the script immediately following the function call. Using this command you can quickly finish executing the current function after determining that a bug is not present in the function. Break Execution Stops the playback of the script at that point. Toggle Breakpoint Defines a line in the script where WebLOAD Recorder suspends execution. Remove all Breakpoints Eliminates all breakpoints. Disable/Enable all Breakpoints Disable or enable all breakpoints. Edit Breakpoints Displays the Breakpoints dialog box, enabling the setting of breakpoints. Debug Windows group Watch Window Toggles the displays of the Watch window (available only during runtime in debug mode), which displays the names and values of variables and expressions.. Variables Window Toggles the display of the Variables window (available only during runtime in debug mode) which displays information about variables used in the current and previous statements and functions.. Call Stack Toggles the display of the Call Stack window which lists the function calls that led to the current statement, with the current function on the top of the stack.."},{"location":"recorder/running_debugging_scripts/#debugging-a-script","title":"Debugging a Script","text":"<p>When debugging a script, you can set the script to run in the following ways:</p> <ul> <li>Step-by-step \u2013 The execution starts at the first line of the script and stops at each subsequent line.</li> <li>Breakpoints \u2013 The execution starts at the first line of the script and stops when it reaches a breakpoint.</li> <li>A combination of step-by-step and breakpoints.</li> </ul> <p>To debug a script:</p> <ol> <li>Click Run or Step Into in the Debug tab of the ribbon.</li> <li>When you reach the end of the script you can:<ol> <li>Click Step Into in the Debug tab to return to the beginning of the script.</li> <li>View results (see Viewing and Analyzing the Test Results ).</li> <li>Add breakpoints (see Setting Breakpoints ).</li> </ol> </li> <li>Return to Edit mode and revise your script.</li> </ol>"},{"location":"recorder/running_debugging_scripts/#starting-the-debugger","title":"Starting the Debugger","text":"<p>To start debugging:</p> <ul> <li>Click Run in the Debug tab to run the script continuously,</li> </ul> <p>-Or-</p> <p>Click Step Into in the Debug tab to run the script step-by-step.</p>"},{"location":"recorder/running_debugging_scripts/#setting-breakpoints","title":"Setting Breakpoints","text":"<p>Use breakpoints to define places in the script to suspend execution. Breakpoints can be set in Edit mode and in Debug mode. The breakpoints you set will be saved as a part of your WebLOAD Recorder project.</p> <p>To set multiple breakpoints to a script:</p> <ol> <li> <p>Display the entire script.</p> </li> <li> <p>Select the line of code.</p> </li> <li> <p>Click Edit Breakpoints in the Debug tab. The Breakpoints dialog box opens.</p> <p></p> </li> <li> <p>Click the arrow next to the Break at field. The Breakpoint options appear.</p> <p></p> </li> <li> <p>Click the Line number.</p> <p>The Line number is added to the list of breakpoints.</p> </li> <li> <p>To add context to the breakpoint, click the arrow again, and click Advanced. </p> <p>The Advanced Breakpoint dialog box opens.</p> <p></p> </li> <li> <p>Fill in the fields, and click OK.</p> </li> </ol> <p>To set a breakpoint in the Script Tree:</p> <ol> <li>Right-click an item in the Script Tree.</li> <li>From the pop-up menu, click Toggle Breakpoint.     A red dot appears in the left margin of the JavaScript View pane adjacent to the selected code and in the Script Tree adjacent to the visual script element for which the breakpoint is defined, indicating that the breakpoint is set.</li> </ol> <p>To set a breakpoint in the JavaScript View pane:</p> <ol> <li>Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.</li> <li>In the Script Tree, click the Agenda root node to display the entire script in the JavaScript View pane.</li> <li>In the JavaScript View pane, select the line of code where you want the script to wait.</li> <li> <p>Right-click and select Toggle Breakpoint from the pop-up menu,</p> <p>-Or-</p> <p>Click Toggle Breakpoint in the Debug tab.</p> <p>A red dot appears in the left margin of the JavaScript View pane adjacent to the selected code and in the Script Tree adjacent to the visual script element for which the breakpoint is defined, indicating that the breakpoint is set.</p> </li> </ol> <p>To set a breakpoint in Debug mode:</p> <ol> <li> <p>Run the script by clicking Step Into in the Debug tab.</p> </li> <li> <p>Continue stepping through the script until reaching the point you want to insert the breakpoint.</p> </li> <li> <p>In the JavaScript View pane, select the code where you want to insert in breakpoint.</p> </li> <li> <p>Click Toggle Breakpoint in the Debug tab.</p> </li> <li> <p>While in debug mode a red dot appears in the left margin of your script code, indicating that the breakpoint is set.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#running-to-a-breakpoint","title":"Running to a Breakpoint","text":"<p>To run until a breakpoint is reached:</p> <ol> <li>Set a breakpoint (see Setting Breakpoints ).</li> <li> <p>Click Run in the Debug tab</p> <p>Click Step Into in the Debug tab to run the script step-by-step.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#removing-breakpoints","title":"Removing Breakpoints","text":"<p>You can remove individual breakpoints or remove all breakpoints in the script.</p> <p>To remove a breakpoint:</p> <ol> <li> <p>In the Script Tree, click the Agenda root node to display the entire script in the JavaScript View pane.</p> </li> <li> <p>In the JavaScript View pane, select the line containing the breakpoint you want to remove.</p> </li> <li> <p>Click Toggle Breakpoint in the Debug tab. The red dot in the left margin disappears.</p> </li> </ol> <p>To remove all breakpoints:</p> <ol> <li>Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.</li> <li>In the Script Tree, click the Agenda root node to display the entire script in the JavaScript View pane.</li> <li>Click Remove all Breakpoints in the Debug tab The red dot in the left margin disappears.</li> </ol>"},{"location":"recorder/running_debugging_scripts/#select-the-javascript-view-checkbox-in-the-view-tab-to-open-the-javascript-view-pane","title":"Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.","text":""},{"location":"recorder/running_debugging_scripts/#disabling-and-enabling-all-breakpoints","title":"Disabling and Enabling All Breakpoints","text":"<p>You can disable or enable all breakpoints in the script.</p> <p>To disable or enable all breakpoints:</p> <ol> <li> <p>Select the JavaScript View checkbox in the View tab to open the JavaScript View pane.</p> </li> <li> <p>In the Script Tree, click the Agenda root node to display the entire script in the JavaScript View pane.</p> </li> <li> <p>Click Disable/Enable Breakpoints in the Debug tab.</p> <ul> <li> <p>When all of the breakpoints are disabled, the red dots in the left margin turn white.</p> </li> <li> <p>When all of the breakpoints are enabled, the white dots in the left margin turn red.</p> </li> </ul> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#stepping-into-the-script","title":"Stepping Into the Script","text":"<p>To run the script and execute one statement at a time (Step Into):</p> <ol> <li> <p>Click Run or Step Into in the Debug tab.</p> <p>The debugger executes the next statement and then it pauses execution. If you step into a nested function call, the debugger steps into the most deeply nested function.</p> </li> <li> <p>Repeat step 1 to continue executing the script one statement at a time.</p> </li> </ol> <p>To step into a specific function:</p> <ol> <li> <p>Set a breakpoint just before the function call or use the Step Into command to advance the script execution to that point.</p> <p>For information on setting breakpoints see Setting Breakpoints .</p> </li> <li> <p>Click Step Into in the Debug tab.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#stepping-out-or-over-a-function","title":"Stepping Out or Over a Function","text":"<p>To step over a function:</p> <ol> <li> <p>Click Run or Step Into in the Debug tab.</p> </li> <li> <p>Execute the script to the function call.</p> </li> <li> <p>Click Step Over in the Debug tab.</p> <p>The debugger executes the next function, but pauses after the function returns.</p> </li> <li> <p>Continue executing the program.</p> </li> </ol> <p>To step out of a function:</p> <ol> <li> <p>Click Run or Step Into in the Debug tab and execute the program to some point inside the function.</p> </li> <li> <p>Click Step Out in the Debug tab.</p> <p>The debugger continues until it has completed  execution of the return from the function, then pauses.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#stopping-the-playback-of-the-script","title":"Stopping the Playback of the Script","text":"<p>You can stop the playback of the script at a specific point. Stopping a script executes the TerminateClient or TerminateAgenda functions.</p> <p>To stop the playback of the script:</p> <ol> <li>Start debugging. Click Run or Step Into in the Debug tab.</li> <li> <p>Click Break Execution in the Debug tab.</p> <p>The script stops running. You can continue the playback from this point, at a later time.</p> </li> <li> <p>Click Stop in the Debug tab.</p> <p>The script stops running. Continuing the playback from this point is not possible.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#aborting-the-playback-of-the-script","title":"Aborting the Playback of the Script","text":"<p>You can abort the playback of the script at a specific point. Aborting a script does not execute the TerminateClient or TerminateAgenda functions.</p> <p>To abort the execution of a script:</p> <ul> <li>Click Abort in the Debug tab. The playback session is aborted.</li> </ul>"},{"location":"recorder/running_debugging_scripts/#using-the-watch-window","title":"Using the Watch Window","text":"<p>The Watch window is used for debugging your application, and is only available when you are running your script. The Watch window displays the values of selected variables or watch expressions that you specify while debugging your script. The values of the variables and expressions in the Watch window are only updated when execution is stopped at a breakpoint.</p> <p>Use the Watch window to specify variables and expressions that you want to watch while debugging your program. You can also modify the value of a variable using the Watch window. To add a watch variable, see Adding a Watch Variable or Expression .</p> <p>To open the Watch window:</p> <ul> <li>Select the Watch Window checkbox in the Debug tab.</li> </ul> <p></p> <p>The Watch window contains four tabs:</p> <ul> <li>Watch1</li> <li>Watch2</li> <li>Watch3</li> <li>Watch4</li> </ul> <p>Each tab displays a user-specified list of variables and expressions in a grid field. You can group variables that you want to watch together onto the same tab. For example, you could put variables related to a specific page on one tab and variables related to second page on another tab. You could watch the first tab when debugging the first page and the second tab when debugging the second page.</p> <p>If you add an array variable to the Watch window, plus sign (+) or minus sign (-) boxes appear in the Name column. You can use these boxes to expand or collapse your view of the variable.</p>"},{"location":"recorder/running_debugging_scripts/#viewing-the-value-of-a-variable-in-the-watch-window","title":"Viewing the Value of a Variable in the Watch Window","text":"<p>You can view the value of a variable in the Watch window.</p> <p>To view a variable or expression in the Watch window:</p> <ol> <li>Start debugging. Click Run or Step Into in the Debug tab of the ribbon.</li> <li> <p>Select the Watch Window checkbox in the Debug tab to open the Watch window.</p> <p>In the Name column, plus sign (+) or minus sign (-) boxes may appear. These appear if you added an array or object variable to the Watch window. Use these boxes to expand or collapse your view of the variable.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#adding-a-watch-variable-or-expression","title":"Adding a Watch Variable or Expression","text":"<p>You can add a watch variable or expression to the Watch window, while you are running your script. Valid expressions accepted in the Watch window include any valid JavaScript expression that can be added to the script.</p> <p>The Watch dialog box is equivalent to using the JavaScript eval function. Using the eval function you can define a variable and its value. In the same way, you can use the watch dialog box to define values for variables used throughout a script.</p> <p>For example, if your script contains the variable a, when you type a=10 in the Watch window, the engine evaluates the expression as though it were written within the script. The result of the expression a=10 would be setting the variable a to 10. Then when you type a=a+1 in the watch window, the variable a would be set to 11. The value of the variable is always according to the last definition of the variable. So, if you type a=2, the variable a would be set to 2 regardless of what the variable\u2019s value was beforehand.</p> <p>To add a Watch variable or expression in the JavaScript View pane:</p> <ol> <li> <p>Start debugging. Click Run or Step Into in the Debug tab.</p> </li> <li> <p>Select the JavaScript View option in the View tab to open the JavaScript View pane.</p> </li> <li> <p>In the Script Tree, click the Agenda root node to display the entire script in the JavaScript View pane.</p> </li> <li> <p>In the JavaScript View pane, select the line where you want to add the Watch variable or expression.</p> </li> <li> <p>Right-click the variable in the JavaScript View pane, and click Add Watch from the pop-up menu.</p> <p>The Add Watch dialog box opens.</p> <p></p> </li> <li> <p>In the Expression field, type a variable or expression.</p> </li> <li> <p>Click Add.</p> <p>The variable or expression is added to the Watch window. The Watch window evaluates the variable or expression immediately and displays the value or an error message.</p> <p>If you added an array or object variable to the Watch window, plus sign (+) or minus sign (-) boxes appear in the Name column. Use these boxes to expand or collapse your view of the variable.</p> </li> <li> <p>You can optionally edit the name or value of the variable or expression by double- clicking the name or value that you want to edit.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#viewing-the-variables-window","title":"Viewing the Variables Window","text":"<p>The Variables window provides quick access to variables that are important in the scripts current context.</p> <p>To open the Variables Window:</p> <ol> <li>Start debugging. Click Run or Step Into in the Debug tab.</li> <li> <p>Select the Variables Window checkbox in the Debug tab.</p> <p></p> <p>The Variables window displays variables used in the current statement and in the previous statement. It also displays return values when you step over or out of a function.</p> <p>The Variables window contains a grid with fields for the variable name and value. The debugger automatically fills in these fields. You cannot add variables or expressions to the Variables window (you must use the Watch window, see Adding a Watch Variable or Expression ), but you can expand or collapse the variables shown. You can expand an array, object, or structure variable in the Variables window if it has a plus sign (+) box in the Name field. If an array, object, or structure variable has a minus sign (-) box in the Name field, the variable is already fully expanded.</p> <p>The Variables window also has a Context dropdown list that displays the current scope of the variables displayed. To view variables in a different scope, select the scope from the drop-down list box.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#viewing-the-value-of-a-variable","title":"Viewing the Value of a Variable","text":"<p>You can view the value of a variable in the Variables window.</p> <p>To view a variable in the Variables window:</p> <ol> <li>Start debugging. Click Run or Step Into in the Debug tab.</li> <li>Select the Variables Window checkbox in the Debug tab to open the Variables window.</li> </ol>"},{"location":"recorder/running_debugging_scripts/#viewing-the-call-stack-window","title":"Viewing the Call Stack Window","text":"<p>The Call Stack window lists the function calls that led to the current statement, with the current function on the top of the stack.</p> <p>To open the Call Stack Window:</p> <ol> <li>Start debugging. Click Run or Step Into in the Debug tab.</li> <li> <p>Select the Call Stack checkbox in the Debug tab.</p> <p></p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#viewing-and-analyzing-the-test-results","title":"Viewing and Analyzing the Test Results","text":"<p>While recording, editing, and running your script, WebLOAD Recorder provides information on all major events that occurred during runtime such as failures and error messages. You can navigate through the Execution Tree to view the results of your test at increasing levels of detail. This technique lets you view detailed information on any errors.</p>"},{"location":"recorder/running_debugging_scripts/#using-the-execution-tree-to-view-results","title":"Using the Execution Tree to View Results","text":"<p>As you execute a script, WebLOAD Recorder displays the Web pages accessed in the Web application in the Execution Tree.</p> <p>When working with a file JavaScript file that has not been converted to a WebLOAD Recorder project file, WebLOAD Recorder displays a playback node for each HTTP request of the JavaScript.</p> <p></p>"},{"location":"recorder/running_debugging_scripts/#using-the-page-view-to-view-results","title":"Using the Page View to View Results","text":"<p>The Page View displays a visual representation of the baseline set of Web pages in your script. This view is available while recording, editing, or running your script.</p> <p>To open the Page View:</p> <ol> <li>Select the Page View checkbox in the View tab of the ribbon.</li> <li> <p>Select the Page View tab.</p> <p></p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#using-the-dom-view-to-view-results","title":"Using the DOM View to View Results","text":"<p>DOM View displays all of the objects and the structure of the Web page displayed in Page View, giving you access to objects not visible in the pages presentation layer.</p> <p>DOM View is available when Page View is open, while recording, editing, or running your script. When an element is selected in the DOM View, the object is highlighted in the Page View.</p> <p>To open the DOM View:</p> <ol> <li>Select the DOM View checkbox in the View tab of the ribbon.</li> <li> <p>Select the DOM View tab.</p> <p></p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#using-the-html-view-to-view-results","title":"Using the HTML View to View Results","text":"<p>HTML view displays an HTML preview of each page and frame requested in the script. When switching between the JavaScript, HTTP Headers, Browser, and HTML Views, the new view displays the node that is selected in the Script Tree (during edit mode) or Execution Tree (during debug mode). These views are available while recording, after the recording is finished, and after opening a saved script.</p> <p>To open the HTML View:</p> <ol> <li> <p>Select the HTML View checkbox in the View tab of the ribbon.</p> </li> <li> <p>Select the HTML View tab.</p> <p></p> </li> <li> <p>To search for text:</p> <ol> <li>Right-click and click Find from-the pop-up menu.</li> <li>Type the text you want to find, and click Find Next.</li> </ol> </li> <li> <p>To copy text:</p> <ol> <li>Select the text you want to copy.</li> <li>Right-click and click Copy from-the pop-up menu.</li> </ol> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#using-the-http-headers-view-to-view-results","title":"Using the HTTP Headers View to View Results","text":"<p>The HTTP Headers View displays the GET and POST HTTP protocol commands. Other commands can also be displayed, such as CONNECT. When switching between the various views, the new view displays the node that is selected in the Script Tree.</p> <p>These views are available while recording, after the recording is finished, during playback and debugging, and after opening a saved script.</p> <p>To open the HTTP Headers View:</p> <ol> <li> <p>Select the HTTP Headers View checkbox in the View tab of the ribbon.</p> </li> <li> <p>Select the HTTP Headers View tab.</p> <p></p> <p>The headers are divided into groups of headers per playback request. For each request, only the relevant headers are displayed. You can expand the headers to show the form data and all other content.</p> <p></p> </li> <li> <p>To view all of the headers on the script, click the Agenda root node.</p> </li> <li> <p>To view headers of a specific round, click the Round node in the Execution tree.</p> </li> <li> <p>To search for text:</p> <ol> <li> <p>Right-click and click Find... from-the pop-up menu.</p> </li> <li> <p>In the Find what field, type the text you want to find. </p> </li> </ol> <p>The Find what field is case sensitive.</p> <ol> <li>Click Find Next. The entire text of the selected node is selected.</li> </ol> </li> <li> <p>To copy text:</p> <ol> <li>Select the text you want to copy.</li> <li>Right-click and click Copy from-the pop-up menu. The entire text of the selected node is copied.</li> </ol> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#using-the-log-view-window-to-view-results","title":"Using the Log View Window to View Results","text":"<p>In addition to the results available through viewing the Script Tree and the Execution Tree, the Log View Window displays the errors encountered during playback and additional information about your test session results.</p> <p>An Info Message or a minor error will not cause the playback to stop. Similarly, a generic message, issued when WebLOAD Recorder encounters HTTP errors that are undefined by WebLOAD, will not cause playback to stop. A higher level of severity (Error or Severe Error) ends the playback upon completion of the WebLOAD Recorder protocol block.</p> <p>To open the Log View Window:</p> <ul> <li>Select the Log View checkbox in the View tab of the ribbon.</li> </ul> <p>By default, the Log View pane appears at the bottom of the main window.</p> <p></p> <p>The following information is displayed:</p> <ul> <li>! \u2013 The result and severity of each message:</li> <li>Information message</li> <li>Minor error message</li> <li>Error message</li> <li> <p>Severe error message</p> </li> <li> <p>Time \u2013 The amount of runtime.</p> </li> <li>Description \u2013 The runtime action and information about failed actions, including the date and time the action occurred.</li> </ul>"},{"location":"recorder/running_debugging_scripts/#performing-a-full-search-in-the-test-results","title":"Performing a Full Search in the Test Results","text":"<p>You can search for a specific string in all views at once.</p> <p>To search for text in all views:</p> <ol> <li> <p>Select Find All in the Edit tab of the ribbon.</p> <p></p> </li> <li> <p>In the Find what field, type the text you want to find.</p> </li> <li> <p>Under Look at, specify in which view you wish to search. You can select any combination of the following:</p> <ul> <li>JavaScript</li> <li>HTTP Headers</li> <li>HTML</li> </ul> </li> <li> <p>Optionally check the Match case checkbox.</p> </li> <li> <p>Click Find.</p> <p>A results pane appears in the bottom half of the screen, displaying all the search results.</p> </li> </ol> <p></p> <pre><code>- The icon to the left of each search result indicates in which page view the result appears.\n\n- Double clicking a search result highlights the result both in the Script Tree and in the corresponding page view.\n</code></pre>"},{"location":"recorder/running_debugging_scripts/#printing-the-contents-of-the-log-view-window","title":"Printing the Contents of the Log View Window","text":"<p>To print the contents of the Log View Window:</p> <ol> <li>Right-click inside the Log View window.</li> <li>Select Print from the right-click menu. The Print Setup dialog displays.</li> <li>Select a printer and click OK.</li> </ol>"},{"location":"recorder/running_debugging_scripts/#saving-the-contents-of-the-log-view-window","title":"Saving the Contents of the Log View Window","text":"<p>To save the contents of the Log View Window:</p> <ol> <li>Right-click inside the Log View window.</li> <li>Select Save from the right-click menu. The Save As dialog displays.</li> <li>In the File Name field, type in the name for the file.</li> <li> <p>Click Save.</p> <p>The file is saved with the extension *.log.</p> <p>You can view the saved log file with any text editor.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#viewing-a-log-message","title":"Viewing a Log Message","text":"<p>To view the complete log message:</p> <ol> <li>Right-click an entry in the Log View window.</li> <li> <p>Select Display Message from the right-click menu.</p> <p>The Log Message window with detailed information on the selected entry appears.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#validating-responses","title":"Validating Responses","text":"<p>WebLOAD Recorder enables you to validate a response in a script by adding a response validation function. You can validate a Web page\u2019s title, the maximum time taken to load the Web page, its content, and the length of its content. You can also</p> <p>determine WebLOAD\u2019s behavior if validation fails. During playback, the results of the validation process (failure or success) are displayed in the Log View window.</p> <p>To add a response validation function:</p> <ol> <li> <p>Select a node in the Script Tree.</p> </li> <li> <p>Click Response Validation in the Home tab of the ribbon.</p> <p>-Or-</p> <p>Right-click the node and select Response Validation.</p> <p>-Or-</p> <p>Perform the following:</p> <ol> <li>Click the HTML View tab to view the node in HTML View.</li> <li>Select HTML text within the node.</li> <li>Right-click the selection and click Response Validation. The Response Validation dialog box appears.</li> </ol> <p>Note: When accessing the Response Validation dialog box from HTML View, the dialog box appears automatically configured with the selected content.</p> <p> </p> </li> <li> <p>Configure the responses you wish to validate during playback, according to the information displayed in the Table and click OK.</p> <p> </p> </li> <li> <p>The Response Validation function is added to your script.</p> Field Description Page Title Validate Select to validate the page title. Success if Page Title is The title of the Web page. During playback, if the title of the Web page matches the text entered in this field, the validation is successful. Recorded page title is The page title as defined in the HTML <code>&lt;title&gt;</code> tag. Page Time Validate Select to validate the page time. Page Time limit x sec The maximum number of seconds that may elapse while waiting for the Web page to open for the validation to be successful. Content length Validate Select to validate the content length. Equal to x bytes The size of the Web page content, in bytes, must equal the  specified value for the validation to be successful. Greater than x bytes The size of the Web page content, in bytes, must be greater than the specified value for the validation to be successful. Lower than x bytes The size of the Web page content, in bytes, must be less than the specified value for the validation to be successful. Recorded Content Length is The size of the response, in bytes. Content Validate Select to validate the content. For a full explanation, refer to Performing Multiple Text Validations of Web Page Content . Success if response contains/does not contain x For each JavaScript expression you include in your validation check, specify whether it must or must not appear in the Web page for the validation to be successful. Add <p>Click this button to add a new JavaScript expression to the list of validations that must or must not appear in the Web page.</p><p>The string \"<code>&lt;text to find&gt;</code>\" appears in the box above the button. Delete this string and instead do either or both of the following:</p><p>- Enter a text string in quote marks. For example, \"Welcome\".</p><p>- Enter a parameter without quote marks. For example, TodaysDate(). You can click Add Parameter and select a parameter from the list.</p><p>Note that you can concatenate strings and/or parameters to create a JavaScript expression. For example: \"Welcome\" + params_user.getValue().</p> Remove Click this button to delete a selected JavaScript expression from the list of validations that must or must not appear in the Web page. Add Parameter Opens a list of parameters you can include in the contains/does not contain text. This list is identical to the list available in the Insert Variable menu (Figure 54). In case of validation failure Display warning and continue running Select to display a warning during playback and continue running the script, if the verification fails. Display error and stop the round Select to display an error during playback and stop the round, if the verification fails. Display fatal error and stop test execution Select to display a fatal error and stop running the script, if the verification fails. Call to JS function Select to run a specified JavaScript function, if the verification fails. Error message (Optional) Enter an error message to be displayed if the verification fails (optional). </li> <li> <p>Click OK. The Response Validation function is added to your script.</p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#performing-multiple-text-validations-of-web-page-content","title":"Performing Multiple Text Validations of Web Page Content","text":"<p>You can use the Response Validation feature to validate a Web page\u2019s content.</p> <p>To validate the content of a Web page:</p> <ol> <li> <p>Follow the instructions in Validating Responses  to access the Response Validation dialog box: (Figure).</p> </li> <li> <p>In the Content section, check the Validate checkbox.</p> </li> <li> <p>Click Add.</p> <p>The box above the Add button displays \u201c<code>&lt;text to find&gt;</code>\u201d.</p> <p></p> </li> <li> <p>Define a JavaScript expression and whether it must or must not appear in the Web page, as follows:</p> <ol> <li> <p>Delete the string \u201c<code>&lt;text to find&gt;</code>\u201d and instead do either or both of the following:</p> <ul> <li>Enter a text string enclosed in quote marks. For example, \"Welcome\".</li> <li>Enter a parameter without quote marks. For example, TodaysDate(). Alternatively, you can click Add Parameter and select a parameter from the list of predefined parameters.</li> </ul> <p>Note that you can concatenate strings and/or parameters to create a JavaScript expression. For example: \"Welcome\" + params_user.getValue().</p> </li> <li> <p>Select contains if the expression must appear in the Web page; select does not contain if it should not appear in the Web page.</p> </li> </ol> </li> <li> <p>Repeat the previous step for every additional expression you wish to define.</p> <p>The below image shows a content validation example. In this example, the page content will be validated only if it contains the string Welcome followed by a user name, and does not contain the string Error.</p> <p></p> </li> </ol>"},{"location":"recorder/running_debugging_scripts/#editing-a-script-for-dynamic-html-pages","title":"Editing a Script for Dynamic HTML Pages","text":"<p>When you record an HTML page in the WebLOAD Recorder, there can be dynamic values that WebLOAD adds to the script, which are recorded in the WebLOAD Recorder. Such dynamic values can contain state management information, such as the session-id, which is usually passed as URL encoded parameters or hidden form fields. The dynamic values that are recorded in the WebLOAD Recorder are different during each run. Since the value that was recorded in the WebLOAD Recorder and the dynamic value do not match, you will receive an error.</p> <p>To overcome this situation, you need to edit the script and perform correlation. This can be done manually, or by using WebLOAD\u2019s Smart Copy feature. This feature</p> <p>enables you to convert the dynamic value into the correct value for the specific session.</p> <p>Notes: </p> <ul> <li>The Smart Copy feature supports converting the dynamic value of the following HTML objects: images, links, and form elements.</li> <li>Editing the script and performing correlation is not necessary for static HTML pages, since they do not contain dynamic values. In this case, the script executes smoothly with no need for initial editing.</li> </ul> <p>To edit a script using Smart Copy:</p> <ol> <li> <p>After recording and running your script, open the Page View with the DOM View. Select the DOM View checkbox in the View tab of the ribbon.</p> <p>The Page and DOM View appear.</p> </li> <li> <p>In the Execution Tree, select the first node.</p> </li> <li> <p>In the Page View, search for an error message. If there is no message, select the next node in the Execution Tree and search for a message there.</p> <p></p> </li> <li> <p>Once you locate the message, open the JavaScript View. Select the JavaScript View checkbox in the View tab of the ribbon.</p> <p>The JavaScript View appears with the requested block of code selected.</p> </li> <li> <p>Within the selected block of code, locate the dynamic value (for example, the session-id field). This field must be retrieved from the previous block of code.</p> <p></p> </li> <li> <p>Click the previous node in the Execution Tree to search for the element that contains the dynamic value. Make sure the Browser and DOM Views are open. Select the Page View and DOM View checkboxes in the View tab of the ribbon.</p> </li> <li> <p>In the DOM View, locate the element that contains the dynamic value. This is usually a hidden input field.</p> <p></p> <p>Note: You cannot use the value recorded in the script, since the value that was recorded was dynamic, and will not match the new value that is given when you run the script.</p> </li> <li> <p>Right-click the element and select Smart Copy from the pop-up menu.</p> <p></p> <p>The Smart Copy dialog box appears.</p> <p></p> </li> <li> <p>Click Copy to clipboard and click OK.</p> </li> <li> <p>To edit the JavaScript, click Full Script in the Home tab of the ribbon.</p> </li> <li> <p>Create a variable for the dynamic field by typing the following at the end of the selected block of code:</p> <p><code>Session_id =</code></p> </li> <li> <p>Paste the clipboard text (using Paste in the Edit tab of the ribbon) after the equal sign.</p> <p>For example:</p> <p><code>Session_id = document.forms[1].elements[2].value</code></p> </li> <li> <p>In the subsequent block of code, replace</p> <p>wlHttp.FormData[\u201csession_id\u201d] = <code>&lt;static session id&gt;</code></p> <p>with</p> <p><code>wlHttp.FormData[\u201csession_id\u201d] = session_id</code></p> <p>The script is edited. You can now run the script successfully without receiving error messages.</p> </li> </ol>"},{"location":"recorder/working_with_git/","title":"Working with Git","text":"<p>Git is a free and open source distributed version control system for tracking changes in computer files and coordinating work on those files among multiple people.</p> <p>WebLOAD supports basic Git operations, with easy access to Git operations from within WebLOAD Recorder and WebLOAD Console. WebLOAD assumes that you have downloaded and installed Git, and are familiar with the way it works.</p>"},{"location":"recorder/working_with_git/#prerequisites-to-working-with-git","title":"Prerequisites to working with Git","text":"<p>As prerequisites to working with Git, you need to:</p> <ol> <li> <p>Specify once in WebLOAD how to access the Git Local and Remote Repositories. Refer to Setting up Access to Git Local and Remote Repositories .</p> </li> <li> <p>Make sure your WebLOAD files are saved in the directory defined as the Git local repository. This can be done in one of two ways:</p> <ul> <li> <p>Define the Git local repository directory to be the WebLOAD default directory.</p> </li> <li> <p>Change the WebLOAD default directory to be the directory of the Git local repository.</p> </li> </ul> <p>To do either of the above, you need to access the window where you can view or change the location of the WebLOAD default directory:</p> <ul> <li> <p>In the WebLOAD Console, navigate to Global Options &gt; File Locations.</p> </li> <li> <p>In the WebLOAD Recorder, navigate to Settings &gt; File Locations.</p> </li> </ul> <p>Note that changing the WebLOAD default directory in either the Console UI or the WebLOAD Recorder UI, changes it for both.</p> </li> </ol>"},{"location":"recorder/working_with_git/#setting-up-access-to-git-local-and-remote-repositories","title":"Setting up Access to Git Local and Remote Repositories","text":"<p>As a prerequisite to using Git operation from within WebLOAD, you need to once specify in WebLOAD how to access the Git Local Repository and Remote Repository.</p> <p>Note: You can perform this prerequisite task either from the WebLOAD Recorder, or from the WebLOAD Console. Once you perform it in one of them, Git operations will be accessible from both.</p> <p>To specify the Git local and remote repositories:</p> <ol> <li> <p>Click Repository Settings in the Tools tab of the ribbon. </p> <p>The WebLOAD Repository Settings window appears.</p> <p></p> </li> <li> <p>In the Local Repository section:</p> <ol> <li>Specify the location of the local repository.</li> <li>Specify the current branch.</li> </ol> </li> <li> <p>In the Remote Repository section:</p> <ol> <li>Specify the location of the remote repository (either a URL or a directory).</li> <li>Specify the remote branch.</li> <li>Specify the User Name and Password for accessing the remote repository.</li> </ol> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/working_with_git/#performing-a-commit-action","title":"Performing a Commit action","text":"<p>If you setup WebLOAD to support Git, you can perform a Commit, that is, save to the Git local repository, any WebLOAD objects you are currently working on. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <ul> <li>When you select Commit in the WebLOAD Recorder, the script you are currently working on as well as all its additional information, are saved to the Git local directory.</li> <li>When you select Commit in the WebLOAD Console, the test definition of the test you are currently working on, as well as the session created by test execution, are saved to the Git local directory</li> </ul> <p>To Commit a WebLOAD object:</p> <ol> <li> <p>Click Commit in the Tools tab of the ribbon.</p> <p>A window appears in which you can enter a Commit comment. </p> <p></p> </li> <li> <p>Optionally enter a comment, and click OK.</p> </li> </ol>"},{"location":"recorder/working_with_git/#performing-a-commit-dir-action","title":"Performing a Commit Dir action","text":"<p>If you setup WebLOAD to support Git, you perform a Commit dir, that is, save to the Git local repository an entire folder (with all its descendants). This folder must be located under the local repository folder. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To perform a Commit dir:</p> <ol> <li> <p>Click Commit dir in the Tools tab of the ribbon.</p> </li> <li> <p>In the File Explorer window that appears, specify the directory you wish to commit.</p> <p>A window appears in which you can enter a Commit dir comment.</p> <p></p> </li> <li> <p>Optionally enter a comment, and click OK.</p> </li> </ol>"},{"location":"recorder/working_with_git/#performing-a-push-action","title":"Performing a Push action","text":"<p>If you setup WebLOAD to support Git, you can perform a Push, which causes all Commits you had made to the Git local repository, to be pushed to the Git remote repository. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To perform a Push:</p> <ol> <li> <p>Click Push in the Tools tab of the ribbon.</p> <p>A window appears, informing you of the Git Push operation and its success status.</p> <p></p> </li> <li> <p>Click OK.</p> </li> <li> <p>If the Push operation is rejected, for example because a conflict has arisen due to changes made by two different users, a window appears, displaying the Git rejection message. Follow the instructions in the message, and resolve the rejection using your chosen Git UI.</p> </li> </ol>"},{"location":"recorder/working_with_git/#performing-a-pull-action","title":"Performing a Pull action","text":"<p>If you setup WebLOAD to support Git, you can perform a Pull, which pulls data from the remote repository to the local repository. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>A Pull operation pulls the entire branch from the remote repository and updates the local repository and directories.</p> <p>To perform a Pull:</p> <ol> <li> <p>Click Pull in the Tools tab of the ribbon.</p> <p>A window appears, informing you of the Git Pull operation and its success status.</p> <p></p> </li> <li> <p>Click OK.</p> </li> </ol>"},{"location":"recorder/working_with_git/#opening-the-git-ui","title":"Opening the Git UI","text":"<p>If you setup WebLOAD to support Git, you can launch your Git UI from within WebLOAD. This functionality is available in both the WebLOAD Recorder and the WebLOAD Console.</p> <p>To launch the Git UI:</p> <ol> <li> <p>Click Open Git Gui in the Tools tab of the ribbon.</p> <p>The Git UI is launched.</p> </li> </ol>"},{"location":"scripting/advanced_javascript_features/","title":"Advanced JavaScript script Features","text":"<p>Previous chapters discussed the basic set of script tools used to test typical Internet applications. However, to evaluate and test your Internet application most effectively, it is not enough to measure the total transaction turn-around time or throughput of the website. A website is often only the front-end for applications that reside behind the scenes, for back-end components that do the actual work for an application. Testing the components that stand behind your Internet application is essential for comprehensive Internet application testing. A detailed breakdown and analysis of the results of each user activity helps pinpoint the source of any potential bottlenecks or other problems, and expedites the work required for any corrections or improvements.</p> <p>WebLOAD fully supports component based testing. WebLOAD Recorder scripts do not simply measure the time required for transactions to a website to be completed. WebLOAD JavaScript script objects can also directly access the back-end applications that compose your Internet application.</p> <p>WebLOAD provides a single, uniform environment for all your testing needs. WebLOAD JavaScript is the single scripting language that is able to work seamlessly with COM, Java, and XML DOM, accessing the applications that use these technologies through a variety of protocols, or your own proprietary protocol, in addition to standard Web-site testing, adding power to and increasing the universal applicability of your testing scripts.</p> <p>This chapter introduces various component-based testing features.</p> <p>Syntax specifications for the WebLOAD objects that appear in the examples in this chapter are provided in the WebLOAD JavaScript Reference Guide.</p>"},{"location":"scripting/advanced_javascript_features/#working-with-the-xml-dom","title":"Working with the XML DOM","text":"<p>XML is a meta-language developed by W3C to organize and transfer data in a generic, universally recognized manner. XML relies on a simple, logical structure that is both easy to learn and works quickly and reliably, focusing on transferring hard data only, with no formatting or presentation information. XML acts as a gateway between autonomous, heterogeneous, component-based systems. This allows users to connect or link to any platform. XML provides an elegant solution for Web masters who wish to reach a wide range of clients, working on any number of diverse systems.</p> <p>WebLOAD provides full support for work with the XML Document Object Model. Using XML DOM objects, WebLOAD scripts are able to both access XML site information, and generate new XML data to send back to the server for processing, taking advantage of all the additional benefits that XML provides.</p> <p>WebLOAD supports:</p> <ul> <li>Working with existing XML Data Islands. Data Islands are XML documents embedded within HTML documents. WebLOAD Recorder, like the IE Browser, produces an XML DOM object for each Data Island.</li> <li>Creating new XML DOM objects via the XML Object Constructor. WebLOAD supports XML Native Browsing through use of the XML Object Constructor.</li> <li>Parsing and manipulating any XML data, using the XML Parser Object.</li> </ul> <p>Both WebLOAD and the IE Browser use the MSXML parser to create XML DOM objects. Since WebLOAD XML DOM objects and Browser XML DOM objects are created by the same MSXML parser, the XML DOM objects that are produced for both WebLOAD and the IE Browser are identical.</p> <p>When working through the IE Browser, XML DOM objects are accessed through the <code>all</code> collection. When working through WebLOAD, XML DOM objects are accessed through the <code>wlXmls</code> collection. Since a WebLOAD XML DOM object is identical to an IE Browser XML DOM object, the WebLOAD XML DOM uses the same Document Interface (programming methods and properties) found in the IE Browser XML DOM.</p> <p>The next few sections of this guide explain basic XML concepts and usage. Look in the WebLOAD JavaScript Reference Guide for a description of the WebLOAD <code>wlXmls</code> collection syntax and for a complete list of the WebLOAD-supported XML DOM Interfaces.</p> <p>For more general XML support and cross platform capabilities, WebLOAD offers the XMLParserObject as another alternative for accessing XML data. The XMLParserObject is based on the open source Xerces XML parser. In addition to the multi-platform support, using this object will result in lower memory consumption and increased performance during load testing.</p> <p>The following sections contain examples using the XMLParserObject. For more information about the XMLParserObject please refer to the WebLOAD JavaScript Reference Guide. Additional information about the XMLParserObject\u2019s underlying Xerces component can be found at http://xml.apache.org/xerces-c/.</p>"},{"location":"scripting/advanced_javascript_features/#webload-xml-dom-objects","title":"WebLOAD XML DOM Objects","text":"<p>WebLOAD XML DOM objects produced from HTML documents may be used on two different levels:</p> <ul> <li>The simplest approach is to use the XML DOM object to work directly with text strings through the standard HTML properties id, src, and innerHTML. These properties refer to the text strings found within an HTML document.</li> <li>On a more sophisticated level, programmers may use the same XML DOM object to work with a full set of XML DOM Document Interface properties and methods, as listed in Appendix B of the WebLOAD JavaScript Reference Guide. The following figure illustrates these options:</li> </ul> <p></p> <p></p>"},{"location":"scripting/advanced_javascript_features/#data-islands","title":"Data Islands","text":"<p>Data Islands are XML documents embedded within HTML documents. Data Islands found on HTML documents are located either between a set of <code>&lt;xml&gt;</code> and <code>&lt;/xml&gt;</code> tags or between a set of <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code> tags. Data Islands consist of either a complete body of in-line XML code or a reference to XML code found in another location, with the location specified in a <code>src=location</code> statement.</p> <p>WebLOAD, like the Internet Explorer browser, produces an XML DOM object for each Data Island. No matter how a Data Island is specified, either within a set of <code>&lt;xml&gt;</code> tags or a set of <code>&lt;script&gt;</code> tags, either as in-line XML code or through a reference to another location, WebLOAD produces a full XML DOM object for each Data Island. These XML DOM objects are accessible through the <code>wlXmls</code> collection.</p> <p>Data Island XML DOM objects expose both aspects of each XML DOM object:</p> <ul> <li>The standard HTML properties id, src, and innerHTML. These properties refer to text strings found within the HTML document.</li> <li>The XML Document Interface. The interface provides access to the properties and methods of the XML DOM object.</li> </ul> <p>The following figure illustrates the various Data Islands options.</p> <p>Note: Not all these Data Islands would be found in a single wlXmls collection if they have been taken from different sources. They appear here in a single figure to illustrate the various Data Island possibilities.</p> <p></p> <p>Data Islands are accessible through WebLOAD scripts using the wlXmls collection of XML DOM objects corresponding to all the Data Islands found in an HTML document. Each Data Island produces a different XML DOM object.</p> <p>For example, when working with an HTML document that includes two Data Islands, use the following code to assign the XML object that references the first Data Island to another object:</p> <p><code>XMLDataIsland1 = document.wlXmls[0]</code></p> <p>To access the second Data Island use: </p> <p><code>XMLDataIsland2 = document.wlXmls[1]</code></p> <p>If a Data Island is identified by name through an ID, you could also access the Data</p> <p>Island through the id property. For example, if the first Data Island begins:</p> <p><code>&lt;xml id=\u201cxmlBookstoreDatabase\u201d&gt;</code></p> <p>Then you could access the Data Island using any of the following:</p> <p><code>MyBookstore = document.wlXmls.xmlBookstoreDatabase</code> </p> <p><code>MyBookstore = document.wlXmls[\u201cxmlBookstoreDatabase\u201d]</code> </p> <p><code>MyBookstore = document.wlXmls[0]</code></p> <p>The following HTML code fragments illustrate these Data Islands options.</p>"},{"location":"scripting/advanced_javascript_features/#data-islandin-line-code","title":"Data Island\u2014In-Line Code","text":"<p>In this code fragment, in-line XML data is embedded in the HTML page. WebLOAD uses this data to create the XML DOM object.</p> <pre><code>&lt;html&gt;\n   &lt;head&gt;\n       ...\n   &lt;/head&gt;\n   &lt;body&gt;\n       ...\n       &lt;!\u2014in-line XML data&gt;\n       &lt;xml id=\"xmldoc\\_1\"&gt;\n       &lt;?xml version=\"1.0\" standalone = true?&gt; \n       Programmer\u2019s Guide\n             &lt;author&gt;Mark Twain&lt;/author&gt;\n             &lt;title&gt;Tom Sawyer&lt;/title&gt;\n             &lt;price&gt;$11.00&lt;/price&gt;\n        &lt;/book&gt;\n        &lt;foo&gt;\n             ...\n        &lt;/foo&gt;\n     &lt;/xml&gt;\n     ...\n   &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#data-islandreference-to-another-source","title":"Data Island\u2014Reference to Another Source","text":"<p>In this code fragment, a reference to XML data found at another location is found in the HTML page. WebLOAD creates an XML DOM object from the source found at that location only.</p> <p>Note: If a Data Island includes an <code>src=location</code> statement, then any additional XML data found embedded within the Data Island on the HTML page will be ignored.</p> <pre><code>&lt;html&gt;\n   &lt;head&gt;\n      ...\n   &lt;/head&gt;\n   &lt;body&gt;\n      ...\n      &lt;!\u2014reference to another source&gt;\n      &lt;xml id=\u201cxmldoc\\_2\u201d src=\u201chttp://demo/bookstore.xml\u201d&gt;\n      &lt;/xml&gt;\n      ...\n   &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#data-islandscripted-in-line","title":"Data Island\u2014Scripted In-Line","text":"<p>XML DOM objects created from scripts within HTML documents may also be based on either in-line XML data or references to other sources.</p> <p>For example:</p> <pre><code>&lt;SCRIPT language=\u201cxml\u201d id=\u201cxmlscript\u201d&gt;\n   &lt;?xml version=\"1.0\u201d?&gt;\n   &lt;!\u2014XML data in-line within a script element.&gt;\n   &lt;bookstore&gt;\n      Programmer\u2019s Guide\n          &lt;author&gt;Mark Twain&lt;/author&gt;\n          &lt;title&gt;Tom Sawyer&lt;/title&gt;\n          &lt;price&gt;$11.00&lt;/price&gt;\n    &lt;/book&gt; \n      Programmer\u2019s Guide\n          &lt;author&gt;Oscar Wilde&lt;/author&gt;\n          &lt;title&gt;The Giant And His Garden&lt;/title&gt;\n          &lt;price&gt;$8.00&lt;/price&gt;\n    &lt;/book&gt; \n  &lt;/bookstore&gt;\n&lt;/SCRIPT&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#data-islandscripted-reference-to-another-source","title":"Data Island\u2014Scripted Reference to Another Source","text":"<p>The preceding code illustrates XML data embedded in a script. Scripts may also include references to other sources: <pre><code>&lt;SCRIPT language=\u201cxml\u201d id=\u201cxmlscript\u201d src=\u201cbook.xml\u201d&gt;\n\n&lt;/SCRIPT&gt;\n</code></pre></p>"},{"location":"scripting/advanced_javascript_features/#example-using-data-islands-in-a-script","title":"Example: Using Data Islands in a script","text":"<p>The following example illustrates Data Island usage. Assume you are working with a Web Bookstore site that includes the following inventory database code fragment:</p> <pre><code>&lt;HTML&gt;\n   &lt;HEAD&gt;\n     &lt;TITLE&gt; &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n   &lt;BODY&gt;\n     &lt;h3&gt;Html file with embedded XML&lt;/h3&gt;\n     &lt;P&gt;Here begins the XML Data Island&lt;/P&gt;\n          &lt;xml id=\"WebStudents\"&gt;\n     &lt;wclass&gt;\n      &lt;!-- My students who attended my web programming class --&gt;\n      &lt;student id=\"1\"&gt;\n           &lt;name&gt;Linda Jones&lt;/name&gt;\n           &lt;legacySkill&gt;Access, VB5.0&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"2\"&gt;\n           &lt;name&gt;Adam Davidson&lt;/name&gt;\n           &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"3\"&gt;\n           &lt;name&gt;Charles Boyer&lt;/name&gt;\n           &lt;legacySkill&gt;HTML, Photoshop&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"4\"&gt;\n           &lt;name&gt;Charles Mann&lt;/name&gt;\n           &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;/wclass&gt;\n      &lt;/xml&gt;    &lt;P&gt;Here ends the XML Data Island&lt;/P&gt;\n   &lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#working-with-html-properties","title":"Working with HTML Properties","text":"<p>When accessing this website, your script may use the standard HTML properties id and innerHTML to print out text strings showing the information found within the XML tags, as follows:</p>"},{"location":"scripting/advanced_javascript_features/#javascript-script-code","title":"JavaScript script Code:","text":"<pre><code>function InitAgenda()\n\n{\n\nwlGlobals.Parse = true wlGlobals.ParseXML = true\n\n}\n\nwlHttp.SaveSource = true\n\nwlHttp.Get(http://www.webloadmpstore.com/xmlsamples/sample2.html\")\n\nvar XMLstudents = document.wlXmls[0] \n\nInfoMessage(\"ID : \" +XMLstudents.id) \n\nInfoMessage(\"HTML text : \" +XMLstudents.innerHTML)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#output-text","title":"Output Text:","text":"<p>Running this script produces the following output, essentially a text copy of the Data Island fields: <pre><code>ID : WebStudents \nHTML text :\n   &lt;wclass&gt;\n   &lt;!-- My students who attended my web programming class--&gt;\n      &lt;student id=\"1\"&gt;\n          &lt;name&gt;Linda Jones&lt;/name&gt;\n          &lt;legacySkill&gt;Access, VB5.0&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"2\"&gt;\n          &lt;name&gt;Adam Davidson&lt;/name&gt;\n          &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"3\"&gt;\n          &lt;name&gt;Charles Boyer&lt;/name&gt;\n          &lt;legacySkill&gt;HTML, Photoshop&lt;/legacySkill&gt;\n      &lt;/student&gt;\n      &lt;student id=\"4\"&gt;\n          &lt;name&gt;Charles Mann&lt;/name&gt;\n          &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n      &lt;/student&gt;\n   &lt;/wclass&gt;\n</code></pre></p>"},{"location":"scripting/advanced_javascript_features/#working-with-xml-dom-properties","title":"Working with XML DOM Properties","text":"<p>Your script may also access the complete XML DOM Document Interface for the XML DOM object created from this Data Island. For example, to see a printout of the complete XML DOM structure for the xmlBookSite Data Island described on the preceding pages, use the following recursive function. See Appendix B in the WebLOAD JavaScript Reference Guide, for a description of the XML DOM properties used in this script fragment.</p> <p>JavaScript script Code:</p> <pre><code>function InitAgenda()\n\n{\n\n    wlGlobals.Parse = true\n    wlGlobals.ParseXML = true\n\n}\n\nwlHttp.SaveSource = true\n\nwlHttp.Get(\"http://www.webloadmpstore.com/xmlsamples/sample2.html\")\n\nvar XMLstudents = document.wlXmls[0]\nvar XMLstudentDoc = XMLstudents.XMLDocument\nvar XMLstudentElement = XMLstudentDoc.documentElement\n\nInfoMessage(\"Printing XML under the root\") \nInfoMessage(XMLstudentElement.xml) \nInfoMessage(\"Element structure of the DOM\")\nprintChildren(XMLstudentElement)\n\n// function that will print all the fields and their attributes function printChildren(element)\n\n{\n\nswitch(element.nodeTypeString)\n\n{\n\n    case \"element\":\n          InfoMessage(element.nodeName)\n          for(var i=0; i&lt;element.childNodes.length; i++)\n          {\n             printChildren(element.childNodes.item(i))\n          }\n          break\n       case \"text\":\n          InfoMessage(\"\\\"\" + element.nodeValue + \"\\\"\") \n          break\n   }\n}\n\nInfoMessage(\"End of test\")\n</code></pre> <p>Output Text:</p> <p>Running this script produces the following output:</p> <p>Printing XML under the root</p> <pre><code>&lt;wclass&gt;\n\n  &lt;!-- My students who attended my web programming class --&gt;\n\n  &lt;student id=\"1\"&gt;\n     &lt;name&gt;Linda Jones&lt;/name&gt;\n     &lt;legacySkill&gt;Access, VB5.0&lt;/legacySkill&gt;\n  &lt;/student&gt;\n\n  &lt;student id=\"2\"&gt;\n     &lt;name&gt;Adam Davidson&lt;/name&gt;\n     &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n  &lt;/student&gt;\n\n  &lt;student id=\"3\"&gt;\n     &lt;name&gt;Charles Boyer&lt;/name&gt;\n     &lt;legacySkill&gt;HTML, Photoshop&lt;/legacySkill&gt;\n  &lt;/student&gt;\n\n  &lt;student id=\"4\"&gt;\n     &lt;name&gt;Charles Mann&lt;/name&gt;\n     &lt;legacySkill&gt;Cobol, MainFrame&lt;/legacySkill&gt;\n   &lt;/student&gt;\n&lt;/wclass&gt;\n\nElement structure of the DOM\n   wclass\n   student \n   name\n   \"Linda Jones\"\n   legacySkill \n   \"Access, VB5.0\" \n   student\n   name\n   \"Adam Davidson\"\n   legacySkill \n   \"Cobol, MainFrame\" \n   student\n   name\n   \"Charles Boyer\" \n   legacySkill \n   \"HTML, Photoshop\" \n   student\n   name\n   \"Charles Mann\" \n   legacySkill \"Cobol, MainFrame\"\nEnd of test\n</code></pre> <p>JavaScript script Code Using the XMLParser Object:</p> <p>A similar script, with the same functionality, can be written using the XMLParserObject, as shown in the code snippet below:</p> <pre><code>xmlObject = new XMLParserObject(); \ndoc = xmlObject.\nparseURI(\"http://www.webloadmpstore.com/xmlsamples/sample2.html\")\ndoc1 = doc.getDocumentElement()\n//used to present only the xml\ndomNode = doc1.getElementsByTagName(\"xml\").item(0); InfoMessage(\"Printing XML under the root\") \nprintChildren(domNode)\nfunction printChildren(element)\n{\n   switch(element.nodeTypeString)\n   {\n      case \"element\":\n         InfoMessage(element.nodeName)\n         for(var i=0; i&lt;element.childNodes.length; i++)\n         {\n              printChildren(element.childNodes.item(i))\n         }\n         break \n     case \"text\":\n         InfoMessage(\"\\\"\" + element.nodeValue + \"\\\"\") break\n    }\n}\n\nInfoMessage(\"End of test\")\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#changing-bookstore-data","title":"Changing Bookstore Data","text":"<p>After you have accessed the website and created an XML DOM object from the XML data found on the site, you may wish to change some of the data and post the new version back to the website. To change the author of the first book to \u2018S. B. David Lee Eddings\u2019:</p> <pre><code>function InitAgenda()\n\n{\n   wlGlobals.Parse = true \n   wlGlobals.ParseXML = true\n}\n\nwlHttp.SaveSource = true \nwlHttp.Get\n(\"http://www.webloadmpstore.com/xmlsamples/sample1.xml\")\n//Getting the XML file\nvar xmlBookListDoc = document.wlXmls[0]\nvar xmlBookListIsland = xmlBookListDoc.XMLDocument\nvar xmlBookListElement = xmlBookListIsland.documentElement\nInfoMessage(\"Printing xml under the root: \" + xmlBookListElement.xml)\n\n//First access the node of the first book\nvar FirstBook = xmlBookListElement.childNodes.item(0)\n\n//Next access the node of the author of the first book \nvar AuthorFirstBook = FirstBook.childNodes.item(1)\n\n//Finally access the node of the text of the author of the first book\nvar TextAuthorFirstBook = AuthorFirstBook.childNodes.item(0)\n\n//In other words, the node in the XML database tree\n//that actually stores the author name value is located at:\n//     document.wlXmls[0].XMLDocument.\n//     documentElement.childNodes.item(0).childNodes.\n//     item(1).childNodes.item(0)\n//Now assign a new value\nTextAuthorFirstBook.nodeValue = \"S. B. David Lee Eddings\"\n\nInfoMessage(\"The changed author value, from J.R.R. Tolkein, to: \"\n\n\\+ TextAuthorFirstBook.nodeValue)\n InfoMessage(\"Print xml under the root: \" +\n xmlBookListElement.xml)\n</code></pre> <p>The changed bookstore database will look as follows:</p> <p><pre><code>&lt;bookstore name=\"NODE1NAME\"&gt;\n   &lt;book&gt;\n       &lt;title lang=\"en\"&gt;Everyday Italian&lt;/title&gt;\n       &lt;author&gt;David Eddings&lt;/author&gt;\n       &lt;year&gt;2005&lt;/year&gt;\n       &lt;price&gt;30.00&lt;/price&gt;\n   &lt;/book&gt;\n   &lt;book category=\"CHILDREN\"&gt;\n       &lt;title lang=\"en\"&gt;Harry Potter&lt;/title&gt;\n       &lt;author&gt;J K. Rowling&lt;/author&gt;\n       &lt;year&gt;2005&lt;/year&gt;\n       &lt;price&gt;29.99&lt;/price&gt;\n   &lt;/book&gt;\n   &lt;book category=\"WEB\"&gt;\n       &lt;title lang=\"en\"&gt;XQuery Kick Start&lt;/title&gt;\n       &lt;author&gt;James McGovern&lt;/author&gt;\n       &lt;author&gt;Per Bothner&lt;/author&gt;\n       &lt;author&gt;Kurt Cagle&lt;/author&gt;\n       &lt;author&gt;James Linn&lt;/author&gt;\n       &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt;\n       &lt;year&gt;2003&lt;/year&gt;\n       &lt;price&gt;49.99&lt;/price&gt;\n   &lt;/book&gt;\n   &lt;book category=\"WEB\"&gt;\n        &lt;title lang=\"en\"&gt;Learning XML&lt;/title&gt;\n        &lt;author&gt;Erik T. Ray&lt;/author&gt;\n        &lt;year&gt;2003&lt;/year&gt;\n        &lt;price&gt;39.95&lt;/price&gt;\n   &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre> You can change the bookstore data in the same way by using the XMLParserObject. The script code is even shorter:</p> <pre><code>xmlObject = new XMLParserObject();\ndoc = xmlObject.\nparseURI(\"http://www.webloadmpstore.com/xmlsamples/sample1.xml)\n;\nInfoMessage(\"The xml under the root : \" + doc.xml) \ndoc1 = doc.getDocumentElement()\n\nFirstBook = doc1.getElementsByTagName(\"book\").item(0); \n\nAuthorFirstBook = FirstBook.childNodes.item(1) ; \n\nTextAuthorFirstBook = AuthorFirstBook.childNodes.item(0)\n\nTextAuthorFirstBook.nodeValue = \"S. B. David Lee Eddings\"\n\nInfoMessage(\"The changed author value, from J.R.R. Tolkein, \n\nto: \" + TextAuthorFirstBook.nodeValue)\n\nInfoMessage(\"The xml under the root : \" + doc.xml)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#adding-new-bookstore-data","title":"Adding New Bookstore Data","text":"<p>The following script fragment illustrates adding a new \u2018book element\u2019 to the xmlBooksite database. See Appendix B in the WebLOAD JavaScript Reference Guide, for a description of the XML DOM properties used here.</p> <pre><code>var xmlBookListDoc = document.wlXmls[0]\nvar xmlBookListIsland = xmlBookListDoc.XMLDocument\n\n//STEP 1, create the new book element\n//       and append it to the tree\nnewBook = xmlBookListIsland.createElement(\"book\") \nxmlBookListIsland.documentElement.appendChild(newBook)\n\n//STEP 2, create and name the new book\u2019s title element\ntitle1 = xmlBookListIsland.createElement(\"title\")\nname = xmlBookListIsland.createTextNode(\"River God\")\n//append the new name node to the title node \ntitle1.appendChild(name)\n//append the new title node to the book node \nnewBook.appendChild(title1)\n\n//STEP 3, create and name the new book\u2019s author element\nauthor = xmlBookListIsland.createElement(\"author\")\nname = xmlBookListIsland.createTextNode(\"Wilbur Smith\") \nauthor.appendChild(name)\nnewBook.appendChild(author)\n\n//STEP 4, create and name the new book\u2019s year element \nyear = xmlBookListIsland.createElement(\"year\")\nname = xmlBookListIsland.createTextNode(\"1975\") \nyear.appendChild(name) \nnewBook.appendChild(year)\n\n//STEP 5, create and name the new book\u2019s price element\nprice = xmlBookListIsland.createElement(\"price\") \namount = xmlBookListIsland.createTextNode(\"40.55\") \nprice.appendChild(amount)\nnewBook.appendChild(price)\n</code></pre> <p>The newly expanded bookstore database will look as follows:</p> <pre><code>&lt;bookstore name=\"NODE1NAME\"&gt;\n    &lt;book&gt;\n       &lt;title lang=\"en\"&gt;Everyday Italian&lt;/title&gt;\n       &lt;author&gt;S. B. David Lee Eddings&lt;/author&gt;\n       &lt;year&gt;2005&lt;/year&gt;\n       &lt;price&gt;30.00&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=\"CHILDREN\"&gt;\n       &lt;title lang=\"en\"&gt;Harry Potter&lt;/title&gt;\n       &lt;author&gt;J K. Rowling&lt;/author&gt;\n       &lt;year&gt;2005&lt;/year&gt;\n       &lt;price&gt;29.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=\"WEB\"&gt;\n       &lt;title lang=\"en\"&gt;XQuery Kick Start&lt;/title&gt;\n       &lt;author&gt;James McGovern&lt;/author&gt;\n       &lt;author&gt;Per Bothner&lt;/author&gt;\n       &lt;author&gt;Kurt Cagle&lt;/author&gt;\n       &lt;author&gt;James Linn&lt;/author&gt;\n       &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt;\n       &lt;year&gt;2003&lt;/year&gt;\n       &lt;price&gt;49.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=\"WEB\"&gt;\n       &lt;title lang=\"en\"&gt;Learning XML&lt;/title&gt;\n       &lt;author&gt;Erik T. Ray&lt;/author&gt;\n       &lt;year&gt;2003&lt;/year&gt;\n       &lt;price&gt;39.95&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book&gt;\n       &lt;title&gt;River God&lt;/title&gt;\n       &lt;author&gt;Wilbur Smith&lt;/author&gt;\n       &lt;year&gt;1975&lt;/year&gt;\n       &lt;price&gt;40.55&lt;/price&gt;\n   &lt;/book&gt;&lt;/\n   &lt;/bookstore&gt;\n</code></pre> <p>You can achieve the same result using XMLParserObject. The script Code is as follows:</p> <pre><code>xmlObject = new XMLParserObject(); \ndoc = xmlObject.\nparseURI(\"http://www.webloadmpstore.com/xmlsamples/sample1.xml\")\n;\ndoc1 = doc.getDocumentElement()\n\nnewNode1 = doc.createElement(\"book\"); \ndoc1.appendChild(newNode1);\n\ntitle1 = doc.createElement(\"title\") ;\ntitleText = doc.createTextNode(\"River God\"); \nnewNode1.appendChild(title1) \ntitle1.appendChild(titleText)\n\nauthor = doc.createElement(\"author\")  ; \nauthorName =    doc.createTextNode(\"Wilbur Smith\"); \nnewNode1.appendChild(author) \nauthor.appendChild(authorName )\n\nyear = doc.createElement(\"year\") ; \nyearInd =   doc.createTextNode(\"1975\"); \nnewNode1.appendChild(year) \nyear.appendChild(yearInd)\n\nprice = doc.createElement(\"price\") ; \npriceAmount =   doc.createTextNode(\"40.55\"); \nnewNode1.appendChild(price) \nprice.appendChild(priceAmount)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#creating-and-filling-new-xml-dom-objects","title":"Creating and Filling New XML DOM Objects","text":"<p>WebLOAD supports the creation of new XML DOM objects through the <code>WLXmlDocument()</code> constructor. New XML DOM objects may either be created:</p> <ul> <li>Empty, with the user adding data as needed.</li> <li>Already loaded with data found in existing XML files or text strings.</li> </ul> <p>New XML DOM objects created by the <code>WLXmlDocument()</code> constructor are not produced from HTML documents, so they do not include the HTML property set (<code>id</code>, <code>innerHTML</code>, and <code>src</code>). HTML properties have no meaning for XML DOM objects created without any connection to an HTML document.</p> <p>XML DOM objects created with the <code>WLXmlDocument()</code> constructor include the complete XML DOM Document Interface described in Appendix B in the WebLOAD JavaScript Reference Guide. Users may also load and reload XML data into XML DOM objects through the <code>load()</code> and <code>loadXML()</code> methods. This section describes the different methods of creating and filling data into XML DOM objects.</p>"},{"location":"scripting/advanced_javascript_features/#wlxmldocumentxmlstrcreating-xml-dom-object-from-xml-string","title":"WLXmlDocument(xmlStr)\u2014Creating XML DOM Object from XML String","text":"<p>The <code>WLXmlDocument(xmlStr)</code> constructor accepts an optional parameter, an XML string that includes the entire XML document data. For example:</p> <p><code>NewXMLObj = new WLXmlDocument(xmlStr)</code></p> <p>Use this form of the <code>WLXmlDocument()</code> constructor to create new XML DOM objects from an XML string parameter rather than relying on Data Islands from an HTML page.</p>"},{"location":"scripting/advanced_javascript_features/#working-with-xml-in-native-direct-browsing-mode","title":"Working with XML in Native (Direct) Browsing Mode","text":"<p>WebLOAD automatically processes Data Islands found on HTML documents. WebLOAD also provides access to pure XML documents. For example, assume a website uses Native Browsing rather than having XML data explicitly embedded in Data Islands. If you wish to work with this website you could issue a Get transaction to access the XML page after enabling the <code>SaveSource</code> property to save the page source to a file. Once the XML string has been saved in the data file produced by the Get transaction, you may then use <code>WLXmlDocument()</code> to create a new XML DOM object from that XML data string. You now have a fully functional XML DOM object, with a</p> <p>Document Interface identical to that of XML DOM objects created from Data Islands. You may use this XML DOM object to manipulate the data, assign or change data values, and post the changed data back to the server, exactly as you would when working with a Data Island.</p> <p>The following script fragments illustrates this sequence:</p> <ol> <li> <p>Set <code>SaveSource</code> so that the downloaded XML data will be saved to a file that can later be passed to the <code>WLXmlDocument()</code> constructor:</p> <p><code>wlHttp.SaveSource=true</code></p> </li> <li> <p>Get the XML page, either as a static page from the server:</p> <p><code>wlHttp.Get(\"http://demosite/bookstore.xml\u201d)</code></p> <p>Or through a database query to the bookstore:</p> <p><code>wlHttp.Get(\u201chttp://demosite/bookstore.exe?             author=Mark Twain&amp;MaxPrice=$20.00\u201d)</code></p> </li> <li> <p>Create a new XML DOM object using the saved page source, which happens to include the XML string:</p> <p><code>newXmlObj = new WLXmlDocument(document.wlSource)</code></p> </li> <li> <p>At this point you have an XML DOM object which may be manipulated in any way just as you would manipulate XML DOM objects produced by Data Islands. You may make any changes or additions you wish to the XML DOM object data, as described in previous examples illustrating changing or adding bookstore data.</p> <p>For example, you may post the new XML DOM data back to the server:</p> <p><code>wlHttp.Data.Type=\u201ctext/xml\u201d</code></p> <p><code>wlHttp.Data.Value=xmlobj.xml</code></p> <p><code>wlHttp.Post(\u201cHttp://demosite/bookstore.exe?operation=upd ate\u201d)</code></p> </li> </ol> <p>Note: The WLXmlDocument(xmlStr) constructor must be passed complete, self- contained XML strings only. The DTD section must not contain any external references when using this form of the constructor. </p>"},{"location":"scripting/advanced_javascript_features/#wlxmldocumentcreating-a-new-blank-xml-dom-object","title":"WLXmlDocument()\u2014Creating a New, Blank XML DOM Object","text":"<p>The <code>WLXmlDocument()</code> constructor may be used without any parameters. In this case, a new, blank XML DOM object will be created. For example:</p> <p><code>NewBlankXMLObj = new WLXmlDocument()</code></p> <p>You may now use the <code>loadXML()</code> method to add XML data to your new blank XML DOM object.</p> <p><code>NewBlankXMLObj = loadXML(\u201c&lt;?xml version='1.0\u2019?&gt;&lt;bookstore&gt;&lt;/bookstore&gt;\u201d)</code></p> <p>To add more content to the document, create elements and add them as child nodes as described in the example in the previous section.</p>"},{"location":"scripting/advanced_javascript_features/#loading-xml-files-into-xml-objects","title":"Loading XML Files into XML Objects","text":"<p>The MSXML Document Interface provides two methods for loading XML documents into XML DOM objects:</p> <ul> <li><code>loadXML(\u201cXMLdocumentstring\u201d)</code></li> <li><code>load(\u201cURL\u201d)</code></li> </ul> <p>This section describes the advantages and limitations of the <code>loadXML()</code> and <code>load()</code> methods when used in WebLOAD Recorder scripts, and discusses how to select the method that will be most effective in your scripts.</p> <p>Note: You may use <code>loadXML()</code> and <code>load()</code> repeatedly to load and reload XML data into XML DOM objects. Remember that each new \u2018load\u2019 into an XML DOM object will overwrite any earlier data stored in that object.</p>"},{"location":"scripting/advanced_javascript_features/#using-loadxmlxmldocstring","title":"Using loadXML(XMLDocString)","text":"<p>The <code>loadXML(XMLDocString)</code> method accepts a literal XML document in string format as its only parameter. This allows users to work with XML documents and data that did not originate in HTML Data Islands, such as with Native Browsing. In a typical scenario, a user downloads an XML document. WebLOAD saves the document contents in string form. The string is then used as the parameter for <code>loadXML()</code>. The information is loaded automatically into an XML object.</p> <p>For example:</p> <pre><code>// Create a new XML document object \nNewXMLObj = new WLXmlDocument() \nwlHttp.SaveSource = true\nwlHttp.Get(http://www.server.com/xmls/doc.xml)\nXMLDocStr = document.wlSource\n// Load the new object with XML data from the saved source.\n// We are assuming no external references, as explained below \nNewXMLObj.loadXML(XMLDocStr)\n</code></pre> <p>Note: Creating a new, blank XML DOM object with <code>WLXmlDocument()</code> and then loading it with an XML string using <code>loadXML()</code> is essentially equivalent to creating a new XML DOM object and loading it immediately using <code>WLXmlDocument(xmlStr)</code>. As with the <code>WLXmlDocument(xmlStr)</code> constructor, only standalone, self-contained DTD strings may be used for the <code>loadXML()</code> parameter. External references in the DTD section are not allowed.</p>"},{"location":"scripting/advanced_javascript_features/#using-loadurl","title":"Using load(\"URL\")","text":"<p>The load(\"URL\") method accepts a URL or filename where the XML document may be found as its only parameter. <code>load()</code> relies on the MSXML parser to handle any Get transactions needed to download the XML document. The XML data is then loaded automatically into the XML object.</p> <p>For example:</p> <pre><code>myXMLDoc = document.wlXmls[0]\n\nmyXMLdoc.load(http://server/xmls/file.xml\u201d)\n</code></pre> <p>When you use the <code>load()</code> method in your script, the MSXML module performs all the underlying HTTP transactions. External references in the DTD section are not allowed when using <code>load()</code>. However, the MSXML module accesses external servers and completes all necessary transactions without any control or even knowledge on the part of the WebLOAD system tester. From WebLOAD\u2019s perspective, these transactions are never performed in the context of the test session. For this reason, any settings that the user enters through the WebLOAD Recorder or Console will not be relayed to the MSXML module and will have no effect on the document \u2018load\u2019. For the same reason, the results of any transactions completed this way will not be included in the WebLOAD statistics reports.</p>"},{"location":"scripting/advanced_javascript_features/#comparing-loadxml-and-load","title":"Comparing loadXML() and load()","text":"<p>WebLOAD supports both the <code>load()</code> and the <code>loadXML()</code> methods to provide the user with maximum flexibility. The following table summarizes the advantages and disadvantages of each method:</p> Advantages Disadvantages loadXML() Parameters that the user has defined through WebLOAD for the testing session will be applied to this transaction. The method fails if the DTD section of the XML document string includes any external references. load() The user may load XML files that include external references in the DTD section. <p>Parameters that the user has defined through WebLOAD for the testing session will not be applied to this transaction.</p><p>WebLOAD does not record the HTTP Get operation. (See note below.)</p><p>The transaction results are not included in the session statistics report.</p><p>Using this method may adversely affect the test session results.</p> <p>Note: If you wish to measure the time it took to load the XML document using the <code>load()</code> method, create a timer whose results will appear in the WebLOAD Recorder statistics. For example:</p> <pre><code>myXMLDoc = document.wlXmls[0]\nSetTimer(\u201cGetXML\u201d)\nmyXMLdoc.load(\u201chttp://server/xmls/file.xml\u201d)\nSendTimer(\u201cGetXML\u201d)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#example-building-an-xml-database-from-scratch","title":"Example: Building an XML Database from Scratch","text":"<p>The next example will put together some of the pieces from the previous sections. Here we will create a new, skeletal XML DOM object for a bookstore database, build new book elements, and add each new book to our bookstore database.</p> <pre><code>// 1. CREATE AN EMPTY XML OBJECT with a skeleton: \nxmlBookstoreDoc = new WLXmlDocument\n    (\u201c&lt;?xml version='1.0\u2019?&gt;&lt;bookstore&gt;&lt;/bookstore&gt;\u201d)\n// 2. ADD CONTENT TO THE DOCUMENT:\n//create the first book element\nnewBook = xmlBookstoreDoc.createElement(\u201cbook\u201d)\n//append the new book to the bookstore tree \nxmlBookstoreDoc.documentElement.appendChild(newBook)\n//create, name, and append the new book\u2019s author element\nauthor = xmlBookstoreDoc.createElement(\u201cauthor\u201d) \nname = xmlBookstoreDoc.createTextNode(\u201cMark Twain\u201d) \nauthor.appendChild(name) newBook.appendChild(author)\n//create, name, and append the new book\u2019s title element\ntitle =  xmlBookstoreDoc.createElement(\u201ctitle\u201d) \nname = xmlBookstoreDoc.createTextNode(\u201cTom Sawyer\u201d) \ntitle.appendChild(name)\nnewBook.appendChild(title)\n//create, name, and append the new book\u2019s price element\nprice = xmlBookstoreDoc.createElement(\u201cprice\u201d) \namount = xmlBookstoreDoc.createTextNode(\u201c$12.00\u201d) \nprice.appendChild(amount) newBook.appendChild(price)\n// 3. CONTINUE TO ADD CONTENT TO THE DOCUMENT:\n//create the second element and append it to the tree \nnewBook = xmlBookstoreDoc.createElement(\u201cbook\u201d) \nxmlBookstoreDoc.documentElement.appendChild(newBook)\n//create, name, and append author, title, and price elements\nauthor = xmlBookstoreDoc.createElement(\u201cauthor\u201d) \nname = xmlBookstoreDoc.createTextNode(\u201cLeo Tolstoy\u201d) \nauthor.appendChild(name)  \nnewBook.appendChild(author)\ntitle = xmlBookstoreDoc.createElement(\u201ctitle\u201d)\nname = xmlBookstoreDoc.createTextNode(\u201cWar and Peace\u201d)\ntitle.appendChild(name) \nnewBook.appendChild(title)\nprice = xmlBookstoreDoc.createElement(\u201cprice\u201d \namount = xmlBookstoreDoc.createTextNode(\u201c$20.00\u201d) \nprice.appendChild(amount) \nnewBook.appendChild(price)\n</code></pre> <p>A new XML DOM bookstore database object has now been created and filled with information about two books. The product of the <code>xmlBookstoreDoc.documentElement.xml</code> property would be:</p> <pre><code>&lt;?xml version=\"1.0\u201d?&gt;\n&lt;bookstore&gt;\n    &lt;book&gt;\n          &lt;author&gt;Mark Twain&lt;/author&gt;\n          &lt;title&gt;Tom Sawyer&lt;/title&gt;\n          &lt;price&gt;$12.00&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book&gt;\n          &lt;author&gt;Leo Tolstoy&lt;/author&gt;\n          &lt;title&gt;War and Peace&lt;/title&gt;\n          &lt;price&gt;$20.00&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#handling-web-service-transactions","title":"Handling Web Service Transactions","text":"<p>WebLOAD supports working with Web services, including manipulating the Web service\u2019s responses.</p> <p>A Web service response is a soap-formatted XML message. Accessing this XML message becomes possible, after parsing the response using WebLOAD\u2019s XMLParserObject. This enables you to locate the node containing the desired part of the web service response.</p> <p>The following sample script demonstrates how WebLOAD handles web service transactions by extracting the dynamic XML from the web service response and parsing it using the XMLParserObject. The desired return value is then located by searching through the parsed XML.</p> <pre><code>xmlObject = new XMLParserObject()\n\nwlGlobals.GetFrames = false\nwlHttp.Get(\"http://www.webloadmpstore.com/ajaxsample\")\n\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/ajaxsample/\"\nwlHttp.FormData[\"wsdl\"] = \"$WL$VOID$STRING$\"\nwlHttp.Get(\"http://www.webloadmpstore.com/ajaxsample/serveradd1.php\")\n\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/ajaxsample/\"\nwlHttp.Data[\"Type\"] = \"text/xml; charset=utf-8\"\nwlHttp.Data[\"Value\"] = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf- 8\\\"?&gt;&lt;soap:Envelope \nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\nxmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;&lt;soap:B ody&gt;&lt;add \nxmlns=\\\"urn:addwsdl\\\"&gt;&lt;a&gt;20&lt;/a&gt;&lt;b&gt;30&lt;/b&gt;&lt;/add&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\"\n\nwlHttp.Post(\"http://www.webloadmpstore.com/ajaxsample/serveradd1.php\")\n\n//Extract the XML part from the response \ndoc = document.wlXmls[0]\nInfoMessage (doc.xml)\n\n//Load the extracted XML into the XMLParserObject\nxo = xmlObject.loadXML(doc.xml)\n\n//Locate the node containing the Web Service result according to the name of the node: \"return\"\nnode = xo.getElementsByTagName(\"return\").item(0) \nInfoMessage(node.xml)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#document-type-definition-dtd","title":"Document Type Definition (DTD)","text":"<p>The term DTD is an acronym for Document Type Definition. The Document Type Definition is a set of rules that describes the grammar of a particular XML document. The DTD is used to validate an XML document.</p> <p>For example, the DTD for a bookstore database would do the following:</p> <ol> <li> <p>Define the structure and attributes of that database.</p> <p>Based on the rules found in the DTD, you might have a database that requires every book entry to include information on the book\u2019s title, author, and price. Information on publishers and reprint requests may be declared optional.</p> </li> <li> <p>After the DTD defines the structure and attributes of the database, the XML Data Island assigns values to the attributes listed in the DTD.</p> </li> <li> <p>Once an XML document has been downloaded, the Browser validates the document by checking that the XML data follows the rules set by the DTD.</p> <p>If the price is missing from a certain book item, for example, and a price is required by the DTD, then the Browser will not be able to validate that XML document.</p> </li> </ol> <p>Note: For the Browser to parse and validate an XML document according to a particular DTD, the author must include a  section in the XML document. WebLOAD Recorder supports DTD verification only if the DTD is completely included in the Data Island and there are no external references in the DTD. <p>The following code illustrates a self contained DTD for the bookstore example used throughout this section of the manual:</p> <pre><code>&lt;!-DOCUMENT STARTS HERE-&gt;\n&lt;?xml version=\"1.0\"?&gt;\n&lt;!-THE DTD STARTS HERE --&gt;\n&lt;!DOCTYPE \n [\n    &lt;!ELEMENT books-table (book)+&gt;\n    &lt;!ELEMENT book (title,author+,isbn,publication-date,book- type,book-family+)&gt;\n    &lt;!ELEMENT title (#PCDATA)&gt;\n    &lt;!ELEMENT author (#PCDATA)&gt;\n    &lt;!ELEMENT isbn (#PCDATA)&gt;\n    &lt;!ELEMENT publication-date (#PCDATA)&gt;\n    &lt;!ELEMENT book-type (#PCDATA)&gt;\n    &lt;!ELEMENT book-family (#PCDATA)&gt;\n    &lt;!--attribute list--&gt;\n        &lt;!ATTLIST book id ID #REQUIRED&gt;\n        &lt;!ATTLIST author rank CDATA #IMPLIED&gt;\n]&gt;\n&lt;!--THE DTD ENDS HERE--&gt;\n&lt;!--DATA PART OF THE DOCUMENT-&gt;\n    &lt;books-table&gt;\n          &lt;book id=\"thisbook\"&gt;\n               &lt;title&gt;&lt;/title&gt;\n               &lt;author rank=\"\"&gt;&lt;/author&gt;\n               &lt;isbn&gt;&lt;/isbn&gt;\n               &lt;publication-date&gt;&lt;/publication-date&gt;\n               &lt;book-type&gt;&lt;/book-type&gt;\n               &lt;book-family&gt;&lt;/book-family&gt;\n          &lt;/book&gt;\n    &lt;/books-table&gt;\n&lt;!-DOCUMENT ENDS HERE-&gt;\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#working-with-java","title":"Working with Java","text":"<p>Java is an object-oriented, dynamic, platform-independent programming language developed by Sun Microsystems in the mid-1990s. Java provides its users with a complete run-time environment, a Virtual Machine (VM). With the Java VM sitting in your Web browser, any HTML document can include embedded Java, adding active content to your Web page. Java includes a variety of useful features, such as Remote Method Invocation (RMI), which allows local developers to seamlessly access distributed application functions and procedures, and Java Database Connectivity (JDBC), which allows Java clients to interact with any ODBC- or JDBC-compliant database, whether it resides locally or on a remote server. By utilizing Java tools and classes, user applications are able to offer far greater power and capabilities than when working with simple HTML code alone. For this reason, over the past few years, Java has become one of the most popular development mediums for large-scale Internet applications.</p> <p>WebLOAD supports full Java access from your JavaScript scripts. Full Java support means that your WebLOAD scripts will not only test access time to an HTML page. WebLOAD scripts can also invoke and run local Java classes used by the Java applications embedded within an HTML page. The Java components that stand behind that Web page need no longer be considered \u2018black boxes\u2019. Your JavaScript script can directly access and test the classes of each locally residing Java component, allowing you to test each aspect of your application.</p> <p>WebLOAD uses LiveConnect3, developed by Netscape Communications Corporation and maintained and supported by the Mozilla Foundation, to allow your JavaScript scripts to communicate with Java classes. LiveConnect is an invisible architecture that runs in the background. Your JavaScript code may work directly with Java. Your WebLOAD script can even include both JavaScript code that calls Java code and Java code that calls JavaScript code. The interface between Java and JavaScript is managed for you, allowing you to create the Java/JavaScript testing scenario that best meets your needs.</p>"},{"location":"scripting/advanced_javascript_features/#requirements","title":"Requirements","text":"<p>This section provides a brief explanation of how to work with Java components directly from your JavaScript script. Sample scripts illustrate typical usage.</p>"},{"location":"scripting/advanced_javascript_features/#jdkjre-15-or-higher","title":"JDK/JRE 1.5 (or Higher)","text":"<p>Install the standard Sun Microsystems Java Virtual Machine (JVM), version 1.5 or higher, on your system.</p> <p>To verify that you are working with version 1.5 or higher</p> <ol> <li>Select Control Panel from the Windows Start &gt; Settings menu and double click the Add/Remove Programs icon.</li> <li>Check the items listed in the dialog box. Entries that reference Java should be labeled version 1.5 or higher.</li> <li> <p>If you wish to update your version of Java, download the latest version from http://java.sun.com (http://java.sun.com).</p> <p>Follow the standard Sun installation instructions. It makes no difference if you install the JVM before or after installing WebLOAD.</p> </li> </ol> <p>If you are doing any development work that may require application compilation, you must install the complete Java Developer\u2019s Kit (JDK). If your application is complete and you will only be running it, without making any changes or corrections that may require compilation, then the Java Runtime Environment (JRE) will be enough to simply run a test session. The decision to install only the JRE, or the complete JDK, depends on your own application\u2019s requirements. WebLOAD Recorder provides full Java support in both cases.</p>"},{"location":"scripting/advanced_javascript_features/#path-environment-variable","title":"PATH Environment Variable","text":"<p>Your command path must include both the Java bin and Java classic directories. The Java bin directory is where the Java programs and compiler are located. The Java classic directory is where the jvm.dll file is located.</p> <p>For example, after a typical installation of JDK version 1.5, your PATH should include something similar to this:</p> <p><code>PATH=%PATH%;C:\\Program Files\\jdk1.5\\bin;      C:\\Program Files\\jdk1.5\\jre\\bin\\classic</code></p>"},{"location":"scripting/advanced_javascript_features/#classpath-environment-variable","title":"CLASSPATH Environment Variable","text":"<p>Your CLASSPATH environment variable must point to the following:</p> <ul> <li>JVM class libraries</li> <li>LiveConnect class libraries</li> <li>Your application\u2019s class libraries (a series of *.class and *.jar files)</li> </ul> <p>For example, assuming your Java class libraries are located in the Java\\lib directory, the LiveConnect class libraries are located in LiveConnect\\classes, and your application class libraries are located in the AppDev\\lib directory, your CLASSPATH should include the following:</p> <p><code>CLASSPATH=%CLASSPATH%;C:\\Java\\lib\\rt.jar;        C:\\LiveConnect\\classes;C:\\AppDev\\lib</code></p> <p>In general, following a WebLOAD Recorder installation, the LiveConnect class libraries are located in:</p> <p><code>C:\\Program Files\\RadView\\WebLOAD\\LiveConnect\\classes</code></p>"},{"location":"scripting/advanced_javascript_features/#setting-path-and-classpath-environment-variables","title":"Setting PATH and CLASSPATH Environment Variables","text":"<p>Set the PATH and CLASSPATH environment variables to include the necessary directories. The settings can be modified through Windows or a DOS command window.</p> <p>To verify that both your PATH and CLASSPATH environment variables include the necessary directories:</p> <ol> <li>From the Windows taskbar, select Start &gt; Settings &gt; Control Panel.</li> <li>Double click the System icon and select the Environment tab.</li> <li>Check the Environment Variables to confirm that your environment variables are set correctly.</li> </ol> <p>Alternatively, you could open a DOS command window:</p> <ul> <li> <p>Type path, and press . <p>Your current PATH setting will appear in the window.</p> <p>If you type set classpath and press , your current CLASSPATH setting will appear in the window. <p>Remember that the exact full directory path name will differ from system to system. Check with your system administrator to verify the correct Java directory path names for your system.</p> <p>Alternatively, you could do the following:</p> <ol> <li>Right-click the My Computer icon on your desktop.</li> <li>Select find\u2026, and search for jvm.dll.</li> </ol> <p>This file is usually found in a directory path that ends with \u2026\\bin\\classic. This directory, and the same directory without the \\classic ending, should both appear in the PATH environment variable.</p> <p>If your PATH or CLASSPATH environment variables do not include the necessary directories do the following:</p> <ol> <li>Add the correct directory names for your system to the PATH or CLASSPATH environment variable definitions in the Environment tab of the System dialog box.</li> <li>Click Set.</li> <li> <p>Click Apply, to reset the variables to the new settings.</p> <p>You do not have to reboot your system. But you do have to restart TestTalk for WebLOAD to recognize the new PATH environment variable definition.</p> </li> </ol>"},{"location":"scripting/advanced_javascript_features/#public-methods","title":"Public Methods","text":"<p>JavaScript scripts adhere to the same rules of object-oriented programming (OOP) as any other program. All programs must respect the OOP concepts of public and private. As in any OOP language, Java class methods may be either public or private. Public methods are functions that are externally visible and can be called by other Java classes and by JavaScript. For JavaScript to be able to control a Java class, the Java class must provide public methods.</p>"},{"location":"scripting/advanced_javascript_features/#identifying-java-objects-in-javascript-scripts","title":"Identifying Java Objects in JavaScript scripts","text":"<p>Java uses its own specific terminology. Java objects are referred to as classes. These classes are organized hierarchically within packages. To access Java objects, specify the full path to that class, using the format:</p> <p><code>&lt;java package full path&gt;.&lt;java class&gt;</code></p> <p>For example, to reference the Java class Lassie contained in the package dogs, which is contained within the package animals, write <code>animals.dogs.Lassie</code>.</p> <p>Accessing Java Objects from JavaScript scripts</p> <p>Java objects found in JavaScript scripts are accessed according to the rules listed here. Detailed explanations and examples illustrating these rules are provided in the Netscape websites listed in Working with Java .</p> <ul> <li> <p>To access a built-in Java object, use the package java. This package acts as a flag, informing the compiler that it is about to start work with a built-in Java object. You may then continue to work directly with that object, its properties, and methods.</p> <p>For example:</p> <p><code>var myJavaString = new java.lang.String(\"Hello world\")</code></p> <p><code>\u2026</code></p> <p><code>stringlen = myJavaString.length()</code></p> <p><code>\u2026</code></p> <p>-Or-</p> <p><code>s = new java.net.Socket (\"12.3.5.56\",23)</code></p> <p><code>\u2026</code></p> <p><code>s.getInputStream</code></p> <p><code>\u2026</code></p> </li> </ul> <p>In these examples, <code>java.lang</code> and <code>java.net</code> are the full package names and <code>String</code> and <code>Socket</code> are the class names.</p> <ul> <li>To access a locally defined or third party Java object that is not part of the Java, Sun, or Netscape packages, use the reserved Java keyword <code>Packages</code>. This keyword acts as a flag, informing the compiler that it is about to start work with a locally- defined Java object. You may then continue to work directly with that object, its properties, and methods.</li> </ul> <p>For example:</p> <p><code>var myJavaDog = new Packages.JavaDog(Lassie)</code></p> <p><code>\u2026</code></p> <p><code>dogbreed = myJavaDog.dogBreed</code></p> <p><code>\u2026</code></p> <p>Use the <code>Packages</code> keyword to access any user-defined class whose definition is included in the CLASSPATH library list.</p>"},{"location":"scripting/advanced_javascript_features/#forestalling-errors","title":"Forestalling Errors","text":"<p>Most common compilation and runtime errors can be prevented if you follow the instructions in this guide. Usually, you won\u2019t have any problems as long as you verify that Java was installed correctly and specify Java objects with the correct full path and argument list. This section lists the most common potential pitfalls, in an effort to prevent problems before they occur.</p> <ul> <li> <p>You must have Java version 1.2 installed on your system. Working with earlier versions of Java will cause your scripts to fail with the following WebLOAD Recorder error message:</p> <p><code>WebLOAD can\u2019t find jvm.dll</code></p> <p>If you receive this error message, you may have an older version of the JVM, or you may not have Java installed at all on your system. If this is the problem, download and install the newer version of Java from http://java.sun.com.</p> </li> <li> <p>Java version 1.2 or higher must be installed and environment variables defined on each Load Generator included in your test session. Test sessions that involve multiple Load Generators require a resident JVM with the correct environment variable settings on each Load Generator.</p> </li> <li> <p>Whether to install only the JRE or the complete JDK depends on your application\u2019s requirements. If you will be doing any development or compilation, install the complete JDK. Trying to compile Java class files (such as <code>JavaClass.java</code>) on a computer that does not have the JDK installed will trigger an error. The JDK must be installed on each computer on which Java files will be compiled. The JRE can not handle any compilation requests.</p> </li> <li> <p>Each system environment is slightly different. When setting the PATH or CLASSPATH environment variables for your system, substitute the actual path to the required Java directories and libraries on your system. Use the Environment tab in the System dialog box from the Windows Control Panel to set the environment variables.</p> </li> <li> <p>Environment variables must be set with the correct values before starting TestTalk or running any Load Generators. Make sure you first verify and set the environment variables through the Windows Control Panel and only then start TestTalk.</p> </li> <li> <p>If you do not have the correct Java class directories included in your PATH, your scripts may fail with the following WebLOAD error message:</p> <p><code>WebLOAD can\u2019t find jvm.dll</code></p> <p>If you receive this error message and your version of the JVM is 1.2 or higher, check your system PATH (through the Windows Control Panel) to be sure it points to the jvm.dll library. Make sure the directories listed are in fact the correct directories, and verify the correct path name in your script code.</p> </li> <li> <p>The class path and name in your script files must be specified absolutely correctly, with all elements spelled correctly and with the correct case. For example, the class name <code>MyJavaClass</code> is not the same as my<code>JavaClass</code>.</p> </li> <li> <p>The directories included in the CLASSPATH environment variable must also be specified absolutely correctly, with all elements spelled correctly, to exactly match the class path and names that appear in your JavaScript scripts.</p> <p>For example, assume you are working with an application that includes the Java class <code>MyJavaClass</code>, whose constructor expects a single string argument, located in the directory <code>I:\\AppFiles\\libs</code>.</p> <p>Your CLASSPATH environment variable should include:</p> <pre><code>  `CLASSPATH=%CLASSPATH%;I:\\AppFiles\\libs`\n</code></pre> <p>Your script should reference this class as follows:</p> <pre><code>  `var myJavaObj = new Packages.MyJavaClass(\u201cstringArg\u201d)`\n</code></pre> <p>If you were not careful, you could accidentally define CLASSPATH to include the wrong directory, such as:</p> <p><code>CLASSPATH=%CLASSPATH%;I:\\AppFiles\\orig-libs</code></p> <p>Or you could accidentally include an incorrect package path in the script file, such as:</p> <p><code>var myJavaObj = new</code> <code>Packages.Jlib.MyJavaClass(\u201cstringArg\u201d)</code></p> <p>In either of these cases the constructor call would fail and WebLOAD would return the following error message:</p> <p><code>TypeError: &lt;classname&gt; is not a constructor</code></p> </li> <li> <p>Make sure to pass the correct number and types of arguments to Java class constructors or methods.</p> <p>Realize that working with Java from your JavaScript script is really very simple and intuitive, as illustrated in the simple examples found in the remainder of this section. You simply must take care to specify objects correctly. Careless spelling mistakes will trigger errors, as they would in most programming languages.</p> </li> </ul>"},{"location":"scripting/advanced_javascript_features/#example-passing-simple-variables-between-java-and-javascript","title":"Example: passing simple variables between Java and JavaScript","text":"<p>You may pass any legal JavaScript variable or object as a parameter to a Java object or method. Conversions between basic variable types, such as integer, string, or Boolean, will be completed automatically. Return values will also convert correctly. </p> <p>The following example illustrates passing basic values between Java and JavaScript objects. The Java class method expects two parameters, a string and an integer, and returns the concatenation of both parameters into a single string. Conversions between Java and JavaScript strings and integers are completed automatically.</p> <p>Java side:</p> <pre><code>public class SimpleExample\n\n{\n   public String Concat(String a, int b)\n   {\n       return a + \" : \" + b;\n   }\n}\n</code></pre> <p>JavaScript side:</p> <pre><code>a = new Packages.SimpleExample() \nInfoMessage(a.Concat(\"RoundNum\",RoundNum))\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#passing-objects-between-java-and-javascript","title":"Passing Objects Between Java and JavaScript","text":"<p>LiveConnect uses the reserved Java class <code>JSObject</code> to pass a JavaScript object to Java objects. <code>JSObject</code> tells the Java side that it is being sent a JavaScript object. To pass a JavaScript object as a parameter to a Java method, your Java file must include the following:</p> <ul> <li>Import the <code>netscape.javascript</code> package.</li> <li>Define the corresponding formal parameter of the method to be of type <code>JSObject</code>.</li> </ul> <p>You may set and change a JavaScript object property value, and even add a new member to a JavaScript object, while working from the Java side.</p> <p>For example, the following code illustrates passing values between parallel Java and JavaScript objects.</p> <p>Java Side:</p> <pre><code>import netscape.javascript.JSObject;\npublic class JavaDog\n\n{\n      public String dogBreed; \n      public String dogColor; \n      public String dogSex;\n      public JavaDog(JSObject jsDog)\n      {\n            this.dogBreed = (String)jsdog.getMember(\"breed\"); \n            this.dogColor = (String)jsdog.getMember(\"color\"); \n            this.dogSex = (String)jsdog.getMember(\"sex\");\n      }\n}\n</code></pre> <p>Note: The <code>getMember</code> method of JSObject is used to access the properties of the JavaScript object. This example uses <code>getMember</code> to assign the value of the JavaScript property <code>jsDog.breed</code>to the Java data member <code>JavaDog.dogBreed</code>.</p> <p>JavaScript Side:</p> <p>To continue with this example, look at the following definition of the JavaScript object <code>Dog:</code></p> <pre><code>function Dog(breed, color, sex)\n{\n      this.breed = breed \n      this.color = color \n      this.sex = sex\n}\n</code></pre> <p>Create an instance of the JavaScript object Dog as follows:</p> <p><code>Lassie = new Dog(\"collie\", \"chocolate\", \"female\")</code></p> <p>The JavaScript property <code>Lassie.color</code> here has been assigned the value chocolate.</p> <p>Now create an instance of the Java object JavaDog in the JavaScript code by passing the JavaScript Lassie object to the JavaDog constructor as follows:</p> <p><code>javaDog = new Packages.JavaDog(Lassie)</code></p> <p>Note: The JavaScript code uses the <code>Packages</code> class to identify JavaDog as a locally defined Java object. </p> <p>The Java property <code>javaDog.dogColor</code> has the value <code>chocolate</code> because the <code>getMember</code> method in the Java constructor assigns the value of <code>Lassie.color</code> to <code>dogColor</code>.</p> <p>Detailed explanations of the <code>JSObject</code> class are provided in http://developer.netscape.com/docs/manuals/js/core/jsref/lcjsobj.htm.</p>"},{"location":"scripting/advanced_javascript_features/#automatic-timers-and-counters-for-java-objects","title":"Automatic Timers And Counters For Java Objects","text":"<p>WebLOAD provides automatic timers and counters that wrap around every Java class method invocation found in your script. Automatic timers and counters allow you to effortlessly measure and quantify the behavior and response time of each specific Java component individually, enabling the most comprehensive testing of your Java-based application.</p> <p>Every time your JavaScript script calls a Java class method, a timer and a counter are automatically created for that method. The results are included in the Statistics Report for that test session. These automatic Java timers are in addition to the standard WebLOAD Timer functions, which may be called from the Java side of your script as well as the standard JavaScript side. </p> <p>For example, assume you are communicating with a server using the Java socket class:</p> <pre><code>try\n{\n    // Connect to a server through Java socket \n    s = new java.net.Socket (\"12.3.5.56\",23)\n\n    // Create Java I/O streams\n    from\\_server = new java.io.DataInputStream(s.getInputStream()) to\\_server = new java.io.PrintStream(s.getOutputStream())\n\n    //Read line from Input stream to JavaScript string value \n    line = from\\_server.readLine()\n    InfoMessage(\"\" + line)\n\n    // Write JavaScript string value to the Output stream \n    to\\_server.println (\"Client \" + ClientNum + \"-\" + RoundNum )\n\n    // Get answer from the server via the Input stream \n    line = from\\_server.readLine()\n    InfoMessage(\"\" + line)\n}\n\ncatch (Exception) {\n    ErrorMessage (\"Server is not connected\")\n}\nfinally\n{\n    try {\n          if (s != null) \n          s.close();\n    }\ncatch(Exception) {}\n}\n</code></pre> <p>Each time you call any of the Java class methods, a timer and counter for that method is automatically incremented. The results appear in the Statistics Report. Each timer and counter is uniquely identified with the Java class, object, and method name, as illustrated in the following figure:</p> <p></p> <p>The counter and timer information is collected and displayed automatically, every time you call a Java class method from your script. You do not have to add anything to your script code to take advantage of this feature.</p>"},{"location":"scripting/advanced_javascript_features/#calling-a-webload-api-from-a-java-application","title":"Calling a WebLOAD API from a Java Application","text":"<p>This section describes two methods for calling WebLOAD JavaScript functions from the java code:</p> <ul> <li>Using the WebLoadWrapper to call WebLOAD API from a Java Application</li> <li>Legacy method of calling WebLOAD API from a Java Application</li> </ul>"},{"location":"scripting/advanced_javascript_features/#using-the-webloadwrapper-to-call-webload-api-from-a-java-application","title":"Using the WebLoadWrapper to call WebLOAD API from a Java Application","text":"<p>The WebLoadWrapper simplifies the method of calling WebLOAD functions from the Java code.</p>"},{"location":"scripting/advanced_javascript_features/#functions-supported-by-webloadwrapper","title":"Functions supported by WebLoadWrapper","text":"<p>It can be used to call the following WebLOAD functions from within Java:</p> <ul> <li><code>Void beginTransaction(String name)</code> \u2013 Calls <code>BeginTransaction</code></li> <li><code>Void debugMessage(String msg)</code> \u2013 Prints <code>DebugMessage</code> only in WebLOAD Recorder</li> <li><code>Void endTransaction(String name)</code> \u2013 Calls <code>EndTransaction</code></li> <li><code>String getValue(String parameterName, String defaultValue)</code> \u2013 Gets a parameterization manager parameter value</li> <li><code>Void infoMessage(String msg)</code> \u2013 Prints InfoMessage in WebLOAD</li> <li><code>Void sendMeasurement(String name, Number value)</code> \u2013 Calls <code>SendMeasurement</code> in WebLOAD</li> <li><code>Object getWebLoadRootObject()</code> \u2013 Returns the JSObject. This can be used, for example, for direct calls to any WebLOAD\u2019s JavaScript method.</li> </ul>"},{"location":"scripting/advanced_javascript_features/#coding-with-webloadwrapper","title":"Coding with WebLoadWrapper","text":"<p>To use the WebLoadWrapper in your code:</p> <ol> <li> <p>In your java class, import <code>com.radview.webload.WebLoadWrapper</code>.</p> </li> <li> <p>To hook the Java class into the WebLOAD context, in the WebLOAD Recorder run the following command in the javascript code, either once at the beginning of the script or once in the <code>InitClient()</code> method:</p> <p><code>Packages.com.radview.webload.WebLoadWrapper.setThreadWebLoadRootOb ject(this);</code></p> </li> </ol> <p>If you would like to call any JavaScript method directly from your Java code WITHOUT using the WebLoadWrapper methods, or you need to use a method that WebLoadWrapper does not wrap, you can use the following method which is part of WebLoadWrapper:</p> <p><code>Object getWebLoadRootObject()</code> \u2013 Returns the JSObject of the calling JavaScript You can then use the returned JSObject to call the method you\u2019d like. For example</p> <p><code>getWebLoadRootObject().eval(\"InfoMessage('test')\");</code></p> <p>Once you get the JSObject, use it as described in Legacy method of calling WebLOAD API from a Java Application.</p>"},{"location":"scripting/advanced_javascript_features/#example-using-webloadwrapper","title":"Example: using WebLoadWrapper","text":"<p>The following example shows how to use WebLoadWrapper in the Java code.</p> <pre><code>package com.example;\nimport com.radview.webload.WebLoadWrapper; \npublic class MyClass {\n    private WebLoadWrapper wlWrapper; \n    public void myExampleFunc() {\n         wlWrapper = new WebLoadWrapper(); \n         wlWrapper.beginTransaction(\"transaction 1\");\n         &lt;do any other work&gt; \u2026;\n         wlWrapper.endTransaction(\"transaction 1\");\n }\n}\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#legacy-method-of-calling-webload-api-from-a-java-application","title":"Legacy method of calling WebLOAD API from a Java Application","text":"<p>WebLOAD utilizes the locally understood, generic \u2018<code>this</code>\u2019 object, passing the current \u2018this\u2019 object as a parameter to a Java method. The JavaScript concept of \u2018<code>this</code>\u2019 object as your current working object is preserved even while working with that object\u2019s properties and methods from the Java side.</p> <p>Using \u2018<code>this</code>\u2019 object, WebLOAD is able to call WebLOAD functions directly from within Java method code, passing to the Java functions the default \u2018<code>this</code>\u2019 object that is expected by the function.</p> <p>For example:</p> <ul> <li>Use the WebLOAD <code>SetTimer</code> and <code>SendTimer</code> functions to time Java activities.</li> <li>Use <code>InfoMessage</code> to print messages to the log window.</li> </ul> <p>The following script illustrates calling WebLOAD functions from Java code.</p> <p>Java side:</p> <pre><code>import netscape.javascript.JSObject;\n// The JSObject class must be imported for the\n// code to successfully compile \npublic class MyJClass\n{\n    public void TimersFromJava(JSObject myJavaScriptObj)\n    {\n        String args[] = {\"Timer1\"}; \n        myJavaScriptObj.call(\"SetTimer\",args);\n        \u2026&lt;do any other work&gt; \u2026;\n        myJavaScriptObj.call(\"SendTimer\",args);\n    }\n}    \n</code></pre> <p>Note: You can call the JavaScript SetTimer and SendTimer functions directly from the Java class using the JSObject.call() method. Pass parameters to the functions being called (in this case the timer name expected by the timer functions), using the args array.</p> <p>JavaScript side:</p> <pre><code>// The following JavaScript code uses the Java class\n// defined in the preceding Java section. \nmyJavaObject = new Packages.MyJClass()\n// The JavaScript code uses the Packages class to\n// identify MyJClass as a locally defined Java object \ntry\n{\n    myJavaObject.TimersFromJava(this)\n}\ncatch (e)\n{\n    SevereErrorMessage(\"Error : \" + e);\n}\n</code></pre> <p>Note: You work with <code>myJavaObject</code> as you would with any JavaScript object. <code>TimersFromJava</code> is called as a simple object method, passing the locally understood \u2018<code>this</code>\u2019 object as the parameter to the Java method.</p> <p>The <code>try...catch</code> statement in the JavaScript code marks a block of statements to try. The catch block specifies the response the program should supply should an exception be thrown. If an exception is thrown, the <code>try...catch</code> statement catches it. WebLOAD recommends wrapping the JavaScript calls to Java functions within <code>try...catch</code> statements, to add robustness and error recovery to your code.</p>"},{"location":"scripting/advanced_javascript_features/#example-reading-data-from-a-jdbc-database","title":"Example: reading data from a JDBC database","text":"<p>The following example illustrates a very common website activity\u2014accessing a database. The Java side of the example is a straightforward Java program to access a JDBC, including methods to:</p> <ul> <li>Load a driver</li> <li>Open a connection</li> <li>Create and execute SQL queries</li> </ul> <p>The JavaScript side of the example illustrates exactly how simple it is to work with the Java program from a JavaScript script.</p> <p>Java side:</p> <pre><code>import java.sql.*; \npublic class jdbcExample\n{\n    Connection conn; \n    Statement st1; \n    ResultSet rs;\n    public static void loadDriver(String js_driver) \n          throws ClassNotFoundException\n  {\n       Class.forName(js_driver);\n  }\n    public void getConnection(String js_url, String js_login, \n          String js\\_pswd) \n          throws SQLException\n  {\n          //get the connection &amp; also create a statement:\n          conn = DriverManager.getConnection\n            (js_url, js_login, js_pswd); \n            st1 = conn.createStatement();\n  }\n    public String executeQuery(String js\\_query) \n           throws SQLException\n  {\n           //execute sql statement:\n           rs = st1.executeQuery(js\\_query);\n           // loop over the result set.\n           String strOnSuccess = \"3. Result Set is:\"; \n           while (rs.next()) \n  {\n  strOnSuccess = strOnSuccess + \"\\n\" + \n           rs.getString(\"ReportName\");\n  }\n      // return the data return strOnSuccess;\n  }\n}\n</code></pre> <p>JavaScript side:</p> <p>The JavaScript side of this test session script runs a JDBC load test which checks the ability of the database to handle a large number of SQL queries.</p> <p>Note: The following is the sequence of JDBC activity in this script:</p> <ol> <li>The JDBC driver is loaded only once for the test session, in the <code>InitAgenda()</code> function.</li> <li>A JDBC connection is created once for each thread, in the <code>InitClient()</code> function.</li> <li>Queries are created in the main body of the script. Answers are sent to the Console.</li> </ol> <pre><code>function InitAgenda()\n{\n    try\n    {\n          // load the JDBC driver once per session \n          jdbcDriver = \"&lt;driver class name&gt;\" \n          Packages.jdbcExample.loadDriver(jdbcDriver);\n    }\n    catch (e)\n    {\n          SevereErrorMessage(\"Error : \" + e);\n    }\n}\nfunction InitClient()\n{\n    // create a separate jdbcObj object and connection\n    // for each thread\n    jdbcObj = new Packages.jdbcExample()\n    // connect to the database\n    url = \"&lt;jdbc:driver-name:host&gt;\" \n    login = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n try\n {\n      jdbcObj.getConnection(url, login, password)\n }\n catch (e)\n {\n      SevereErrorMessage(\"Error : \" + e);\n }\n}\n//Main body of script try\ntry\n{\n    // create query and send the results to the Console \n    query = \"SELECT \\* FROM Reports WHERE ReportId &lt; 10 \" \n    query\\_result = jdbcObj.executeQuery(query) \n    InfoMessage(\"\"+ query\\_result)\n}\ncatch (e)\n{\n    WarningMessage(\"Error : \" + e);\n}\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#working-with-java-selenium-scripts","title":"Working with Java Selenium Scripts","text":""},{"location":"scripting/advanced_javascript_features/#prerequisite-adding-custom-java-classes-to-webload","title":"Prerequisite: Adding custom Java classes to WebLOAD","text":"<p>As a prerequisite to working with Java Selenium scripts, you need to configure the Selenium Java classes in WebLOAD. Use one of the two following methods.</p>"},{"location":"scripting/advanced_javascript_features/#method-1-include-the-selenium-jar-and-its-dependencies-in-webload","title":"Method #1: Include the Selenium jar and its dependencies in WebLOAD","text":"<p>In order for your code to work, you need to include it and all its dependencies (other jars it needs in order to run) in WebLOAD.</p> <p>To include the Selenium jars in WebLOAD:</p> <ol> <li>Copy the <code>selenium-java-x.x.jar</code> and all the jars in the <code>libs</code> folder to the WebLOAD Java extensions folder: <code>c:\\ProgramData\\RadView\\WebLOAD\\extensions\\java</code></li> <li> <p>If there are duplicate jars (having the same base name but a different number), delete the older versions.</p> <p>Note that version numbers are not given in decimal notation. Thus, 1.11 is more recent than 1.9.</p> </li> </ol>"},{"location":"scripting/advanced_javascript_features/#method-2","title":"Method #2","text":"<p>Specify any additional classpath needed to run external classes by setting the following in the <code>C:\\Program Files (x86)\\RadView\\WebLOAD\\bin\\webload.ini</code> file:</p> <p><code>USER_CLASSPATH=\"path\\to\\classes\"</code></p> <p>Note for Maven users: When using Maven, you can use the following command to ind the target/dependencies folder filled with all the dependencies, including transitive: <code>mvn dependency:copy-dependencies</code> </p>"},{"location":"scripting/advanced_javascript_features/#working-with-selenium-scripts","title":"Working with Selenium Scripts","text":"<p>Note: Creating a Java Selenium project is outside the scope of this document. For information, refer to the Selenium website at http://www.seleniumhq.org/.</p> <p>A Java class that calls Selenium is still a Java class and can be called directly from a WebLOAD agenda using the Java integration capability described in Working with Java. For example, if you have the following Selenium Java code:</p> <pre><code>// This is an example of a Selenium script in Java code. It does not relate to WebLOAD\npackage com.example;\nimport org.openqa.selenium.firefox.FirefoxDriver; \npublic class MyClass {\n      private WebDriver driver; \n      public void seleniumFunc() {\n            driver = new FireFoxDriver(); \n            driver.get(\"http://www.google.com\");\n   }\n}\n</code></pre> <p>You can call that code from WebLOAD, as described in Working with Java, using:</p> <pre><code>obj = new Packages.com.example.MyClass(); \nobj.seleniumFunc();\n</code></pre> <p>However, WebLOAD will not have visibility into the activity occurring within the function call seleniumFunc; for example, if several pages are being downloaded, WebLOAD will not be able to time this activity for each page. The WebLoadDriver object enables adding timers, transactions and other WebLOAD methods directly inside the Java code.</p>"},{"location":"scripting/advanced_javascript_features/#working-with-webloaddriver","title":"Working with WebLoadDriver","text":"<p>WebLoadDriver is a Selenium WebDriver wrapper that supports WebLOAD interaction. WebLoadDriver inherits WebLoadWrapper, which is described in Using the WebLoadWrapper .</p> <p>WebLoadDriver provides the following:</p> <ul> <li>Supports all the WebLoadWrapper functionality described in Using the WebLoadWrapper </li> <li>Implements the Selenium WebDriver interface</li> <li>Adds \u2018reportStatistics\u2019 functionality that sends timers from the browsers to WebLOAD. Refer to the Selenium Report Statistics section in the WebLOAD Recorder User Guide.</li> </ul> <p>To work with WebLoadDriver in the Java code:</p> <ol> <li>Add the following jar to your Java project:     <code>C:\\ProgramData\\RadView\\WebLOAD\\extensions\\java\\rvselenium.jar</code></li> <li>In your Java class, import <code>com.radview.webload.selenium.WebLoadDriver</code>.</li> </ol> <p>Keep in mind that WebLoadDriver is a Selenium WebDriver wrapper that supports WebLOAD interaction. When not running in WebLOAD context, it ignores WebLOAD, allowing your class to be executed as usual.</p>"},{"location":"scripting/advanced_javascript_features/#example-of-working-with-webloaddriver","title":"Example of working with WebLoadDriver","text":"<p>On the Java side:</p> <pre><code>package com.example;\nimport com.radview.webload.selenium.WebLoadDriver; \npublic class MyClass {\n     private WebLoadDriver driver; \n     public void seleniumFunc() {\n// The beginTransaction method is a regular WebLOAD method, called from the Java code\n     driver = new WebLoadDriver(new FireFoxDriver());\n// The following method is a Selenium method driver.get(\"http://www.google.com\");\n     driver.**beginTransaction**(\"transaction 1\");\n// The reportStatistics method is a WebLOAD addition for sending to WebLOAD the browser navigation statistics that the browser collected from the latest navigation\n    driver.reportStatistics(\"google\");\n// The endTransaction method is a regular WebLOAD method, called from the Java code\n    driver.endTransaction(\"transaction 1\");\n  }   \n}\n</code></pre> <p>On the Javascript side:</p> <pre><code>// Bind the JavaScript context to java\nPackages.com.radview.webload.WebLoadWrapper.setThreadWebLoadRoot \nObject(this);\n// Instantiate and use your Selenium java class in the script \nobj = new  Packages.com.example.MyClass(); \nobj.seleniumFunc();\n</code></pre> <p>For an explanation of how to instantiate and use your Selenium Java class, see LiveConnect Overview.</p>"},{"location":"scripting/advanced_javascript_features/#for-more-information-on-working-with-selenium","title":"For more information on working with Selenium","text":"<p>For more information on working with Selenium, see:</p> <ul> <li> <p>Appendix G in the WebLOAD Recorder User Guide for more information on Selenium integration.</p> </li> <li> <p>The Selenium Building Blocks section in Chapter 10 Configuring the WebLOAD Recorder Options of the WebLOAD Recorder User Guide for more information on Selenium building blocks that can be dragged and dropped directly into the Script Tree.</p> </li> </ul>"},{"location":"scripting/advanced_javascript_features/#working-with-the-component-object-model-com","title":"Working with the Component Object Model (COM)","text":""},{"location":"scripting/advanced_javascript_features/#what-is-com","title":"What is COM","text":"<p>Microsoft\u2019s Component Object Model (COM) provides a way for distinct software components to communicate with each other. COM technology provides universally reusable binary components. These components can be mixed and matched over versions and years, accessed by applications written in any of a variety of languages, running on any of a variety of platforms, located either locally or over a network. COM automation simplifies application development by maximizing component reusability while increasing the application\u2019s universality. Today, most Windows users rely on COM technology, often without even realizing it. For example, suppose you wish to work with a restricted website. Access to the application behind that website is controlled by a security database. To work with that application, you must first enter your name and password. A COM component will automatically access the database and verify your permission status.</p> <p>COM components are objects that consist of a combination of properties, methods, and interfaces. An object\u2019s interface is simply a set of methods together with a defined set of standards for what those methods do and how they are accessed, their parameters and return values. WebLOAD JavaScript provides direct object access to any component that has a COM wrapping and an IDispatch interface. These are known as ActiveX objects. </p> <p>An ActiveX object is viewed and manipulated exactly as any other JavaScript object within the script. WebLOAD encapsulates COM automation functionality, providing an interface between JavaScript scripts and ActiveX objects. For example, a WebLOAD JavaScript script is able to fully test an ASP Web page or a Web page that manipulates an ADO database. In both of these technologies, ActiveX objects are widely used.</p> <p>This section of the guide explains how to work with ActiveX objects within your JavaScript script. For a detailed explanation of COM programming, see the Microsoft MSDN Online Library at http://msdn.microsoft.com .</p> <p>Note: If you are working with COM objects that are not thread-safe and can not handle multi-threading, you must set the multithreading to one thread per process (this is WebLOAD\u2019s default setting).</p> <p>To set the multithreading:</p> <ol> <li>In the WebLOAD Console, open the Tools &gt; Default/Current Session/script Options dialog box.</li> <li>Select the Browser Parameters tab.</li> <li>In the Multi-thread Virtual Clients-&gt;Load Generator field, enter or scroll to 1, which sets one thread per process.</li> </ol>"},{"location":"scripting/advanced_javascript_features/#activex-object-interfaces","title":"ActiveX Object Interfaces","text":"<p>ActiveX objects usually include the following interfaces:</p> <ul> <li><code>IUnknown</code>\u2014the core interface. Defines the ActiveX object. Includes the definitive ActiveX object methods QueryInterface, AddRef, and Release.</li> <li> <p><code>IDispatch</code>\u2014the access interface. Enables ActiveX object automation, allowing the WebLOAD Recorder JavaScript script to manipulate the ActiveX object\u2019s properties and methods.</p> </li> <li> <p>Custom Interfaces\u2014additional, specialized interfaces. Created by the user, specific to each ActiveX object.</p> </li> </ul> <p>JavaScript scripts access the methods and properties of the object interface exposed by the IDispatch interface.</p> <ul> <li><code>ITypeInfo</code>\u2014the index interface. Includes a list of all objects, properties, and methods for each interface included in the ActiveX object (optional).</li> </ul> <p>The <code>ITypeInfo</code> interface of an ActiveX object provides access to the <code>TypeInfo</code> library for that object.</p> <p>Note: The <code>ITypeInfo</code> interface is optional. WebLOAD is able to work with ActiveX objects whether or not they supply a <code>TypeInfo</code> library file. However, access to the <code>TypeInfo</code> library for an object saves overhead. Programs that can take information from the TypeInfo library do not have to spend time and energy analyzing an object to identify a specific item\u2019s characteristics. For example, access to the <code>TypeInfo</code> library eliminates the need to figure out a variable\u2019s data type or insert casting functions into your scripts for greater security.</p>"},{"location":"scripting/advanced_javascript_features/#activating-activex-objects-from-a-javascript-script","title":"Activating ActiveX Objects from a JavaScript script","text":"<p>A typical website is often the front end of an application that includes many ActiveX components. WebLOAD scripts enable thorough testing of both the website and the applications that are accessed via that website by allowing you to activate an application\u2019s ActiveX object from your script. For example, to use your WebLOAD script to directly test access time to an ADO database, you would activate the ActiveX objects for that database.</p> <p>To use ActiveX objects in your script do the following( as you would with any JavaScript object):</p> <ol> <li>Create a reference to a new object instance.</li> <li>Assign and get values for the object\u2019s properties.</li> <li> <p>Execute the object\u2019s methods.</p> <p>This section describes how to activate ActiveX objects from your WebLOAD JavaScript script.</p> </li> </ol> <p>Note: The object you are accessing must already exist and be registered. When working with a remote server, through DCOM over HTTP, the object you are accessing should reside on the remote server.</p> <p>When working locally, the COM object you are accessing should reside on the Load Generator.</p> <p>The following section describes the ActiveXObject function syntax.</p>"},{"location":"scripting/advanced_javascript_features/#activexobject-constructor","title":"ActiveXObject() (constructor)","text":"<p>Method of Object</p> <ul> <li>ActiveX</li> </ul> <p>Description</p> <p>Creates a new ActiveX object. The new object is simply a local JavaScript object, and may be handled and manipulated like any other JavaScript object.</p> <p>Syntax</p> <p><code>my_ActiveXobject = new</code> <code>ActiveXObject(\u201cApplicationName.ObjectName\u201d [, \u201crServer\u201d])</code></p> <p>In VBScript terminology, the syntax appears as follows: <code>my\\_ActiveXobject = new ActiveXObject(\u201cServerName.TypeName\u201d)</code></p> <p>Parameters</p> <ul> <li><code>ApplicationName</code>\u2014The name of the application providing the object.</li> <li><code>ObjectName</code>\u2014The type or class of the object being created. When working with local COM objects, the object resides on the local Load Generator.</li> <li><code>rServer</code>\u2014The name of the remote server being accessed. Optional, used when working through DCOM, to access objects residing on the remote server.</li> </ul> <p>Return Value</p> <p>A pointer to the new ActiveX object. The new object is simply a local JavaScript object, and may be handled and manipulated like any other JavaScript object.</p> <p>Example</p> <p>To create a new Excel spreadsheet:</p> <p><code>ExcelSheet = new ActiveXObject (\u201cExcel.Sheet\u201d)</code></p>"},{"location":"scripting/advanced_javascript_features/#assigning-values-to-activex-objects","title":"Assigning Values to ActiveX Objects","text":"<p>At this point, now that you have created a reference to an ActiveX object, the fact that it refers to an ActiveX object does not affect usage and syntax within your JavaScript script. Once the new object has been activated, <code>my_ActiveXobject</code> is simply a local JavaScript object that is used to communicate with a COM object. Your script works with this object exactly as it would work with any other JavaScript object. You do not have to deal with any COM overhead or syntax issues. You access the new object\u2019s properties and methods as you would access any other JavaScript object.</p> <p>This section describes how to work with local ActiveX objects in your WebLOAD JavaScript script. For an example illustrating working with ActiveX objects on a remote server, see DCOM over HTTP .</p> <p>Work with your ActiveX objects properties and methods as you would with any JavaScript object\u2019s properties and methods, using the following syntax:</p> <p><pre><code>my_ActiveXobject.method(method-parameters) \norig_property_value = my_ActiveXobject.property \nmy_ActiveXobject.property = new_property_value \nindex_property_value =\n     my_ActiveXobject.indexproperty(indexvalue)\n</code></pre> The following JavaScript examples illustrate this use:</p> <pre><code>// To explicitly create two new object instances \nmother = new ActiveXObject (\"Family.MotherObject\") \nfather = new ActiveXObject (\"Family.FatherObject\")\n//mother and father are local JavaScript objects\n// To assign values directly to my object\u2019s 4 properties \nmother.Name = \"Jane\"\nmother.Age = 21\nmother.BirthDate = \"Jan 20, 1978\" \nmother.Smoke = false\n// To assign values to my object\u2019s 4 properties through an\n// object passed as a parameter to my object\u2019s SetInfo method\nfather_birthday = new Date(\"Mar 20,1975\") \nfather.SetInfo(\"John\",25,father_birthday,true)\n// To implicitly create a new child object \nchild = mother.MakeChild(father)\n// To assign values to my child object\u2019s 4 properties through\n// a combination of direct property assignment and\n// method execution \nchild.Name = \"Patrick\"\ncolor = child.GetEyesColor() \nchild.DemandCare(mother,father)\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#timers-and-counters-for-activex-objects","title":"Timers and Counters for ActiveX Objects","text":"<p>WebLOAD provides automatic timers and counters for ActiveX objects. Automatic timers and counters allow you to effortlessly measure and quantify the behavior and response time of each specific ActiveX component individually, enabling the most comprehensive testing of your COM-based application.</p> <p>Every time your script calls an ActiveX method, a timer and a counter are automatically created for that method. The results are included in the Statistics Report for that test session.</p> <p>For example, assume you are working on a project about animal behavior, using the following ActiveX object:</p> <p>animal = new <code>ActiveXObject</code> (\"Animals.Dog\")  animal.Name = \"Bingo\"  animal.Drink(\"Water\")  animal.Eat(\"Meat\",\"Fish\")</p> <p>Each time you call any of the animal object\u2019s methods, a timer and counter for that method is automatically incremented. The results appear in the Statistics Report. Each timer and counter is uniquely identified with the ActiveX application, object, and method name, as illustrated in the following figure:</p> <p></p> <p>The counter and timer information is collected and displayed automatically, every time you call an ActiveX method from your script. You do not have to add anything to your script code to take advantage of this feature.</p> <p>Note: There are no counters for calls to ActiveX object constructors.</p>"},{"location":"scripting/advanced_javascript_features/#automatic-conversion-between-javascript-and-com-data-types","title":"Automatic Conversion between JavaScript and COM Data Types","text":"<p>The examples found in the preceding section illustrate how simple it is to refer to ActiveX objects within your JavaScript script. You do not need to know or declare anything special about an object\u2019s definition or typing when working within your script. The fact that JavaScript and COM use slightly different data types is not an issue. WebLOAD simply supports all standard JavaScript and COM data types.</p> <p>WebLOAD JavaScript scripts automatically convert between JavaScript and the corresponding COM data types. The table below illustrates the data type conversions that are supported. The default choices used if no data type information is available are marked in bold in the table.</p> <p>Working with JavaScript and COM data types within a JavaScript script is simple. Passing values from JavaScript scripts as parameters to COM objects can be more complicated. COM does not expect, nor does COM know how to convert from, a JavaScript data type. WebLOAD is responsible for smoothing the interface between JavaScript and COM, converting between JavaScript and the corresponding COM data types when necessary.</p> <p>When the data type is known, WebLOAD automatically converts between JavaScript data types and the corresponding COM data type. If the data type is unknown, WebLOAD checks to see if a <code>TypeInfo</code> library is available for the object. (<code>TypeInfo</code> is usually available.) When available, WebLOAD takes the data type information from the <code>TypeInfo</code> library and completes the conversion as usual.</p> <p>If <code>TypeInfo</code> information is not accessible, WebLOAD uses a basic common-sense heuristic to determine the data type and select the appropriate conversion, based on the preceding default conversion table. For example, if a variable A has been assigned a value of 5, WebLOAD assumes that the variable should be of type <code>Integer</code>.</p> <p>However, relying on sensible assumptions may inadvertently lead to complications. For example, the user may actually intend to pass that variable A as a parameter to a method that expects a <code>String</code> \u201c5\u201d. Or you may be working with an array containing a whole set of variables of unknown data types, a more complicated situation. For these reasons, WebLOAD recommends using casting functions when the data type is unknown, to ensure that the variables are converted to the correct data type before being passed as parameters to an ActiveX object method. The WebLOAD casting functions are described in the following section, Using Casting Functions for JavaScript.</p> JavaScript Data Type \u00ae Integer Double Boolean String Date ActiveX Object Array COM Data Type Byte Yes Yes Yes - - - - Short Yes Yes Yes - - - - Long Yes Yes Yes - - - - Float Yes Yes Yes - - - - Double Yes Yes Yes - - - - <p>VARIANT_</p><p>BOOL</p> Yes Yes Yes - - - - Date - - - - Yes - - BSTR Yes Yes Yes Yes - - - IUnknown - - - - - Yes - IDispatch - - - - - Yes - SAFEARRAY - - - - - - Yes"},{"location":"scripting/advanced_javascript_features/#using-casting-functions-for-javascript-and-com-data-types","title":"Using Casting Functions for JavaScript and COM Data Types","text":"<p>WebLOAD recommends using casting functions under the following circumstances:</p> <ul> <li>When no <code>TypeInfo</code> library is available.</li> <li>When you know you are passing mismatched data types.</li> <li>If you receive a <code>TypeError</code> message from COM.</li> </ul> <p>Casting functions ensure that JavaScript variables are converted to the correct data type before being passed as parameters to an ActiveX object method. To explain why casting functions are recommended, this section focuses on how JavaScript and COM work with arrays.</p> <p>Arrays are collections or sets of variables. The values stored within a JavaScript array may either all be of the same data type, (i.e., all integers or all strings), or they may consist of a variety of different data types. COM includes a <code>SafeArray</code> option, asserting that all the items within the array are of the same type. For maximum flexibility, <code>SafeArrays</code> also provide the option of all items being of type <code>Variant</code>.</p> <p>While each item is officially of the \u2018same type\u2019, this actually means that each item may be of any <code>Variant</code>\u2013 compatible data type.</p> <p>While there are very few restrictions on the kinds of data types acceptable by ActiveX objects for array parameters, the one requirement is that whatever is passed must be of the correct (expected) data type. If an ActiveX object method expects to receive an array of type <code>Integer</code>, it must be passed an array of type <code>Integer</code> and not an array of type <code>Variant</code>, even if all the array elements do happen to be integers. When passing a JavaScript array object as a parameter to an ActiveX object method, the items of that array must be converted correctly to the corresponding ActiveX object data types or the method will fail.</p> <p>If nothing is known about the data type of an array\u2019s elements, WebLOAD tries to choose the most logical data type for that array. For example, if all the values in the array appear to be of the same data type, WebLOAD will pass an array of that data type. If the values in the array appear to be of different data types, WebLOAD will pass an array of type <code>Variant</code>. While this approach will almost always work, it may occasionally fail. For example, in the rare event that an array of type Variant coincidentally contains only items that happen to all be of the same Integer data type, WebLOAD will analyze the elements of that array, conclude that it must be of type Integer, and convert it accordingly to an ActiveX array object of type Integer. This may be a logical decision, but the method will fail.</p> <p>To avoid this small possibility of failure during your testing session, WebLOAD provides a complete set of casting functions. While casting functions may be used at any time, explicitly setting a data type is usually recommended only when no <code>TypeInfo</code> library is available, when you know you are passing mismatched data types, or if you receive a <code>TypeError</code> message from COM. (COM errors, which appear as standard error messages on the WebLOAD Console, are usually triggered by an error in the application being tested, for example, by an error in the ActiveX object\u2019s <code>TypeInfo</code> library.)</p> <p>WebLOAD provides the following casting functions:</p> <ul> <li><code>CByte()</code></li> <li><code>CInt()</code></li> <li><code>CLng()</code></li> <li><code>CDbl()</code></li> <li><code>CFlt()</code></li> <li><code>CBool()</code></li> <li><code>CVARIANT()</code></li> </ul> <p>These functions take a variable as a parameter and return that value cast to the specified data type. Only legal data type conversions, as listed the table in Automatic Conversion between JavaScript and COM Data Types .</p> <p>For example, assume you had an array that should be passed as data type Variant, but it only holds items with integer values. To prevent problems, use the CVARIANT() function to explicitly cast the array elements to the Variant data type, as follows:</p> <p><code>My\\_variant\\_arr = new Array()</code> </p> <p><code>My\\_variant\\_arr[0] = CVARIANT(1)</code> </p> <p><code>My\\_variant\\_arr[1] = CVARIANT(21)</code> </p> <p><code>My\\_variant\\_arr[2] = CVARIANT(32)</code> </p> <p><code>My\\_variant\\_arr[4] = CVARIANT(44)</code></p> <p><code>Result = RemoteCOMobject.Add(My\\_variant\\_arr)</code></p> <p>Remember, if your array contains elements with a variety of data types, you don\u2019t have to explicitly cast the array elements to force the array to be converted to data type Variant. WebLOAD will understand that this is a <code>Variant</code> array based on the variety of data types found. However, you may always use a casting function if you wish:</p> <p><code>My\\_variant\\_arr = new Array()</code> </p> <p><code>My\\_variant\\_arr[0] = CVARIANT(1)</code> </p> <p><code>My\\_variant\\_arr[1] = CVARIANT(21.1)</code> </p> <p><code>My\\_variant\\_arr[2] = CVARIANT(\"John\")</code></p> <p><code>My\\_variant\\_arr[4] = CVARIANT(new Date(1999,1,1))</code> </p> <p><code>Result = RemoteCOMobject.Concat(My\\_variant\\_arr)</code></p> <p>In another example, assume you had an array that should be passed as data type</p> <p><code>Double</code>. The elements were assigned a variety of <code>Integer</code> and <code>Double</code> data type values. There is no <code>TypeInfo</code> library available. WebLOAD, seeing a combination of integer and double values, will assume that this is an array of data type Variant. However, the method is expecting an array of data type <code>Double</code>. To prevent problems, use the <code>CDbl()</code> function to explicitly cast the integer array elements to the <code>Double</code> data type, as follows:</p> <p><code>My\\_double\\_arr = new Array()</code> </p> <p><code>My\\_double\\_arr[0] = 100.1</code> </p> <p><code>My\\_double\\_arr[1] = CDbl(21)</code> </p> <p><code>My\\_double\\_arr[2] = 22.2</code></p> <p><code>Result = RemoteCOMobject.AddDoubles(My\\_double\\_arr)</code></p>"},{"location":"scripting/advanced_javascript_features/#dcom-over-http","title":"DCOM over HTTP","text":"<p>In today\u2019s work environment, applications are often distributed over a network. In the course of your testing session, you may need to activate an ActiveX object that is located on a remote server and accessed through a network. For this reason, WebLOAD supports ActiveX object access through Remote Data Service (RDS).</p> <p>Remote object access is accomplished in two steps: First, declare a new RDS object. That RDS object is used as a bridge, pointing to the ActiveX object residing on the remote server. Then, activate an ActiveX object located on a remote server, use the initial instantiation syntax described in Remote ActiveXObject() Constructor .</p> <p>Note: WebLOAD assumes a basic familiarity with RDS use, including object declaration and initialization, and system configuration. For more information about Microsoft\u2019s Remote Data Services of ADO (RDS), go to the following websites:</p> <p>For a general overview, see the Microsoft MSDN Online Library at http://msdn.microsoft.com.</p> <p>For a more complete example that illustrates RDS use, see http://support.microsoft.com/kb/q184630/.</p> <p>To learn how to configure RDS.DataSpace to create a Custom Business Object (ActiveX DLL) on either NT or Win2000, see http://support.microsoft.com/kb/q185169/.</p> <p>To learn how to configure RDS for Windows 2003, see http://support.microsoft.com/kb/837981/en-us.</p>"},{"location":"scripting/advanced_javascript_features/#remote-activexobject-constructor","title":"Remote ActiveXObject() Constructor","text":"<p>Method of Object</p> <ul> <li>ActiveX</li> </ul> <p>Description</p> <p>Creates a new remote ActiveX object. The new object is simply a local JavaScript object, and may be handled and manipulated like any other JavaScript object.</p> <p>Syntax</p> <p><code>RDS\\_object = new ActiveXObject (\u201cRDS.DataSpace\u201d)</code></p> <p><code>my\\_RemoteActiveXobject =</code></p> <p><code>RDS\\_object.CreateObject(\u201cAppName.ObjName\u201d, \u201chttp://rServer\u201d)</code></p> <p>Parameters</p> <ul> <li><code>RDS.DataSpace</code>\u2014Creates an RDS object to act as a \u2018bridge\u2019 to an ActiveX object residing on the remote server.</li> <li><code>ApplicationName</code>\u2014The name of the application providing the object. </li> <li><code>ObjectName</code>\u2014The type or class of the object being created. </li> <li><code>rServer</code>\u2014The name of the remote server being accessed.</li> </ul> <p>Return Value</p> <p>A pointer to the new ActiveX object. The new object is simply a local JavaScript object, and may be handled and manipulated like any other JavaScript object.</p> <p>Comments</p> <p>When working with a remote server, the object you are accessing must reside on the Web server computer (in this example: http://rserver).</p> <p>Once your new object is instantiated, it is simply a local JavaScript object, just like any other JavaScript object. You may manipulate the object as you would any other JavaScript object. An example of remote ActiveX object instantiation and use is illustrated in the next section.</p>"},{"location":"scripting/advanced_javascript_features/#example-remote-activex-object-access","title":"Example: Remote ActiveX Object Access","text":"<p>The following script fragment illustrates ActiveX object access from a WebLOAD JavaScript script. This example retrieves a recordset from a database, updates the recordset, and then makes the necessary changes to the database.</p> <pre><code>// Instantiate a new ActiveX object\nDataSpace = new ActiveXObject(\u201cRDS.Dataspace\u201d)\n// Invoke server object. localhost is the server here \nsvrObject = DataSpace.CreateObject\n    (\"RDSServer.DataFactory\", \"http://localhost\")\n// svrObject is now a local JavaScript object used to\n// access the remote ActiveX object. svrObject is\n// manipulated exactly as any other JavaScript object.\n// Create output file with the unique ClientNum included\n// as part of the name for identification purposes \nwlLocals.MyFileObj = new wlOutputFile\n       (\u201cC:\\\\OutputFile\u201d + ClientNum + \u201c.txt\u201d)\n// svrObject.Query returns a recordset \nstrRecord = svrObject.Query\n       (\"DSN=AdvWorks2\", \"Select\\* from Customers\")\n// Initialize database record counter n\\_recordCounter = 0\n// The objField2 variable is used for debugging,\n// to verify the correct field and check its value. \nobjField2 = strRecord.Fields(\"Threads\")\n// Notice that it is not necessary to explicitly state:\n// objField2 = strRecord.Fields.item(\"Threads\")\n// because WebLOAD supports default fields\n// The script works in a While-loop that\n// verifies that I am not at the last record.\n// If I am, then the update code does not run \nwhile(strRecord.EOF == false)\n{\n    // Access the current field value \n    strCurrentFieldValue = strRecord.Fields(0).Value\n    // Add five to current record value and\n    // verify that I am talking to the dataSource\n    // so I can keep track of where I am in the field \n    if (strCurrentFieldValue == 5)\n        strCurrentFieldValue += 5\n    // Update just saves the field.dot value \n    objField2.Value = strCurrentFieldValue \n    objField2.Value.Update\n    // More debug coded when necessary. \n    txtCurrent = strRecord.Fields(0).Value\n    // Submit changes to the record source and\n    // move to the next record \n    svrObject.SubmitChanges(\"DSN=AdvWorks2\", strRecord) strRecord.MoveNext()\n}\n// End of While-loop\n</code></pre>"},{"location":"scripting/advanced_javascript_features/#com-error-management","title":"COM Error Management","text":"<p>Failure of a COM function call always triggers a WebLOAD error message, whether or not the COM call was enclosed in a <code>try...catch</code> block. This gives the script programmer an opportunity to handle application errors within the context of the WebLOAD test session script.</p>"},{"location":"scripting/advanced_javascript_features/#activex-object-limitations","title":"ActiveX Object Limitations","text":"<p>Due to the nature of ActiveX object implementation, WebLOAD ActiveX support is subject to certain limitations. The following items are not supported:</p> <ul> <li> <p>Events. The ActiveX object is not able to make a call to the client.</p> <p>For example, work with the <code>IConnectionPoint</code> interface is not supported.</p> </li> <li> <p>Setting a property value within a function parameter. For example, you cannot write:</p> <p><code>ReturnValue = FunctionCall(**(My\\_Object.Property=5)**)</code></p> </li> <li> <p>Passing method calls that return values as parameters to another method call of the same object.</p> <p>For example, the following method call will fail:</p> <p><code>AU = new ActiveXObject (\"Persits.AspUser\")</code> <code>CurrentUser = AU.GetUser(AU.GetUserName())</code></p> </li> </ul> <p>Instead, either call the method using a second, temporary object, such as this:</p> <pre><code>   `AU = new ActiveXObject (\"Persits.AspUser\")` \n   `AUTemp = new ActiveXObject (\"Persits.AspUser\")` \n   `CurrentUser = AU.GetUser(**AUTemp.GetUserName()**)`\n</code></pre> <p>Or use a method and a property rather than two methods, such as this:</p> <pre><code>   `AU = new ActiveXObject (\"Persits.AspUser\")` \n   `CurrentUser = AU.GetUser(**AU.UserNameProp**)`\n</code></pre> <ul> <li> <p>Assigning values to indexed properties.   For example, you cannot assign a value as follows:</p> <p><code>My\\_object.property(1) = 5</code></p> </li> <li> <p>Calling an indexed property without parentheses.</p> <p>For example, the following call to the indexed property Environment will fail:</p> <p><code>WshShell = new ActiveXObject(\"WScript.Shell\")</code> <code>env = **WshShell.Environment**</code></p> <p>Instead, use the following syntax:</p> <p><code>WshShell = new ActiveXObject(\"WScript.Shell\")</code>   `env = WshShell.Environment(\"System\")</p> </li> </ul>"},{"location":"scripting/appendix_a/","title":"Appendix A: Scripting Samples","text":"<p>This chapter provides sample scripts which you can adapt to your own scripts. Each scripting sample demonstrates different features that can be performed by editing your script\u2019s script.</p> <p>The following scripting samples are provided:</p> <ul> <li> <p>Basic Recording</p> </li> <li> <p>Correlation</p> </li> <li> <p>Parameterizing a script</p> </li> <li> <p>Using AJAX and Web services</p> </li> <li> <p>Using AJAX and JSON</p> </li> </ul>"},{"location":"scripting/appendix_a/#scripting-sample-of-a-basic-recording","title":"Scripting Sample of a Basic Recording","text":"<p>The sample script in this section demonstrates how a basic script is recorded. This script is used as a basis for the scripts that appear in the following sections.</p>"},{"location":"scripting/appendix_a/#what-the-script-does","title":"What the Script Does","text":"<ul> <li>Records user actions in the website. This is done by recording the HTTP traffic between the browser and the Web server.</li> <li>Records Html form data sent from the browser.</li> <li>Records the <code>Get()</code> and <code>Post()</code> methods.</li> </ul>"},{"location":"scripting/appendix_a/#how-to-create-the-script","title":"How to Create the Script","text":"<p>The basic script is created by starting to record in the WebLOAD Recorder, browsing through the www.webloadmpstore.com website, stopping the recording, and saving the script.</p>"},{"location":"scripting/appendix_a/#step-1-starting-to-record-the-script","title":"Step 1 \u2013 Starting to Record the script","text":"<ol> <li>In WebLOAD Recorder open a new script.</li> <li>Click     to start recording.</li> <li>Browse to www.webloadmpstore.com in the browser that opens. The following script describing your action appears in the script.</li> </ol> <pre><code>wlGlobals.GetFrames = false\nwlGlobals.UserAgent = \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\"\nwlHttp.Header[\"DNT\"] = \"1\" \nwlHttp.Get(\"http://www.webloadmpstore.com/\")\nSleep(9094)\n</code></pre>"},{"location":"scripting/appendix_a/#step-2-logging-in-to-the-site","title":"Step 2 \u2013 Logging in to the Site","text":"<ol> <li> <p>Click Login in the webloadmpstore website and the Login page appears. The script for this action is as follows:</p> <pre><code>wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/\"\nwlHttp.Get(\"http://www.webloadmpstore.com/login.php\")\n\nSleep(7704)\n</code></pre> </li> <li> <p>In the username and password fields, enter <code>demo-username</code> and <code>demo-password</code> to log in to the website.</p> <p>WebLOAD Recorder records the login action and simulates a script containing the username and password that you entered in the login page.</p> </li> </ol> <pre><code>wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/login.php\"\nwlHttp.ContentType = \"application/x-www-form-urlencoded\" \nwlHttp.FormData[\"login\"] = \"demo\" \nwlHttp.FormData[\"password\"] = \"demo\"\nwlHttp.FormData[\"sessionID\"] = \"webloadmpstore.62.90.23.122.ae97bc7877d7bd4ebcb64c4c0e21ba1c\"\nwlHttp.FormData[\"event\"] = \"login\" \nwlHttp.FormData[\"Submit\"] = \"Login\" \nwlHttp.Post(\"http://www.webloadmpstore.com/login.php\")\n\nSleep(3015)\n</code></pre> <p>The site approves your login information and the WebLOAD MP Store home page appears.</p> <pre><code>wlHttp.Get(\"http://www.webloadmpstore.com/index.php\") \nSleep(5282)\n</code></pre>"},{"location":"scripting/appendix_a/#step-3-purchasing-a-product","title":"Step 3 \u2013 Purchasing a Product","text":"<ol> <li> <p>From the product page, click Debugging and Handling Dynamic Data to view the product\u2019s additional details. A page with the product description for Debugging and Handling Dynamic Data appears.</p> <pre><code>wlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/index.php\"\nwlHttp.FormData[\"id\"] = \"1\" \nwlHttp.Get(\"&lt;http://www.webloadmpstore.com/product.php\")\n\nSleep(4984)\n</code></pre> </li> <li> <p>Click Add to Cart to purchase the product.</p> <pre><code>wlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/product.php?id=1\"\nwlHttp.FormData[\"event\"] = \"addproduct\" \nwlHttp.FormData[\"id\"] = \"1\"\nwlHttp.Get(\"http://www.webloadmpstore.com/cart.php\")\n</code></pre> </li> </ol>"},{"location":"scripting/appendix_a/#step-4-saving-the-script","title":"Step 4 \u2013 Saving the script","text":"<ol> <li>In WebLOAD Recorder, click to stop recording the script.</li> <li>Select File &gt; Save As to save the script. The Save As dialog box appears.</li> <li>In the Save As dialog box browse to the following location: <code>D:\\\\Radview\\\\&lt;Sample scripts folder&gt;\\\\ script 1-Basic Recording script.wlp</code></li> <li>Click Save.</li> </ol>"},{"location":"scripting/appendix_a/#the-full-script-script-1-basic-recording-script","title":"The Full script: script 1-Basic Recording script","text":"<p>Note: The WLIDE \u2013 URL comments throughout the script are modified to give the Agenda nodes meaningful names.</p> <pre><code>/***** WLIDE - URL : Open webloadmpstore home page - ID:2 *****/ \nwlGlobals.GetFrames = false \nwlHttp.Get(\"http://www.webloadmpstore.com/\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:3 *****/ \nSleep(9094)\n// END WLIDE\n\n/***** WLIDE - URL : Open login page - ID:4 *****/ wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/\" \nwlHttp.Get(\"http://www.webloadmpstore.com/login.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:5 *****/ \nSleep(7704)\n// END WLIDE\n\n/***** WLIDE - URL :Insert login and password - ID:6 *****/\nwlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/login.php\"\nwlHttp.ContentType = \"application/x-www-form-urlencoded\" \nwlHttp.FormData[\"login\"] = \"demo\" \nwlHttp.FormData[\"password\"] = \"demo\"\nwlHttp.FormData[\"sessionID\"] = \"webloadmpstore.62.90.23.122.ae97bc7877d7bd4ebcb64c4c0e21ba1c\"\nwlHttp.FormData[\"event\"] = \"login\" \nwlHttp.FormData[\"Submit\"] = \"Login\" \nwlHttp.Post(\"http://www.webloadmpstore.com/login.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:7 *****/ \nSleep(3015)\n// END WLIDE\n\n\n/***** WLIDE - URL :http://www.webloadmpstore.com/index.php - ID:8 *****/\nwlHttp.Get(\"http://www.webloadmpstore.com/index.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:9 *****/ \nSleep(5282)\n// END WLIDE\n\n/***** WLIDE - URL : Select show product details - ID:10 *****/\nwlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/index.php\"\nwlHttp.FormData[\"id\"] = \"1\" \nwlHttp.Get(\"http://www.webloadmpstore.com/product.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:11 *****/ \nSleep(4984)\n// END WLIDE\n\n/***** WLIDE - URL : Add to cart - ID:12 *****/\nwlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/product.php?id=1\"\nwlHttp.FormData[\"event\"] = \"addproduct\"\n wlHttp.FormData[\"id\"] = \"1\" wlHttp.Get(\"http://www.webloadmpstore.com/cart.php\")\n// END WLIDE\n</code></pre>"},{"location":"scripting/appendix_a/#scripting-sample-using-ajax-and-web-services","title":"Scripting Sample Using AJAX and Web Services","text":"<p>WebLOAD supports automatic recording of AJAX calls into the test script, enabling debugging and full access to all request data (headers and body), both in the script and during runtime. WebLOAD supports various formats for the AJAX payload: XML, JSON, other text-based formats, and binary data.</p> <p>Besides demonstrating the use of AJAX calls, this script demonstrates the use of functions and external files in the script.</p> <p>Storing sections of the logic in a function enables you to reuse the same lines of code without duplications, making the script more modular. A function can be part of your main script file or can be stored in a separate, external JavaScript file. When storing the function in a separate file, the main script file includes the function so that it can be used within the script.</p> <p>One of the main benefits of including files in the script, is to reduce the maintenance needed for the scripts. The same included file can be used in a number of scripts simply by adding the include command and calling the function in the script.</p> <p>Using included files is also more efficient. When the information in the included file needs to be updated, the included file is the only place that needs to be modified and the whole script will be affected. Without using an included file, you would need to search for every place that the information is used and update the information manually.</p>"},{"location":"scripting/appendix_a/#what-the-script-does_1","title":"What the Script Does","text":"<ul> <li>Demonstrates how to record user actions in a website that is accessed on a secure server.</li> <li>Demonstrates how WebLOAD supports AJAX and Web services.</li> <li>Demonstrate how to validate a Web Service reply by parsing the XML content of its SOAP message.</li> <li>Demonstrates how to modify a recorded script where a specific option is selected, so that the script can accept additional options during runtime.</li> <li>Demonstrates adding a function to the script.</li> <li>Demonstrates how to extract a login script to an external JavaScript file and then reuse the code in the script.</li> </ul>"},{"location":"scripting/appendix_a/#how-to-create-the-script_1","title":"How to Create the Script","text":"<p>In this script, you will record a webpage that is accessed on a secure server. Once the script is recorded, you will modify the script so that during runtime, an InfoMessage notifies you whether your credit card information has been validated. This is done by adding a function that uses a Web Service to check the validation of the credit card and a parameter to store the result of the function.</p> <p>You will create a function to store the script of the login process. Then, you can extract the function to an external file, which enables you to create a generic scenario, instead of a specific case. The function checks the login information received from the site and determines whether the user\u2019s login information is accurate. Although the login information was correct when the script was recorded, by modifying the script you can add additional scenarios to be accepted during runtime, such as, when the login information is incorrect.</p> <p>This script also demonstrates WebLOAD\u2019s support of AJAX and Web services. During the recording, when the credit card information is being validated, the WebLOAD Recorder records the Web service transactions that take place within the application.</p>"},{"location":"scripting/appendix_a/#step-1-entering-credit-card-information-and-checking-out","title":"Step 1 \u2013 Entering Credit Card Information and Checking Out","text":"<ol> <li> <p>Open the script3-Parametrizing a script.</p> </li> <li> <p>Open a browser, navigate to the Cart page, and copy the URL of the page.</p> </li> <li> <p>In the WebLOAD Recorder, click  or select Record &gt; Start Record to start recording.</p> </li> <li> <p>Paste the URL of the cart page in the browser that opens. The new script is appended to the end of the existing script.</p> </li> <li> <p>In the cart page, click Checkout.     The credit card information page appears. This page is an HTTPS page and is appended to the script as follows:</p> <p><pre><code>wlGlobals.GetFrames = false\n\nwlHttp.Header[\"Referer\"] =\"http://www.webloadmpstore.com/cart.php?event=update&amp;id=2&amp;quantity=3\"\n\nwlHttp.Get(\"https://www.webloadmpstore.com/checkout.php\")\n</code></pre> 1. In the credit card information page, enter your credit card information and click Done. The script is recorded as follows:</p> <pre><code>wlGlobals.GetFrames = false\nwlHttp.Header[\"Referer\"] = \"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.FormData[\"wsdl\"] = \"$WL$VOID$STRING$\"\nwlHttp.Get(\"https://www.webloadmpstore.com/soap/server.php\")\n\nwlHttp.Header[\"Referer\"] = \"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.Data[\"Type\"] = \"text/xml; charset=utf-8\"\nwlHttp.Data[\"Value\"] = \"&lt;?xml version=\\\"1.0\\\" \nencoding=\\\"utf-8\\\"?&gt;&lt;soap:Envelope \nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \nxmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \nxmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\n&gt;&lt;soap:Body&gt;&lt;checkValidity \nxmlns=\\\"http://example.org/CreditCardProcess\\\"&gt;&lt;strCardN \number&gt;ABCD&lt;/strCardNumber&gt;&lt;strHolderID&gt;AB1234&lt;/strHolder \nID&gt;&lt;/checkValidity&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\"\n\nwlHttp.Post(\"[ttps://www.webloadmpstore.com/soap/server.php\")\n\nwlHttp.ContentType = \"application/x-www-form-urlencoded\" \nwlHttp.FormData[\"name\"] = \"Radview\" \nwlHttp.FormData[\"address\"] = \"Hamelacha 14\" \nwlHttp.FormData[\"shippingAddress\"] = \"Park Afek\" \nwlHttp.FormData[\"cardNumber\"] = \"ABCD\" \nwlHttp.FormData[\"idNumber\"] = \"AB1234\" \nwlHttp.FormData[\"event\"] = \"process\"\nwlHttp.Post(\"https://www.webloadmpstore.com/checkout.php\")\n</code></pre> </li> <li> <p>In WebLOAD Recorder, click    to stop recording the script.</p> </li> </ol>"},{"location":"scripting/appendix_a/#step-2-adding-the-results-parameter-and-resultparser-function","title":"Step 2 \u2013 Adding the Results Parameter and ResultParser Function","text":"<ol> <li> <p>Add a <code>results</code> parameter to the Validate Cred \u2013 Pass Node of the script.</p> <p>The <code>results</code> parameter stores a value received from the resultParser function, which checks whether your credit card information is valid. The HTTP response containing the result of the credit card validation Web Service (<code>document.wlXmls[0]</code>) that is extracted from the script, is sent to the <code>resultParser</code> function.</p> <p>The <code>results</code> parameter appears in the Validate Cred \u2013 Pass Node of the script as follows:</p> <pre><code>wlHttp.Header[\"Referer\"] = \"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.Data[\"Type\"] = \"text/xml; charset=utf-8\"\nwlHttp.Data[\"Value\"] = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;&lt;soap:Envelope \nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \nxmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \nxmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\n&gt;&lt;soap:Body&gt;&lt;checkValidity \nxmlns=\\\"http://example.org/CreditCardProcesss\\\"&gt;&lt;strCardN \number&gt;ABCD&lt;strCardNumber&gt;&lt;strHolderID&gt;AB1234&lt;/strHolder \nID&gt;&lt;/checkValidity&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\"\n\nwlHttp.Post(\"https://www.webloadmpstore.com/soap/server.php\")\n\nresults = resultParser( document.wlXmls[0] )\n</code></pre> </li> <li> <p>Create an infoMessage to notify you whether your credit card has been validated or not according to the result parameter value.</p> <pre><code>wlHttp.Header[\"Referer\"] = \"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.Data[\"Type\"] = \"text/xml; charset=utf-8\"\nwlHttp.Data[\"Value\"] = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;&lt;soap:Envelope \nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \nxmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \nxmlns:soap=\\[\"http://schemas.xmlsoap.org/soap/envelope/\\&gt;&lt;soap:Body&gt;&lt;checkValidity \nxmlns=\\\"http://example.org/CreditCardProcess\\\"&gt;&lt;strCardN \number&gt;ABCD&lt;strCardNumber&gt;&lt;strHolderID&gt;AB1234&lt;/strHolder \nID&gt;&lt;/checkValidity&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\"\nwlHttp.Post(\"https://www.webloadmpstore.com/soap/server.php\")\n\nresults = resultParser( document.wlXmls[0] ) \nif (results == \"1\")\nInfoMessage(\"Validation check return \u2018Check OK\u2019 like it should\")\nelse\nInfoMessage(\"Validation check is not working correctly\")\n</code></pre> </li> <li> <p>Add the resultParser function to the script, which checks whether your credit card information is valid. The function retrieves the information from document.wlXmls[0] in the results parameter and uses the built-in WebLOAD XML DOM to parse and return XML data to the parameter.</p> <pre><code>function resultParser (doc)\n {\n //get \u2018Result\u2019 tags, we expect exactly one result:\n ResultsElements =\n doc.getElementsByTagName(\"Result\")\n\n if ( ResultsElements.length != 1 )\n // Verify only one element with that name exists\n throw \"Expecting a single Result tag. received \" + ResultsElements.length + \"elements\"\n\n ResultElm = ResultsElements.item(0)\n\n if ( ResultElm.childNodes.length == 0 )\n      return null\n else\n {\n      Result = ResultElm.firstChild\n      return Result.nodeValue\n }\n}\n</code></pre> </li> </ol>"},{"location":"scripting/appendix_a/#step-3-creating-the-external-login-javascript-file","title":"Step 3 \u2013 Creating the External Login JavaScript File","text":"<ol> <li> <p>Select the section of the script that is responsible for the login process.</p> </li> <li> <p>Copy the script to a separate JavaScript file and save the file as login_js.js. The script in the login_js.js file is as follows:</p> <pre><code>function Login() {\n  strGlobalInputFileLine = GetLine(InFile1,\",\") \n  user\\_name = strGlobalInputFileLine[1] \n  password = strGlobalInputFileLine[2]\n\n  wlGlobals.GetFrames = false \n  wlHttp.Get(\"http://www.webloadmpstore.com/\")\n\n  Sleep(9094)\n\n  wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/\"\n  wlHttp.Get(\"http://www.webloadmpstore.com/login.php\") \n\n  Sleep(7704)\n\n session_id = document.forms[1].elements[2].value\n\n wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/login.php\"\n wlHttp.ContentType = \"application/x-www-form-urlencoded\" \n wlHttp.FormData[\"login\"] = user_name \n wlHttp.FormData[\"password\"] = password \n wlHttp.FormData[\"sessionID\"] = session_id wlHttp.FormData[\"event\"] = \"login\" \n wlHttp.FormData[\"Submit\"] = \"Login\" \n wlHttp.Post(\"http://www.webloadmpstore.com/login.php\")\n }\n</code></pre> </li> </ol>"},{"location":"scripting/appendix_a/#step-4-including-and-using-the-external-file-in-the-script","title":"Step 4 \u2013 Including and Using the External File in the script","text":"<ol> <li> <p>Include the external JavaScript file in the script by copying the following into the <code>InitAgenda()</code> function of the script:</p> <p><code>IncludeFile(\"login\\_js.js\")</code></p> </li> <li> <p>Drag the JavaScript object Building Block into the script.</p> </li> <li> <p>Add the <code>rs</code> parameter that calls the login function from the included <code>login\\_js.js file.</code></p> <p><code>rs = Login()</code></p> </li> <li> <p>Save the script as script 4\u2013Ajax and Web services.</p> </li> </ol>"},{"location":"scripting/appendix_a/#the-full-script-script-4-ajax-and-web-services","title":"The Full script: script 4-AJAX and Web Services","text":"<pre><code>function InitAgenda()\n{\nInFile1 = CopyFile(\"P:\\\\Supporting Tools\\\\Sample Scripts\\\\New\\\\InFile1.txt\")\nOpen(InFile1) \nIncludeFile(\"login_js.js\")\n}\n/***** WLIDE -function resultParser - ID:33 *****/ function resultParser (doc)\n{\n    //get \u2018Result\u2019 tags, we expect exactly one result: \n    ResultsElements = doc.getElementsByTagName(\"Result\")\n\n    if ( ResultsElements.length != 1 )\n    // Verify only one element with that name exist\n       throw \"Expecting a single Result tag. received \" + ResultsElements.length + \"elements\"\n    ResultElm = ResultsElements.item(0)\n\n    if ( ResultElm.childNodes.length == 0 ) \n       return null\n    else\n    {\n       Result = ResultElm.firstChild \n       return Result.nodeValue\n    }\n}\n// END WLIDE\n\n/***** WLIDE - Login Function - ID:19 *****/ \nrs = Login()\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:7 *****/ \nSleep(3015)\n// END WLIDE\n\n/***** WLIDE - URL : http://www.webloadmpstore.com/index.php- ID:8 *****/\nwlHttp.Get(\"http://www.webloadmpstore.com/index.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:9 *****/ \nSleep(5282)\n// END WLIDE\n\n/***** WLIDE - Parameterizing product ID and category number - ID:28 *****/\n\nproduct_id = wlRand.Range(1,9) \nquantity = wlRand.Range(1,12)\n// END WLIDE\n\n/***** WLIDE - URL : Select show product details - ID:10 *****/\nwlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/index.php\"\nwlHttp.FormData[\"id\"] = product_id \nwlHttp.Get(\"http://www.webloadmpstore.com/product.php\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:11 *****/ \nSleep(4984)\n// END WLIDE\n\n/***** WLIDE - URL : Add to cart - ID:12 *****/\nwlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/product.php?id=product_id\"\nwlHttp.FormData[\"event\"] = \"addproduct\" \nwlHttp.FormData[\"id\"] = product_id \nwlHttp.Get(\"http://www.webloadmpstore.com/cart.php\")\n// END WLIDE\n\n/***** WLIDE - URL : Product quantity - ID:17 *****/ \nwlGlobals.GetFrames = false\nwlHttp.FormData[\"event\"] = \"update\" \nwlHttp.FormData[\"id\"] = product_id \nwlHttp.FormData[\"quantity\"] = quantity \nwlHttp.Get(\"http://www.webloadmpstore.com/cart.php\")\n// END WLIDE\n\n/***** WLIDE - URL : HTTPS - ID:22 *****/ \nwlGlobals.GetFrames = false \nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/cart.php?event=update&amp;id=2&amp;quantity=3\"\nwlHttp.Get(\"https://www.webloadmpstore.com/checkout.php\")\n// END WLIDE\n\n/***** WLIDE - URL : https://www.webloadmpstore.com/soap/server.php?wsdl - ID:23 *****/\nwlGlobals.GetFrames = false\nwlHttp.Header[\"Referer\"] = \"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.FormData[\"wsdl\"] = \"$WL$VOID$STRING$\" \nwlHttp.Get(\"https://www.webloadmpstore.com/soap/server.php\")\n// END WLIDE\n\n/***** WLIDE - URL : Validate Cred - Pass - ID:26 *****/\nwlHttp.Header[\"Referer\"] =\n\"https://www.webloadmpstore.com/checkout.php\"\nwlHttp.Data[\"Type\"] = \"text/xml; charset=utf-8\"\nwlHttp.Data[\"Value\"] = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf8\\\"?&gt;&lt;soap:Envelope\nxmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\nxmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\nxmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"&gt;&lt;soap:B\nody&gt;&lt;checkValidity\nxmlns=\\\"http://example.org/CreditCardProcess\\\"&gt;&lt;strCardNumber&gt;AB\nCD&lt;/strCardNumber&gt;&lt;strHolderID&gt;AB1234&lt;/strHolderID&gt;&lt;/checkValidi\nty&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\"\n\nwlHttp.Post(\"https://www.webloadmpstore.com/soap/server.php\")\n\nresults = resultParser( document.wlXmls[0] )\nif (results == \"1\")\n    InfoMessage(\"Validation check return \u2018Check OK\u2019 like it should\")\nelse\n    InfoMessage(\"Validation check is not working correctly\")\n// END WLIDE\n\n/***** WLIDE - URL : Confirm Order - ID:27 *****/\nwlHttp.ContentType = \"application/x-www-form-urlencoded\"\nwlHttp.FormData[\"name\"] = \"Radview\"\nwlHttp.FormData[\"address\"] = \"Hamelacha 14\"\nwlHttp.FormData[\"shippingAddress\"] = \"Park Afek\"\nwlHttp.FormData[\"cardNumber\"] = \"ABCD\"\nwlHttp.FormData[\"idNumber\"] = \"AB1234\"\nwlHttp.FormData[\"event\"] = \"process\"\nwlHttp.Post(\"https://www.webloadmpstore.com/checkout.php\")\n// END WLIDE\n</code></pre>"},{"location":"scripting/appendix_a/#scripting-sample-using-ajax-and-json-to-validate-a-web-server-response","title":"Scripting Sample Using AJAX and JSON to Validate a Web Server Response","text":"<p>WebLOAD supports automatic recording of AJAX calls into the test script using JSON, enabling debugging and full access to all request data (headers and body), both in the script and during runtime.</p>"},{"location":"scripting/appendix_a/#what-the-script-does_2","title":"What the Script Does","text":"<ul> <li>Demonstrates how WebLOAD supports AJAX and JSON.</li> <li>Demonstrates how to validate a Web service response.</li> </ul>"},{"location":"scripting/appendix_a/#how-the-script-works","title":"How the Script Works","text":"<p>In this script, you will search for a product in the webloadmpstore site and in the search results page, you will request to see the site\u2019s statistics. The statistics displayed include the number of users online and the date and time. These statistics are updated every ten seconds to ensure their accuracy by using an asynchronous AJAX call. Each time the information is updated, the AJAX script is recorded in the script by WebLOAD Recorder.</p> <p>The following steps demonstrate how to modify the AJAX script so that the WebLOAD Recorder displays the JSON information in the log view during runtime. This is done by adding an InfoMessage to the script, which displays the information based on the JSON response.</p>"},{"location":"scripting/appendix_a/#step-1-recording-ajax-calls-in-the-script","title":"Step 1 \u2013 Recording AJAX Calls in the script","text":"<ol> <li> <p>Start recording a new script and browse to www.webloadmpstore.com. The script is recorded as follows: </p> <p><code>wlGlobals.GetFrames = false</code></p> <p><code>wlHttp.Get(\"http://www.webloadmpstore.com/index.php\")</code></p> </li> <li> <p>In the webloadmpstore website, enter WebLOAD in the Search field and click SEARCH. </p> <p>The search results for WebLOAD appear. In the IDE the following script is recorded: </p> <p><code>wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/index.php\"</code> <code>wlHttp.ContentType = \"application/x-www-form-urlencoded\"</code> <code>wlHttp.FormData[\"event\"] = \"search\"</code> <code>wlHttp.FormData[\"searchTerm\"] = \"webload\"</code> <code>wlHttp.Post(\"http://www.webloadmpstore.com/search.php\")</code></p> </li> <li> <p>Check the Show statistics checkbox. The script in the script appears as follows:</p> <p><code>wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/search.php\"</code> <code>wlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")</code></p> <p>New nodes are recorded repeatedly and added to the script as the site automatically refreshes itself every ten seconds.</p> </li> <li> <p>After a few nodes have been added to the script, click  in WebLOAD Recorder to stop recording the script.</p> </li> </ol>"},{"location":"scripting/appendix_a/#step-2-parsing-the-json-response","title":"Step 2 \u2013 Parsing the JSON Response","text":"<ol> <li> <p>In the <code>InitAgenda()</code> function in the script, define the global variable values of the <code>SaveSource</code> property as follows:</p> <pre><code>function InitAgenda()\n{\nwlGlobals.SaveSource = true\n}\n</code></pre> <p>This instructs WebLOAD to store the complete HTML source code downloaded in the <code>document.wlSource</code> object.</p> </li> <li> <p>Drag the JavaScript object Building Block from the Toolbox to the Script Tree. In the Building Block, add a function that receives the <code>document.wlSource</code> object and manipulates it to retrieve the statistics. The script is as follows:</p> <pre><code>function evalResponse (source) {\njson\\_response = eval(\"(\" + source + \")\")\n}\n</code></pre> </li> <li> <p>Create an <code>InfoMessage</code> to notify you of the statistic values during runtime. The edited script is as follows:</p> <pre><code>function evalResponse (source) { \n    json\\_response = eval(\"(\" + source + \")\")\nInfoMessage ( \"The number of online users is: \" + json\\_response.usersOnline + \" and The current time is: \"\n+ json\\_response.time) \n}\n</code></pre> </li> <li> <p>In each of the AJAX calls recorded in the script, add a call to the newly created function:</p> <p><code>wlHttp.Header[\"Referer\"] = \"http://www.webloadmpstore.com/search.php\"</code></p> <p><code>wlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")</code></p> <p><code>evalResponse(document.wlSource)</code> </p> </li> <li> <p>Save the script as script 5-AJAX and JSON.</p> </li> </ol>"},{"location":"scripting/appendix_a/#step-3-displaying-json-information-during-runtime","title":"Step 3 \u2013 Displaying JSON Information During Runtime","text":"<p>Run the script. Each time the browser refreshes itself, a message in the log view is displayed. The message contains the statistics recorded in the browser, including the time and number of users online:</p> <p><code>The number of online users is: 1 and The current time is: 11:23:11am</code></p>"},{"location":"scripting/appendix_a/#the-full-script-script-5-ajax-and-json","title":"The Full script: script 5-AJAX and JSON","text":"<pre><code>function InitAgenda()\n{\nwlGlobals.SaveSource = true\n// END WLIDE\n}\n\n/***** WLIDE - URL : Home Page - ID:20 *****/\nwlGlobals.GetFrames = false\nwlHttp.Get(\"http://www.webloadmpstore.com/index.php\")\n// END WLIDE\n\n\n/***** WLIDE - Sleep - ID:22 *****/\nSleep(8371)\n// END WLIDE\n\n\n/***** WLIDE -Search page - ID:23 *****/\nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/index.php\"\nwlHttp.ContentType = \"application/x-www-form-urlencoded\"\nwlHttp.FormData[\"event\"] = \"search\"\nwlHttp.FormData[\"searchTerm\"] = \"webload\"\nwlHttp.Post(\"http://www.webloadmpstore.com/search.php\")\n// END WLIDE\n\n\n/***** WLIDE - Sleep - ID:24 *****/\nSleep(8542)\n// END WLIDE\n\n\n/***** WLIDE - JavaScriptObject - ID:27 *****/\nfunction evalResponse (source) {\n    json_response = eval(\"(\" + source + \")\")\n    InfoMessage ( \"The number of online users is: \" +\n    json_response.usersOnline + \" and The current time is: \" +\n    json_response.time)\n}\n// END WLIDE\n\n\n/***** WLIDE - URL : Ajax - ID:7 *****/\nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/search.php\"\nwlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")\n\nevalResponse(document.wlSource)\n// END WLIDE\n\n\n/***** WLIDE - Sleep - ID:8 *****/\nSleep(10811)\n// END WLIDE\n\n\n/***** WLIDE - URL : Ajax - ID:9 *****/\nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/search.php\"\nwlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")\n\nevalResponse(document.wlSource)\n// END WLIDE\n\n\n/***** WLIDE - Sleep - ID:10 *****/\nSleep(10640)\n// END WLIDE\n\n/***** WLIDE - URL : Ajax - ID:11 *****/\nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/search.php\"\nwlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")\n\nevalResponse(document.wlSource)\n// END WLIDE\n\n\n/***** WLIDE - Sleep - ID:12 *****/\nSleep(10655)\n// END WLIDE\n\n\n/***** WLIDE - URL : Ajax - ID:13 *****/\nwlHttp.Header[\"Referer\"] =\n\"http://www.webloadmpstore.com/search.php\"\nwlHttp.Get(\"http://www.webloadmpstore.com/usersonlinecounter.php\")\n\nevalResponse(document.wlSource)\n// END WLIDE\n</code></pre>"},{"location":"scripting/appendix_b/","title":"Appendix B: LiveConnect Overview","text":"<p>This appendix describes using LiveConnect technology to let Java and JavaScript code communicate with each other. LiveConnect is a registered trademark of Netscape Communications Corporation. This information is provided by Netscape, and can be found in the JavaScript Reference site at</p> <p>http://www.js-examples.com/page/reference  partjava.html).</p> <p>This appendix assumes you are familiar with Java programming. For additional information on LiveConnect, see the LiveConnect information on the Mozilla Developer Center (<code>&lt;http://developer.mozilla.org/en/docs/LiveConnect&gt;</code>).</p>"},{"location":"scripting/appendix_b/#working-with-wrappers","title":"Working with Wrappers","text":"<p>In JavaScript, a wrapper is an object of the target language data type that encloses an object of the source language. On the JavaScript side, you can use a wrapper object to access methods and fields of the Java object; calling a method or accessing a property on the wrapper results in a call on the Java object. On the Java side, JavaScript objects are wrapped in an instance of the class netscape.javascript.JSObject and passed to Java.</p> <p>When a JavaScript object is sent to Java, the runtime engine creates a Java wrapper of type JSObject. When a JSObject is sent from Java to JavaScript, the runtime engine unwraps the JSObject revealing the original JavaScript object type. The JSObject class provides an interface for invoking JavaScript methods and examining JavaScript properties.</p>"},{"location":"scripting/appendix_b/#javascript-to-java-communication","title":"JavaScript to Java Communication","text":"<p>When you refer to a Java package or class, or work with a Java object or array, you use one of the special LiveConnect objects. All JavaScript access to Java takes place with these objects, which are summarized in the following table.</p> Object Description JavaArray A wrapped Java array, accessed from within JavaScript code. JavaClass A JavaScript reference to a Java class. JavaObject A wrapped Java object, accessed from within JavaScript code. JavaPackage A JavaScript reference to a Java package. <p>Note: Because Java is a strongly typed language and JavaScript is weakly typed, the JavaScript runtime engine converts argument values into the appropriate data types for the other language when you use LiveConnect.</p> <p>In some ways, the existence of the LiveConnect objects is transparent, because you interact with Java in a fairly intuitive way. For example, you can create a Java String object and assign it to the JavaScript variable myString by using the new operator with the Java constructor, as follows:</p> <p><code>var myString = new java.lang.String(\"Hello world\")</code></p> <p>In the previous example, the variable myString is a JavaObject because it holds an instance of the Java object String. As a JavaObject, myString has access to the public instance methods of java.lang.String and its superclass, java.lang.Object. These Java methods are available in JavaScript as methods of the JavaObject, and you can call them as follows:</p> <p><code>myString.length() // returns 11</code></p>"},{"location":"scripting/appendix_b/#the-packages-object","title":"The Packages Object","text":"<p>If a Java class is not part of the java, sun, or netscape packages, you access it with the Packages object. For example, suppose the Redwood Corporation uses a Java package called redwood to contain various Java classes that it implements.</p> <p>To create an instance of the HelloWorld class in redwood, you access the constructor of the class as follows:</p> <p><code>var red = new Packages.redwood.HelloWorld()</code></p> <p>You can also access classes in the default package (that is, classes that don\u2019t explicitly name a package). For example, if the HelloWorld class is directly in the CLASSPATH and not in a package, you can access it as follows:</p> <p><code>var red = new Packages.HelloWorld()</code></p> <p>The LiveConnect java, sun, and netscape objects provide shortcuts for commonly used Java packages. For example, you can use the following:</p> <p><code>var myString = new java.lang.String(\"Hello world\")</code></p> <p>instead of the longer version:</p> <p><code>var myString = new Packages.java.lang.String(\"Hello world\")</code></p>"},{"location":"scripting/appendix_b/#working-with-java-arrays","title":"Working with Java Arrays","text":"<p>When any Java method creates an array and you reference that array in JavaScript, you are working with a JavaArray. For example, the following code creates the JavaArray x with ten elements of type int:</p> <p><code>x = java.lang.reflect.Array.newInstance(java.lang.Integer, 10)</code></p> <p>Like the JavaScript Array object, JavaArray has a length property that returns the number of elements in the array. Unlike Array.length, JavaArray.length is a read-only property, because the number of elements in a Java array are fixed at the time of creation.</p>"},{"location":"scripting/appendix_b/#package-and-class-references","title":"Package and Class References","text":"<p>Simple references to Java packages and classes from JavaScript create the JavaPackage and JavaClass objects. In the earlier example about the Redwood corporation, for example, the reference Packages.redwood is a JavaPackage object. Similarly, a reference such as java.lang.String is a JavaClass object.</p> <p>Most of the time, you don\u2019t have to worry about the JavaPackage and JavaClass objects\u2014you just work with Java packages and classes, and LiveConnect creates these objects transparently.</p> <p>In JavaScript 1.3 and earlier, JavaClass objects are not automatically converted to instances of java.lang.Class when you pass them as parameters to Java methods--you must create a wrapper around an instance of java.lang.Class. In the following example, the forName method creates a wrapper object theClass, which is then passed to the newInstance method to create an array.</p> <p><code>// JavaScript 1.3</code></p> <p><code>theClass = java.lang.Class.forName(\"java.lang.String\")</code> </p> <p><code>theArray = java.lang.reflect.Array.newInstance(theClass, 5)</code> </p> <p>In JavaScript 1.4 and later, you can pass a JavaClass object directly to a method, as shown in the following example:</p> <p><code>// JavaScript 1.4 theArray =</code></p> <p><code>java.lang.reflect.Array.newInstance(java.lang.String, 5)</code></p>"},{"location":"scripting/appendix_b/#arguments-of-type-char","title":"Arguments of Type Char","text":"<p>In JavaScript 1.4 and later, you can pass a one-character string to a Java method that requires an argument of type char. For example, you can pass the string \"H\" to the Character constructor as follows:</p> <p><code>c = new java.lang.Character(\"H\")</code></p> <p>In JavaScript 1.3 and earlier, you must pass such methods an integer that corresponds to the Unicode value of the character. For example, the following code also assigns the value \"H\" to the variable c:</p> <p><code>c = new java.lang.Character(72)</code></p>"},{"location":"scripting/appendix_b/#handling-java-exceptions-in-javascript","title":"Handling Java Exceptions in JavaScript","text":"<p>When Java code fails at run time, it throws an exception. If your JavaScript code accesses a Java data member or method and fails, the Java exception is passed on to JavaScript for you to handle. Beginning with JavaScript 1.4, you can catch this exception in a <code>try...catch</code> statement.</p> <p>For example, suppose you are using the Java <code>forName</code> method to assign the name of a Java class to a variable called <code>theClass</code>. The forName method throws an exception if the value you pass it does not evaluate to the name of a Java class. Place the <code>forName</code> assignment statement in a try block to handle the exception, as follows:</p> <pre><code>function getClass(javaClassName) { \n   try {\n       var theClass = java.lang.Class.forName(javaClassName);\n   } catch (e) {\n       return (\"The Java exception is \" + e);\n   }\n   return theClass\n}\n</code></pre> <p>In this example, if javaClassName evaluates to a legal class name, such as \"java.lang.String\", the assignment succeeds. If javaClassName evaluates to an invalid class name, such as \"String\", the getClass function catches the exception and returns something similar to the following:</p> <p>The <code>Java exception is java.lang.ClassNotFoundException: String</code> See Exception Handling Statements , for more information about JavaScript exceptions.</p>"},{"location":"scripting/appendix_b/#java-to-javascript-communication","title":"Java to JavaScript Communication","text":"<p>If you want to use JavaScript objects in Java, you must import the netscape.javascript package into your Java file. This package defines the following classes:</p> <ul> <li>netscape.javascript.JSObject allows Java code to access JavaScript methods and properties.</li> <li>netscape.javascript.JSException allows Java code to handle JavaScript errors.</li> </ul> <p>Starting with JavaScript 1.2, these classes are delivered in a <code>.jar</code> file; in previous versions of JavaScript, these classes are delivered in a <code>.zip</code> file. </p> <p>To access the LiveConnect classes, place the <code>.jar</code> or <code>.zip</code> file in the CLASSPATH of the JDK compiler in either of the following ways:</p> <ul> <li> <p>Create a CLASSPATH environment variable to specify the path and name of <code>.jar</code> or <code>.zip</code> file.</p> </li> <li> <p>Specify the location of <code>.jar</code> or <code>.zip</code> file when you compile by using the -classpath command line parameter.</p> </li> </ul> <p>For example, in Navigator 4.0 for Windows NT, the classes are delivered in the <code>java40.jar</code> file in the Program\\Java\\Classes directory beneath the Navigator directory.</p> <p>To specify an environment variable in Windows NT:</p> <ol> <li> <p>Double-click the System icon in the Control Panel.</p> </li> <li> <p>Create a user environment variable called CLASSPATH with a value similar to the following:</p> </li> </ol> <p><code>D:\\Navigator\\Program\\Java\\Classes\\java40.jar</code></p> <p>See the Sun JDK documentation for more information about CLASSPATH.</p> <p>Note: Because Java is a strongly typed language and JavaScript is weakly typed, the JavaScript runtime engine converts argument values into the appropriate data types for the other language when you use LiveConnect. See Data Type Conversions , for complete information.</p>"},{"location":"scripting/appendix_b/#using-the-liveconnect-classes","title":"Using the LiveConnect Classes","text":"<p>All JavaScript objects appear within Java code as instances of netscape.javascript.JSObject. When you call a method in your Java code, you can pass it a JavaScript object as one of its argument. To do so, you must define the corresponding formal parameter of the method to be of type JSObject.</p> <p>Also, any time you use JavaScript objects in your Java code, you should put the call to the JavaScript object inside a <code>try...catch</code> statement that handles exceptions of type netscape.javascript.JSException. This allows your Java code to handle errors in JavaScript code execution that appear in Java as exceptions of type JSException.</p>"},{"location":"scripting/appendix_b/#accessing-javascript-with-jsobject","title":"Accessing JavaScript with JSObject","text":"<p>For example, suppose you are working with the Java class called JavaDog. As shown in the following code, the JavaDog constructor takes the JavaScript object jsDog, which is defined as type JSObject, as an argument:</p> <pre><code>import netscape.javascript.\\*; \npublic class JavaDog\n{\n   public String dogBreed; \n   public String dogColor; \n   public String dogSex;\n\n   // define the class constructor \n   public JavaDog(JSObject jsDog)\n   {\n     // use try...catch to handle JSExceptions here\n     this.dogBreed = (String)jsDog.getMember(\"breed\"); \n     this.dogColor = (String)jsDog.getMember(\"color\"); \n     this.dogSex = (String)jsDog.getMember(\"sex\");\n     }\n}\n</code></pre> <p>Note: The getMember method of JSObject is used to access the properties of the JavaScript object. The previous example uses getMember to assign the value of the JavaScript property jsDog.breed to the Java data member JavaDog.dogBreed.</p> <p>A more realistic example would place the call to getMember inside a <code>try...catch</code> statement to handle errors of type JSException. See Handling JavaScript Exceptions in Java, for more information.</p> <p>To get a better sense of how getMember works, look at the definition of the custom JavaScript object Dog:</p> <pre><code>function Dog(breed,color,sex) \n{ \n   this.breed = breed \n   this.color = color\n   this.sex = sex\n}\n</code></pre> <p>You can create a JavaScript instance of Dog called gabby as follows:</p> <p><code>gabby = new Dog(\"lab\",\"chocolate\",\"female\")</code></p> <p>If you evaluate gabby.color, you can see that it has the value \"chocolate\". Now suppose you create an instance of JavaDog in your JavaScript code by passing the gabby object to the constructor as follows:</p> <p><code>javaDog = new Packages.JavaDog(gabby)</code></p> <p>If you evaluate javaDog.dogColor, you can see that it also has the value \"chocolate\", because the getMember method in the Java constructor assigns dogColor the value of gabby.color.</p>"},{"location":"scripting/appendix_b/#handling-javascript-exceptions-in-java","title":"Handling JavaScript Exceptions in Java","text":"<p>When JavaScript code called from Java fails at run time, it throws an exception. If you are calling the JavaScript code from Java, you can catch this exception in a <code>try...catch</code> statement. The JavaScript exception is available to your Java code as an instance of netscape.javascript.JSException.</p> <p>JSException is a Java wrapper around any exception type thrown by JavaScript, similar to the way that instances of JSObject are wrappers for JavaScript objects. Use JSException when you are evaluating JavaScript code in Java.</p> <p>When you are evaluating JavaScript code in Java, the following situations can cause run-time errors:</p> <ul> <li>The JavaScript code is not evaluated, either due to a JavaScript compilation error or to some other error that occurred at run time.</li> </ul> <p>The JavaScript interpreter generates an error message that is converted into an instance of JSException.</p> <ul> <li>Java successfully evaluates the JavaScript code, but the JavaScript code executes an unhandled throw statement.</li> </ul> <p>JavaScript throws an exception that is wrapped as an instance of JSException. Use the getWrappedException method of JSException to unwrap this exception in Java.</p> <p>For example, suppose the Java object eTest evaluates the string jsCode that you pass to it. You can respond to either type of run-time error the evaluation causes by implementing an exception handler such as the following:</p> <pre><code>import netscape.javascript.JSObject; \nimport netscape.javascript.JSException;\n\npublic class eTest {\n   public static Object doit(JSObject obj, String jsCode) {\n   try {\n       obj.eval(jsCode);\n   } catch (JSException e) {\n       if (e.getWrappedException()==null) \n       return e;\n      return e.getWrappedException();\n   } \n   return null;\n }\n}\n</code></pre> <p>In this example, the code in the try block attempts to evaluate the string jsCode that you pass to it. Let\u2019s say you pass the string \"<code>myFunction()</code>\" as the value of jsCode. If myFunction is not defined as a JavaScript function, the JavaScript interpreter cannot evaluate jsCode. The interpreter generates an error message, the Java handler catches the message, and the doit method returns an instance of netscape.javascript.JSException.</p> <p>However, suppose myFunction is defined in JavaScript as follows:</p> <pre><code>function myFunction() { \n   try {\n    if (theCondition == true) { \n        return \"Everything\u2019s ok\";\n    } else {\n          throw \"JavaScript error occurred\" ;\n   } \n   } catch (e) {\n     if (canHandle == true) { \n         handleIt();\n     } else {\n         throw e;\n     }\n   }\n}\n</code></pre> <p>If theCondition is false, the function throws an exception. The exception is caught in the JavaScript code, and if canHandle is true, JavaScript handles it. If canHandle is false, the exception is rethrown, the Java handler catches it, and the doit method returns a Java string:</p> <p><code>JavaScript error occurred</code></p> <p>See Exception Handling Statements , for complete information about JavaScript exceptions.</p>"},{"location":"scripting/appendix_b/#backward-compatibility","title":"Backward Compatibility","text":"<p>In JavaScript 1.3 and earlier versions, the JSException class had three public constructors that optionally took a string argument, specifying the detail message or other information for the exception. The getWrappedException method was not available.</p> <p>Use a try...catch statement such as the following to handle LiveConnect exceptions in JavaScript 1.3 and earlier versions:</p> <pre><code>try {\n   global.eval(\"foo.bar = 999;\");\n} catch (Exception e) {\n  if (e instanceof JSException) { \n     jsCodeFailed()\";\n} else {\n     otherCodeFailed();\n  }\n}\n</code></pre> <p>In this example, the eval statement fails if foo is not defined. The catch block executes the jsCodeFailed method if the eval statement in the try block throws a JSException; the otherCodeFailed method executes if the try block throws any other error.</p>"},{"location":"scripting/appendix_b/#data-type-conversions","title":"Data Type Conversions","text":"<p>Because Java is a strongly typed language and JavaScript is weakly typed, the JavaScript runtime engine converts argument values into the appropriate data types for the other language when you use LiveConnect.</p>"},{"location":"scripting/appendix_b/#javascript-to-java-conversions","title":"JavaScript to Java Conversions","text":"<p>When you call a Java method and pass it parameters from JavaScript, the data types of the parameters you pass in are converted according to the rules described in the following sections:</p> <ul> <li>Number Values </li> <li>Boolean Values </li> <li>String Values </li> <li>Undefined Values </li> <li>Null Values </li> <li>JavaArray and JavaObject Objects </li> <li>JavaClass Objects </li> <li>Other JavaScript Objects </li> </ul> <p>The return values of methods of netscape.javascript.JSObject are always converted to instances of java.lang.Object. The rules for converting these return values are also described in these sections.</p> <p>For example, if JSObject.eval returns a JavaScript number, you can find the rules for converting this number to an instance of java.lang.Object in Number Values .</p>"},{"location":"scripting/appendix_b/#number-values","title":"Number Values","text":"<p>When you pass JavaScript number types as parameters to Java methods, Java converts the values according to the rules described in the following table:</p> Java parameter type Conversion rules double The exact value is transferred to Java without rounding and without a loss of magnitude or sign. lava.lang.Double java.lang.Object A new instance of java.lang.Double is created, and the exact value is transferred to Java without rounding and without a loss of magnitude or sign. float <p>Values are rounded to float precision.</p><p>Values that are unrepresentably large or small are rounded to +infinity or -infinity.</p> <p>byte    char</p><p>int  long short</p> <p>Values are rounded using round-to-negative- infinity mode.</p><p>Values that are unrepresentably large or small result in a run-time error.</p><p>NaN values are converted to zero.</p> java.lang.String <p>Values are converted to strings. For example:</p><p>237 becomes \"237\"</p> boolean <p>0 and NaN values are converted to false.</p><p>Other values are converted to true.</p> <p>When a JavaScript number is passed as a parameter to a Java method that expects an instance of java.lang.String, the number is converted to a string. Use the == operator to compare the result of this conversion with other string values.</p>"},{"location":"scripting/appendix_b/#boolean-values","title":"Boolean Values","text":"<p>When you pass JavaScript Boolean types as parameters to Java methods, Java converts the values according to the rules described in the following table:</p> Java parameter type Conversion rules boolean All values are converted directly to the Java equivalents. lava.lang.Boolean java.lang.Object A new instance of java.lang.Boolean is created. Each parameter creates a new instance, not one instance with the same primitive value. java.lang.String <p>Values are converted to strings. For example: true becomes \"true\"</p><p>false becomes \"false\"</p> <p>byte    char</p><p>double   float</p><p>int long short</p> <p>true becomes 1</p><p>false becomes 0</p> <p>When a JavaScript Boolean is passed as a parameter to a Java method that expects an instance of java.lang.String, the Boolean is converted to a string. Use the == operator to compare the result of this conversion with other string values.</p>"},{"location":"scripting/appendix_b/#string-values","title":"String Values","text":"<p>When you pass JavaScript string types as parameters to Java methods, Java converts the values according to the rules described in the following table:</p> Java parameter type Conversion rules lava.lang.String java.lang.Object <p>JavaScript 1.4:</p><p>A JavaScript string is converted to an instance of java.lang.String with a Unicode value.</p><p>JavaScript 1.3 and earlier:</p><p>A JavaScript string is converted to an instance of java.lang.String with an ASCII value.</p> <p>byte    double</p><p>float  int</p><p>long  short</p> All values are converted to the appropriate numbers. char <p>JavaScript 1.4:</p><p>One-character strings are converted to Unicode characters.</p><p>All other values are converted to numbers. JavaScript 1.3 and earlier:</p><p>All values are converted to numbers.</p> boolean <p>The empty string becomes false.</p><p>All other values become true.</p>"},{"location":"scripting/appendix_b/#undefined-values","title":"Undefined Values","text":"<p>When you pass undefined JavaScript values as parameters to Java methods, Java converts the values according to the rules described in the following table:</p> Java parameter type Conversion rules lava.lang.String java.lang.Object The value is converted to an instance of java.lang.String whose value is the string \"undefined\". boolean The value becomes false. double float The value becomes NaN. <p>byte    char</p><p>int  long Short</p> The value becomes 0. <p>The undefined value conversion is possible in JavaScript 1.3 and later versions only. Earlier versions of JavaScript do not support undefined values.</p> <p>When a JavaScript undefined value is passed as a parameter to a Java method that expects an instance of java.lang.String, the undefined value is converted to a string. Use the == operator to compare the result of this conversion with other string values.</p>"},{"location":"scripting/appendix_b/#null-values","title":"Null Values","text":"<p>When you pass null JavaScript values as parameters to Java methods, Java converts the values according to the rules described in the following table:</p> Java parameter type Conversion rules Any class, any interface type The value becomes null. <p>byte        char double         float int   long</p><p>short</p> The value becomes 0. boolean The value becomes false."},{"location":"scripting/appendix_b/#javaarray-and-javaobject-objects","title":"JavaArray and JavaObject Objects","text":"<p>In most situations, when you pass a JavaScript JavaArray or JavaObject as a parameter to a Java method, Java simply unwraps the object; in a few situations, the object is coerced into another data type according to the rules described in the following table:</p> <p>Table: JavaArray and JavaObject type conversion rules</p> Java parameter type Conversion rules Any interface or class that is assignment-compatible with the unwrapped object. The object is unwrapped. java.lang.String The object is unwrapped, the toString method of the unwrapped Java object is called, and the result is returned as a new instance of java.lang.String. <p>byte    char</p><p>double   float</p><p>int long short</p> <p>The object is unwrapped, and either of the following situations occur:</p><p>- If the unwrapped Java object has a doubleValue method, the JavaArray or JavaObject is converted to the value returned by this method.</p><p>- If the unwrapped Java object does not have a</p><p>\u2003doubleValue method, an error occurs.</p> boolean <p>In JavaScript 1.3 and later versions, the object is unwrapped and either of the following situations occur:</p><p>- If the object is null, it is converted to false.</p><p>- If the object has any other value, it is converted to true.</p><p>In JavaScript 1.2 and earlier versions, the object is unwrapped and either of the following situations occur:</p><p>- If the unwrapped object has a booleanValue method, the source object is converted to the return value.</p><p>- If the object does not have a booleanValue</p><p>\u2003method, the conversion fails.</p> <p>An interface or class is assignment-compatible with an unwrapped object if the unwrapped object is an instance of the Java parameter type. That is, the following statement must return true:</p> <p><code>*unwrappedObject* instanceof *parameterType*</code></p>"},{"location":"scripting/appendix_b/#javaclass-objects","title":"JavaClass Objects","text":"<p>When you pass a JavaScript JavaClass object as a parameter to a Java method, Java converts the object according to the rules described in the following table:</p> Java parameter type Conversion rules java.lang.Class The object is unwrapped. <p>java.lang.JSObject</p><p>java.lang.Object</p> The JavaClass object is wrapped in a new instance of java.lang.JSObject. java.lang.String The object is unwrapped, the toString method of the unwrapped Java object is called, and the result is returned as a new instance of java.lang.String. boolean <p>In JavaScript 1.3 and later versions, the object is unwrapped and either of the following situations occur:</p><p>- If the object is null, it is converted to false.</p><p>- If the object has any other value, it is converted to true.</p><p>In JavaScript 1.2 and earlier versions, the object is unwrapped and either of the following situations occur:</p><p>- If the unwrapped object has a booleanValue method, the source object is converted to the return value.</p><p>- If the object does not have a booleanValue method, the conversion fails.</p>"},{"location":"scripting/appendix_b/#other-javascript-objects","title":"Other JavaScript Objects","text":"<p>When you pass any other JavaScript object as a parameter to a Java method, Java converts the object according to the rules described in the following table:</p> Java parameter type Conversion rules <p>java.lang.JSObject</p><p>java.lang.Object</p> The object is wrapped in a new instance of java.lang.JSObject. java.lang.String The object is unwrapped, the toString method of the unwrapped Java object is called, and the result is returned as a new instance of java.lang.String. <p>byte    char</p><p>Double   float</p><p>int long</p><p>short</p> The object is converted to an appropriate value using the logic of the ToPrimitive operator. The PreferredType hint used with this operator is Number. boolean <p>In JavaScript 1.3 and later versions, the object is unwrapped and either of the following situations occur:</p><p>- If the object is null, it is converted to false.</p><p>- If the object has any other value, it is converted to true.</p><p>In JavaScript 1.2 and earlier versions, the object is unwrapped and either of the following situations occur:</p><p>- If the unwrapped object has a booleanValue method, the source object is converted to the return value.</p><p>- If the object does not have a booleanValue</p><p>\u2003method, the conversion fails.</p>"},{"location":"scripting/appendix_b/#java-to-javascript-conversions","title":"Java to JavaScript Conversions","text":"<p>Values passed from Java to JavaScript are converted as follows:</p> <ul> <li>Java byte, char, short, int, long, float, and double are converted to JavaScript numbers.</li> <li>A Java Boolean is converted to a JavaScript Boolean.</li> <li>An object of class netscape.javascript.JSObject is converted to the original JavaScript object.</li> <li>Java arrays are converted to a JavaScript pseudo-Array object; this object behaves just like a JavaScript Array object: you can access it with the syntax arrayName[index] (where index is an integer), and determine its length with arrayName.length.</li> <li>A Java object of any other class is converted to a JavaScript wrapper, which can be used to access methods and fields of the Java object:<ul> <li>Converting this wrapper to a string calls the toString method on the original object.</li> <li>Converting to a number calls the doubleValue method, if possible, and fails otherwise.</li> <li>Converting to a Boolean in JavaScript 1.3 and later versions returns false if the object is null, and true otherwise.</li> <li>Converting to a Boolean in JavaScript 1.2 and earlier versions calls the booleanValue method, if possible, and fails otherwise.</li> </ul> </li> </ul> <p>Note: Instances of <code>java.lang.Double</code> and <code>java.lang.Integer</code> are converted to JavaScript objects, not to JavaScript numbers. Similarly, instances of java.lang.String are also converted to JavaScript objects, not to JavaScript strings.</p> <p>Java String objects also correspond to JavaScript wrappers. If you call a JavaScript method that requires a JavaScript string and pass it this wrapper, you\u2019ll get an error. Instead, convert the wrapper to a JavaScript string by appending the empty string to it, as shown here:</p> <p><code>var JavaString = JavaObj.methodThatReturnsAString();</code></p> <p><code>var JavaScriptString = JavaString + \"\";</code></p>"},{"location":"scripting/appendix_b/#exception-handling-statements","title":"Exception Handling Statements","text":"<p>You can throw and catch exceptions using the throw and <code>try...catch</code> statements. You also use the <code>try...catch</code> statement to handle Java exceptions. See Handling Java Exceptions in JavaScript , and Handling JavaScript Exceptions in Java , for information.</p>"},{"location":"scripting/appendix_b/#the-throw-statement","title":"The Throw Statement","text":"<p>Use the <code>throw</code> statement to throw an exception. When you throw an exception, you specify an expression containing the value of the exception:</p> <p><code>throw expression</code></p> <p>The following code throws several exceptions.</p> <p><pre><code>throw \"Error2\"  // generates an exception with a string value \nthrow 42    // generates an exception with the value 42 \nthrow true  // generates an exception with the value true\n</code></pre> You can specify an object when you throw an exception. You can then reference the object\u2019s properties in the <code>catch</code> block. The following example creates an object <code>myUserException</code> of type <code>UserException</code> and uses it in a throw statement.</p> <pre><code>// Create an object type UserException \nfunction UserException (message) {\n    this.message=message \n    this.name=\"UserException\"\n}\n// Create an instance of the object type and throw \n// it myUserException=new UserException(\"Value too \n// high\") throw myUserException\n</code></pre>"},{"location":"scripting/appendix_b/#the-trycatch-statement","title":"The Try...Catch Statement","text":"<p>The <code>try...catch</code> statement marks a block of statements to try, and specifies a response should an exception be thrown. If an exception is thrown, the <code>try...catch</code> statement catches it.</p> <p>Note: There are some exceptions that are not caught with the <code>try...catch</code> statement. This includes the HTTP errors, which are thrown by the HTTP server.</p> <p>The <code>try...catch</code> statement consists of the following:</p> <ul> <li>A <code>try</code> block, which contains one or more statements.</li> <li>A <code>catch</code> block, containing statements that specify what to do if an exception is thrown in the <code>try</code> block.</li> </ul> <p>That is, you want the try block to succeed, and if it does not succeed, you want control to pass to the catch block.</p> <p>If any statement within the <code>try</code> block (or in a function called from within the <code>try</code> block) throws an exception, control immediately shifts to the <code>catch</code> block. If no exception is thrown in the <code>try</code> block, the <code>catch</code> block is skipped.</p> <ul> <li>The <code>finally</code> block executes after the <code>try</code> and catch blocks execute but before the statements following the <code>try...catch</code> statement.</li> </ul> <p>The following example uses a <code>try...catch</code> statement. The example calls a function that retrieves a month name from an array based on the value passed to the function. If the value does not correspond to a month number (1-12), an exception is thrown with the value <code>\"InvalidMonthNo\"</code> and the statements in the <code>catch</code> block set the <code>monthName</code> variable to <code>\"unknown\"</code>.</p> <pre><code>function getMonthName (mo) {\n// Adjust month number for array index (1=Jan, 12=Dec) \nmo=mo-1\nvar months=new Array (\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\n   \"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\nif (months[mo] != null) {\n   return months[mo]\n} else {\n     throw \"InvalidMonthNo\"\n  }\n}\ntry {\n// statements to try \nmonthName=getMonthName(myMonth)\n// function could throw exception\n}\ncatch (e) { \n   monthName=\"unknown\" \n   logMyErrors(e)\n   // pass exception object to error handler\n}\n</code></pre>"},{"location":"scripting/appendix_b/#the-catch-block","title":"The Catch Block","text":"<p>Use the <code>try...catch</code> statement\u2019s <code>catch</code> block (recovery block) to execute error- handling code. A <code>catch</code> block looks as follows:</p> <pre><code>catch (catchID) { \n   statements\n}\n</code></pre> <p>Every <code>catch</code> block specifies an identifier (<code>catchID</code> in the preceding syntax) that holds the value specified by the <code>throw</code> statement; you can use this identifier to get information about the exception that was thrown. JavaScript creates this identifier when the <code>catch</code> block is entered; the identifier lasts only for the duration of the <code>catch</code> block; after the <code>catch</code> block finishes executing, the identifier is no longer available.</p> <p>For example, the following code throws an exception. When the exception occurs, control transfers to the <code>catch</code> block.</p> <pre><code>try {\n   throw \"myException\" // generates an exception\n}\ncatch (e) {\n// statements to handle any exceptions\nlogMyErrors(e) // pass exception object to error handler\n}\n</code></pre>"},{"location":"scripting/appendix_b/#the-finally-block","title":"The Finally Block","text":"<p>The <code>finally</code> block contains statements to execute after the <code>try</code> and <code>catch</code> blocks execute but before the statements following the <code>try...catch</code> statement. The <code>finally</code> block executes whether or not an exception is thrown. If an exception is thrown, the statements in the <code>finally</code> block execute even if no <code>catch</code> block handles the exception.</p> <p>You can use the <code>finally</code> block to make your script fail gracefully when an exception occurs; for example, you may need to release a resource that your script has tied up. The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the <code>finally</code> block closes the file before the script fails.</p> <pre><code>try {\n   openMyFile() // tie up a resource \n   writeMyFile(theData)\n   }\nfinally {\n   closeMyFile() // always close the resource\n}\n</code></pre>"},{"location":"scripting/appendix_b/#nesting-trycatch-statements","title":"Nesting Try...Catch Statements","text":"<p>You can nest one or more try...catch statements. If an inner try...catch statement does not have a catch block, the enclosing try...catch statement\u2019s catch block is checked for a match.</p>"},{"location":"scripting/appendix_b/#jsexception-and-jsobject-classes","title":"JSException and JSObject Classes","text":"<p>This section describes the JSException and JSObject Classes.</p>"},{"location":"scripting/appendix_b/#jsexception-class","title":"JSException Class","text":"<p>The public class JSException extends RuntimeException.</p> <pre><code>java.lang.Object\n   |\n     +---java.lang.Throwable\n        |\n        +---java.lang.Exception\n            |\n            +---java.lang.RuntimeException\n                |\n                +----netscape.javascript.JSException\n</code></pre>"},{"location":"scripting/appendix_b/#description","title":"Description","text":"<p>JSException is an exception that is thrown when JavaScript code returns an error.</p>"},{"location":"scripting/appendix_b/#constructor-summary","title":"Constructor Summary","text":"<p>The netscape.javascript.JSException class has the following constructors:</p> <p>Table: JSException constructors</p> Constructor Description JSException Deprecated constructors optionally let you specify a detail message and other information."},{"location":"scripting/appendix_b/#method-summary","title":"Method Summary","text":"<p>The netscape.javascript.JSException class has the following method:</p> Method Description GetWrappedException Instance method getWrappedException. <p>The following sections show the declaration and usage of the constructors and method.</p>"},{"location":"scripting/appendix_b/#backward-compatibility_1","title":"Backward Compatibility","text":"<p>JavaScript 1.1 through 1.3. JSException had three public constructors that optionally took a string argument, specifying the detail message or other information for the exception. The getWrappedException method was not available.</p>"},{"location":"scripting/appendix_b/#jsexception-constructor","title":"JSException Constructor","text":"<p>Constructors, deprecated in JavaScript 1.4. Construct a JSException with an optional detail message.</p> <p>Declaration</p> <ol> <li>public JSException()</li> <li>public JSException(String s)</li> <li> <p>public JSException(String s, String filename,</p> <p>int lineno,   String source,   int tokenIndex)</p> </li> </ol> <p>Arguments</p> Argument Name Description s The detail message. filename The URL of the file where the error occurred, if possible. lineno The line number if the file, if possible. source The string containing the JavaScript code being evaluated. tokenIndex The index into the source string where the error occurred."},{"location":"scripting/appendix_b/#getwrappedexception","title":"GetWrappedException","text":"<p>Instance method <code>getWrappedException</code>.</p> <p>Declaration</p> <p><code>public Object getWrappedException()</code></p>"},{"location":"scripting/appendix_b/#jsobject-class","title":"JSObject Class","text":"<p>The public final class netscape.javascript.JSObject extends Object.</p> <pre><code>java.lang.Object\n\n    |\n    +   netscape.javascript.JSObject\n</code></pre>"},{"location":"scripting/appendix_b/#description_1","title":"Description","text":"<p>JavaScript objects are wrapped in an instance of the class netscape.javascript.JSObject and passed to Java. JSObject allows Java to manipulate JavaScript objects.</p> <p>When a JavaScript object is sent to Java, the runtime engine creates a Java wrapper of type JSObject; when a JSObject is sent from Java to JavaScript, the runtime engine unwraps it to its original JavaScript object type. The JSObject class provides a way to invoke JavaScript methods and examine JavaScript properties.</p> <p>Any JavaScript data brought into Java is converted to Java data types. When the JSObject is passed back to JavaScript, the object is unwrapped and can be used by JavaScript code. See Data Type Conversions , for more information about data type conversions.</p>"},{"location":"scripting/appendix_b/#method-summary_1","title":"Method Summary","text":"<p>The netscape.javascript.JSObject class has the following methods:</p> Method Description call Calls a JavaScript method. equals Determines if two JSObject objects refer to the same instance. eval Evaluates a JavaScript expression. getMember Retrieves the value of a property of a JavaScript object. getSlot Retrieves the value of an array element of a JavaScript object. removeMember Removes a property of a JavaScript object. setMember Sets the value of a property of a JavaScript object. setSlot Sets the value of an array element of a JavaScript object. toString Converts a JSObject to a string. <p>Static Method</p> getWindow Gets a JSObject for the window containing the given applet. <p>The following sections describe the declaration and usage of these methods.</p>"},{"location":"scripting/appendix_b/#call","title":"call","text":"<p>Method. Calls a JavaScript method. Equivalent to</p> <p><code>\"this.methodName(args[0], args[1], ...)\" in JavaScript.</code></p> <p>Declaration</p> <p><code>public Object call(String methodName, Object args[])</code></p>"},{"location":"scripting/appendix_b/#equals","title":"equals","text":"<p>Method. Determines if two <code>JSObject</code> objects refer to the same instance. Overrides: equals in class <code>java.lang.Object</code></p> <p>Declaration</p> <p><code>public boolean equals(Object obj)</code></p> <p>Backward compatibility</p> <p>JavaScript 1.3. In JavaScript 1.3 and earlier versions, you can use either the equals method of java.lang.Object or the == operator to evaluate two JSObject objects.</p>"},{"location":"scripting/appendix_b/#eval","title":"eval","text":"<p>Method. Evaluates a JavaScript expression. The expression is a string of JavaScript source code that will be evaluated in the context given by \"this\".</p> <p>Declaration</p> <p><code>public Object eval(String s)</code></p>"},{"location":"scripting/appendix_b/#getmember","title":"getMember","text":"<p>Method. Retrieves the value of a property of a JavaScript object. Equivalent to \"this.name\" in JavaScript.</p> <p>Declaration</p> <p><code>public Object getMember(String name)</code></p>"},{"location":"scripting/appendix_b/#getslot","title":"getSlot","text":"<p>Method. Retrieves the value of an array element of a JavaScript object. Equivalent to \"this[index]\" in JavaScript.</p> <p>Declaration</p> <p><code>public Object getSlot(int index)</code></p>"},{"location":"scripting/appendix_b/#getwindow","title":"getWindow","text":"<p>Static method. Returns a JSObject for the window containing the given applet. This method is useful in client-side JavaScript only.</p> <p>Declaration</p> <p><code>public static JSObject getWindow(Applet applet)</code></p>"},{"location":"scripting/appendix_b/#removemember","title":"removeMember","text":"<p>Method. Removes a property of a JavaScript object.</p> <p>Declaration</p> <p><code>public void removeMember(String name)</code></p>"},{"location":"scripting/appendix_b/#setmember","title":"setMember","text":"<p>Method. Sets the value of a property of a JavaScript object. Equivalent to \"this.name = value\" in JavaScript.</p> <p>Declaration</p> <p><code>public void setMember(String name, Object value)</code></p>"},{"location":"scripting/appendix_b/#setslot","title":"setSlot","text":"<p>Method. Sets the value of an array element of a JavaScript object. Equivalent to \"this[index] = value\" in JavaScript.</p> <p>Declaration</p> <p><code>public void setSlot(int index, Object value)</code></p>"},{"location":"scripting/appendix_b/#tostring","title":"toString","text":"<p>Method. Converts a JSObject to a String. Overrides: toString in class java.lang.Object</p> <p>Declaration</p> <p><code>public String toString()</code></p>"},{"location":"scripting/introduction/","title":"Introduction","text":"<p>Welcome to WebLOAD, the premier performance, scalability, and reliability testing solution for internet applications.</p> <p>WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic.</p> <p>This section provides a brief introduction to WebLOAD technical support, including both documentation and online support.</p>"},{"location":"scripting/programming_your_javascript/","title":"Programming your JavaScript script","text":"<p>WebLOAD functions on many different levels. WebLOAD Recorder provides a wide range of testing tools and features, ranging from basic tools that are available through a simple graphic user interface, to features that require only a small amount of script \u2018tweaking\u2019, to complex functionality that assumes a sophisticated understanding of programming techniques. Beginning users may take advantage of the basic WebLOAD Recorder tool set without ever understanding exactly how these features are implemented. Most WebLOAD testing features and configuration settings are handled automatically by WebLOAD and never require any manual intervention. These GUI- only features are described in the WebLOAD Recorder User Guide.</p>"},{"location":"scripting/programming_your_javascript/#understanding-javascript-scripts","title":"Understanding JavaScript scripts","text":"<p>This chapter focuses on the options available to users who wish to customize their recorded scripts and are comfortable looking at, and possibly giving a small \u2018tweak\u2019 to the JavaScript code within script files. Major programming skills are not required for the tools in this chapter. A basic understanding of programming logic, an introduction to the internals of script files, and careful reading of the examples provided are enough to get started using the tools documented here.</p> <p>Note: The topics presented in this chapter include fragments of JavaScript script code. To view the JavaScript code of a script, select JavaScript View from the toolbar or drop- down View menu. This opens a JavaScript View pane that automatically displays the JavaScript code corresponding to any item highlighted in the Script Tree.</p> <p>The WebLOAD Recorder tools described in the rest of this manual involve some degree of intervention within the JavaScript code of a script. Users will have an easier time working with these tools if they have a basic understanding of JavaScript scripts. This chapter therefore begins with a description of the components, structure, and grammar of JavaScript scripts.</p>"},{"location":"scripting/programming_your_javascript/#what-are-javascript-scripts","title":"What are JavaScript scripts?","text":"<p>WebLOAD tests applications by running JavaScript scripts that simulate the actions of real users. You don\u2019t have to be familiar with the JavaScript language to work with</p> <p>WebLOAD and WebLOAD Recorder, and test applications. JavaScript scripts are recorded through WebLOAD Recorder. As you execute a typical sequence of activities, WebLOAD Recorder records the HTTP protocol level traffic that is generated by the Web browser according to your accesses. By the conclusion of your recording session, a complete JavaScript script file is created.</p> <p>The basic \u2018Building Blocks\u2019 of a recording session are HTTP requests, which are triggered by user actions. Each time a user navigates to a new URL or submits a form, the browser emits an HTTP method and the resulting HTTP request is recorded.</p> <p>Externally, user activities (at the protocol level) are represented on the WebLOAD Recorder desktop by a set of clear, intuitive icons and visual devices arranged in a visual Script Tree. Internally, WebLOAD Recorder automatically creates JavaScript scripts that act as scripts, recreating the HTTP traffic created by the actions of the original user during later test sessions.</p> <p>Most users begin application testing by simply recording and then running a series of basic scripts, without ever looking into a script\u2019s internal Building Blocks to see the actual JavaScript code inside. As their understanding of the WebLOAD Recorder tool set grows, many users decide to expand or tailor their original set of scripts to meet a particular testing need, adding customized features that sometimes require some editing of the JavaScript code within the script itself. WebLOAD Recorder offers a wide range of features and options, for users who wish to add more functionality to their scripts, rather than simply replaying the same set of HTTP methods exactly as originally recorded. Many of these tools are available through the WebLOAD Recorder GUI and do not require any additional programming skills. These tools are documented in the WebLOAD Recorder User Guide. The more complex tools that require some familiarity with JavaScript programming are described in the remaining chapters of this guide, with detailed syntax specifications provided in the WebLOAD JavaScript Reference Guide.</p> <p>Test session scripts are written in JavaScript. JavaScript is an object-oriented scripting language originally developed by Netscape Communications Corporation and is currently maintained by the Mozilla Foundation. JavaScript is best known for its use in conjunction with HTML to automate World Wide Web pages. However, JavaScript is actually a full-featured programming language that can be used for many purposes besides Web automation. WebLOAD and WebLOAD Recorder have chosen JavaScript as the scripting language for test session scripts. WebLOAD Recorder JavaScript scripts combine the ease and simplicity of WebLOAD\u2019s visual, intuitive programming environment with the flexibility and power of JavaScript object-oriented programming.</p>"},{"location":"scripting/programming_your_javascript/#script-tree-structure","title":"Script Tree Structure","text":""},{"location":"scripting/programming_your_javascript/#script-tree-nodes","title":"Script Tree Nodes","text":"<p>JavaScript scripts are represented on the WebLOAD Recorder desktop by a script Tree. Each item that appears in the Script Tree is a script node. As you work in your application during a recording session, WebLOAD Recorder adds nodes to the Script Tree. Each node in the Script Tree represents a single user action at the HTTP protocol level, such as submitting a form or navigating to a new URL. Script Tree nodes provide an intuitive, graphic representation of the underlying JavaScript code that actually implements the user activities to be recreated at run time.</p> <p>The following figure illustrates a typical Script Tree fragment:</p> <p></p> <p>Script Tree nodes are arranged sequentially. The sequential arrangement of icons in the Script Tree means that icons appear in the Script Tree in the order in which the user actions and HTTP methods occurred when originally recorded. URL nodes in a script Tree will appear in the order in which the browser requested each Web page over the course of a recording session. In cases where the browser emits asynchronous requests (for example, while using AJAX), the requests are recorded and appear in the Script Tree in the order that the browser emitted them.</p> <p>Note: WebLOAD Recorder offers users a wide range of tools and features that can add very powerful functionality to a testing script. While users are certainly encouraged to incorporate these tools in their Script Tree, users must also be careful when editing URL nodes in the Script Tree. Because the order of HTTP activities within a script is so significant, changing the sequence of URLs in the Script Tree in effect means changing the sequence of activities, and may destroy the functionality of the script. </p>"},{"location":"scripting/programming_your_javascript/#script-program-structure","title":"script Program Structure","text":"<p>After a user has finished recording a typical session with the system under test, WebLOAD Recorder saves a complete record of all user activities at the protocol level and converts the user activity information to a JavaScript script. This script can be run repeatedly, with a variety of testing configurations, until the user is satisfied that the system has been thoroughly tested. The script created by the WebLOAD Recorder JavaScript interpreter has the following underlying structure.</p>"},{"location":"scripting/programming_your_javascript/#main-script","title":"Main Script","text":"<p>The main script contains JavaScript code representing the user activities at the protocol level to be simulated during a test session. The main script is required. Without it, WebLOAD and WebLOAD Recorder cannot run a test.</p> <p>The main script is constructed and based on an exact recording of the specific sequence of user activities, such as the following, which are completed during a recording session:</p> <ul> <li>Web page navigations</li> <li>Form submissions</li> <li>User think time (sleep)</li> </ul> <p>In addition to the original recording session activities, users may also add other features to the script, such as messages or pause and sleep times. These features are usually added through WebLOAD Recorder. WebLOAD executes the main script repeatedly, presenting the results in a series of analysis reports produced at the end of testing sessions.</p>"},{"location":"scripting/programming_your_javascript/#initialization-and-termination-functions","title":"Initialization and Termination Functions","text":"<p>These are JavaScript functions that WebLOAD or WebLOAD Recorder executes once, in a fixed sequence, before or after the main script. These functions are used to prepare for or clean up from a testing session. The following functions are automatically included in the script when needed:</p> <ul> <li><code>InitAgenda()</code>\u2014 Initialize global objects shared by all WebLOAD Recorder clients that run the script.</li> <li><code>InitClient()</code>\u2014 Initialize local objects and variables for individual clients.</li> <li><code>TerminateClient()</code>\u2014 Free resources of individual clients.</li> <li><code>TerminateAgenda()</code>\u2014 Free global resources shared by all clients running the script.</li> <li><code>OnScriptAbort()</code>\u2014 Executes user-defined code to free resources whenever the script stops the execution of a round (ErrorMessage), a session (SevereErrorMessage), or in the event of an error. In addition, OnScriptAbort() is called in the Console whenever the script stops abruptly. This occurs when the end of a scheduled session is in the middle of a round, or when a user manually stops the session.</li> <li><code>OnErrorTerminateClient()</code>\u2014 Clean up and free resources after a runtime error (per client).</li> <li><code>OnErrorTerminateAgenda()</code>\u2014 Clean up and free resources after a runtime error (per script).</li> </ul> <p>The initialization and termination functions are not part of the WebLOAD performance test. WebLOAD does not include the operations of these functions in the performance statistics.</p> <p>Use the initialization and termination functions to create or free objects or to set global variables. Besides these tasks, the functions may contain other JavaScript statements and may call other functions in your script. The termination functions are used both when a test session finishes successfully, and when it is terminated early by an error.</p> <p>Initialization and termination functions may be added directly to the code in a script through the IntelliSense Editor, as described Editing the JavaScript Code.</p> <p>To bring up a list of available functions:</p> <ul> <li>While working in Java Editing mode, select the node in the Script Tree to which you want to add a function, right-click the JavaScript pane, and select Insert &gt; General &gt; Init/Terminate Functions from the pop-up menu.</li> </ul> <p>WebLOAD Recorder automatically inserts the correct code for the selected function into the script file. You may then add any other necessary commands to the functions without any concerns about mistakes in the function syntax.</p> <p> </p>"},{"location":"scripting/programming_your_javascript/#navigation-functions","title":"Navigation Functions","text":"<p>When a URL node is selected in the Script Tree, the corresponding script code that appears in the JavaScript View pane will usually include basic navigation and validation functions such as <code>wlHTTP.Get()</code> and <code>wlHTTP.Post()</code>. The <code>wlHTTP.Get()</code> and <code>wlHTTP.Post()</code> methods store the HTML from the navigated page in the document.wlSource property. The code is refreshed when the script calls <code>wlHTTP.Get()</code> or <code>wlHTTP.Post()</code> again. The stored code includes any scripts or other data embedded in the HTML, which the script can retrieve and interpret in any desired way.</p> <p>These functions are almost always visible at the start of the JavaScript code for every URL node in the Script Tree. While additional Tree nodes add their own additional corresponding JavaScript code to the script, these functions form the basis for all test session scripts.</p>"},{"location":"scripting/programming_your_javascript/#script-execution-sequence","title":"script Execution Sequence","text":""},{"location":"scripting/programming_your_javascript/#basic-execution-sequence","title":"Basic Execution Sequence","text":"<p>WebLOAD executes JavaScript scripts in a simple, fixed sequence. The normal sequence is as follows.</p> <ol> <li> <p>The optional InitAgenda() initialization function runs once for each Load Generator, initializing the global WebLOAD objects, or any other global data or resources, that are shared by all clients in a Load Generator process.</p> </li> <li> <p>The script splits into a separate thread for each client. Load Generator processes may include any number of Virtual Clients, all running the same script. After WebLOAD runs <code>InitAgenda()</code>, it runs each client in a separate thread. Each thread can have its own local variables and objects. In essence, each client runs an independent instance or copy of the script.</p> <p>For example, suppose you want each WebLOAD client to connect to a different Web page. You can use a local object within each thread to store the Web address and perform the HTTP connection. Because the object is local, there is no confusion between the addresses. Each thread connects to the appropriate address, without any effect on the other threads of the same script.</p> </li> <li> <p>The optional <code>InitClient()</code> initialization function runs once for each thread, initializing local WebLOAD objects, or any other variables or resources, which belong to an individual thread of the script. In this way, each thread of a script can work with different data and can operate independently of the other threads.</p> </li> <li> <p>The main script runs repeatedly in a separate loop for each thread. When WebLOAD reaches the end of the main script, it starts again at the beginning. The main script continues to iterate until you stop the WebLOAD test. You can stop the test by issuing a Stop command in the WebLOAD Console, or you can tell the Console to stop the test automatically after a predefined time.</p> <p>WebLOAD collects performance statistics while the main script runs. The various statistics that WebLOAD displays (round time, average round time, etc.) apply only to the main script, not to operations in the initialization and termination functions.</p> </li> <li> <p>The optional <code>TerminateClient()</code> termination function runs once for each thread. Strictly speaking, most scripts do not need a <code>TerminateClient()</code> function, because JavaScript automatically frees objects and releases most resources when the script terminates. In a complex script, however, it is good programming practice to free local objects and resources explicitly using <code>TerminateClient().</code></p> </li> <li> <p>The separate threads for each client terminate.</p> </li> <li> <p>The optional <code>TerminateAgenda()</code> termination function runs once for each Load Generator process. Most simple scripts do not need a <code>TerminateAgenda()</code> function. In a complex script, including <code>TerminateAgenda()</code> is recommended to free global resources.</p> </li> <li> <p>The <code>OnScriptAbort()</code>, <code>OnErrorTerminateClient()</code>, and <code>OnErrorTerminateAgenda()</code> functions clean up and free resources after a runtime error. For more information about handling errors during a test session, see Error Management .</p> </li> </ol> <p>The following figure illustrates the steps in a normal script execution sequence:</p> <p></p>"},{"location":"scripting/programming_your_javascript/#evaluatescript-function","title":"EvaluateScript Function","text":"<p>The EvaluateScript() function is used to define JavaScript code to be executed at specific points during the execution of the script. The function allows testers to include scripts from an external library and specify the point during script execution at which the script should be executed. You can specify to execute the script at any of the following points within the script:</p> <ul> <li>WLBeforeInitClient</li> <li>WLAfterInitAgenda</li> <li>WLBeforeThreadActivation</li> <li>WLOnThreadActivation</li> <li>WLAfterTerminateClient</li> <li>WLBeforeRound</li> <li>WLAfterTerminateAgenda</li> <li>WLAfterRound</li> </ul> <p>If the script run is successful, the value from the last executed expression statement processed in the script is saved and then parsed when the engine reaches the relevant point. The saved value includes the following information:</p> <ul> <li>The text of the script.</li> <li>The size of the script text, in bytes.</li> <li>The name of the file or URL containing the script text. </li> </ul> <p>If the script run is unsuccessful, the value is left undefined.</p> <p>The following example is used to call a function that is defined in an external file:</p> <p><code>IncludeFile(filename.js)</code></p> <p><code>EvaluateScript(\u201cMyFunction()\u201d,WLAfterRound)</code></p> <p>In this example, the <code>EvaluateScript</code> string is parsed, executed, and instructs the JavaScript engine to call the <code>MyFunction()</code> function right after each round is completed. At this point WebLOAD returns any syntax or runtime errors.</p> <p>For more information on the EvaluateScript function, see the WebLOAD\u2019s JavaScript Reference Guide.</p>"},{"location":"scripting/programming_your_javascript/#cleanup-at-the-end-of-each-round","title":"Cleanup at the End of Each Round","text":"<p>The main script retains its variables and objects from one round (iteration) to the next. For example, you can increment a variable in each round, or you can store data in an object in one round and access the data in the next.</p> <p>There are three exceptions to this rule. At the end of each round:</p> <ul> <li>Any cookies that the script sets are deleted.</li> <li>The SSL Cache is cleared.</li> <li>Any open HTTP connections are closed.</li> </ul>"},{"location":"scripting/programming_your_javascript/#execution-sequence-for-scheduled-clients","title":"Execution Sequence for Scheduled Clients","text":"<p>WebLOAD lets you schedule the number of clients running a single script in a single Load Generator. WebLOAD runs the initialization and termination functions of the script according to your schedule.</p> <p>For example, suppose you configure a Load Generator to run a script according to the following schedule:</p> Number of Threads Scheduled Time 50 threads For the first 30 minutes. 20 threads From 30 to 60 minutes. 100 threads For the remainder of the test. <p>In this case:</p> <ul> <li> <p>WebLOAD runs the <code>InitAgenda()</code> function when the Load Generator starts to run. WebLOAD then starts the first 50 threads, running <code>InitClient()</code> and the main script for each thread.</p> </li> <li> <p>After 30 minutes, 30 of the threads stop. WebLOAD runs <code>TerminateClient()</code> for these 30 threads. The main script of the other 20 threads continues running.</p> </li> <li> <p>At 60 minutes, 80 additional threads start. For each of these 80 threads, WebLOAD runs <code>InitClient()</code> and the main script.</p> </li> <li> <p>At the end of the test, WebLOAD runs <code>TerminateClient()</code> for each of the 100 threads currently running, and then runs <code>TerminateAgenda()</code>.</p> </li> </ul>"},{"location":"scripting/programming_your_javascript/#execution-sequence-for-mixed-clients","title":"Execution Sequence for Mixed Clients","text":"<p>You can configure a single Load Generator to run more than one script. In that case, WebLOAD splits the time on each thread between the scripts. WebLOAD runs the initialization and termination functions of each script at the beginning and end of the threads, respectively. It does not run the functions each time the threads switch between scripts.</p> <p>For example, suppose you configure a Load Generator to run 100 threads as follows:</p> Percentage of time Selected script 50% of the time agenda1. wlp 50% of the time agenda2. wlp <p>In this case, WebLOAD runs:</p> <ul> <li> <p>The <code>InitAgenda()</code> functions of both scripts when the Load Generator starts.</p> </li> <li> <p>The <code>InitClient()</code> functions of both scripts in each thread when the thread starts.</p> </li> <li>The <code>TerminateClient()</code> functions of both scripts, in each thread at the end of the test.</li> <li>The <code>TerminateAgenda()</code> functions of both scripts when all the threads have stopped.</li> </ul>"},{"location":"scripting/programming_your_javascript/#editing-the-javascript-code-in-a-script","title":"Editing the JavaScript Code in a script","text":"<p>WebLOAD is a fully automated testing tool. WebLOAD users are able to record scripts, add testing tools, run test sessions, and analyze the results, without any programming skills whatsoever. Nevertheless, there are users who wish to manually edit the JavaScript code of a recorded script to add functionality to test session scripts created with WebLOAD Recorder, creating more complex, sophisticated test sessions.</p> <p>For example, many users design test sessions around a set of basic scripts created through WebLOAD Recorder and then expand or tailor those scripts to meet a particular testing need. Some of the reasons for editing JavaScript scripts include:</p> <ul> <li>Recycling and updating a useful library of test scripts from earlier versions of WebLOAD.</li> <li>Testing websites that work with Java or COM components.</li> <li>Creating advanced, specialized verification functions.</li> <li>Adding global variables and messages.</li> <li>Debugging the system under test.</li> <li>Optimization capabilities, to maximize your application\u2019s functionality at minimal cost.</li> </ul> <p>This section describes the tools provided by WebLOAD Recorder to help you access and edit the JavaScript code within your script.</p>"},{"location":"scripting/programming_your_javascript/#accessing-the-javascript-code-within-the-script-tree","title":"Accessing the JavaScript Code within the Script Tree","text":"<p>WebLOAD Recorder provides a complete graphic user interface for creating and editing script files. Additions or changes to a script are usually made through the WebLOAD Recorder GUI, working with intuitive icons representing user actions in a graphic Script Tree. For greater clarity, the JavaScript code that corresponds to each user action in a script is also visible in the JavaScript View pane on the WebLOAD Recorder desktop.</p> <p>While most people never really work with the JavaScript code within their script, some users do wish to manually edit the JavaScript code underlying their Script Tree. For example, some test sessions may involve advanced WebLOAD testing features that cannot be completely implemented though the GUI, such as Java or XML objects. Editing the JavaScript code in a script does not necessarily mean editing a huge JavaScript file. Most of the time users only wish to add or edit a specific feature or a small section of the code. WebLOAD Recorder provides access to the JavaScript code in a script through JavaScript Object nodes, which are seen on the following levels:</p> <ul> <li>JavaScript Object nodes\u2014individual nodes in the Script Tree. Empty JavaScript Object nodes may be dragged from the WebLOAD Recorder toolbar and dropped onto the Script Tree at any point selected by the user, as described in Adding JavaScript Object Nodes . Use the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor , to add lines of code or functions to the JavaScript Object.</li> <li>Imported JavaScript File\u2014an external JavaScript file that should be incorporated within the body of the current script.</li> <li> <p>While working in JavaScript Editing mode, right-click the JavaScript pane and select Import JavaScript File from the WebLOAD Recorder menu.</p> <p>Often, testers work with a library of pre-existing library files from which they may choose functions that are relevant to the current test session. This modular approach to programming simplifies and speeds up the testing process, and is fully supported and endorsed by WebLOAD.</p> </li> </ul>"},{"location":"scripting/programming_your_javascript/#using-the-intellisense-javascript-editor","title":"Using the IntelliSense JavaScript Editor","text":"<p>For those users who wish to manually edit their scripts, WebLOAD Recorder provides three levels of programming assistance:</p> <ul> <li> <p>An IntelliSense Editor mode for the JavaScript View pane.</p> <p>Add new lines of code to your script or edit existing JavaScript functions through the IntelliSense Editor mode of the JavaScript View pane. The IntelliSense Editor helps programmers write the JavaScript code for a new function by formatting new code and prompting with suggestions and descriptions of appropriate code choices and syntax as programs are being written. For example, in the following figure the IntelliSense Editor displays a drop-down list of available properties and objects for the<code>wlHttp</code>object being added to the program, with a pop-up box describing the highlighted method in the list.</p> </li> </ul> <p></p> <ul> <li> <p>A selection of the most commonly used programming constructs, can be accessed by right-clicking in the JavaScript Editing Pane, and selecting Insert &gt; Java Objects from the pop-up menu.</p> <p>Users who choose to program their own JavaScript Object code within their script may take advantage of the WebLOAD Recorder GUI to simplify their programming efforts. Manually typing out the code for each command, risks making a mistake, even a trivial typo, and adding invalid code to the script file.</p> <p>Instead, users may bring up a list of available commands and functions for a specific item, by right-clicking in the JavaScript Editing Pane after selecting a specific node from the Script Tree, selecting Insert from the pop-up menu, and selecting an item illustrated in the following figure to display the item\u2019s available commands. WebLOAD Recorder automatically inserts the correct code for the selected item into the JavaScript Object currently being edited. The user may then change specific parameter values without any worries about accidental mistakes in the function syntax.</p> </li> </ul> <p></p> <p>In addition to the Insert menu, you may select an item from the Insert Variable menu, to add system and user-defined parameters to the script. This eliminates the need for manual coding.</p> <p></p> <p></p> <ul> <li>A Syntax Checker that checks the syntax of the code in your script file and catches simple syntax errors before you spend any time running a test session. Select Tools&gt; CheckSyntax while standing in the JavaScript View pane of the WebLOAD Recorder desktop to check the syntax of the code in your script file.</li> </ul> <p>Script code that you wish to write or edit must be part of a JavaScript Object in the Script Tree. Adding or converting JavaScript Objects in a script Tree is described in *Accessing the JavaScript Code within the.</p> <p>Notes: If you do decide to edit the JavaScript code in a script, be careful not to damage the script structure by changing the sequence or integrity of the script navigation blocks. A test session script is constructed and based on a specific sequence of user activities at the protocol level, such as URL navigations, form submissions, and others. Changing the sequence of code blocks in effect means changing the sequence of user activities, and may destroy the functionality of the test session script. In addition, you should be careful not to change the automatically generated WebLOAD Recorder comments, since necessary information for running the script may become lost.</p> <p>If you use an external text editor to modify the JavaScript code in a JavaScript script that was created through WebLOAD Recorder, the changes you made through the external editor will be lost if you open the script in WebLOAD Recorder again.</p> <p>Therefore, be sure to do all JavaScript code editing through the IntelliSense Editor in WebLOAD Recorder only.</p> <p>For detailed information about the JavaScript language, please refer to the WebLOAD JavaScript Reference Guide. This guide is supplied in Adobe Acrobat format with the WebLOAD software. You may also learn the elements of JavaScript programming from many books on Web publishing. Keep in mind that some specific JavaScript objects relating to Web publishing do not exist in the WebLOAD test environment.</p>"},{"location":"scripting/programming_your_javascript/#adding-javascript-object-nodes","title":"Adding JavaScript Object Nodes","text":"<p>WebLOAD Recorder stores user activities at the protocol level as they are completed during recording sessions. These activities are later recreated during subsequent testing sessions. However, the system being tested may also involve user activities that are significant to the system testers, yet cannot be entirely recorded through WebLOAD Recorder. Or testers may wish to add additional functionality to their tests that require inserting extra JavaScript functions into the body of their script code.</p> <p>WebLOAD Recorder therefore provides a mechanism for including such items within a test session script.</p> <p>For example, some of the steps involved in access to an external database are executed outside the control of WebLOAD Recorder and therefore cannot be completely recorded through WebLOAD Recorder alone. Users may add these activities to a test script by adding empty JavaScript Object Nodes to the Script Tree and then filling in the code to complete the desired activity. The specific code needed within the JavaScript Object Node will obviously vary from Node to Node depending on the activity, but adding the generic JavaScript Object Nodes themselves is a standard WebLOAD Recorder feature.</p> <p>To add JavaScript Object Nodes to your test script directly through the WebLOAD Recorder GUI:</p> <ul> <li>Drag the JavaScript Object icon from the toolbox and drop it into the Script Tree at the preferred spot, as described in the WebLOAD Recorder User Guide.</li> </ul> <p>The following figure illustrates a typical JavaScript Object Node highlighted in the Script Tree.</p> <p></p> <p>The specific code needed within the JavaScript Object Node will obviously vary from Node to Node depending on the activity. Some of the activities that may require manual programming within a JavaScript Object Node include:</p> <ul> <li>Getting data from a database.</li> <li>Working with COM, XML, or Java objects.</li> <li>Calculating expressions.</li> <li>Working with global variables such as a user-defined value to include in messages.</li> <li>Working with other protocols.</li> <li>Doing specific custom made verifications.</li> </ul> <p>JavaScript syntax specifications for some of these activities are documented in the WebLOAD JavaScript Reference Guide.</p> <p>To add or edit lines of code in a JavaScript Object:</p> <ul> <li>Click the JavaScript Object node in the Script Tree.</li> </ul> <p>The JavaScript object\u2019s code appears in the JavaScript View pane. You can edit the code directly in the JavaScript view or by selecting Edit &gt; Start Java Script Editing which opens the full JavaScript view screen. This helps programmers write the JavaScript code for a new function by formatting new code and prompting with suggestions and descriptions of appropriate code choices and syntax as programs are written, as described in Using the IntelliSense JavaScript Editor .</p>"},{"location":"scripting/programming_your_javascript/#file-management","title":"File Management","text":"<p>JavaScript scripts work with many different types of files. Users may wish to add to their scripts programming elements that include the following file types:</p> <ul> <li>Including Files </li> <li>Copying Files </li> <li>Output Files </li> </ul>"},{"location":"scripting/programming_your_javascript/#including-files","title":"Including Files","text":"<p>WebLOAD Recorder allows you to include external files within your JavaScript program. This facilitates modular programming, where you may develop different recyclable modules of JavaScript source code to be reused by different test scripts. Rather than inserting the complete original source code text over and over again into the body of each script, use the <code>IncludeFile()</code> command to make all functions defined within the included file available to all including scripts.</p>"},{"location":"scripting/programming_your_javascript/#adding-an-includefile-function","title":"Adding an IncludeFile() Function","text":"<p><code>IncludeFile()</code> functions can be added directly to a JavaScript Object in a script through the IntelliSense Editor, as described in Editing the JavaScript Code.</p> <p>To insert an IncludeFile function:</p> <ul> <li>While working in JavaScript Editing mode, right-click the JavaScript Pane and select Insert &gt; JavaScript &gt; Copy/Include Files from the pop-up menu that appears. Select the <code>IncludeFile()</code> function from the sub-menu.</li> </ul> <p>WebLOAD Recorder automatically inserts the correct code for the selected function into the script file. The user may then edit parameter values without any worries about mistakes in the function syntax.</p> <p> </p> <p>For example, to include the external file MyFunction.js, located on the Console during WebLOAD testing, your script file should begin with the following command included in a JavaScript Object node:</p> <pre><code>function InitAgenda() {\n\n...\n\nIncludeFile(\u201cMyFunction.js\u201d)\n\n}\n</code></pre> <p>See the WebLOAD JavaScript Reference Guide for a complete syntax specification.</p>"},{"location":"scripting/programming_your_javascript/#determining-the-included-file-location","title":"Determining the Included File Location","text":"<p>WebLOAD assumes that the source file is located in the default directory specified in the File Locations tab in the Tools &gt; Global Options dialog box in the WebLOAD Console desktop, illustrated in the following figure:</p> <p></p> <p>Included files by default should be in the User Include Files directory specified in the File Locations dialog box. You may reset the default directory location if necessary by selecting the User Include Files entry and clicking Modify. You can select a new file location from the pop-up Browse for Folder dialog box and click OK. In general, the system searches for the included file using the following search precedence:</p> <ul> <li> <p>The load engine first looks for the included file in the default User Include Files directory. If the file is not there, the file request is handed over to WebLOAD, which searches for the file using the following search path order:</p> <ol> <li>If a full path name has been hardcoded into the IncludeFile command, the system searches the specified location. If the file is not found in an explicitly coded directory, the system returns an error code of File Not Found and will not search in any other locations.</li> </ol> <p>Note: It is not recommended to hardcode a full path name, since the script will then not be portable between different systems. This is especially important for networks that use both UNIX and Windows systems.</p> <ol> <li> <p>Assuming no hardcoded full path name in the script code, the system looks for the file in the default User Include Files directory.</p> </li> <li> <p>If the file is not found, the system looks for the file in the current working directory, the directory from which WebLOAD or WebLOAD Recorder was originally executed.</p> </li> <li> <p>Finally, if the file is still not found, the system searches for the file sequentially through all the directories listed in the File Locations tab.</p> </li> </ol> </li> </ul>"},{"location":"scripting/programming_your_javascript/#example-working-with-an-included-function","title":"Example: Working with an Included Function","text":"<p>Included files are files whose functions and other contents are included and accessible from the current script file without the file text actually appearing within the script.</p> <p>Use included files to take advantage of an external library of modular functions without adding extra lines of code to your script, improving the clarity of your script code while saving both script space and development time. For example, in the following script fragment, the external file <code>myjs.js</code> is included within the <code>InitAgenda()</code> initialization function. One of the functions within that included file, <code>sayHello()</code>, is later accessed within the main body of the script. The text of the <code>sayHello()</code> is embedded in a nearby comment for easy reference.</p> <pre><code>function InitAgenda()\n\n{\n\nIncludeFile(\"C:\\\\Documents and Settings\\\\uriw\\\\My Documents\\\\myjs.js\")\n\n}\n\nwlGlobals.GetFrames = false\n\n[wlHttp.Get(\"http://www.webloadmpstore.com/general_sample/include](http://www.webloadmpstore.com/general_sample/include)\n\n/form.php\") Sleep(4765)\n\nwlHttp.Header[\"Referer\"] = [\"http://qa50/form.php\"](http://qa50/form.php) wlHttp.ContentType = \"application/x-www-form-urlencoded\" wlHttp.FormData[\"item\"] = \"Brushes\" wlHttp.FormData[\"quantity\"] = \"55\"\n\nvar item = wlHttp.FormData[\"quantity\"]\n\n[wlHttp.Post(\"http://www.webloadmpstore.com/general_sample/includ](http://www.webloadmpstore.com/general_sample/includ) e/process.php\")\n\n// here the outside function is being called sayHello()\n\n\n\n\n&lt;a name =\"\" &gt;&lt;/a&gt;\nThe myjs.js file contains the following sayHello() function, which prints the checkout message to the customer:\n\nfunction sayHello()\n\n{\n\nInfoMessage(\"you ordered    \" +item + \" items\")\n\n}\n</code></pre>"},{"location":"scripting/programming_your_javascript/#copying-files","title":"Copying Files","text":"<p>WebLOAD enables text and binary data file copying from the Console to a Load Generator automatically during a test session. This is an important feature if your test uses a script that references auxiliary files, such as I/O files, that are found only on the Console. The WebLOAD send option in the Console only sends the script itself and will not send auxiliary files together with a script file to a Load Generator. Use the CopyFile command instead to copy any necessary files from a source file on the Console to a destination file on the Load Generator before the main body of the script is executed.</p>"},{"location":"scripting/programming_your_javascript/#adding-a-copyfile-function","title":"Adding a CopyFile() Function","text":"<p><code>CopyFile()</code> functions can be added directly to a JavaScript Object in a script through the IntelliSense Editor, as described in Editing the JavaScript Code in Script.</p> <p>To insert a CopyFile function:</p> <ul> <li>While working in JavaScript Editing mode, right-click the JavaScript Pane and select Insert &gt; Copy/Include Files from the pop-up menu that appears.</li> </ul> <p>Select the preferred CopyFile() function from the sub-menu (see Figure).</p> <p>WebLOAD Recorder automatically inserts the correct code for the selected function into the script file. The user may then edit parameter values without any worries about mistakes in the function syntax.</p> <p>For example, to copy the auxiliary file <code>src.txt</code>, located on the Console, to the destination file <code>dest.txt</code> on the current Load Generator, your script file should include the following command:</p> <pre><code>function InitAgenda() {\n\n...\n\nCopyFile(\u201csrc.txt\u201d, \u201cdest.txt\u201d)\n\n...\n\n}\n</code></pre> <p>You may then access the file as usual in the main body of the script. For example:</p> <p><code>DataArr = GetLine(\u201cdest.txt\u201d)</code></p> <p>See the JavaScript Reference Guide for a complete syntax specification.</p>"},{"location":"scripting/programming_your_javascript/#determining-the-copied-file-location","title":"Determining the Copied File Location","text":"<p>WebLOAD assumes that the source file is located on the Console in the default directory identified in the File Locations tab of the Tools &gt; Global Options dialog box in the Console desktop, illustrated in the following figure:</p> <p></p> <p>Files to be copied by default should be in the User Copy Files directory specified in the File Locations dialog box. You may reset the default directory location if necessary by selecting the User Copy Files entry and clicking Modify. You can select a new file location from the pop-up Browse for Folder dialog box and click OK. Remember that WebLOAD does not create new directories, so any directories specified as source or target directories must already exist. In general, the system searches for the file using the following search precedence:</p> <ul> <li> <p>The load engine first looks for the file to be copied in the default User Copy Files directory. If the file is not there, the file request is handed over to WebLOAD, which searches for the file using the following search path order:</p> <ol> <li> <p>If a full path name has been hardcoded into the CopyFile command, the system searches the specified location. If the file is not found in an explicitly coded directory, the system returns an error code of File Not Found and will not search in any other locations.</p> <p>Note: It is not recommended to hardcode a full path name, since the script will then not be portable between different systems. This is especially important for networks that use both UNIX and Windows systems.</p> </li> <li> <p>Assuming no hardcoded full path name in the script code, the system looks for the file in the current working directory, the directory from which WebLOAD was originally executed.</p> </li> <li> <p>Finally, if the file is still not found, the system searches for the file sequentially through all the directories listed in the File Locations tab.</p> </li> </ol> </li> </ul>"},{"location":"scripting/programming_your_javascript/#output-files","title":"Output Files","text":""},{"location":"scripting/programming_your_javascript/#writing-script-output-messages-to-a-file","title":"Writing script Output Messages to a File","text":"<p>Realistic testing requires multiple testing passes using a variety of realistic scenarios. The resulting output data should be stored in output files for later access, verification, study, and analysis. WebLOAD Recorder provides the <code>wlOutputFile</code> object to simplify saving script output. See the WebLOAD JavaScript Reference Guide for a complete syntax specification. This section will provide a brief introduction to the <code>wlOutputFile</code> object.</p> <p>The <code>wlOutputFile</code> object lets you write script output messages to an output file. Declaring a new <code>wlOutputFile</code> object creates a new, empty output file. If a file of that name already exists, the file will be completely overwritten. Information will not be appended to the end of an existing file. Be sure to choose a unique filename for the new output file if you do not want to overwrite previous script data.</p>"},{"location":"scripting/programming_your_javascript/#adding-the-wloutputfile-object","title":"Adding the wlOutputFile Object","text":"<p>The <code>wlOutputFile</code> object can be added directly to a JavaScript Object in a script through the IntelliSense Editor. Users who are programming their own JavaScript Object code within their script may take advantage of the WebLOAD Recorder GUI to simplify their programming efforts. Manually typing out the code to create a <code>wlOutputFile</code> object, risks making a mistake, and adding invalid code to the script file. Instead, users may bring up a list of available constructor and methods for the <code>wlOutputFile</code> object, by right-clicking in the JavaScript Editing Pane, selecting Insert &gt; General from the pop-up menu, and selecting one of the available items. WebLOAD Recorder automatically inserts the correct code for the selected command into the JavaScript Object currently being edited. The user may then change the parameters without any worries about mistakes in the object syntax.</p> <p></p> <p>The preceding figure highlights the standard JavaScript syntax to create and work with <code>wlOutputFile</code> objects.</p> <p>For example:</p> <p><code>MyFileObj = new wlOutputFile(\u201cfilename\u201d)</code></p> <p><code>...</code></p> <p><code>MyFileObj.Write(\u201cHappy Birthday\u201d)</code></p> <p><code>...</code></p> <p><code>delete MyFileObj</code></p> <p>Note: The <code>wlOutputFile</code> object saves script output messages. To save server response data, use the Outfile property described in Saving Server Output to a File .</p>"},{"location":"scripting/programming_your_javascript/#wloutputfile-object-scope-limitations","title":"wlOutputFile Object Scope Limitations","text":"<p>If you declare a new <code>wlOutputFile</code> object in the <code>InitAgenda()</code> function of a script, the output file will be shared by all the script threads. There is no way to specify a specific thread writing sequence\u2014each thread will write to the output file in real time as it reaches that line in the script execution.</p> <p>If you declare a new <code>wlOutputFile</code> object in the <code>InitClient()</code> function or main body of a script, use the thread number variable as part of the new filename to be sure that each thread will create a unique output file.</p> <p>If you declare a new <code>wlOutputFile</code> object in the main body of a script, and then run your script for multiple iterations, use the RoundNum variable as part of the new filename to be sure that each new round will create a unique output file.</p> <p>Generally, you should only create new <code>wlOutputFile</code> objects in the <code>InitAgenda()</code>or <code>InitClient()</code> functions of a script, not in the main script. If a statement in the main script creates an object, a new object is created each time the statement is executed. If WebLOAD repeats the main script many times, a large number of objects may be created and the system may run out of memory.</p>"},{"location":"scripting/programming_your_javascript/#saving-server-output-to-a-file","title":"Saving Server Output to a File","text":"<p>It is often important to save server response data for later study and analysis. WebLOAD and WebLOAD Recorder provide the <code>Outfile</code> property for this purpose. Outfile is a property of the <code>wlGlobals</code>, <code>wlLocals</code>, and <code>wlHttp</code> objects. See the WebLOAD JavaScript Reference Guide, for a complete syntax specification.</p> <p>The following script shows a typical entry to a server output file. The <code>ClientNum</code> and <code>RoundNum</code> global variables are used to distinguish between script instances in the server output file entries.</p> <pre><code>// Main script actions go here\n\n...\n\n// Write the downloaded server output to a unique file\n\n// for each script instance, identified by ClientNum\n\n// and RoundNum. The output file is named\n\n// &lt;fullpath&gt;\\SessionOutput.&lt;ClientNum.RoundNum&gt;.html wlHttp.Outfile = \"c:\\\\webld\\\\SessionOutput.\" ClientNum + \".\" + RoundNum + \".html\"\n</code></pre> <p>The <code>Outfile</code> property can be added directly to a JavaScript Object in a script through the IntelliSense Editor.</p>"},{"location":"scripting/programming_your_javascript/#security","title":"Security","text":"<p>Security is important for most Web users, whether the access is recreational, personal, or work related. Most Web applications work with some combination of user authentication together with SSL protocol use to ensure application security. Both these security features are handled automatically by WebLOAD. By default, test sessions use the settings that were in effect during the original recording session.</p> <p>Specific security settings may be reset through the WebLOAD Recorder or Console GUI dialog boxes.</p> <p>Security methods and properties can be edited directly within a JavaScript Object in a script through the IntelliSense Editor. This section provides a general introduction to the internal implementation of the user authentication and SSL security features. See the WebLOAD JavaScript Reference Guide, for a complete syntax specification of the security functions introduced here.</p>"},{"location":"scripting/programming_your_javascript/#authentication","title":"Authentication","text":"<p>Users are authenticated through a system of usernames and passwords. Most servers use either a basic user authentication protocol or the Windows NT Challenge Response protocol. WebLOAD supports both protocols, as well as proxy servers that require user authorization. WebLOAD automatically selects the authentication protocol appropriate for the current test session. By default, WebLOAD navigates authorization protocols using the user data saved during the original recording session, but these values may be reset as needed.</p> <p>For example, many Web applications involve logging in to a site. The original user name and password typed in during a recording session are saved for use during later test sessions.</p> <p>Testers may reset user authentication values in one of the following ways:</p> <ul> <li>Through the Authentication tab.</li> <li>By manually editing the authentication property set. These options are described here.</li> </ul>"},{"location":"scripting/programming_your_javascript/#using-the-authentication-tab","title":"Using the Authentication Tab","text":"<p>Access the Authentication tab by selecting the Tools &gt; Default Options menu in the WebLOAD Recorder or Console. Select the Authentication tab in the dialog box that opens. You can simply type the relevant values into the input text fields, as illustrated in the following figure.</p> <p>Note: Passwords will not appear in readable form.</p> <p></p>"},{"location":"scripting/programming_your_javascript/#setting-user-authentication-values-manually","title":"Setting User Authentication Values Manually","text":"<p>If you are editing the JavaScript code in your script, you may reset user authentication values manually using the wlGlobals, wlLocals, or<code>wlHttp</code>property set.</p> <p>There are three approaches to setting these properties, corresponding to the desired authentication scope:</p> <ul> <li>Set the authentication properties that correspond to the Authentication tab at the script level using wlGlobals.</li> <li>Set the authentication properties for a specific HTTP request using wlHTTP.</li> <li>Set the authentication properties that correspond to the Authentication tab at the Virtual Client level using wlLocals.</li> </ul> <p>For example, set the user name and password using either of the following approaches:</p> <pre><code>wlGlobals.UserName = \"Bill\" \nwlGlobals.PassWord` = \"TopSecret\"\n</code></pre> <p>The authentication related properties include the following:</p> <ul> <li>NTUserName, NTPassWord</li> <li>PassWord</li> <li>Proxy, ProxyUserName, ProxyPassWord</li> <li>SSLClientCertificateFile, SSLClientCertificatePassWord</li> <li>UserName</li> </ul> <p>See the WebLOAD JavaScript Reference Guide, for a complete syntax specification of the properties used for user authentication.</p>"},{"location":"scripting/programming_your_javascript/#secure-data-transmission-through-ssl","title":"Secure Data Transmission through SSL","text":"<p>Web and HTTP communications require a practical, reliable, universally recognized protocol to ensure the secrecy, integrity, and authentication of transmitted information. The Internet Engineering Task Force (IETF) has developed such a standard, commonly referred to as SSL/TLS 1.0.</p> <p>For a basic introduction to SSL, see:</p> <p>http://www.cisco.com/en/US/netsol/ns340/ns394/ns50/ns140/networking_solutions_wh ite_paper09186a0080136858.shtml</p> <p>For more information on the new TLS Protocol Version 1.0, see:</p> <p>http://www.ipa.go.jp/security/rfc/RFC2246-00EN.html</p> <p>WebLOAD fully supports the SSL/TLS 1.0 standard, including backward compatibility with earlier versions and standards. See Appendix A in the WebLOAD JavaScript Reference Guide, for a complete list of the supported SSL protocols and ciphers.</p> <p>By default, WebLOAD enables use of all cipher versions at the maximum cryptographic strength possible, allowing participating clients and servers to determine the most appropriate connection to other clients and servers through negotiation at connect time. These setting may be changed or reset through dialog boxes on the Console.</p> <p>For example, reset the SSL bit limit through the SSL tab of the Tools &gt; Default Options dialog box on the WebLOAD Console, illustrated in the following figure:</p> <p></p> <p>By default, WebLOAD handles all SSL activities, setting the appropriate configuration settings automatically. WebLOAD also provides both Cipher Command Suite functions and a complete set of SSL wlGlobals properties that allow users to fine- tune their security settings within the script code, identifying, enabling, or disabling specific protocols or cryptography levels, depending on testing preferences.</p> <p>Note: Changes that are made within script code override anything that has been set through the Console.</p> <p>These properties and functions work on two levels:</p> <ul> <li>Higher level functions used for browser emulation.</li> <li>Lower level functions for client- or server-specific cipher testing.</li> </ul> <p>See the WebLOAD JavaScript Reference Guide for complete syntax specifications for the <code>wlGlobals</code> SSL property set and the Cipher Command Suite.</p> <p>Note: The SSL configuration for your test session is usually set through dialog boxes in the Console. You may change the default session settings within your script, using either the <code>wlGlobals</code> properties or the Cipher Command Suite functions. While the SSL property set is also defined for the<code>wlHttp</code>and <code>wlLocals</code> objects, RadView strongly recommends using these properties with the <code>wlGlobals</code> object only.</p> <p>Any changes to a script\u2019s SSL property configuration must be made in the script\u2019s initialization functions. Configuration changes made in the <code>InitAgenda()</code> function will affect all client threads spawned during that script\u2019s test session. Configuration changes made in the <code>InitClient()</code> function will affect only individual clients. Do not make changes to the SSL property configuration in a script\u2019s main body. The results will be undefined for all subsequent transactions.</p>"},{"location":"scripting/programming_your_javascript/#browser-emulation","title":"Browser Emulation","text":"<p>The browser emulation functions emphasize a high-level, categorical approach to cryptographic strength definition. For example, you may wish to test access to foreign browsers who use only earlier versions of SSL, or who are limited to export-only cryptographic strength. This \u2018smarter\u2019 approach of selecting appropriate categories is usually preferable to the low-level approach of enabling or disabling individual protocols.</p> <p>Browser emulation functionality includes the ability to:</p> <ul> <li>Enable, disable, and list SSL protocols.</li> <li>Define the cryptographic categories to be used in the current test session.</li> <li>Limit the strength and complexity of the cipher set in current use by limiting the number of bits used by the cipher.</li> <li>Define the SSL version that WebLOAD should use for the current test session.</li> </ul>"},{"location":"scripting/programming_your_javascript/#server-specific-cipher-testing","title":"Server-Specific Cipher Testing","text":"<p>The server-specific cipher testing functions emphasize a low-level, bit-specific approach to cryptographic strength definition. For example, you may wish to enable or disable specific ciphers, to check the limits of certain client site abilities or server configurations.</p> <p>SSL Cipher Command Suite provides the ability to:</p> <ul> <li>Enable and disable a specific cipher by name.</li> <li>Enable and disable a specific cipher by ID number.</li> <li>Obtain a specific cipher\u2019s name or ID number.</li> <li>Get information about a specific cipher, identified by name or ID number.</li> <li>Learn the number of ciphers enabled during the current test session. The <code>wlGlobals</code> SSL property set provides the ability to:</li> <li>Support use of SSL client certificates by supplying the certificate filename and password to the SSL server.</li> <li>Enable caching of SSL decoding keys received from an SSL (HTTPS) server. Complete syntax specifications for the SSL Cipher Command Suite and the <code>wlGlobals</code> SSL property set are available in the WebLOAD JavaScript Reference Guide.</li> </ul>"},{"location":"scripting/programming_your_javascript/#error-management","title":"Error Management","text":"<p>Scripts that encounter an error during runtime do not simply fail and die. This would not be helpful to testers who are trying to analyze when, where, and why an error in their application occurs. WebLOAD Recorder scripts incorporate a set of error management routines to provide a robust error logging and recovery mechanism whenever possible.</p>"},{"location":"scripting/programming_your_javascript/#error-management-tools","title":"Error Management Tools","text":""},{"location":"scripting/programming_your_javascript/#analyzing-possible-errors","title":"Analyzing Possible Errors","text":"<p>Error management works on multiple levels that must be defined by the testers and tailored to the application being tested. For example, when first designing a test session, testers may wish to ask:</p> <ul> <li>What is considered an error for my application? How do I define an error? Are there different types of errors for this application that should possibly be handled in different ways?</li> <li>How serious a problem is this specific error, or a type of error? When is an error fatal?</li> <li>Depending on the source of the error, how do I want to handle this? Do I want to retry the command? Should I simply continue execution? Skip to the next command? Skip to the next navigation block? Stop execution completely?</li> <li>How many errors of a specific type are needed to trigger an error condition? Is even one error of this type considered intolerable and fatal to the application? Are up to 10 errors considered reasonable and will not cause damage to the application? Could too many warnings also be a reason to stop the test session?</li> <li>Does this application routinely experience a certain error rate that may safely be ignored? Perhaps a rate of up to 5% errors is considered reasonable? Perhaps the application takes a certain amount of time to get started and errors in the first 5 minutes of run time should be ignored?</li> </ul> <p>The answers to these questions should be a part of your test session design. Once you have categorized the various types of errors possible, you should also analyze how you wish to handle these errors, should they occur.</p> <p>Set the error configuration values through the Pass/Fail Definition and Error Handling tabs of the Tools &gt; Default or Global Project Options dialog boxes.</p>"},{"location":"scripting/programming_your_javascript/#standard-message-functions","title":"Standard Message Functions","text":"<p>On the most basic level, you may simply insert message functions into your script and have them executed wherever anything unusual or problematic occurs. Insert a message function into your script through the WebLOAD Recorder GUI.</p> <p>Choose from four possible message levels:</p> <ul> <li><code>InfoMessage()</code>\u2014 prints a simple informative message to the Log window. Has no affect on script execution.</li> <li><code>WarningMessage()</code>\u2014 prints a warning message to the Log window. Has no affect on script execution.</li> <li><code>ErrorMessage()</code>\u2014 prints an error message to the Log window. Causes the current test round to abort, but the test session continues with the start of the next round.</li> <li><code>SevereErrorMessage()</code>\u2014 prints an error message to the Log window and stops the current test session.</li> <li><code>DebugMessage()</code>\u2014 prints a message to the WebLOAD Recorder Log window. Has no affect on script execution.</li> </ul>"},{"location":"scripting/programming_your_javascript/#standard-error-constants","title":"Standard Error Constants","text":"<p>You may also manage errors by checking function return codes, both for built-in and user-defined functions. WebLOAD Recorder provides a set of constants that define the error severity level, acting as a useful means for redirecting script behavior. Use the severity level to determine the execution path to be followed in case of error. Less severe errors may be noted and ignored. More severe failures may cause the whole test to be aborted. All failures are logged and displayed in the both the WebLOAD Recorder and Console Log Windows. Refer to Appendix A in the WebLOAD Recorder User Guide for more information on return codes and error levels.</p> <p>WebLOAD and WebLOAD Recorder include the following error levels:</p> <ul> <li><code>WLSuccess</code> \u2014 the activity terminated successfully.</li> <li><code>WLMinorError</code> \u2014 this specific activity failed, but the test session may continue as usual. The script displays a warning message in the Log window and continues execution from the next statement.</li> <li><code>WLError</code> \u2014 this specific activity failed and the current test round was aborted. The script displays an error message in the Log window and begins a new round.</li> <li><code>WLSevereError</code> \u2014 this specific activity failed and the test session must be stopped completely. The script displays an error message in the Log window and the Load Generator on which the error occurred is stopped.</li> </ul> <p>Note: These built-in message functions and error levels provide a single, standard set of error management options. After an error occurs, testers may choose to continue with the current round, stop the current round, or stop the whole test session. But not every error falls into these three broad categories. Sometimes an error is serious enough to invalidate the current activity, yet the current round may still be able to continue execution. Very often the set of activities on a specific Web page is not successful, but that does not have any affect on the activities recorded on subsequent Web pages.</p>"},{"location":"scripting/programming_your_javascript/#variable-activity-blocks","title":"Variable Activity Blocks","text":"<p>WebLOAD Recorder offers an additional level of error management, which can be manually added to a script. This is done by the <code>try()/catch()</code> function pair. Users may add <code>try()/catch()</code> pairs around their own logical blocks of code, through the IntelliSense Editor.</p> <p>The <code>try()/catch()</code> pair of error handling functions allows users to catch errors, skip a single set of corrupted activities, and still continue with the current round. Use these functions to delimit a specific logical activity unit and define an alternate error- handling routine to be executed in case an error occurs within that block of code. The <code>try()/catch()</code> functions limit the scope of an error to individual logical component branches of your script tree.</p> <p>Limited scope for an error has two advantages:</p> <ul> <li>Pinpointing the source of the error, enabling easier debugging and recovery.</li> <li>Isolating the error to a specific script branch, in many cases allowing test execution to continue with the rest of the Script Tree despite the error.</li> </ul> <p>Navigation blocks and other logical activity blocks are useful for error management, especially when running \u201chands-free\u201d test sessions. For example, the user can define the default testing behavior to be that if a non-fatal error is encountered during a test session, WebLOAD Recorder should throw the error, skip to the next navigation block, and continue with the test session.</p> <p>The Pass/Fail Definition tab of the Tools &gt; Default or Global Project Options dialog box is used to define the default WebLOAD Recorder behavior in case of error.</p> <p>Note: At each testing level, WebLOAD Recorder provides a choice of error handling options. Depending on the context, you may choose to repeat the action, skip to the next line, skip to the next navigation block, or stop execution completely.</p>"},{"location":"scripting/programming_your_javascript/#the-wlexception-object","title":"The wlException Object","text":"<p>Scripts that encounter an error during runtime do not simply fail and die. This would not be helpful to testers who are trying to analyze when, where, and why an error in their application occurs. WebLOAD scripts incorporate a set of error management routines to provide a robust error logging and recovery mechanism whenever possible. The wlException object is part of the WebLOAD error management protocol.</p> <p>WebLOAD users have a variety of options for error recovery during a test session. The built-in error flags provide the simplest set of options; an informative message, a simple warning, stop the current round and skip to the beginning of the next round, or stop the test session completely. Users may also use <code>try()/catch()</code> commands to enclose logical blocks of code within a round. This provides the option of catching any minor errors that occur within the enclosed block and continuing with the next logical block of code within the current round, rather than skipping the rest of the round completely.</p> <p>Users may add their own <code>try()/catch()</code> pairs to a script, delimiting their own logical code blocks and defining their own alternate set of activities to be executed in case an error occurs within that block. If an error is caught while the script is in the middle of executing the code within a protected logical code block (by <code>try()</code>), WebLOAD will detour to a user-defined error function (the <code>catch()</code> block) and then continue execution with the next navigation block in the script.</p> <p>wlException objects store information about errors that have occurred, including informative message strings and error severity levels. Users writing error recovery functions to handle the errors caught within a <code>try()/catch()</code> pair may utilize the wlException object. Use the wlException methods to perhaps send error messages to the Log Window or trigger a system error of the specified severity level.</p> <p>Example</p> <p>The following code fragment illustrates a typical error-handling routine:</p> <pre><code>try{\n\n...\n\n//do a lot of things\n\n...\n\n//error occurs here\n\n...\n\n}\n\ncatch(e){\n\nmyException = new wlException(e,\u201cwe have a problem\u201d)\n\n//things to do in case of error\n\n\n\nif (myException.GetSeverity() == WLError) {\n\n// Do one set of Error activities myException.ReportLog() throw myException\n\n}\n\nelse {\n\n// Do a different set of Severe Error activities throw myException\n\n}\n\n}\n</code></pre>"},{"location":"scripting/programming_your_javascript/#non-standard-script-execution-sequence","title":"Non-Standard script Execution Sequence","text":"<p>script Execution Sequence describes the sequence of activities during a normal, standard test session. However, many test sessions do not simply follow a normal execution sequence. Test sessions are designed to catch application errors, and these errors often interrupt the test session. This section describes what happens within your script if it is interrupted in mid-session.</p>"},{"location":"scripting/programming_your_javascript/#minor-error-managementcontinue-the-test-session-as-usual","title":"Minor Error Management\u2014Continue the Test Session as Usual","text":"<p>In the event of a minor error, WebLOAD and WebLOAD Recorder record the error in a log and continues processing. This occurs when you call an <code>InfoMessage()</code> or <code>WarningMessage()</code> function or use the <code>WLMinorError</code> constant.</p> <p>For example, one of the most common runtime errors is the failure of an HTTP Get, Post, or Head command. This can occur, for example, if the HTTP server is temporarily unavailable. In most cases, an HTTP failure is a minor error and should not stop the test, although it can affect the performance statistics. You may optionally include additional error-handling functions in your script.</p>"},{"location":"scripting/programming_your_javascript/#standard-error-managementstopping-a-single-round","title":"Standard Error Management\u2014Stopping a Single Round","text":"<p>In the event of a standard error, WebLOAD records the error in a log and stops the current round. This may occur under the following circumstances:</p> <ul> <li>If you call an <code>ErrorMessage()</code> function or use the <code>WLError</code> constant.</li> <li>If the user issues a Stop or Pause command in the WebLOAD Console that happens to catch a thread in mid-round.</li> <li> <p>If a thread encounters a non-severe error such as a failed HTTP connection. In these circumstances, WebLOAD does the following:</p> </li> <li> <p>Sends an error message to the Log window.</p> </li> <li>Stops the main script in the current round.</li> <li>Runs the <code>OnScriptAbort()</code> function, if it exists in your script, in the thread where the error occurred, to free objects and resources.</li> <li>Continues with the next round of the thread, at the beginning of the main script.</li> </ul> <p>Non-severe errors affect only the thread where the error occurred. They have no effect on other threads of the Load Generator, and they do not run the OnError... functions.</p>"},{"location":"scripting/programming_your_javascript/#severe-error-managementstopping-a-test-session","title":"Severe Error Management\u2014Stopping a Test Session","text":"<p>In the event of a severe runtime error, WebLOAD sends a severe error message to the Log window and stops the whole test session. This may occur under the following circumstances:</p> <ul> <li>If you call a <code>SevereErrorMessage()</code> function or use the WLSevereError</li> </ul> <p>constant.</p> <ul> <li>If a thread encounters a severe error such as an overflow or an illegal operation, or any other error that the user has specified should trigger a severe error condition.</li> </ul> <p>When stopping an entire test session, WebLOAD uses the following execution sequence.</p> <ul> <li>In the thread where the error occurred, WebLOAD runs the <code>OnScriptAbort()</code> and <code>OnErrorTerminateClient()</code>functions. These functions are used for error handling that is specific to individual threads, such as freeing local objects and resources.</li> <li> <p>In the other threads of the Load Generator, WebLOAD runs the <code>OnScriptAbort()</code> and <code>TerminateClient()</code> functions.</p> </li> <li> <p>The separate threads terminate.</p> </li> <li>WebLOAD runs the <code>OnErrorTerminateAgenda()</code> function instead of <code>TerminateAgenda()</code>. This function is used to free global resources, or for other types of error handling at the global level.</li> </ul> <p>Like the other initialization and termination functions, the error-handling functions are optional. Omit them from your script if they are not needed.</p> <p>In the event of a severe runtime error, WebLOAD Recorder sends a severe error message to the Log window and stops the whole test session. This may occur under the following circumstances:</p> <ul> <li> <p>If you call a <code>SevereErrorMessage()</code> function or use the <code>WLSevereError</code> constant.</p> </li> <li> <p>If the script encounters a severe error such as an overflow or an illegal operation, or any other error that the user has specified should trigger a severe error condition. A severe error is also triggered if WebLOAD Recorder cannot find a specified object on the Web page, for example if the object was deleted or the current Web page does not match the expected Web page accessed during the recording session.</p> </li> </ul> <p>When stopping an entire test session, WebLOAD Recorder uses the following execution sequence.</p> <ul> <li>First WebLOAD Recorder runs the <code>OnScriptAbort()</code> function, used for error handling such as freeing local objects and resources.</li> <li>Then WebLOAD Recorder runs the <code>OnErrorTerminateAgenda()</code> function instead of <code>TerminateAgenda()</code>. This function is used to free global resources, or for other types of error handling at the global level.</li> </ul> <p>Like the other initialization and termination functions, the error-handling functions are optional. Omit them from your script if they are not needed.</p>"},{"location":"scripting/programming_your_javascript/#defining-a-standard-or-severe-error","title":"Defining a Standard or Severe Error","text":"<p>By default, WebLOAD and WebLOAD Recorder only stop a script if a severe error occurs, such as an overflow or an illegal operation. However, users may redefine when exactly WebLOAD should halt a test session through the WebLOAD Recorder GUI through the Pass/Fail Definition tab of the Tools &gt; Default / Current Options dialog box. Options include:</p> <ul> <li>Failing on the first severe error occurrence.</li> <li>Specifying an absolute error threshold of failure if more than a specified number of errors or warnings occur.</li> <li>Specifying a relative error threshold of failure if more than a specified percentage of errors or warnings occur.</li> <li>Tracking numbers of errors only after a certain amount of time has elapsed from the start of the test session. This slight delay allows the test session to establish and stabilize an initial Web connection that may have no connection to the actual application being tested, preventing premature (and meaningless) session failures.</li> </ul>"},{"location":"scripting/programming_your_javascript/#execution-sequence-after-stop-and-abort","title":"Execution Sequence after Stop and Abort","text":"<p>Stop a script by issuing a Stop command through the Console or WebLOAD Recorder GUI. Abort a script during its debugging by issuing an Abort command through the WebLOAD Recorder. An Abort command cannot be issued through the Console. Stop and Abort commands halt the Load Generator.</p> <p>After you issue the Stop command in the Console or WebLOAD Recorder, WebLOAD:</p> <ul> <li>Stops the main script in each thread.</li> <li>Runs the <code>OnScriptAbort()</code> function in any thread that you happen to stop in mid-round. <code>OnScriptAbort()</code> does not run in a thread that you happen to stop at the end of a round.</li> <li>Runs the <code>TerminateClient()</code> function in each thread.</li> <li>Stops the separate threads.</li> <li>Runs the <code>TerminateAgenda()</code> function of the script.</li> </ul> <p>Note: The script doesn\u2019t necessarily stop immediately when you issue the Stop command in the Console. The script checks for the command at the end of each round and during certain operations that may take a long time, such as HTTP Get and Post commands. For this reason, it is recommended that you do not program a very long loop in a script. Depending on the operations in the loop, the WebLOAD Console may have no way to interrupt the loop.</p> <p>After you issue the Abort command, WebLOAD Recorder:</p> <ul> <li>Stops the main script in each thread.</li> <li>Runs the <code>OnScriptAbort()</code> function in any thread that you happen to stop in mid-round. <code>OnScriptAbort()</code> does not run in a thread that you happen to stop at the end of a round.</li> </ul> <p>See the WebLOAD Recorder User Guide for more information on using these commands.</p> <p>Note: If you stop or abort WebLOAD Recorder during execution, a message dialog appears, telling the user that WebLOAD Recorder is collecting data in preparation for stopping the test session. While the window pops up immediately, it may stay open for a while if there is extensive clean-up work necessary before the current session may be shut down.</p> <p>The script doesn\u2019t necessarily stop immediately when you issue a Stop or Abort command. The script only checks for the command at the end of each round and during certain operations that may take a long time, such as certain HTTP transactions. For this reason, it is recommended that you do not program a very long loop in a script. Depending on the operations in the loop, WebLOAD Recorder may have no way to interrupt the loop.</p>"},{"location":"scripting/programming_your_javascript/#execution-sequence-after-stopping-a-virtual-client","title":"Execution Sequence after Stopping a Virtual Client","text":"<p>If an error condition occurs, you can stop a Virtual Client using <code>StopClient()</code> in your script. This function stops the execution of the Virtual Client running the script from which <code>StopClient()</code> was called. After <code>StopClient()</code> is called, this Virtual Client cannot be resumed. This function does not affect any other Virtual Client.</p> <p>When using <code>StopClient()</code>, you can specify the error level to display and a reason why the Virtual Client was terminated. After you issue the <code>StopClient()</code> command, WebLOAD does the following on the current (calling) thread only:</p> <ul> <li>Stops the main script in the current thread.</li> <li>Runs the <code>OnScriptAbort()</code> function in case the current thread is stopped in mid-round. <code>OnScriptAbort()</code> does not run in a thread that you happen to stop at the end of a round.</li> <li>Runs the <code>TerminateClient()</code> function in the current thread.</li> </ul> <p>See the WebLOAD Recorder User Guide for more information on using these commands.</p> <p>See the WebLOAD JavaScript Reference Guide for more information on using the <code>StopClient()</code> function.</p>"},{"location":"scripting/programming_your_javascript/#rules-of-scope-for-local-and-global-variables","title":"Rules of Scope for Local and Global Variables","text":"<p>To maximize testing options, WebLOAD offers the ability to run multiple scripts, in multiple threads, often across multiple Load Generators and machines. This may involve setting variables or flags or accessing data across multiple threads, scripts, Load Generators, or machines. Such multiple accesses must be handled carefully.</p> <p>This section describes the scope rules for all variables, both built-in configuration properties and user-defined shared variables, explaining how scripts can juggle multiple configuration settings and share data either locally or globally. This information supplements the usual JavaScript scope rules, which apply within a single thread.</p> <p>To understand the scope rules for user-defined variables, we need to distinguish between the following testing contexts:</p> <ul> <li>Limited Context , limited to a specific browser action within a script</li> <li>Local Context , local to a single thread of a single script</li> <li>Global Context , which may be global to the following extent:<ul> <li>Shared by all threads of a single script running on a single Load Generator.</li> <li>Shared by all threads of multiple scripts, including a mix of scripts, running on a single Load Generator.</li> <li>Global to all threads of a single script, running on multiple Load Generators, potentially on multiple machines, system-wide.</li> <li>Global to all threads of multiple scripts, including a mix of scripts, running on multiple Load Generators, potentially on multiple machines, system-wide.</li> </ul> </li> </ul> <p>Each of these testing contexts is described in the following sections.</p> <p>Note: The HTTP configuration properties documented in this section may be edited through the IntelliSense Editor, as described in Editing the Editing the JavaScript Code. However, remember that the majority of application tests rarely require anything more than perhaps a few user-defined global variables or configuration settings, which can be created and set through the WebLOAD Recorder or Console dialog boxes. Manual intervention in individual configuration values within the JavaScript code of a script is not usually recommended.</p>"},{"location":"scripting/programming_your_javascript/#limited-context","title":"Limited Context","text":"<p>Limited variables are only visible or accessible within the bounds of a specific function or code block. Users may also define configuration properties that are only applicable to a specific browser action, managed through the <code>wlHttp</code> object.</p> <p>For example, to limit a variable <code>LimitedX</code> to a specific function only, use the IntelliSense Editor to create a function within a JavaScript Object and assign a value to a <code>LimitedX</code> variable within that function. The <code>LimitedX</code> variable will only be meaningful within the context of the function in which it appears.</p> <p>This is illustrated in the following code fragment:</p> <pre><code>//Context limited to specific function only function MyFavoriteFunction() {\n\nvar limitedX = 20   //Scope of limitedX is the\n\n//current function only\n\n}\n\n//Main script Body\n\ny = limitedX + 2    //Error, limitedX is undefined here\n</code></pre>"},{"location":"scripting/programming_your_javascript/#working-with-thewlhttpobject","title":"Working with the<code>wlHttp</code>Object","text":"<p>Configuration properties that are limited to a single transaction are managed through the <code>wlHttp</code> object, described in this section.</p> <p>In WebLOAD scripts, HTTP transactions are performed using <code>wlHttp</code> objects. You do not need to declare or create a <code>wlHttp</code> object before using it in your script. WebLOAD automatically creates a single <code>wlHttp</code> object for each thread of a script.</p> <p><code>wlHttp</code> objects include a complete set of HTTP configuration properties. HTTP configuration properties are also included with the more general <code>wlGlobals</code> and <code>wlLocals</code> objects. However, the configuration values assigned in a<code>wlHttp</code>object are the definitive configuration values for the transaction immediately following the property value assignment, overriding both the local defaults assigned in <code>wlLocals</code> and the global defaults assigned in <code>wlGlobals</code>. WebLOAD uses the <code>wlLocals</code> or <code>wlGlobals</code> defaults only if you do not assign values to the corresponding properties in the<code>wlHttp</code>object.</p> <p>For example, one of the properties of <code>wlHttp</code> is the FormData, which stores information that the user entered during the session. In the main body of the following script, the user defines <code>FormData</code> value and then completes the browser activity. For the specific command that immediately follows the<code>wlHttp</code>property assignment, the <code>wlHttp</code> <code>FormData</code> value will override any default local or global <code>FormData</code> value.</p> <pre><code>//Main script Body \nwlHttp.FormData[\"login\"] = \"demo\" \nwlHttp.FormData[\"password\"] = \"demo\"`\n</code></pre>"},{"location":"scripting/programming_your_javascript/#erasing-and-preserving-the-http-configuration","title":"Erasing and Preserving the HTTP Configuration","text":"<p>By default, <code>wlHttp</code> properties are cleared automatically after every HTTP transaction. This lets you assign different values for each connection (for example, a different URL, user name, or form data), without having to explicitly delete your previous connection data. In general it is better to assign special <code>wlHttp</code> properties at the specific point where they are needed, in the main script and not in <code>InitClient()</code>, so they will be reassigned as needed in every round.</p> <p>The decision of whether or not to erase <code>wlHttp</code> values is based on the value of the <code>wlHttp.Erase</code> property, which by default is set to true. You may optionally set the <code>Erase</code> property value to false. If Erase is set to false, the <code>wlHttp</code> property data will not be deleted automatically. This may be convenient if you know you will always need the same information, and do not wish to reassign the same values over and over again for each transaction. However, it could also leave you with unexpected, unintended<code>wlHttp</code>property values. See the WebLOAD JavaScript Reference Guide, for a complete syntax specification.</p> <p>A better way to preserve the HTTP configuration is to define it using the <code>wlGlobals</code> and <code>wlLocals</code> objects, rather than wlHttp. The properties of <code>wlGlobals</code> and <code>wlLocal</code>s are not erased unless you change them yourself. However, the recommended way to set configuration values is through the Default or Current Project Options dialog boxes under the Tools menu in the WebLOAD Recorder or Console desktop.</p>"},{"location":"scripting/programming_your_javascript/#local-context","title":"Local Context","text":"<p>The local script thread context is local to each individual thread of a script. Local objects may not be accessed in the global context. Different threads may not access or alter the value of the same local variable, since it is local to a single thread. Different threads may only share variable values through global variables.</p> <p>Local configuration properties are managed through the <code>wlLocals</code> object. Local values for both user-defined variables and configuration properties are initialized in the <code>InitClient()</code> function of a script. Read or assign local values using JavaScript</p> <p>Object nodes added to the main script, as described in Editing the JavaScript Code.</p>"},{"location":"scripting/programming_your_javascript/#working-with-the-wllocals-object","title":"Working with the wlLocals Object","text":"<p>Configuration properties that are local to a single script thread are managed through the <code>wlLocals</code> object, described in this section. You do not need to declare or create a <code>wlLocals</code> object before using it in your script. WebLOAD automatically creates a single <code>wlLocals</code> object for each thread of a script.</p> <p><code>wlLocals</code> is a WebLOAD-supplied local object, which sets the local default configuration for HTTP commands (overriding any global defaults set in <code>wlGlobals</code>, but overridden in turn by any values set in <code>wlHttp</code>). For example, one of the properties of <code>wlLocals</code> is the URL to which the object connects. If you set a different value of <code>wlLocals.Url</code> in each thread of a script, then each thread can connect to a different URL, as the following script illustrates:</p> <pre><code>function InitClient() {//Local context\n//Set the URL for each thread \nif (ClientNum == 0)\n   wlLocals.Url = \"http://www.ABCDEF.com\"\nelse\n   wlLocals.Url = \"http://www.GHIJKL.com\"\n}\n\n//Thread 0 connects to www.ABCDEF.com\n//All other threads connect to www.GHIJKL.com \nwlHttp.Get()\n</code></pre>"},{"location":"scripting/programming_your_javascript/#working-with-user-defined-variables-local-context","title":"Working with User-Defined Variables (Local Context","text":"<p>Within the local context, you can define any variables that you wish. The variables are local to a single thread. By default, the scope of a local variable is the entire local thread context. For example, you can define a variable localX in the InitClient() function and use it in the main script to store different values depending on the script thread or round number.</p> <p>The corresponding JavaScript code may look similar to this:</p> <pre><code>//Local context function \nInitClient() {\n//Assign a different value to the local copy\n//of localX in thread 0 only \nif (ClientNum == 0) {\n  localX = 20\n} else {\n  localX = 10\n}\n\n//Main script Body\n\n//Access the local values of localX &amp; y\ny = localX + 2  //y = 22 in thread 0\n\n//y = 12 in all other threads\n</code></pre> <p>You can also limit the scope to a single function by defining the variable using a var statement.</p>"},{"location":"scripting/programming_your_javascript/#global-context","title":"Global Context","text":"<p>Global variables are universally accessible and shared by all script components in all threads of a script, within the initialization and termination functions as well as the main script body. Global variables and configuration properties are defined within the <code>InitAgenda()</code> initialization function of a script. Once a global variable has been declared you may read and assign values to that variable at any subsequent point in your script.</p> <p>For example, it may be convenient to define as a global variable a message text or a URL string that you expect to use and reuse frequently within your script. Or you may need a global counter that should be incremented each time any script thread reaches a certain point in the test session. You could increment the variable value using JavaScript Object nodes added to the main script, as described in *Editing the JavaScript. Add an InfoMessage node to the Script Tree to check on how the global variable value changes over the course of a test session, as illustrated in the following figure:</p> <p></p> <p>In the preceding figure, the script contains nodes for a:</p> <ul> <li>JavaScript Object</li> <li>Short sleep period</li> <li>Message to the Log Window</li> </ul> <p>The JavaScript View pane displays the corresponding JavaScript code, beginning with the navigation to the new Web page and a short sleep period. The code that corresponds to the InfoMessage node in the Script Tree is circled. This node is used to increment and then print the value of a user-defined global variable.</p>"},{"location":"scripting/programming_your_javascript/#working-with-the-wlglobals-object","title":"Working with the wlGlobals Object","text":"<p>Configuration properties that are global to all threads of a single script are managed through the <code>wlGlobals object</code>, described in this section. The global script context includes global variables and settings that are shared by all threads of a single script, running on a single Load Generator.</p> <p>Globally shared values are managed through the following objects:</p> <ul> <li><code>wlGlobals</code></li> <li><code>wlGeneratorGlobal</code></li> <li><code>wlSystemGlobal</code></li> </ul> <p>This section describes the <code>wlGlobals</code> object properties used for global HTTP configuration settings, and reviews HTTP command search-order precedence.<code>wlGlobals</code> object properties used for user-defined global variables are described in the WebLOAD Recorder User Guide.</p> <p>WebLOAD provides a global object called <code>wlGlobals</code>. The <code>wlGlobals</code> object stores the default configuration properties for HTTP connections, such as:</p> <ul> <li>The URL</li> <li>user name and password</li> <li>proxy server</li> <li>HTML parsing behavior</li> </ul> <p>WebLOAD creates exactly one <code>wlGlobals</code> object for each script. You can access <code>wlGlobals</code> properties and methods anywhere in a script, in both the global and local contexts.</p> <p>Initialize and set the properties of <code>wlGlobals</code> in the <code>InitAgenda()</code> function of your script. The values are then set globally and shared by each script\u2019s set of threads. For example, set a property such as <code>wlGlobals.DisableSleep</code> in <code>InitAgenda(</code>) for it to automatically have the same value for all rounds. The value may be overridden by resetting the <code>wlHttp.DisableSleep</code> value, as illustrated in the following script:</p> <p>Note: Remember that HTTP configuration settings and sleep configuration preferences are usually set directly through a dialog box in the WebLOAD Recorder or Console desktop, as described in the WebLOAD Recorder User Guide and the WebLOAD Console User Guide. The JavaScript coding example here is only intended to illustrate the balance between global defaults and local overrides.</p> <pre><code>// Initialization function\u2014wlGlobals context function InitAgenda() {\n// By default, do not include \u2018sleep pauses\u2019 in this script \nwlGlobals.DisableSleep = true\n}\n\n// Main Script Body\u2014wlHttp context \nif (RoundNum&lt;20)\nwlHttp.DisableSleep = false\n...\n</code></pre> <p>WebLOAD executes the <code>InitAgenda()</code> method when test execution first starts, and decides by default to disable all sleep pauses over the course of script execution:</p> <p><code>wlGlobals.DisableSleep = true</code></p> <p>For rounds 0-19, the main script overrides the global default and allows pausing during script execution:</p> <p><code>wlHttp.DisableSleep = false</code></p> <p>After the first 20 rounds of execution are completed, there is no local value assigned, so the script will again, by default, no longer allow sleep pauses.</p> <p><code>wlGlobals</code> object commands may be added directly to the code in a JavaScript Object within a script through the IntelliSense Editor, as described in Editing the JavaScript. Users who are programming their own JavaScript Object code within their script may take advantage of the WebLOAD Recorder GUI to simplify their programming efforts. Manually typing out the code to create a <code>wlGlobals</code> object method or property, risks making a mistake, and adding invalid code to the script file. Instead, users may bring up a list of available objects for the <code>wlGlobals</code> object, by right-clicking in the JavaScript Editing Pane, selecting Insert &gt; General from the pop- up menu, and selecting one of the available items.</p> <p></p> <p>Select <code>wlGlobals</code> from the list and WebLOAD Recorder automatically inserts the correct code for a <code>wlGlobals</code> object into the script code currently being edited. The IntelliSense Editor then helps programmers write the JavaScript code for <code>wlGlobals</code> properties and methods by bringing up a list of appropriate choices together with pop- up boxes that describe each item on the list, as illustrated in the following figure:</p> <p></p> <p>Working with the IntelliSense Editor is described in Editing the Editing the JavaScript Code. See the description of <code>wlGlobals</code> objects in the WebLOAD JavaScript Reference Guide for a complete syntax specification.</p>"},{"location":"scripting/programming_your_javascript/#variables-defined-through-the-wlgeneratorglobal-object-with-wlcurrentagenda-flag","title":"Variables Defined through the wlGeneratorGlobal Object with WLCurrentAgenda Flag","text":"<p>For users who are comfortable working inside the JavaScript code of their scripts, WebLOAD provides a global object called <code>wlGeneratorGlobal</code>. The <code>wlGeneratorGlobal</code> object, when used with the <code>WLCurrentAgenda</code> scope flag, stores variable values that you wish to share between all threads of a single script, running on a single Load Generator. WebLOAD creates exactly one <code>wlGeneratorGlobal</code>object for each script. You can access <code>wlGeneratorGlobal</code>properties and methods anywhere in the script, in both the global and local contexts.</p> <p><code>wlGeneratorGlobal</code> includes the following methods:</p> <ul> <li> <p><code>Set(\u201cSharedVarName\u201d, value, WLCurrentAgenda)</code>\u2014 assigns a number, Boolean, or string value to the specified shared variable. If the variable does not exist, WebLOAD will create a new variable.</p> </li> <li> <p><code>Get(\u201cSharedVarName\u201d, WLCurrentAgenda)</code>\u2014 returns the current value for the specified shared variable. The calling script thread waits for the requested value to be returned before continuing execution.</p> </li> <li><code>Add(\u201cSharedIntVarName\u201d, number, WLCurrentAgenda)</code>\u2014 increments the specified shared number variable by the specified amount. If the variable has not been declared or Set previously, the Add function both declares and sets the variable to the specified value.</li> </ul>"},{"location":"scripting/programming_your_javascript/#variables-defined-through-the-wlgeneratorglobal-object-with-wlallagendas-flag","title":"Variables Defined through the wlGeneratorGlobal Object with WLAllAgendas Flag","text":"<p>The shared multiple script context includes global variables and settings that are shared by all threads of a multiple scripts. The <code>wlGeneratorGlobal</code> object, when used with the <code>WLAllAgendas</code> scope flag, stores variable values that you wish to share between all threads of one or more scripts, including a mix of scripts, part of one or more spawned processes, running on a single Load Generator. You can access <code>wlGeneratorGlobal</code> properties and methods anywhere in the script, in both the global and local contexts.</p> <p><code>wlGeneratorGlobal</code> includes the methods with the <code>WLAllAgendas</code> scope flag instead of the <code>WLCurrentAgenda</code> flag:</p> <ul> <li><code>Set(\u201cSharedVarName\u201d, value, WLAllAgendas</code>)</li> <li><code>Get(\u201cSharedVarName\u201d, WLAllAgendas)</code></li> <li><code>Add(\u201cSharedIntVarName\u201d, number, WLAllAgendas)</code></li> </ul>"},{"location":"scripting/programming_your_javascript/#wlgeneratorglobal-example","title":"wlGeneratorGlobal Example","text":"<p><code>wlGeneratorGlobal</code> properties and methods can be accessed from anywhere within a script. They do not have to be set or initialized in any special place, and are not limited in where they may appear. Simply use the variables as necessary within your script code.</p> <p>For example:</p> <pre><code>function InitAgenda() { \n\n    B = new Number\n\n    B = 0\n\n    wlGeneratorGlobal.Set(\"B\", 1, WLAllAgendas)\n\n    wlGeneratorGlobal.Set(\"C\", 4, WLCurrentAgenda)\n\n}\n\nfunction InitClient() { \n    wlGeneratorGlobal.Add(\"B\", 2, WLAllAgendas)\n    wlGeneratorGlobal.Add(\"C\", 5, WLCurrentAgenda)\n\n\n\nInfoMessage(\"C\u2014agenda1 = \" + wlGeneratorGlobal.Get(\"C\", WLCurrentAgenda))\n\n}\n\n// Main script Body\n\nB = wlGeneratorGlobal.Get(\"B\", WLAllAgendas) if (RoundNum==1){\n\nInfoMessage(\"B\u2014agenda1 = \" + B)\n\n}\n\nSleep(1000)\n\n  wlGeneratorGlobal.Add(\"B\", 10 , WLAllAgendas) \n  InfoMessage(\"B2\u2014agenda2 = \" +\n     wlGeneratorGlobal.Get(\"B\", WLAllAgendas)) \n  wlGeneratorGlobal.Add(\"C\", 25, WLCurrentAgenda) \n  InfoMessage(\"C\u2014agenda1 = \" +\n     wlGeneratorGlobal.Get(\"C\", WLCurrentAgenda))\n</code></pre> <p>Note: In the preceding example, the globally shared value of \u201cB\u201d is assigned to a local variable B. If you plan to use many InfoMessage commands, it is more efficient to assign the value to a local variable, rather than using a new <code>wlGeneratorGlobal.Get</code> call each time.</p> <p>See Editing the JavaScript Code, for an introduction to editing your JavaScript code with the IntelliSense Editor. See the description of the <code>wlGeneratorGlobal</code>object in the WebLOAD JavaScript Reference Guide for a complete syntax specification.</p>"},{"location":"scripting/programming_your_javascript/#variables-defined-through-the-wlsystemglobal-object-with-wlcurrentagenda-flag","title":"Variables Defined through the wlSystemGlobal Object with WLCurrentAgenda Flag","text":"<p>The global script context includes global variables and settings that are shared by all threads of a single script, system-wide. The <code>wlSystemGlobal</code> object, when used with the <code>WLCurrentAgenda</code> scope flag, stores variable values that you wish to share between all threads of a single script, part of one or more spawned processes, potentially running on multiple Load Generators, and multiple machines. You can access <code>wlSystemGlobal</code> properties and methods anywhere in the script, in both the global and local contexts.</p> <p><code>wlSystemGlobal</code> includes essentially the same methods described in Variables Defined through the wlGeneratorGlobal Object with WLAllAgendas Flag , applied here to global variables:</p> <ul> <li> <p><code>Set(\u201cGlobalVarName\u201d, value, WLCurrentAgenda)</code>\u2014assigns a number, Boolean, or string value to the specified global script variable. If the variable does not exist, WebLOAD will create a new variable.</p> </li> <li> <p><code>Get(\u201cGlobalVarName\u201d, WLCurrentAgenda)</code>\u2014returns the current value for the specified global variable. The calling script thread waits for the requested value to be returned before continuing execution.</p> </li> <li><code>Add(\u201cGlobalIntVarName\u201d, number, WLCurrentAgenda)</code>\u2014increments the specified global number variable by the specified amount. If the variable has not been declared or <code>Set</code> previously, the <code>Add</code> function declares and sets the variable to the specified value.</li> </ul>"},{"location":"scripting/programming_your_javascript/#variables-defined-through-the-wlsystemglobal-object-with-wlallagendas-flag","title":"Variables Defined through the wlSystemGlobal Object with WLAllAgendas Flag","text":"<p>The global multiple script context provides full, system wide global variables, shared by all elements of a test session. The <code>wlSystemGlobal</code> object, when used with the <code>WLAllAgendas</code> flag, stores variable values that you wish to share between all threads of all scripts, part of one or more spawned processes, on all Load Generators and machines, system-wide. You can access <code>wlSystemGlobal</code> properties and methods anywhere in the script, in both the global and local contexts.</p> <p><code>wlSystemGlobal</code> includes essentially the same methods described in Variables Defined through the wlSystemGlobal Object with WLCurrentAgenda Flag , with the <code>WLAllAgendas</code> scope flag in stead of the <code>WLCurrentAgenda</code> flag:</p> <ul> <li><code>Set(\u201cGlobalVarName\u201d, value, WLAllAgendas)</code></li> <li><code>Get(\u201cGlobalVarName\u201d, WLAllAgendas)</code></li> <li><code>Add(\u201cGlobalIntVarName\u201d, number, WLAllAgendas)</code></li> </ul>"},{"location":"scripting/programming_your_javascript/#wlsystemglobal-example","title":"wlSystemGlobal Example","text":"<p><code>wlSystemGlobal</code> properties and methods can be accessed from anywhere within a script. They do not have to be set or initialized in any special place, and are not limited in where they may appear. Simply use the variables as necessary within your script code.</p> <p>For example:</p> <pre><code>function InitAgenda() {\n\n&lt;snip&gt;\n\n}\n\nfunction InitClient() {\n    wlSystemGlobal.Set(\"E\", -2, WLCurrentscript)\n    wlSystemGlobal.Set(\"D\", 0, WLAllAgendas) \n    wlSystemGlobal.Set(\"S\",\"http://www.yahoo.com\",WLAllAgendas)\n\n}\n\n// Main script Body\n\nwlSystemGlobal.Add(\"D\", 100, WLAllAgendas) \nif (RoundNum==1){\n    InfoMessage(\"D\u2014agenda4 = \" + \n        wlSystemGlobal.Get(\"D\", WLAllAgendas))\nwlSystemGlobal.Add(\"E\", 0.5, WLCurrentAgenda) \nif (RoundNum==1){\n    InfoMessage(\"E\u2014agenda3 = \" +\n        wlSystemGlobal.Get(\"E\", WLCurrentAgenda))\n\n}\n\nSleep(1000)\n</code></pre> <p>See Editing the JavaScript Code, for an introduction to editing your JavaScript code with the IntelliSense Editor. See the description of <code>wlSystemGlobal</code> objects in the WebLOAD JavaScript Reference Guide for a complete syntax specification.</p>"},{"location":"scripting/programming_your_javascript/#example-using-a-combination-of-global-variables","title":"Example: Using a Combination of Global Variables","text":"<p>The following sample script combines the different global variable options introduced in the previous sections:</p> <pre><code>function InitAgenda() {\n   wlGeneratorGlobal.Set(\"C\", 4, WLCurrentAgenda)\n   wlGeneratorGlobal.Set(\"B\", 1, WLAllAgendas)\n   &lt;snip&gt;\n\n}\nfunction InitClient() { \n   wlGeneratorGlobal.Add(\"C\", 5, WLCurrentAgenda)\n   InfoMessage(\"C - agenda1 = \" +\n       wlGeneratorGlobal.Get(\"C\", WLCurrentAgenda))\n     wlGeneratorGlobal.Add(\"B\", -2, WLAllAgendas)\n     wlSystemGlobal.Set(\"E\", +1, WLCurrentAgenda)\n     wlSystemGlobal.Set(\"D\", 0, WLAllAgendas)\n     wlSystemGlobal.Set(\"S\",\"http://www.yahoo.com\",WLAllAgendas)\n\n}\n\n// Main script Body\n\nB = wlGeneratorGlobal.Get( \"B\", WLAllAgendas) \nwlSystemGlobal.Add(\"E\", -1, WLCurrentAgenda)\nwlSystemGlobal.Add(\"D\", 100, WLAllAgendas) \nif (RoundNum==1){\n   InfoMessage(\"B - agenda1 = \" + B) \n   InfoMessage(\"E - agenda1 = \" +\n       wlSystemGlobal.Get( \"E\", WLCurrentAgenda)) \n       InfoMessage(\"D - agenda1 = \" +\n       wlSystemGlobal.Get( \"D\", WLAllAgendas))\n\n}\nwlHttp.Get(wlSystemGlobal.Get(\"S\", WLAllAgendas))\nSleep(1000)\n</code></pre>"},{"location":"scripting/programming_your_javascript/#search-order-precedence","title":"Search Order Precedence","text":"<p>Before WebLOAD begins a browser action, it searches for configuration parameters in the following order of precedence:</p> <ol> <li><code>wlHttp</code>properties (configuration property values limited to a specific browser object)</li> <li><code>wlLocals</code> properties (configuration property values that are local to a specific script thread)</li> <li><code>wlGlobals</code> properties (configuration property values that are global defaults, set at script initialization)</li> </ol> <p>For example:</p> <ol> <li>WebLOAD decides whether or not it will use recorded sleep times based on the value of <code>wlHttp.DisableSleep</code>.</li> <li>If <code>wlHttp.DisableSleep</code> is not set, WebLOAD then searches for a value in the local default <code>wlLocals.DisableSleep</code>.</li> <li>Finally, if both <code>wlHttp.DisableSleep</code> and <code>wlLocals.DisableSleep</code> are both not set, WebLOAD will use the global default value found in <code>wlGlobals.DisableSleep</code>, set at script initialization.</li> </ol> <p>The same order of precedence applies to all the wlGlobals, wlLocals, and<code>wlHttp</code>properties. You can set global and local defaults for the UserName, Url, or other configuration properties. When WebLOAD executes a transaction, it uses any configuration property values that you have specified for that specific connection. If you have not assigned a value for the connection, WebLOAD searches for the local and global defaults, in that order.</p> <p>Note: The recommended way to set configuration values is through the Default or Current Project Options dialog boxes under the Tools menu in the WebLOAD Recorder or Console desktop. Explicitly setting these values for a specific browser action, which is possible only if you set these properties within your script code, does give you a much more focused and sophisticated power, but it is also more risky, triggering unexpected side effects or complications. Configuration property settings within a script will always override the configuration property values set globally through the WebLOAD GUI. Keep these points in mind when deciding how to set your system configuration to get the most out of your script test session.</p>"},{"location":"scripting/programming_your_javascript/#global-sharing-considerations","title":"Global Sharing Considerations","text":"<p>A WebLOAD test session measures an application\u2019s performance. The testing tool, your script, must consume minimal system resources to have as small an impact as possible on the performance of the application being tested. To minimize system overhead when running your test script, WebLOAD recommends using the minimal level of global sharing required to run your test correctly.</p> <p>Variables that are accessible within a single script only have the smallest impact on system performance, as noted in wlGeneratorGlobal Example . For maximum efficiency and simplicity, WebLOAD strongly recommends creating and managing user-defined variables through the WebLOAD Recorder GUI, as described in the WebLOAD Recorder User Guide.</p> <p>Values shared between multiple scripts, but within a single Load Generator, are the next most efficient choice. Global values shared system wide should only be included in your script if it is truly necessary to check values or synchronize data shared across multiple Load Generators or machines.</p> <p>To optimize performance times during a test, multiple access requests from multiple sources are accommodated sequentially. Script execution is not held for the <code>Set()</code> or <code>Add()</code> methods, which are queued and processed sequentially. Only the <code>Get()</code> method actually holds a script while waiting for the requested value to be returned.</p> <p>Over the course of a typical test session, multiple script threads may all be accessing, and potentially changing, the values of the same global variables. For example, two threads may each get <code>GlobalVarX</code>, currently set to 10. The two threads may then wish to increment <code>GlobalVarX</code> by 1, setting it to a new value of 11. These two <code>Get()</code> and two <code>Set()</code> commands are processed sequentially, independent of each other. Since each script got an initial value of 10, each script will independently set the value to 11. The final value will be set to 11, even though the variable was actually incremented twice, and should now equal 12. To avoid this potential inconsistency, WebLOAD recommends using the <code>Add()</code> command, which gets, changes, and resets a global value in a single action, ensuring /that each thread always accesses the most current value for a global variable and avoiding potential conflicts between threads.</p>"},{"location":"scripting/programming_your_javascript/#identification-variables-and-functions","title":"Identification Variables and Functions","text":"<p>For performance statistics to be meaningful, testers must be able to identify the exact point being measured. WebLOAD therefore provides the following identification variables and functions:</p> <ul> <li> <p>Two variables, <code>ClientNum</code> and <code>RoundNum</code>, identify the client and round number of the current script instance.</p> </li> <li> <p>The <code>GeneratorName()</code> function identifies the current Load Generator.</p> </li> <li>The <code>GetOperatingSystem()</code> function identifies the operating system of the current Load Generator.</li> <li>The <code>VCUniqueID()</code> function identifies the current Virtual Client instance.</li> </ul> <p>An example is provided at the end of this section to illustrate common use of these variables and functions. Use these variables and function to support the WebLOAD measurement features and obtain meaningful performance statistics.</p> <p>These identification variables and functions are usually accessed and inserted into script files directly through the WebLOAD Recorder GUI.</p> <p>To open the Variables Window</p> <ol> <li>Start debugging. Click Run   or Step Into .</li> <li>Check the Variables Window checkbox in the Debug tab of the ribbon</li> </ol> <p></p> <p>The Variables window contains a grid with fields for the variable name and value. The debugger automatically fills in these fields. You cannot add variables or expressions to the Variables window (you must use the Watch window), but you can expand or collapse the variables shown. You can expand an array, object, or structure variable in the Variables window if it has a plus sign (+) box in the Name field. If an array, object, or structure variable has a minus sign (-) box in the Name field, the variable is already fully expanded.</p> <p>The Variables window has a Context box that displays the current scope of the variables displayed. To view variables in a different scope, select the scope from the drop-down list box.</p>"},{"location":"scripting/programming_your_javascript/#viewing-the-value-of-a-variable","title":"Viewing the Value of a Variable","text":"<p>You can view the value of a variable in the Variables window.</p> <p>To view a variable in the Variables window:</p> <ol> <li>Start debugging. Click Run   or Step Into.</li> <li>Check the Variables Window checkbox in the Debug tab of the ribbon</li> </ol>"},{"location":"scripting/programming_your_javascript/#clientnum","title":"ClientNum","text":"<p>This is the serial number of the client in the WebLOAD test configuration. <code>ClientNum</code> is a read-only local variable. Each client in a Load Generator has a unique <code>ClientNum</code>. However, two clients in two different Load Generators may have the same <code>ClientNum</code>.</p> <p>Note: <code>ClientNum</code> is not unique system wide. Use VCUniqueID() , to obtain an ID number which is unique system-wide.</p> <p>Add <code>RoundNum</code> directly to the code in any JavaScript Object in your script. Work through the IntelliSense Editor, described in Using the IntelliSense JavaScript Editor .</p> <p>For example, if there are N clients in a Load Generator, the clients are numbered 0, 1, 2, ..., N-1. You can access <code>ClientNum</code> anywhere in the local context of the script (<code>InitClient()</code>, main script, <code>TerminateClient()</code>, etc.). <code>ClientNum</code> does not exist in the global context (<code>InitAgenda()</code>, <code>TerminateAgenda()</code>, etc.).</p> <p>If you mix scripts within a single Load Generator, instances of two or more scripts may run simultaneously on each client. Instances on the same client have the same <code>ClientNum</code>value.</p> <p><code>ClientNum</code> reports only the main client number. It does not report any extra threads spawned by a client to download nested images and frames. See WebLOAD Actions, Objects, and Functions in the WebLoad JavaScript Reference Guide for more information about spawning threads.</p> <p>Note: Earlier versions of WebLOAD referred to this value as <code>ClientNum</code>. The variable name <code>ClientNum</code> will still be recognized for backward compatibility.</p>"},{"location":"scripting/programming_your_javascript/#roundnum","title":"RoundNum","text":"<p>The number of times that WebLOAD has executed the main script of a client during the WebLOAD test, including the current execution. <code>RoundNum</code> is a read-only local variable, reporting the number of rounds for the specific WebLOAD client, no matter how many other clients may be running the same script.</p> <p><code>RoundNum</code> does not exist in the global context of a script (<code>InitAgenda()</code>, etc.). In the local context:</p> <ul> <li>In <code>InitClient()</code>, RoundNum = 0.</li> <li>In the main script, <code>RoundNum</code> = 1, 2, 3, ....</li> <li>In <code>TerminateClient()</code>, <code>OnScriptAbort()</code>, or <code>OnErrorTerminateClient()</code>, <code>RoundNum</code> keeps its value from the final round.</li> </ul> <p>The WebLOAD clients do not necessarily remain in synchronization. The <code>RoundNum</code> may differ for different clients running the same script. If a thread stops and restarts for any reason, the RoundNum continues from its value before the interruption. This can occur, for example, after you issue a Pause command from the WebLOAD Console.</p> <p>If you mix scripts in a single Load Generator, WebLOAD maintains an independent round counter for each script. For example, if <code>agenda1</code> has executed twice and <code>agenda2</code> has executed three times on a particular thread, the <code>RoundNum</code> of <code>agenda1</code> is 2 and the <code>RoundNum</code> of <code>agenda2</code>is 3.</p> <p>Add <code>RoundNum</code> directly to the code in a script through the IntelliSense Editor, described in Editing the Editing the JavaScript Code. Select a function by right- clicking the JavaScript Editing Pane, and selecting Insert &gt; General from the pop-up menu. WebLOAD Recorder automatically inserts the correct code for the selected function into the script file. The user may then edit parameter values without any worries about mistakes in the function syntax.</p> <p></p>"},{"location":"scripting/programming_your_javascript/#example-identifying-a-client-and-round","title":"Example: identifying a client and round","text":"<p>For example, suppose your script submits data to a server on an HTML form. You want to label one of the form fields so you can tell which WebLOAD client submitted the data, and in which round of the main script.</p> <p>You can do this using a combination of the ClientNum and RoundNum variables. Together, these variables uniquely identify the WebLOAD client and round. For example, you can submit a string such as the following in a form field:</p> <p><code>\"C\" + ClientNum.toString() + \"R\" + RoundNum.toString()</code></p>"},{"location":"scripting/programming_your_javascript/#generatorname","title":"GeneratorName()","text":"<p>This returns a unique identification string for the current Load Generator. <code>GeneratorName()</code> provides a unique identification for the current Load Generator instance, even with multiple spawned processes running simultaneously. The identification string is composed of a combination of the current Load Generator name, computer name, and other internal markers.</p>"},{"location":"scripting/programming_your_javascript/#getoperatingsystem","title":"GetOperatingSystem()","text":"<p>This returns a string that identifies the operating system running on the current Load Generator. If an operating system is available in more than one version, returns the name of the operating system followed by an identifying version number.</p> <p>For example:</p> <ul> <li> <p>If the Load Generator is working with a Windows platform, possible return values include:</p> <ul> <li>Windows 95</li> <li>Windows 98</li> <li>Windows NT/2000</li> <li>Windows XP</li> <li>Windows OtherVersionNumber</li> </ul> </li> <li> <p>If the Load Generator is working with a Solaris platform, this function would return the string <code>\u2018Solaris\u2019</code> followed by the version name and release number, such as <code>SunOS2</code>.</p> </li> <li>If the Load Generator is working with a Linux platform, this function would return the string <code>\u2018Linux\u2019</code> followed by the version name and release number, such as <code>RedHat1</code>.</li> </ul>"},{"location":"scripting/programming_your_javascript/#vcuniqueid","title":"VCUniqueID()","text":"<p>This returns a unique identification string for the current Virtual Client instance.</p> <p><code>VCUniqueID()</code> provides an identification for the current Virtual Client instance which is unique system-wide, across multiple Load Generators, even with multiple spawned processes running simultaneously. Compare this to ClientNum , which provides an identification number that is only unique within a single Load Generator. The identification string is composed of a combination of the current thread number, round number, and other internal markers.</p>"},{"location":"scripting/programming_your_javascript/#pacing-and-sleep-time","title":"Pacing and Sleep Time","text":"<p>There are various ways and methods to control how virtual users similate wait time to simulate think time or sleep time, and how this time is reflected in the statistics.</p>"},{"location":"scripting/programming_your_javascript/#sleep-and-sleepalways","title":"Sleep() and SleepAlways()","text":"<p>To add wait time to the script, use Sleep() with number of milliseconds to wait, for example:</p> <pre><code>//Sleep 5 seconds:\nSleep(5000); \n</code></pre> <p>The actual wait time will depent on the sleep settings, by default the Recorder ignores sleep, and Console uses Sleep As Recorded but this can be changed in the Sleep time settings</p> <p>To override the settings and always wait, use SleepAlways() with number of milliseconds to wait, for example:</p> <pre><code>//Always Sleep 5 seconds, regardless of settings:\nSleepAlways(5000); \n</code></pre>"},{"location":"scripting/programming_your_javascript/#round-and-transaction-pacing","title":"Round and Transaction Pacing","text":"<p>Pacing is used to set a minimum time for exection, to set a constant pace of operation. This can be done on the whole script (round) level, or for a single transaction.</p> <p>For example: <pre><code>BeginTransaction(\"Login\", 5000);\n\nwlHttp.Get(\"http://dologin\");\n\nEndTransaction(\"Login\");\n</code></pre></p> <p>This will make sure that the \"Login\" transaction will take no less that 5 seconds. For example, if the request takes 1 second, 4 seconds of sleep time is added. If the request takes 2 seconds, 3 seconds of sleep time is added. If the request takes more than 5 minues, not sleep time is added but the transaction will take longer than expected so for pacing to work, make sure to add enough time. See BeginTransaction().</p> <p>Pacing can also be performed of the whole script level using ElapsedRoundTime property. For example:</p> <pre><code>function InitAgenda(){\n    wlGlobals.ElapsedRoundTime = 50000; //round should take at least 5 seconds\n}\n</code></pre>"},{"location":"scripting/programming_your_javascript/#how-sleep-is-executed-and-measureed","title":"How Sleep is executed and measureed","text":"<p>Sleep() commands in the script are affected by the sleep time settings. There are settings in the Recorder (default is ignores sleep) and separetly in the Console (default to Sleep As Recorded). The Sleep behavior can be controlled in the Sleep time settings.</p> <p>Transaction times by default contain sleep time. You can use setting to cause transaction times not to include sleep times. See Sleep Time in Transactions</p>"},{"location":"scripting/programming_your_javascript/#sleep-synchronization","title":"Sleep Synchronization","text":"<p>Sometimes it is usedful to have all virtual users sleep the same amount, to synchronize their behavior (for example when many users start an action at same time).</p> <p>Use SleepUntil(millis) to until until certain amout of time has passed since the begining of the session (regardless of when this particular virtual client started - all clients will wait for this same point in time).</p> <p>SleepEvery(millis) - similar to SleepUntil but recorring.</p>"},{"location":"scripting/using_asynchronous/","title":"Using Asynchronous Requests","text":""},{"location":"scripting/using_asynchronous/#asynchronous-http-requests-in-webload","title":"Asynchronous HTTP Requests in WebLOAD","text":"<p>Regular HTTP requests in WebLOAD are synchronous, meaning that script execution is blocked whenever an HTTP request (such as wlHttp.Get, wlHttp.Post, etc.) is made, and continues once the request data is fully received. The response is then made available in the \u2018document\u2019 object. For example:</p> <pre><code>wlHttp.SaveSource=true;\nwlHttp.Get(\"http://make/sync/request\");\n//execution blocked here until the full request is retrieved \nInfoMessage(document.wlSource);\n</code></pre> <p>However in asynchronous requests, execution is not blocked, rather it immediately continues. Asynchronous requests are executed by calling the \u2018wlHttp.Async\u2019 property.</p>"},{"location":"scripting/using_asynchronous/#using-wlhttpasync-to-execute-requests-asynchronously","title":"Using wlHttp.Async to Execute Requests Asynchronously","text":"<p><code>wlHttp.Async</code> makes HTTP requests asynchronous. When using asynchronous requests, the script does not wait for the request to complete before moving on to the next statement. In order to work with the response, you can use the asynchronous callback functions:</p> <ul> <li>onDocumentComplete\u2013 Defines a callback function to be called after the asynchronous request has been completed. For example, it validates the response and makes a further request.</li> <li>onDataReceived\u2013 Defines a callback function to be called every time more data is received for the request. This is useful for working with asynchronous requests that need to be inspected before they are completed, for example in an HTTP streaming push scenario.</li> </ul> <p>In order to use Asynchronous requests, you need to set a global settings to allow it in <code>InitAgenda</code> - <code>wlGlobals.SyncAlways=false</code></p>"},{"location":"scripting/using_asynchronous/#using-ondocumentcomplete-in-asynchronous-execution","title":"Using onDocumentComplete in Asynchronous Execution","text":"<p>In the regular HTTP request example shown above, the document cannot be accessed after the request is made because it is not yet available. In order to access the response document, you need to register a function that will be called when the response is available, using the \u2018onDocumentComplete\u2019 property. For example:</p> <pre><code>function InitAgenda()\n{\n   //Allow asynchronous requests:\n   wlGlobals.SyncAlways=false;\n}\n\n\nwlHttp.Async = true;\nwlHttp.onDocumentComplete = function(document)\n{ \n    InfoMessage(\"full response:\" + document.wlSource);\n}\nwlHttp.Get(\"http://make/async/request\");\n//document.wlSource is not available here. \nSleep(1000);\n</code></pre>"},{"location":"scripting/using_asynchronous/#using-ondatareceived-in-asynchronous-execution","title":"Using onDataReceived in Asynchronous Execution","text":"<p>To inspect the partial response as it is being received, use the \u2018onDataReceived\u2019 property. For example:</p> <pre><code>function InitAgenda()\n{\n   wlGlobals.SyncAlways=false;\n}\nwlHttp.Async = true;\nwlHttp.onDataReceived = function(document) { \n   InfoMessage(\"response so far:\" + document.wlSource);\n}\nwlHttp.Get(\"http://make/async/request\");\n</code></pre>"},{"location":"scripting/using_asynchronous/#push-protocols","title":"Push Protocols","text":"<p>The HTTP protocol is a request/response protocol, meaning that the server can respond to client requests, but cannot initiate unsolicited responses. Yet there are scenarios</p> <p>when the server is required to \u2018push\u2019 data to the client, for example, chat applications, user notifications, etc.</p> <p>There are several techniques that can be used to achieve server push:</p> <ul> <li>Polling: the client (browser) sends a request to the server at regular intervals. For more information refer to Using Polling Protocol in WebLOAD .</li> <li>Long polling: the client request is kept on hold until the server can deliver a valid response. When data from the server needs to be pushed, the server responds and closes the connection. The client is then expected to start a new connection and wait for the server\u2019s next message (response).    For more information refer to Using Long Polling in WebLOAD .</li> <li>Streaming: the client make a request. The server builds the response progressively as more data is available (for example, using \u2018chunked data\u2019). The client reads and handles this data but keeps the connection open, waiting for more data to arrive. For more information refer to Using HTTP Streaming in WebLOAD .</li> </ul>"},{"location":"scripting/using_asynchronous/#using-polling-protocol-in-webload","title":"Using Polling Protocol in WebLOAD","text":"<p>Polling requests are regular, short requests, so there is no need for asynchronous code to implement them. Because the message sequence in playback can be different from the recorded one, it is useful to convert the polling requests to a loop.</p> <p>For example, if the recorded agenda was:</p> <pre><code>wlHttp.Get(\"http://get-update\");\nSleep(2000); \nwlHttp.Get(\"http://get-update\"); \nSleep(2000); \nwlHttp.Get(\"http://get-update\"); \nSleep(2000);\n\n...\n</code></pre> <p>It can be converted to the following loop:</p> <pre><code>keepUpdating=true; \nwhile(keepUpdating) {\n   wlHttp.Get(\"http://get-update\");\n   if (document.wlSource==\"LAST_MESSAGE\") {         \n       keepUpdating=false;\n   }\nSleep(2000);\n}\n</code></pre>"},{"location":"scripting/using_asynchronous/#using-long-polling-in-webload","title":"Using Long Polling in WebLOAD","text":"<p>Long polling is similar to polling, but the requests are blocked for longer.</p> <p>Long polling can be implemented like polling above, but because it blocks script execution, other tasks cannot be performed, such as polling on two different URLs or running the polling in the background while performing other HTTP requests.</p> <p>To run long polling alongside other tasks, asynchronous requests must be used. For example:</p> <pre><code>function getUpdates() { \nwlHttp.Async=true;\nwlHttp.onDocumentComplete=function(document){ \n   if (document.wlSource==\"LAST_MESSAGE\") {\n      return;\n   } else { //keep polling recursively: \n  setTimeout(getUpdates,0);\n   }\n   } \n  wlHttp.Get(\"http://get-update\");\n}\ngetUpdates();\n//execution continues here... \nwlHttp.Get(\"http://other-thing\");\n</code></pre>"},{"location":"scripting/using_asynchronous/#using-http-streaming-in-webload","title":"Using HTTP Streaming in WebLOAD","text":"<p>In HTTP streaming, the server response is never ending (or very long), and each new response data is considered a new \u2018message\u2019 (or it can be delimited with some delimiter).</p> <p>To handle the server partial responses, the \u2018onDataReceived\u2019 callback function should be used.</p> <p>For example:</p> <pre><code>var prevIdx = 0; //data seen so far \nwlHttp.onDataReceived= function(document) {\n    var currIdx = document.wlSource.length; \n    if (currIdx &lt;= prevIdx ) { //no new data\n      return;\n    }\n    var msg = document.wlSource.substr(prevIdx, currIdx); \n    prevIdx = currIdx;\n    InfoMessage(msg );\n   }\n</code></pre>"},{"location":"scripting/using_asynchronous/#using-settimeout-for-delayed-function-execution","title":"Using setTimeout for Delayed Function Execution","text":"<p>The <code>setTimeout()</code> function is used to execute a callback function after a specified number of milliseconds, in a non-blocking manner. That is, script execution continues immediately, not waiting for the specified time or the function to execute.</p> <p>The following example shows how <code>setTimeout()</code> is used when executing synchronous requests. In the example, a function is starting a long request that is waiting for a message to be sent two seconds after the request started. :</p> <pre><code>function sendMessage(){\n   wlHttp.Post(\u201chttp://send-some-message\u201d );\n}\nsetTimeout(sendMessage, 2000);  //2 - after 2 seconds, send.\nwlHttp.Get(\u201chttp://long-request\u201d); //1 - start the long request\n</code></pre> <p>Callback functions are expected to run in a timely manner, because a callback blocks the execution of other callback functions. Therefore <code>Sleep()</code> should not be used inside a callback function (for example, the functions used in <code>onDocumentComplete</code>, onDataReceived and setTimeout itself). Instead, use <code>setTimeout()</code> inside a callback function. For example:</p> <pre><code>wlHttp.Async=true; \nwlHttp.onDocumentComplete=function(document){\n   InfoMessage(\u201cgot response, now send a reply after\n3 seconds\u2026\u201d);\n   setTimeout(function(){ \n    wlHttp.Async=true;\n    wlHttp.Get(\u201chttp://send-reply-message\u201d);\n   }, 3000);\n }\nwlHttp.Get(\u201chttp://send-first-message\u201d);\n</code></pre>"},{"location":"scripting/working_with_http/","title":"Working with HTTP Protocol","text":"<p>Website load testing usually means testing how typical user activities are handled by the system under test not in a single-user scenario but rather under heavy usage load. Using load testing, we can test the system\u2019s performance, scalability and reliability, all in real-life simulated usage scenarios and patterns. A system\u2019s performance is all about how fast it functions; its reliability is about how often it\u2019s available (where a system might be unavailable due to a lack of a certain resource or because of a bug); and a</p> <p>system\u2019s scalability is about how these two factors (performance and reliability) change as the usage of the system increases.</p> <p>WebLOAD was designed as a protocol-level load testing tool, enabling the QA</p> <p>professional to \u201cbombard\u201d the system under test with protocol-level commands and transactions, simulating real usage of a large amount of users. The main and most important protocol for load testing Internet applications is the HTTP protocol.</p> <p>WebLOAD supports the common HTTP methods and headers, as defined in the HTTP RFCs, most notably RFC 2616 (1999), that was defined by the W3C and the IETF.The WebLOAD DOM extension set includes objects, methods, properties, and functions that support designing tests at the HTTP protocol level. Using the DOM, functional and verification tests can be done, to check the system\u2019s reliability under load.</p> <p>This chapter documents the features that apply to QA professionals creating scripts based on the HTTP Protocol, where HTTP transactions and the responses they trigger are the focus of the test session. This chapter includes a few sample scripts that you can study to help learn the HTTP Protocol testing technique. The examples are fictitious, but you can copy the scripts and edit them for use in real WebLOAD tests. More sample scripts may be found on the WebLOAD Script Libraries, at http://www.webload.org/index.php?option=com_wrapper&amp;Itemid=160.</p>"},{"location":"scripting/working_with_http/#understanding-the-webload-dom-structure","title":"Understanding the WebLOAD DOM Structure","text":"<p>For optimum website testing, WebLOAD extended the standard browser DOM with many features and functions that are critical to site testing and evaluation. The following figure, an extended version of the basic DOM hierarchy tree, highlights many of the added elements of the WebLOAD DOM hierarchy. The remainder of this chapter provides more detailed information about some of the special elements and features that WebLOAD added to the basic DOM model that are used when working in HTTP Protocol mode.</p> <p></p> <p>The preceding illustration highlights in bold the WebLOAD extensions used by WebLOAD when working with the Document Object Model.</p> <p>Note: WebLOAD-specific objects are identified by the wl prefix.</p> <p>The following table lists some of the extensions that WebLOAD has added to the standard DOM objects, properties, and methods.</p> WebLOAD extensions Description Objects wlCookie Sets and deletes cookies. wlException WebLOAD error management object. wlGeneratorGlobal and wlSystemGlobal objects Handles global values shared between script threads or Load Generators. wlGlobals Manages global system and configuration values. wlHeader Contains the key/value pairs in the HTTP command headers that brought the document. (Get, Post, etc.) wlHtml Retrieves parsed elements of HTTP header fields. wlHttp Performs HTTP transactions and stores configuration property values for individual transactions. wlLocals Stores local configuration property values. wlMeta Stores the parsed data for an HTML meta object. wlOutputFile Writes script output messages to a global output file. wlRand Generates random numbers. wlSearchPair Contains the key/value pairs in a document\u2019s URL search strings. wlTable, row, and cell objects Contains the parsed data from an HTML table. XML DOM objects <p>XML DOM object set that both accesses XML site information and</p><p>generates new XML data to send back to the server for processing.</p> Properties wlSource Contains the complete HTML source code of the frame, in a read- only string. wlStatusLine Contains the status line of the HTTP header, in a read-only string. wlStatusNumber Contains the HTTP status value, which WebLOAD retrieves from the HTTP header, in a read-only integer. wlVersion Contains the HTTP protocol version, which WebLOAD retrieves from the HTTP header, in a read-only string. Methods wlGetAllForms Retrieves a collection of all forms ( elements) in an HTML page and its nested frames. wlGetAllFrames Retrieves a collection of all frames in an HTML page, at any level of nesting. wlGetAllLinks Retrieves a collection of all links ( elements) in an HTML page and its nested frames."},{"location":"scripting/working_with_http/#using-multiple-ip-addresses","title":"Using Multiple IP Addresses","text":"<p>WebLOAD enables the creation of a single test script that includes multiple IP addresses, simulating the behavior of actual users.</p> <p>Note: Before you enable support of multiple IP addresses, you must first generate additional IP addresses on your machine to use when testing.</p> <p>Enable the use of all available IP addresses through the property <code>wlGlobals.MultiIPSupport</code>. The values of <code>MultiIPSupport</code> are:</p> <ul> <li>false \u2013 Use only one IP address. (default)</li> <li>true \u2013 Use all available IP addresses.</li> </ul> <p>Indicate whether WebLOAD should use the same IP or a different IP for every round, by setting the value of the <code>wlGlobals.MultiIPSupportType</code> property which supports the following values:</p> <ul> <li>PerClient \u2013 WebLOAD preserves the current behavior, meaning that there are different IPs per client but the same IP is used for all rounds. This is the default setting.</li> <li>PerRound \u2013 WebLOAD supports the use of a different IP from the pool per client, per round, until the pool is exhausted, after which it returns to the beginning.</li> </ul> <p>The exact number of IPs that WebLOAD supports depends on the operating system being used:</p> <ul> <li>With Unix, WebLOAD uses the <code>gethostbyname()</code> function to access the IP address. There is no limit to the number of IP addresses that WebLOAD supports.</li> <li>With Windows, WebLOAD loads an SNMP agent dll file, through which WebLOAD accesses the IP information. The SNMP agent exists on all Windows versions since Win95 and NT, even if an SNMP agent is not installed. This method queries all of the IPs, one at a time, and places the result in a list maintained in the WebLOAD\u2019s engine code. WebLOAD continues to go over the entire IP list, until it reaches the engine code\u2019s limit of 100,000 IPs.</li> </ul> <p>If for some reason the SNMP does not work, WebLOAD uses another method whose limitation is 35 IPs.</p>"},{"location":"scripting/working_with_http/#generating-ip-addresses-in-the-script","title":"Generating IP Addresses in the script","text":"<p>After enabling the use of all available IP addresses, you can generate additional IP addresses on your machine by setting the TCP/IP properties through the Windows UI. For further instructions consult your system administrator. Alternatively, you can use the FillIP.bat file provided with WebLOAD, as described below.</p> <p>To generate IP addresses in the script:</p> <ol> <li> <p>Locate the <code>FillIP.bat</code> file in <code>&lt;WebLOAD directory&gt;\\bin</code>.</p> </li> <li> <p>Run the batch file by entering the file name in the command line or double-clicking the file.</p> <p>The command line window appears. </p> </li> <li> <p>Enter the <code>netsh</code> command to generate the list of IP addresses.</p> <p><code>FillIP IP\\_prefix subnet\\_mask gateway from to</code></p> </li> </ol> <p>The <code>netsh</code> command parameters are described in the following table:</p> Parameter Description IP_prefix <p>The prefix used for all of the generated IP addresses. For example, if IP_prefix</p><p>is 192.168 then the generated IP address structure is 192.168.xxx.xxx.</p> subnet_mask The subnet_mask is matched with the IP address to determine the fourth section of the generated IP address, along with the gateway value. For example 255.255.0.0. gateway The gateway used for all of the generated IP addresses to determine the fourth section of the generated IP address, along with the subnet_mask value. For example, 192.168.0.1. from to Used to generate the third section in the IP address. For example, if from to is 1 24, then the generated IP addresses are all from xxx.xxx.1.xxx to xxx.xxx.24.xxx. <p>Upon successful completion, the Command Line window returns OK. If an error is encountered (for example, an illegal IP address), the Command Line window returns details about the error.</p> <p>For example, to generate approximately 6000 IP addresses, use the following command in the script:</p> <p><code>FillIP 192.168 255.255.0.0 192.168.0.1 1 24</code></p> <p>The following IP addresses are generated:</p> 192.168.1.1 192.168.2.1 \u2026 192.168.24.1 192.168.1.2 192.168.2.2 \u2026 192.168.24.2 <p>\u2026</p><p>192.168.1.255</p> <p></p><p>192.168.2.255</p> <p></p><p>\u2026</p> <p></p><p>192.168.24.255</p>"},{"location":"scripting/working_with_http/#parsing-web-pages","title":"Parsing Web Pages","text":"<p>Web testing sessions work with Web pages, by accessing a specified page and verifying that all operations are completed correctly. As part of the Web page access, downloaded Web pages are parsed and the data from each page stored in a logical structure. This section gives a brief overview of the parsing approach to a Web page.</p>"},{"location":"scripting/working_with_http/#parsing-and-navigating-nested-frames-on-a-dynamic-html-page","title":"Parsing and Navigating Nested Frames on a Dynamic HTML Page","text":"<p>The following script downloads a dynamic HTML page belonging to a retailer that advertises on the Internet. The second frame on the page offers bargain prices on three different items each hour. The script performs the following operations, some of which are marked in bold in the script code:</p> <ul> <li>Downloads the page including the nested frames.</li> <li>Retrieves the second frame.</li> <li>Searches the HTML source code of the second frame to find the  element. <li>Confirms that the title is \"Offer of the Hour\". (If it is not, the script displays an error message and stops the current round of the thread where the error occurred. The thread continues with the next round.)</li> <li>Randomly selects one of the first three links in the second frame.</li> <li>Follows the link.</li> <p>Note: This script includes DOM objects that are not explained in this section. For more information about a specific object or usage, (such as <code>wlGlobals</code>, <code>wlRand</code>, or <code>wlHttp</code>), see that object\u2019s section in the WebLOAD JavaScript Reference Guide</p> <pre><code>function InitAgenda()\n{\n//Enable parsing of all links \n    wlGlobals.ParseLinks = true\n    //Enable downloading nested frames\n    wlGlobals.GetFrames =   true\n}\nfunction InitClient()\n{\n//Initialize the random number generator with a\n//different seed for each thread (ensures that each\n//thread follows a different sequence of links)       \n    wlRand.Seed(ClientNum)\n}\n//Main script Body\n//Store the most recent download in document .wlSource \nwlHttp.SaveSource = true\n//Download the dynamic HTML page\nwlHttp.Get(\"http://www.webloadmpstore.com/general_sample/frames/frames.htm\")\n//Retrieve the second frame \nMyFrame = document.frames[1] \nInfoMessage(MyFrame)\nInfoMessage(MyFrame.document.wlSource)\n\n//Confirm that the &lt;TITLE&gt; element of the frame is\n//\"Offer of the Hour\". If it is not, display an error\n//message and abort the current round.\n//Remember to escape the slash in &lt;/TITLE&gt;\n\n// Using extractValue to catch the title\nmyTitle = extractValue( \"&lt;title&gt;\", \"&lt;\\/title&gt;\", MyFrame.document.wlSource)\n\n// will print the content of the title \nInfoMessage (myTitle )\n\nif (myTitle != \"offer of the hour\")\n{\n    ErrorMessage(\"Thread \" + ClientNum.toString() + \", Round \" + RoundNum.toString() + \": Title is not \u2018Offer of the Hour\u2019 but is \" + myTitle )\n}\n//Retrieve the URL of a randomly selected link\nSelectedItem = wlRand.Select(0, 1, 2)\nLinkUrl = MyFrame.document.links[SelectedItem].href InfoMessage(LinkUrl )\n//Follow the link \nwlHttp.Get(LinkUrl)\n</code></pre>"},{"location":"scripting/working_with_http/#using-wlhtml-to-follow-a-dynamic-link","title":"Using wlHtml to Follow a Dynamic Link","text":"<p>The third link on a company\u2019s home page is an advertisement that links to one of several products. On successive accesses, the advertisement switches dynamically among the products.</p> <p>The following WebLOAD script tests the time that a user would need to follow the link.</p> <p>The script:</p> <ul> <li>Links to the home page and parses the HTML code.</li> <li>Retrieves the URL of the third link.</li> <li>Measures the time it takes WebLOAD to:<ul> <li>Download the main page and, depending on the parameters, do any of the following:<ul> <li>Download frames, images, tables, or whatever else has been specified.</li> <li>Download nested subframes, images, etc.</li> <li>Parse the document.</li> </ul> </li> </ul> </li> </ul> <p>In this script, WebLOAD displays two time statistics:</p> <ul> <li>The Round Time.</li> <li>The Link Time.</li> </ul> <pre><code>function InitAgenda()\n   {\n    //Set the default URL to the dynamic HTML home page\n    wlGlobals.Url = \"http://www.ABCDEF.com\"\n    //Parse links. Forms are not needed. \n    wlGlobals.ParseLinks = true \n    wlGlobals.ParseForms = false\n    }\n//Main script\n//Connect to the home page \nwlHttp.Get()\n// Retrieve the third link on the home page using the manual\n// GetLinkByIndex() method.\n// See IdentifyObject() for the dynamic ASM alternative \nLink3 = wlHtml.GetLinkByIndex(3)\n//Measure the time to connect to the link \nSetTimer(\"Link Time\") \nwlHttp.Get(Link3.href)\nSendTimer(\"Link Time\")\n</code></pre>"},{"location":"scripting/working_with_http/#data-submission-properties","title":"Data Submission Properties","text":"<p>You may submit many types of data to an HTTP server in a Get, Post, or Head command. For example, you can submit a search string, the results of form fields, or a file. You may assign values to variable data stored in these collections using the <code>wlSet</code> method.</p> <p>The <code>wlHttp</code> object provides the following collections to store the data that you want to submit:</p> <ul> <li><code>FormData</code></li> <li><code>Data</code></li> <li><code>DataFile</code></li> <li><code>Header</code></li> </ul> <p>At the time you first create your test script, you should decide which collection is most appropriate for your test session activities.</p> <ul> <li><code>FormData</code> is the standard collection of field values, common to all HTML forms.</li> <li><code>Header</code> is the collection of header field values only.</li> <li><code>Data</code> and DataFile are both collections that hold sets of data.<ul> <li><code>Data</code> collections are stored within the script itself, and are useful when you prefer to see the data directly.</li> <li><code>DataFile</code> collections store the data in local text files, writing only the name of the data file within the script itself, and are useful when you are working with large amounts of data, which would be too cumbersome to store within the script code itself.</li> </ul> </li> </ul> <p>Your script can work with both <code>Data</code> and <code>DataFile</code>collections. Do not use both properties on the same object (a single HTTP request can use either <code>Data</code> or <code>DataFile</code> collections, but not both).</p>"},{"location":"scripting/working_with_http/#formdata","title":"FormData","text":"<p><code>FormData</code> is a collection containing form field values. WebLOAD submits the field values to the HTTP server when you call one of the following methods of the <code>wlHttp</code> object:</p> <ul> <li><code>Get()</code></li> <li><code>Post()</code></li> <li><code>Head()</code></li> </ul> <p>The collection indices are the field names (HTML name attributes). Before you call <code>wlHttp.Post()</code>, set the value of each element to the data that you want to submit in the HTML field. The fields can be any HTML controls, such as:</p> <ul> <li>buttons</li> <li>text areas</li> <li>hidden controls</li> </ul> <p>Generally, when an HTTP client (Microsoft Internet Explorer/Firefox or WebLOAD) sends a URL-encoded request to the server, the data is HTTP encoded. Different clients \u2013 browsers or JavaScript functions such as Ajax \u2013 perform encoding with slight differences. Encoding form data replaces special characters such as blanks, \u201c&gt;\u201c signs, and so on, with \u201c%xx\u201d (an ASCII hexa number). For example, a space is encoded as \u201c%20\u201d or as a \u201c+\u201d.</p> <p>The <code>Get()</code> method converts a URL address to contain only allowed URL characters. The <code>Post()</code> method converts the content of forms to contain only allowed URL characters. Forms contain one of the following content types:</p> <ul> <li><code>FormData [\u201ckey\u201d]</code> \u2013 a value</li> <li><code>Data []</code> \u2013 raw information</li> <li><code>DataFile []</code> \u2013 both a value and raw information</li> </ul> <p>Turn off the encoding when the script sends large requests that have no data that needs to be encoded. This improves performance as it bypasses the scanning and reformatting of the request buffer. You can enable or disable encoding, by accessing the HTTP Parameters tab in the Current or Default Project Options dialog box, in WebLOAD Recorder. Check or uncheck Encode Form Data to enable or disable encoding.</p>"},{"location":"scripting/working_with_http/#getting-formdata-using-get","title":"Getting FormData Using Get","text":"<p>You can get form data using a <code>Get()</code> call. For example:</p> <p><code>wlHttp.FormData[\"FirstName\"] = \"Bill\"</code></p> <p><code>wlHttp.FormData[\"LastName\"] = \"Smith\"</code> </p> <p><code>wlHttp.FormData[\"EmailAddress\"] = \"bsmith@ABCDEF.com\"</code> </p> <p><code>[wlHttp.Get(\"http://www.ABCDEF.com/submit.cgi\")](http://www.ABCDEF.com/submit.cgi)</code></p> <p>WebLOAD appends the form data to the URL as a query statement, using the</p> <p>following syntax:</p> <p><code>http://www.ABCDEF.com/submit.cgi</code> <code>?FirstName=Bill&amp;LastName=Smith</code> <code>&amp;EmailAddress=bsmith@ABCDEF.com</code></p>"},{"location":"scripting/working_with_http/#submitting-formdata-using-post","title":"Submitting FormData Using Post()","text":"<p>Suppose you are testing an HTML form that requires name and email address data. You need to submit the form to the submit.cgi program, which processes the data.</p> <p>You can code this in the following way:</p> <p><code>wlHttp.FormData[\"FirstName\"] = \"Bill\"</code> </p> <p><code>wlHttp.FormData[\"LastName\"] = \"Smith\"</code></p> <p><code>wlHttp.FormData[\"EmailAddress\"] = \"bsmith@ABCDEF.com\"</code> <code>wlHttp.Post(\"http://www.ABCDEF.com/submit.cgi\")</code></p> <p>The <code>Post()</code> call connects to <code>submit.cgi</code> and sends the <code>FormData</code> fields. In the above example, WebLOAD would post the following fields:</p> <p><code>FirstName=Bill</code> </p> <p><code>LastName=Smith</code></p> <p><code>EmailAddress=bsmith@ABCDEF.com</code></p>"},{"location":"scripting/working_with_http/#submitting-formdata-with-missing-fields","title":"Submitting FormData with Missing Fields","text":"<p>You can use the string \"<code>$WL$EMPTY$STRING$</code>\" to represent a missing name or value (an empty string) in a FormData field. You can use the string \"<code>$WL$VOID$STRING$</code>\" to represent a token that is posted alone, without even an equal sign.</p> <p>The following lines illustrate the syntax:</p> <p><code>wlHttp.FormData[\"FirstName\"] =\"$WL$EMPTY$STRING$\"</code> </p> <p><code>wlHttp.FormData[\"$WL$EMPTY$STRING$\"] = \"Smith\"</code> </p> <p><code>wlHttp.FormData[\"EmailAddress\"] = \"$WL$VOID$STRING$\"</code> </p> <p><code>wlHttp.Post(\"http://www.ABCDEF.com/submit.cgi\")</code></p> <p>In this example, the <code>Post()</code> call sends the following data:</p> <p><code>FirstName=</code></p> <p><code>=Smith</code></p> <p><code>EmailAddress</code></p> <p>A <code>Get()</code> call using the same form data would send:</p> <p><code>http://www.ABCDEF.com/submit.cgi?FirstName=&amp;=Smith&amp;EmailAddress</code></p> <p>Note: JavaScript supports two equivalent notations for named collection elements: <code>FormData.FirstName</code> <code>FormData[\"FirstName\"]</code> The latter notation also supports spaces in the name, for example, FormData[\"First Name\"].</p>"},{"location":"scripting/working_with_http/#using-formdata-with-data-files","title":"Using FormData with Data Files","text":"<p>You can coordinate the <code>FormData</code> property with input data files. In this case, one of the <code>FormData</code> fields stores identifying information about the data file, including the name of the file and the type of data in the file (text, binary, bmp, etc.).</p> <p>The following lines illustrate the syntax:</p> <p><code>wlHttp.FormData[\u201cInputFile.wlFile-Name\u201d] = \u201dmyFavoritePicture\u201d</code> </p> <p><code>wlHttp.FormData[\u201cInputFile.wlContent-Type] = \u201dbmp\u201d</code></p> <p>The following script fragment illustrates the <code>FormData</code> properties documented in this section. The input file lines are marked in bold.</p> <pre><code>...\n/***** WLIDE - URL : http://ws3/webft/fullform.asp - ID:4 *****/\nwlGlobals.UserAgent = \"Mozilla/4.0 (compatible; MSIE 7.0; \nWindows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\"\nwlHttp.Header[\"Referer\"] = \"http://ws3/webft/index.asp\"\nwlHttp.Get(\"http://ws3/webft/fullform.asp\")\n// END WLIDE\n\n/***** WLIDE - Sleep - ID:5 *****/ \nSleep(18890)\n// END WLIDE\n\n/***** WLIDE - URL : [http://ws3/webft/fullform.asp ](http://ws3/webft/fullform.asp)- ID:6 *****/\nwlGlobals.UserAgent = \"Mozilla/4.0 (compatible; MSIE 7.0; \nWindows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR \n3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\"\nwlHttp.Header[\"Referer\"] = \"http://ws3/webft/fullform.asp\"\nwlHttp.FormdataEncodingType = 1\nwlHttp.ContentType = \"application/x-www-form-urlencoded\"\nwlHttp.FormData[\"text1\"] = \"user1\" \nwlHttp.FormData[\"password1\"] = \"password1\"\nwlHttp.FormData[\"textarea1\"] = \"some text\" \nwlHttp.FormData[\"checkbox1\"] = \"second value\" \nwlHttp.FormData[\"select1\"] = \"first select value\" wlHttp.FormData[\"submit2\"] = \"Submit2\" \nwlHttp.Post(\"http://ws3/webft/fullform.asp\")\n// END WLIDE\n...\n/***** WLIDE - URL : http://ws3/upload/ssl-upload.html - ID:16*****/\nwlGlobals.UserAgent = \"Mozilla/4.0 (compatible; MSIE 7.0;\nWindows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR \n3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\"\nwlHttp.Get(\"http://ws3/upload/ssl-upload.html\")\n// END WLIDE\n/***** WLIDE - Sleep - ID:17 *****/ \nSleep(22999)\n// END WLIDE\n\n/***** WLIDE - URL : http://ws3/upload/ssl-upload-handler.php -ID:18 *****/\nwlGlobals.UserAgent = \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\"\nwlHttp.Header[\"Referer\"] = \"http://ws3/upload/ssl-upload.html\"\nwlHttp.EncodeFormdata = false;\nwlHttp.ContentType = \"multipart/form-data\" \nwlHttp.FormData[\"text\"] = \"abcd\" \nwlHttp.FormData[\"uploadFile[].wlFile-Name\"] = \"a.txt\" \nwlHttp.FormData[\"uploadFile[].wlContent-Type\"] = \"text/plain\"\nwlHttp.FormData[\"uploadFile[].wlFile-Name\"] = \"$WL$EMPTY$STRING$\"\nwlHttp.FormData[\"uploadFile[].wlContent-Type\"] = \"application/octet-stream\"\nwlHttp.FormData[\"uploadFile[].wlFile-Name\"] = \"$WL$EMPTY$STRING$\"\nwlHttp.FormData[\"uploadFile[].wlContent-Type\"] = \"application/octet-stream\"\nwlHttp.FormData[\"submit\"] = \"Submit Query\"\nwlHttp.Post(\"http://ws3/upload/ssl-upload-handler.php\")\n\n// END WLIDE\n</code></pre>"},{"location":"scripting/working_with_http/#data","title":"Data","text":"<p><code>Data</code> is a string to be submitted in an HTTP Post command. The Data property has two subfields:</p> <ul> <li><code>Data.Type</code>\u2014the MIME type for the submission</li> <li><code>Data.Value</code>\u2014the string to submit      You can use Data in two ways:</li> <li>As an alternative to <code>FormData</code> if you know the syntax of the form submission.</li> <li>To submit a string that is not a standard HTML form and cannot be represented by <code>FormData</code>.</li> </ul> <p>Thus the following three code samples are equivalent:</p> <pre><code>//Sample 1 \nwlHttp.Data.Type =\n    \"application/x-www-form-urlencoded\" \nwlHttp.Data.Value =\n    \"SearchFor=icebergs&amp;SearchType=ExactTerm\"\nwlHttp.Post(\"http://www.ABCDEF.com/query.exe\")\n//Sample 2\nwlHttp.FormData.SearchFor = \"icebergs\" \nwlHttp.FormData.SearchType = \"ExactTerm\" \nwlHttp.Post(\"http://www.ABCDEF.com/query.exe\")\n//Sample 3 \nwlHttp.Post\n(\"http://www.ABCDEF.com/query.exe\" + \"?SearchFor=icebergs&amp;SearchType=ExactTerm\")\n</code></pre> <p>Note: <code>Data</code> and <code>DataFile</code> are both collections that hold sets of data. <code>Data</code> collections are stored within the script itself, and are useful when you prefer to see the data directly. <code>DataFile</code> collections store the data in local text files, and are useful when you are working with large amounts of data, which would be too cumbersome to store within the script code itself. When working with <code>DataFile</code> collections, only the name of the text file is stored in the script itself.</p> <p>Your script can work with both Data and DataFile collections. Do not use both properties for the same lHTTP object (a single HTTP request can use either Data or DataFile properties, but not both). When you record your script with the WebLOAD Recorder, use the Post Data tab in the Recording and Script Generation Options dialog box to define the default behavior for submitting content types. The default behaviors are <code>Data</code> and <code>DataFile</code>, although you can edit these definitions and add additional predefined behaviors for other content types as well.</p>"},{"location":"scripting/working_with_http/#datafile","title":"DataFile","text":"<p><code>DataFile</code> is a file to be submitted in an HTTP Post command. WebLOAD sends the file using a MIME protocol.</p> <p><code>DataFile</code> has two subfields:</p> <ul> <li> <p><code>DataFile.Type</code>\u2014the MIME type</p> </li> <li> <p><code>DataFile.Filename</code>\u2014the name of the file, for example:</p> <p><code>\"c:\\\\MyWebloadData\\\\BigFile.doc\"</code></p> </li> </ul> <p>WebLOAD sends the contents of the file stored in  in the Post command."},{"location":"scripting/working_with_http/#header","title":"Header","text":"<p>A collection of HTTP header fields that you want to send in a <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> call.</p> <p>By default, WebLOAD sends the following header in any HTTP command:</p> <p><code>Accept: */*</code> <code>User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0) Host: &lt;host&gt;</code> <code>Connection:Keep-Alive</code> Here, <code>&lt;host&gt;</code> is the host name to which you are connecting, for example:</p> <p><code>www.ABCDEF.com:81.</code> By default, the Referer header is also recorded and sent, where it is being used by the Web server.</p> <p>You may reset these properties, for example, as follows:</p> <p><code>wlHttp.UserAgent = \"Mozilla/4.03 [en] (WinNT; I)\"</code></p> <p>Note: The user-agent header is defined in WebLOAD Recorder. Access Tools \u0086 Default or Current Project Options, select the Browser Parameters tab, and edit the user-agent field.</p> <p>Alternatively, you can use the Header property to override one of the default header fields. For example, you can redefine the following header field:</p> <p><code>wlHttp.Header[\"user-agent\"] = \"Mozilla/4.03 [en] (WinNT; I)\"</code></p> <p>Additional header fields are recorded and sent according to the checked Record Headers options in the Script Content tab of the Recording and Script Generation Options dialog box (in WebLOAD Recorder):</p> <p><code>Accept-Language: en-us</code> <code>UA-CPU: x86</code> <code>Pragma: no-cache</code></p> <p>Note: The headers <code>If-Modified-Since</code> and <code>If-None-Matched</code> will be commented out to overcome the situation where recorded links were fetched from the browser\u2019s cache during the recording. The request header <code>Accept-Encode: gzip</code> will also be commented out, to ensure correct behavior.</p> <p>When the Record Custom Headers option is enabled, WebLOAD records any headers that are not explicitly defined in the RFC, such as the SOAP Action header. This option is not selected by default.</p> <p>Note: Any information set using the <code>wlHttp.Header</code> property takes priority over any defaults set using the global, local, or other wlHttp properties. If there is any discrepancy between the document header information and the HTTP values, WebLOAD will work with the information found in the <code>wlHttp.Header</code> property while also issuing a warning to the user.</p> <p>WebLOAD offers a simple way to reset configuration properties using the Options tab of the Session Control menu. Resetting configuration properties as you run and rerun various testing scenarios allows you to fine tune your tests to match your exact needs at that moment. However, that this real-time configuration setting will be overruled by any configuration properties that are explicitly set by <code>wlHttp.Header</code> within your test scripts. For greatest reliability and flexibility, WebLOAD recommends that you set header properties using the more general <code>wlGlobals</code>, <code>wlLocals</code>, and <code>wlHttp</code> object properties, fine-tuning your test sessions using the WebLOAD Session menu.See Rules of Scope for Local and Global Variables , for more information on precedence and priority in script variables. Remember that you cannot override the host header or set a cookie header using the <code>Header</code> property. </p>"},{"location":"scripting/working_with_http/#erase","title":"Erase","text":"<p>Clear the WebLOAD properties of a <code>wlHttp</code> object after each <code>Get(), Post(),</code> or <code>Head()</code> call.</p> <p><code>WlHttp.Erase</code> is a read/write property. The default value is <code>true</code>. This section will describe the implications of each setting.</p>"},{"location":"scripting/working_with_http/#erasetrue-default","title":"Erase=true (default)","text":"<p>When <code>Erase</code> is set to <code>true</code>, WebLOAD automatically erases all <code>wlHttp</code> property values after each HTTP access. You must reassign any properties you need before the next HTTP access. For this reason, assign the properties of <code>wlHttp</code> only in the main script, not in <code>InitClient()</code>, so they will be reassigned in every round.</p> <p>Thus if <code>Erase</code> is set to <code>true</code> the following script is incorrect. In this script, the <code>wlHttp</code> properties are assigned values in <code>InitClient()</code>. The script would connect to the Url and submit the FormData only in the first round. After the first <code>Post()</code> call, the <code>Url</code> and FormData property values are erased, so WebLOAD cannot use them in subsequent rounds.</p> <p>The following script displays the incorrect method of assigning the <code>wlHttp</code> properties:</p> <p><pre><code>function InitClient() { //Wrong! \nwlHttp.Url =\n    \"http://www.ABCDEF.com/products.exe\"\nwlHttp.FormData[\"Name\"] = \"John Smith\" \nwlHttp.FormData[\"Product Interest\"] = \"Modems\"\n}\n//Main script \nwlHttp.Post()\n</code></pre> To solve the problem, assign the wlHttp property values in the main script, so that the assignments are executed before each <code>Get()</code>, <code>Post()</code>, or <code>Head()</code> call:</p> <pre><code>//Main script   //OK \nwlHttp.Url =\n   \"http://www.ABCDEF.com/products.exe\" \nwlHttp.FormData[\"Name\"] = \"John Smith\" \nwlHttp.FormData[\"Product Interest\"] = \"Modems\" \nwlHttp.Post()\n</code></pre> <p>Alternatively, you could assign values to <code>wlLocals</code> properties, which are not erased:</p> <pre><code>function InitClient() { //OK \nwlLocals.Url =\n    \"http://www.ABCDEF.com/products.exe\"\nwlLocals.FormData[\"Name\"] = \"John Smith\" \nwlLocals.FormData[\"Product Interest\"] =\n    \"Modems\"\n}\n//Main script \nwlHttp.Post()\n</code></pre>"},{"location":"scripting/working_with_http/#erasefalse","title":"Erase=false","text":"<p>You may set <code>Erase</code> to <code>false</code> to prevent erasure. For example, if for some reason you absolutely had to assign values to the wlHttp properties in the <code>InitClient()</code> function of the script, change the value of the <code>Erase</code> property to <code>false</code>. If Erase is <code>false</code>, the properties retain their values through subsequent rounds.</p> <p>Thus another way to correct the preceding example is to write:</p> <pre><code>function InitClient() { //OK \nwlHttp.Erase = false\nwlHttp.Url = \"http://www.ABCDEF.com/products.exe\" \nwlHttp.FormData[\"Name\"] = \"John Smith\" \nwlHttp.FormData[\"Product Interest\"] = \"Modems\"\n}\n//Main script \nwlHttp.Post()\n</code></pre> <p>User-defined properties are not linked to the <code>wlHttp.Erase</code> property and will not be erased automatically by WebLOAD. The only way to reset or erase user-defined properties is for the user to set the new values explicitly.</p>"},{"location":"scripting/working_with_http/#posting-form-data-using-elements","title":"Posting form Data Using Elements","text":"<p>Note: This script includes DOM objects that are not explained in this section. For more information about a specific object or usage, (such as <code>wlGlobals</code> or <code>wlHttp</code>), see that object\u2019s section in the WebLOAD JavaScript Reference Guide.</p> <p>The home page of a company displays the following form, where a user can specify interest in different products.</p> <p></p> <p>The HTML code for the form is:</p> <pre><code>&lt;FORM action=\"http://www.ABCDEF.com/FormProcessor.exe\" \nmethod=\"post\"&gt;\n&lt;P&gt;Your name: &lt;INPUT type=\"text\" name=\"yourname\"&gt;\n&lt;SELECT name=\"interest\"&gt;\n     &lt;OPTION selected&gt;Modems&lt;/OPTION&gt;\n     &lt;OPTION&gt;CD-ROMs&lt;/OPTION&gt;\n   &lt;/SELECT&gt;\n   &lt;INPUT type=\"submit\" value=\"Send\"&gt;\n&lt;/FORM&gt;\n</code></pre> <p>A script can download the form as follows:</p> <pre><code>function InitAgenda() {\n     wlGlobals.Url = \"http://www.ABCDEF.com\"\n     wlGlobals.ParseForms = true\n}\nwlHttp.Get()\n</code></pre> <p>WebLOAD parses the HTML code and creates an elements collection containing the first two form elements (the text box and the drop-down list). WebLOAD does not include the third element (the Send button) in the collection because it does not have a name attribute.</p> <p>This is a listing of the <code>elements</code> collection:</p> <pre><code>document.forms[0].elements[0].name = \"yourname\" \ndocument.forms[0].elements[0].type = \"text\" \ndocument.forms[0].elements[0].value = \"\" \ndocument.forms[0].elements[1].name = \"interest\" \ndocument.forms[0].elements[1].type = \"SELECT\" \ndocument.forms[0].elements[1].selectedindex = 0 \ndocument.forms[0].elements[1].options[0].text = \"Modems\" \ndocument.forms[0].elements[1].options[0].value = \"Modems\" \ndocument.forms[0].elements[1].options[0].selected = true \ndocument.forms[0].elements[1].options[1].text = \"CD-ROMs\" \ndocument.forms[0].elements[1].options[1].value = \"CD-ROMs\" \ndocument.forms[0].elements[1].options[1].selected = false\n</code></pre> <p>The script can use the above data to post the form back to the server. The following code illustrates how the script might do this.</p> <pre><code>MyArray = document.forms[0].elements i = 0\nwhile (i &lt; MyArray.length) { \n    switch MyArray[i].type { \n        case \"text\" :\n         //Retrieve the default value of a text box \n         wlHttp.FormData[[MyArray[i].name] = MyArray[i].value] \n         break\n         case \"SELECT\"\n         //Retrieve the first option in a drop-down list\n         wlHttp.FormData[MyArray[i].name]=MyArray[i].options[0].value         \n         break\n    }\ni++\n}\n//Post the data to the form server\nwlHttp.Post(document.forms[0].action)\n</code></pre>"},{"location":"scripting/working_with_http/#managing-cookies-through-the-wlcookie-object","title":"Managing Cookies through the wlCookie Object","text":""},{"location":"scripting/working_with_http/#the-wlcookie-object","title":"The wlCookie Object","text":"<p>The <code>wlCookie</code> object sets and deletes cookies. These activities may be required by an HTTP server.</p> <p>Note: You may use the methods of <code>wlCookie</code> to create as many cookies as needed. For example, each WebLOAD client running a script can set its own cookie identified by a unique name.</p> <p><code>wlCookie</code> is a local object. WebLOAD automatically creates an independent <code>wlCookie</code> object for each thread of a script. You cannot manually declare <code>wlCookie</code> objects yourself. See the WebLOAD JavaScript Reference Guide for a complete syntax specification for the <code>wlCookie</code> object and its methods.</p>"},{"location":"scripting/working_with_http/#how-webload-works-with-cookies","title":"How WebLOAD Works with Cookies","text":"<p>WebLOAD always accepts cookies that are sent from a server. When WebLOAD connects to a server, it automatically submits any cookies in the server\u2019s domain that it has stored. By default, WebLOAD clears the cookie cache after every round.</p> <p>The <code>wlCookie</code> object lets you supplement or override this behavior in the following ways:</p> <ul> <li>A thread can create its own cookies.</li> <li>A thread can delete cookies that it created.</li> </ul> <p>Except for the above, WebLOAD does not distinguish in any way between cookies that it receives from a server and those that you create yourself. For example, if a thread creates a cookie in a particular domain, it automatically submits the cookie when it connects to any server in the domain.</p>"},{"location":"scripting/working_with_http/#wlcookie-methods","title":"wlCookie Methods","text":"<p>The <code>wlCookie</code> object works with the following methods:</p> <ul> <li><code>ClearAll()</code>\u2014Delete all cookies set by wlCookie in the current thread.</li> <li><code>Delete()</code>\u2014Delete the cookie identified by the method parameters. The cookie must have been previously created by <code>wlCookie</code>.</li> <li><code>Get()</code>\u2014Returns the cookie value. If there is more than one cookie with the same parameters it returns the first cookie.</li> <li><code>Set()</code>\u2014Creates a cookie. You can set an arbitrary number of cookies in any thread. If you set more than one cookie applying to a particular domain, WebLOAD submits them all when it connects to the domain.</li> </ul> <p>Note: Set cookies within the main script of the script. WebLOAD deletes all the cookies at the end of each round. If you wish to delete cookies in the middle of a round, use the <code>Delete()</code> or <code>ClearAll()</code> method.</p>"},{"location":"scripting/working_with_http/#example-using-a-cookie","title":"Example: using a cookie","text":"<p>Cookies are used by applications to store the application requests on the client side. This enables the client to perform a one-time application request and from then on the request information is retrieved from the client\u2019s cookies.</p> <pre><code>//Request information entered into the application \nwlHttp.ContentType = \"application/x-www-form-urlencoded\" \nwlHttp.FormData[\"username\"] = \"zadp10\" \nwlHttp.FormData[\"password\"] = \"Start100\" \nwlHttp.FormData[\"submit1\"] = \"Login\"\n\n//Setting the cookie\nwlCookie.Set(\u201cUserID\u201d, \u201czapd10\u201d, \u201cwww.abcdef.net\u201d, \u201c/\u201d, \u201cSun, 19- Jun-2011 17:29:00 GMT\u201d)\n\n//WebLOAD submits the cookie \nwlHttp.Post(\"https://www.abcdef.net/default.aspx\")\n\n//Getting the cookie\nCookieValue = wlCookie.Get(\"UserID\")\n//The value returned in CookieValue is \u201czapd10\u201d\n</code></pre> <p>In some cases it is also necessary to delete the cookie settings. You can do this by entering: <pre><code>    //Delete the cookie \n    wlCookie.ClearAll()\n</code></pre></p>"},{"location":"scripting/working_with_http/#handling-binary-data","title":"Handling Binary Data","text":"<p>WebLOAD supports the simulation of binary data sent from the browser to the server. Binary data is handled specially, since it cannot be displayed as JavaScript literals in the script, unlike other types of data that can be displayed, such as numbers or text.</p>"},{"location":"scripting/working_with_http/#recording-binary-data","title":"Recording Binary Data","text":"<p>WebLOAD supports recording binary data in a script in one of the following ways:</p> <ul> <li>Recording binary data as a data file, which is external to the script.</li> <li>Encoding binary data in the script, so that you can view and edit the data.</li> </ul>"},{"location":"scripting/working_with_http/#recording-binary-data-as-a-data-file","title":"Recording Binary Data as a Data File","text":"<p>Modifying the script Options settings in the WebLOAD Recorder enables writing binary data into a data file, which is stored locally. When working with data files, only the name of the file is stored in the script itself.</p> <p>Recording binary data as a data file, enables WebLOAD to simulate sending binary data to the application, although the data itself cannot be edited in the script.</p> <p>To record binary data as a data file:</p> <ol> <li> <p>In WebLOAD Recorder, select Tools Recording and Script Generation Options. The Recording and Script Generation Options dialog box appears.</p> </li> <li> <p>In the Recording and Script Generation Options dialog box select the Post Datatab. </p> <p>The Post Data tab appears. </p> <p></p> </li> <li> <p>In the Add New Type field, enter the binary content-type, such as application/x-amf, which is used for binary content generated by a Flash application.</p> </li> <li> <p>Click As DATAFILE.</p> <p>The binary content-type is added to the DATAFILE block list.</p> </li> <li> <p>In the Recording and Script Generation Options dialog box, select the Content Types tab.</p> <p>The Content Types tab appears.</p> <p></p> </li> <li> <p>Ensure that the appropriate binary content-type appears in the Recorded Types area. If the content does not appear, add the binary content type in the Add new content type field and click Add.</p> <p>After setting the Record Option settings, binary data is stored in a local data file and the name of the file appears in the script.</p> </li> </ol> <p>The following sample script demonstrates how WebLOAD records binary data as a data file:</p> <pre><code>function InitAgenda()\n{\nCopyFile(\"wl2288601006.dat\",\"wl2288601006.dat\")\n}\nwlGlobals.GetFrames = false \nwlHttp.Get(\"http://www.webloadmpstore.com/flex/bin/Sample.html\")\n\nSleep(9056)\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/flex/bin/Shop.swf\"\nwlHttp.Header[\"Content-type\"] = \"application/x-amf\" \nwlHttp.Header[\"Content-length\"] = \"58\" \nwlHttp.DataFile[\"Type\"] = \"application/x-amf\" \nwlHttp.DataFile[\"Filename\"] = \"wl2288601006.dat\"\nwlHttp.Post(\"http://www.webloadmpstore.com/flashservices/gateway.php\")\n</code></pre>"},{"location":"scripting/working_with_http/#encoding-binary-data-in-the-script","title":"Encoding Binary Data in the script","text":"<p>Modifying the script Options settings in the WebLOAD Recorder enables the encoding of binary data in the script during the recording. Once recorded, the script can be edited, parameterized, and load tested as a regular script.</p> <p>To enable encoding binary data in the script:</p> <ol> <li> <p>In WebLOAD Recorder, select the Tools \u0086 Recording and Script Generation Options dialog box.</p> <p>The Recording and Script Generation Options dialog box appears.</p> </li> <li> <p>In the Recording and Script Generation Options dialog box select the Script Generation tab.</p> <p>The Script Generation tab appears.</p> <p></p> </li> <li> <p>Select the Encode binary data checkbox.</p> <p>This enables the user to view and parameterize the binary content.</p> </li> <li> <p>In the Recording and Script Generation Options dialog box, select the Post Data tab.</p> <p>The Post Data tab appears.</p> <p> </p> </li> <li> <p>In the Add New Type field, enter the binary content-type, such as <code>application/x-amf</code>, which is used for binary text generated by a Flash application.</p> </li> <li> <p>Click As DATA.       The binary content-type is added to the DATA block list.</p> </li> <li> <p>In the Recording and Script Generation Options dialog box, select the Content Types tab.</p> <p>The Content Types tab appears (see the Figure).</p> </li> <li> <p>Ensure that the appropriate binary content-type appears in the Recorded Types area. If the content does not appear, add the binary content type in the Add new content type field and click Add.</p> </li> </ol> <p>After setting the Record Option settings, when binary data is recorded and encoded in a script, <code>wlHttp.EncodeRequestBinaryData = true</code> is automatically added to the script. This encodes the binary data into the following usable format:</p> <p><code>wlHttp.Data[\"Value\"] = \"%00%00%00%00%00%01%00/com.oreilly.frdg.SearchProducts.getSearch Result%00%02/1%00%00%00%18%0a%00%00%00%01%03%00%06search%02%00%0 4wood%00%00%09\"</code></p> <p>The following sample script demonstrates how WebLOAD handles binary data encoded in the script:</p> <pre><code>function InitAgenda()\n{\nIncludeFile(\"wlamf.js\",WLExecuteScript);\n}\n\nwlGlobals.GetFrames = false \nwlHttp.EncodeRequestBinaryData = true\n\nwlGlobals.UserAgent = \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\"\nwlHttp.Get(\"http://www.webloadmpstore.com/flex/bin/Sample.html\")\n\nwlHttp.EncodeRequestBinaryData = true\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/flex/bin/Sample.html\"\nwlHttp.Get(\"http://www.webloadmpstore.com/flex/bin/history.htm\")\n\nwlHttp.EncodeRequestBinaryData = true\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/flex/bin/history.htm\"\nwlHttp.Get(\"http://www.webloadmpstore.com/flex/bin/history.swf\")\n\nwlHttp.EncodeRequestBinaryData = true\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/flex/bin/Sample.html)[ttp://www.webloadmpstore.com/flex/bin/Sample.html\"\nwlHttp.Get(\"http://www.webloadmpstore.com/flex/bin/Shop.swf\")\n\nwlHttp.EncodeRequestBinaryData = true\nwlHttp.Header[\"Referer\"] = \n\"http://www.webloadmpstore.com/flex/bin/Shop.swf\"\nwlHttp.Data[\"Type\"] = \"application/x-amf\" \nwlHttp.Data[\"Value\"] =\n\"%00%03%00%00%00%01%00%15talkback.returnString%00%02/1%00%00%00% 15%0a%00%00%00%02%02%00%06George%02%00%04Bush\"\nwlHttp.Post(\"http://www.webloadmpstore.com/flashservices/gateway.php\")\n</code></pre>"},{"location":"scripting/working_with_http/#handling-authentication-in-the-script","title":"Handling Authentication in the Script","text":"<p>WebLOAD supports working with scripts containing Basic, NTLM, and Kerberos user authentication methods.</p> <p>WebLOAD handles authentication in playback in the following way:</p> <ol> <li>WebLOAD sends a regular request with no request for authentication, to which the server responds with an \u201cunauthorized\u201d error (401), and a prompt to enter a username and password.</li> <li> <p>If WebLOAD is using:</p> <ul> <li>Basic authentication, WebLOAD encrypts the username and password in <code>wlHttp.Username</code> and <code>wlHttp.Password</code>, and makes a request.</li> <li>NTLM authentication, WebLOAD sets the following:    <code>wlGlobals.AuthType = \"NTLM\"</code>, where <code>NTLM</code> is the default value if no authentication type is specified.</li> <li>Kerberos authentication, WebLOAD sets the following:     <code>wlGlobals.AuthType = \"Kerberos\"</code>.</li> </ul> <p><code>wlGlobals.KDCServer = &lt;server name&gt;</code>. If no value is specified for KDCServer, the authentication type is automatically assumed to be <code>NTLM</code>, even if the <code>AuthType</code> is <code>Kerberos</code>.</p> </li> </ol> <p>The following examples demonstrate the authentication processes in WebLOAD.</p> <p>Kerberos authentication:</p> <p><code>wlGlobals.AuthType = \"Kerberos\"</code> </p> <p><code>wlGlobals.KDCServer = \"mulier.qalab.internal\"</code> </p> <p><code>wlHttp.NTPassWord = \"Buga859\"</code> </p> <p><code>wlHttp.NTUserName = \"qalab.internal\\\\test\"</code> </p> <p><code>wlHttp.Get(\"&lt;http://mulier.qalab.internal/&gt;\")</code></p> <p>NTLM authentication:</p> <p><code>wlGlobals.AuthType = \"NTLM\"</code> </p> <p><code>wlHttp.NTPassWord = \"Buga859\"</code> </p> <p><code>wlHttp.NTUserName = \"qalab.internal\\\\test\"</code> </p> <p><code>wlHttp.Get(\"&lt;http://mulier.qalab.internal/&gt;\")</code></p> <p>OR</p> <p><code>wlHttp.NTPassWord = \"Buga859\"</code> </p> <p><code>wlHttp.NTUserName = \"qalab.internal\\\\test\"</code> </p> <p><code>wlHttp.Get(\"&lt;http://mulier.qalab.internal/&gt;\")</code></p> <p>Basic authentication:</p> <p><code>wlHttp.PassWord = \"Buga859\"</code> </p> <p><code>wlHttp.UserName = \"test\"</code></p> <p><code>wlHttp.Get(\"&lt;http://mulier.qalab.internal/&gt;\")</code></p>"}]}